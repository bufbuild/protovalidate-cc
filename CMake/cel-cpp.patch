diff --git a/.gitignore b/.gitignore
index 6d3e1b8..77ba3da 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,3 +4,4 @@ bazel-cel-cpp
 bazel-genfiles
 bazel-out
 bazel-testlogs
+build
diff --git a/CMake/ExternalAntlr4Cpp.cmake b/CMake/ExternalAntlr4Cpp.cmake
new file mode 100644
index 0000000..8a98d90
--- /dev/null
+++ b/CMake/ExternalAntlr4Cpp.cmake
@@ -0,0 +1,177 @@
+cmake_minimum_required(VERSION 3.7)
+
+if(POLICY CMP0114)
+    cmake_policy(SET CMP0114 NEW)
+endif()
+
+include(ExternalProject)
+
+set(ANTLR4_ROOT ${CMAKE_CURRENT_BINARY_DIR}/antlr4_runtime/src/antlr4_runtime)
+set(ANTLR4_INCLUDE_DIRS ${ANTLR4_ROOT}/runtime/Cpp/runtime/src)
+set(ANTLR4_GIT_REPOSITORY https://github.com/antlr/antlr4.git)
+if(NOT DEFINED ANTLR4_TAG)
+  # Set to branch name to keep library updated at the cost of needing to rebuild after 'clean'
+  # Set to commit hash to keep the build stable and does not need to rebuild after 'clean'
+  set(ANTLR4_TAG master)
+endif()
+
+# Ensure that the include dir already exists at configure time (to avoid cmake erroring
+# on non-existent include dirs)
+file(MAKE_DIRECTORY "${ANTLR4_INCLUDE_DIRS}")
+
+if(${CMAKE_GENERATOR} MATCHES "Visual Studio.*")
+  set(ANTLR4_OUTPUT_DIR ${ANTLR4_ROOT}/runtime/Cpp/runtime/$(Configuration))
+elseif(${CMAKE_GENERATOR} MATCHES "Xcode.*")
+  set(ANTLR4_OUTPUT_DIR ${ANTLR4_ROOT}/runtime/Cpp/runtime/$(CONFIGURATION))
+else()
+  set(ANTLR4_OUTPUT_DIR ${ANTLR4_ROOT}/runtime/Cpp/runtime)
+endif()
+
+if(MSVC)
+  set(ANTLR4_STATIC_LIBRARIES
+      ${ANTLR4_OUTPUT_DIR}/antlr4-runtime-static.lib)
+  set(ANTLR4_SHARED_LIBRARIES
+      ${ANTLR4_OUTPUT_DIR}/antlr4-runtime.lib)
+  set(ANTLR4_RUNTIME_LIBRARIES
+      ${ANTLR4_OUTPUT_DIR}/antlr4-runtime.dll)
+else()
+  set(ANTLR4_STATIC_LIBRARIES
+      ${ANTLR4_OUTPUT_DIR}/libantlr4-runtime.a)
+  if(MINGW)
+    set(ANTLR4_SHARED_LIBRARIES
+        ${ANTLR4_OUTPUT_DIR}/libantlr4-runtime.dll.a)
+    set(ANTLR4_RUNTIME_LIBRARIES
+        ${ANTLR4_OUTPUT_DIR}/libantlr4-runtime.dll)
+  elseif(CYGWIN)
+    set(ANTLR4_SHARED_LIBRARIES
+        ${ANTLR4_OUTPUT_DIR}/libantlr4-runtime.dll.a)
+    set(ANTLR4_RUNTIME_LIBRARIES
+        ${ANTLR4_OUTPUT_DIR}/cygantlr4-runtime-4.13.1.dll)
+  elseif(APPLE)
+    set(ANTLR4_RUNTIME_LIBRARIES
+        ${ANTLR4_OUTPUT_DIR}/libantlr4-runtime.dylib)
+  else()
+    set(ANTLR4_RUNTIME_LIBRARIES
+        ${ANTLR4_OUTPUT_DIR}/libantlr4-runtime.so)
+  endif()
+endif()
+
+if(${CMAKE_GENERATOR} MATCHES ".* Makefiles")
+  # This avoids
+  # 'warning: jobserver unavailable: using -j1. Add '+' to parent make rule.'
+  set(ANTLR4_BUILD_COMMAND $(MAKE))
+elseif(${CMAKE_GENERATOR} MATCHES "Visual Studio.*")
+  set(ANTLR4_BUILD_COMMAND
+      ${CMAKE_COMMAND}
+          --build .
+          --config $(Configuration)
+          --target)
+elseif(${CMAKE_GENERATOR} MATCHES "Xcode.*")
+  set(ANTLR4_BUILD_COMMAND
+      ${CMAKE_COMMAND}
+          --build .
+          --config $(CONFIGURATION)
+          --target)
+else()
+  set(ANTLR4_BUILD_COMMAND
+      ${CMAKE_COMMAND}
+          --build .
+          --target)
+endif()
+
+if(NOT DEFINED ANTLR4_WITH_STATIC_CRT)
+  set(ANTLR4_WITH_STATIC_CRT ON)
+endif()
+
+if(ANTLR4_ZIP_REPOSITORY)
+  ExternalProject_Add(
+      antlr4_runtime
+      PREFIX antlr4_runtime
+      URL ${ANTLR4_ZIP_REPOSITORY}
+      DOWNLOAD_DIR ${CMAKE_CURRENT_BINARY_DIR}
+      BUILD_COMMAND ""
+      BUILD_IN_SOURCE 1
+      SOURCE_DIR ${ANTLR4_ROOT}
+      SOURCE_SUBDIR runtime/Cpp
+      CMAKE_CACHE_ARGS
+          -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
+          -DWITH_STATIC_CRT:BOOL=${ANTLR4_WITH_STATIC_CRT}
+          -DDISABLE_WARNINGS:BOOL=ON
+          # -DCMAKE_CXX_STANDARD:STRING=17 # if desired, compile the runtime with a different C++ standard
+          # -DCMAKE_CXX_STANDARD:STRING=${CMAKE_CXX_STANDARD} # alternatively, compile the runtime with the same C++ standard as the outer project
+      INSTALL_COMMAND ""
+      EXCLUDE_FROM_ALL 1)
+else()
+  ExternalProject_Add(
+      antlr4_runtime
+      PREFIX antlr4_runtime
+      GIT_REPOSITORY ${ANTLR4_GIT_REPOSITORY}
+      GIT_TAG ${ANTLR4_TAG}
+      DOWNLOAD_DIR ${CMAKE_CURRENT_BINARY_DIR}
+      BUILD_COMMAND ""
+      BUILD_IN_SOURCE 1
+      SOURCE_DIR ${ANTLR4_ROOT}
+      SOURCE_SUBDIR runtime/Cpp
+      CMAKE_CACHE_ARGS
+          -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
+          -DWITH_STATIC_CRT:BOOL=${ANTLR4_WITH_STATIC_CRT}
+          -DDISABLE_WARNINGS:BOOL=ON
+          # -DCMAKE_CXX_STANDARD:STRING=17 # if desired, compile the runtime with a different C++ standard
+          # -DCMAKE_CXX_STANDARD:STRING=${CMAKE_CXX_STANDARD} # alternatively, compile the runtime with the same C++ standard as the outer project
+      INSTALL_COMMAND ""
+      EXCLUDE_FROM_ALL 1)
+endif()
+
+# Separate build step as rarely people want both
+set(ANTLR4_BUILD_DIR ${ANTLR4_ROOT})
+if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.14.0")
+  # CMake 3.14 builds in above's SOURCE_SUBDIR when BUILD_IN_SOURCE is true
+  set(ANTLR4_BUILD_DIR ${ANTLR4_ROOT}/runtime/Cpp)
+endif()
+
+ExternalProject_Add_Step(
+    antlr4_runtime
+    build_static
+    COMMAND ${ANTLR4_BUILD_COMMAND} antlr4_static
+    # Depend on target instead of step (a custom command)
+    # to avoid running dependent steps concurrently
+    DEPENDS antlr4_runtime
+    BYPRODUCTS ${ANTLR4_STATIC_LIBRARIES}
+    EXCLUDE_FROM_MAIN 1
+    WORKING_DIRECTORY ${ANTLR4_BUILD_DIR})
+ExternalProject_Add_StepTargets(antlr4_runtime build_static)
+
+add_library(antlr4_static STATIC IMPORTED)
+add_dependencies(antlr4_static antlr4_runtime-build_static)
+set_target_properties(antlr4_static PROPERTIES
+                      IMPORTED_LOCATION ${ANTLR4_STATIC_LIBRARIES})
+target_include_directories(antlr4_static
+    INTERFACE
+        ${ANTLR4_INCLUDE_DIRS}
+)
+
+ExternalProject_Add_Step(
+    antlr4_runtime
+    build_shared
+    COMMAND ${ANTLR4_BUILD_COMMAND} antlr4_shared
+    # Depend on target instead of step (a custom command)
+    # to avoid running dependent steps concurrently
+    DEPENDS antlr4_runtime
+    BYPRODUCTS ${ANTLR4_SHARED_LIBRARIES} ${ANTLR4_RUNTIME_LIBRARIES}
+    EXCLUDE_FROM_MAIN 1
+    WORKING_DIRECTORY ${ANTLR4_BUILD_DIR})
+ExternalProject_Add_StepTargets(antlr4_runtime build_shared)
+
+add_library(antlr4_shared SHARED IMPORTED)
+add_dependencies(antlr4_shared antlr4_runtime-build_shared)
+set_target_properties(antlr4_shared PROPERTIES
+                      IMPORTED_LOCATION ${ANTLR4_RUNTIME_LIBRARIES})
+target_include_directories(antlr4_shared
+    INTERFACE
+        ${ANTLR4_INCLUDE_DIRS}
+)
+
+if(ANTLR4_SHARED_LIBRARIES)
+  set_target_properties(antlr4_shared PROPERTIES
+                        IMPORTED_IMPLIB ${ANTLR4_SHARED_LIBRARIES})
+endif()
diff --git a/CMake/re2.patch b/CMake/re2.patch
new file mode 100644
index 0000000..e6af061
--- /dev/null
+++ b/CMake/re2.patch
@@ -0,0 +1,38 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index bdac5af..6c10da6 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -231,33 +244,3 @@ if(RE2_BUILD_TESTING)
+     target_link_libraries(${target} PUBLIC testing benchmark::benchmark_main ${EXTRA_TARGET_LINK_LIBRARIES})
+   endforeach()
+ endif()
+-
+-install(TARGETS re2
+-        EXPORT re2Targets
+-        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+-        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+-        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+-        FRAMEWORK DESTINATION ${CMAKE_INSTALL_LIBDIR}
+-        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/re2
+-        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+-install(EXPORT re2Targets
+-        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/re2
+-        NAMESPACE re2::)
+-
+-configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/re2Config.cmake.in
+-                              ${CMAKE_CURRENT_BINARY_DIR}/re2Config.cmake
+-                              INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/re2)
+-write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/re2ConfigVersion.cmake
+-                                 VERSION ${SONAME}.0.0
+-                                 COMPATIBILITY SameMajorVersion)
+-
+-install(FILES ${CMAKE_CURRENT_BINARY_DIR}/re2Config.cmake
+-              ${CMAKE_CURRENT_BINARY_DIR}/re2ConfigVersion.cmake
+-        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/re2)
+-
+-configure_file(${CMAKE_CURRENT_SOURCE_DIR}/re2.pc.in
+-               ${CMAKE_CURRENT_BINARY_DIR}/re2.pc
+-               @ONLY)
+-
+-install(FILES ${CMAKE_CURRENT_BINARY_DIR}/re2.pc
+-        DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..9076d19
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,102 @@
+cmake_minimum_required(VERSION 3.13)
+project(cel-cpp)
+
+LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
+
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+
+include(FetchContent)
+
+FetchContent_Declare(
+  absl
+  URL https://github.com/abseil/abseil-cpp/archive/refs/tags/20230802.0.zip
+)
+set(ABSL_PROPAGATE_CXX_STD ON)
+FetchContent_MakeAvailable(absl)
+
+FetchContent_Declare(
+  re2
+  URL https://github.com/google/re2/archive/refs/tags/2023-09-01.zip
+  PATCH_COMMAND patch -p1 < ${PROJECT_SOURCE_DIR}/CMake/re2.patch
+)
+FetchContent_MakeAvailable(re2)
+
+FetchContent_Declare(
+  protobuf
+  URL https://github.com/protocolbuffers/protobuf/archive/refs/tags/v24.2.zip
+)
+set(protobuf_BUILD_TESTS OFF)
+set(protobuf_INSTALL OFF)
+FetchContent_MakeAvailable(protobuf)
+
+FetchContent_Declare(
+  googletest
+  URL https://github.com/google/googletest/archive/03597a01ee50ed33e9dfd640b249b4be3799d395.zip
+)
+FetchContent_MakeAvailable(googletest)
+
+# Add source directory as include directory.
+include_directories(${PROJECT_SOURCE_DIR})
+
+# Add the 'gen' directory as an include directory.
+include_directories(${PROJECT_SOURCE_DIR}/gen)
+# Find all the generated protobuf files.
+file(GLOB_RECURSE CEL_GEN_FILES
+  ${PROJECT_SOURCE_DIR}/gen/*.pb.cc
+  ${PROJECT_SOURCE_DIR}/gen/*.cpp
+)
+
+# Add the generated protobuf files to the library.
+add_library(cel_gen ${CEL_GEN_FILES})
+
+target_link_libraries(
+  cel_gen
+  PUBLIC
+  protobuf::libprotobuf
+  antlr4_shared
+)
+
+include(ExternalAntlr4Cpp)
+
+# Find all files that end in _test.cc in eval/public, eval/compiler and eval/eval.
+file(GLOB_RECURSE CEL_TEST_CCS
+  "parser/*_test.cc"
+  "eval/public/*_test.cc"
+  "eval/compiler/*_test.cc"
+  "eval/eval/*_test.cc"
+)
+
+# Find all files that end in .cc, in eval/public, eval/compiler and eval/eval.
+file(GLOB_RECURSE CEL_CCS
+  "parser/*.cc"
+  "eval/public/*.cc"
+  "eval/compiler/*.cc"
+  "eval/eval/*.cc"
+)
+
+# Remove all files that end in _test.cc from the list of sources.
+list(REMOVE_ITEM CEL_CCS ${CEL_TEST_CCS})
+
+# Create a library from the sources.
+add_library(cel ${CEL_CCS})
+
+# Link the library against the absl and protobuf libraries.
+target_link_libraries(
+  cel
+  PUBLIC
+  cel_gen
+  protobuf::libprotobuf
+  re2::re2
+  gmock
+  antlr4_shared
+)
+
+target_include_directories(
+  cel
+  PUBLIC
+  ${PROJECT_SOURCE_DIR}
+  ${PROJECT_SOURCE_DIR}/gen
+)
diff --git a/base/function_result.h b/base/function_result.h
index 9bc2d67..ccb6d29 100644
--- a/base/function_result.h
+++ b/base/function_result.h
@@ -26,7 +26,7 @@ namespace cel {
 // allows for lazy evaluation of expensive functions.
 class FunctionResult final {
  public:
-  FunctionResult() = default;
+  FunctionResult() = delete;
   FunctionResult(const FunctionResult&) = default;
   FunctionResult(FunctionResult&&) = default;
   FunctionResult& operator=(const FunctionResult&) = default;
diff --git a/eval/eval/container_access_step.cc b/eval/eval/container_access_step.cc
index 39c2507..d7962a2 100644
--- a/eval/eval/container_access_step.cc
+++ b/eval/eval/container_access_step.cc
@@ -11,6 +11,8 @@
 #include "eval/public/cel_number.h"
 #include "eval/public/cel_value.h"
 #include "eval/public/unknown_attribute_set.h"
+#include "eval/public/structs/legacy_type_adapter.h"
+#include "eval/public/structs/legacy_type_info_apis.h"
 
 namespace google::api::expr::runtime {
 
@@ -34,6 +36,8 @@ class ContainerAccessStep : public ExpressionStepBase {
                        ExecutionFrame* frame) const;
   CelValue LookupInList(const CelList* cel_list, const CelValue& key,
                         ExecutionFrame* frame) const;
+  CelValue LookupInMessage(const CelValue::MessageWrapper& msg, const CelValue& key,
+                           ExecutionFrame* frame) const;
 };
 
 inline CelValue ContainerAccessStep::LookupInMap(const CelMap* cel_map,
@@ -109,6 +113,26 @@ inline CelValue ContainerAccessStep::LookupInList(const CelList* cel_list,
                    CelValue::TypeName(key.type())));
 }
 
+CelValue ContainerAccessStep::LookupInMessage(const CelValue::MessageWrapper& msg, const CelValue& key,
+                                              ExecutionFrame* frame) const {
+  if (!key.IsString()) {
+    return CreateErrorValue(
+        frame->memory_manager(),
+        absl::StrCat("Field name error: expected string type, got ",
+                     CelValue::TypeName(key.type())));
+  }
+  const LegacyTypeAccessApis* accessor =
+      msg.legacy_type_info()->GetAccessApis(msg);
+  if (accessor == nullptr) {
+    return CreateNoSuchFieldError(frame->memory_manager());
+  }
+  auto result_or = accessor->GetField(key.StringOrDie().value(), msg, ProtoWrapperTypeOptions::kUnsetNull, frame->memory_manager());
+  if (!result_or.ok()) {
+    return CreateErrorValue(frame->memory_manager(), result_or.status());
+  }
+  return std::move(result_or).value();
+}
+
 ContainerAccessStep::ValueAttributePair ContainerAccessStep::PerformLookup(
     ExecutionFrame* frame) const {
   auto input_args = frame->value_stack().GetSpan(kNumContainerAccessArguments);
@@ -158,6 +182,12 @@ ContainerAccessStep::ValueAttributePair ContainerAccessStep::PerformLookup(
       const CelList* cel_list = container.ListOrDie();
       return {LookupInList(cel_list, key, frame), trail};
     }
+    case CelValue::Type::kMessage: {
+      CelValue::MessageWrapper wrapper;
+      bool success = container.GetValue(&wrapper);
+      ABSL_ASSERT(success);
+      return {LookupInMessage(wrapper, key, frame), trail};
+    }
     default: {
       auto error =
           CreateErrorValue(frame->memory_manager(),
diff --git a/eval/public/builtin_func_test.cc b/eval/public/builtin_func_test.cc
index 8b1a7d3..2569fc2 100644
--- a/eval/public/builtin_func_test.cc
+++ b/eval/public/builtin_func_test.cc
@@ -771,33 +771,33 @@ TEST_F(BuiltinsTest, TestDoubleConversionError_stringInvalid) {
 
 TEST_F(BuiltinsTest, TestDynConversions) {
   TestTypeConverts(builtin::kDyn, CelValue::CreateDouble(100.1), 100.1);
-  TestTypeConverts(builtin::kDyn, CelValue::CreateInt64(100L), 100L);
-  TestTypeConverts(builtin::kDyn, CelValue::CreateUint64(100UL), 100UL);
+  TestTypeConverts(builtin::kDyn, CelValue::CreateInt64(100L), 100LL);
+  TestTypeConverts(builtin::kDyn, CelValue::CreateUint64(100UL), 100ULL);
 }
 
 TEST_F(BuiltinsTest, TestIntConversions_int) {
-  TestTypeConverts(builtin::kInt, CelValue::CreateInt64(100L), 100L);
+  TestTypeConverts(builtin::kInt, CelValue::CreateInt64(100L), 100LL);
 }
 
 TEST_F(BuiltinsTest, TestIntConversions_Timestamp) {
   Timestamp ref;
   ref.set_seconds(100);
-  TestTypeConverts(builtin::kInt, CelProtoWrapper::CreateTimestamp(&ref), 100L);
+  TestTypeConverts(builtin::kInt, CelProtoWrapper::CreateTimestamp(&ref), 100LL);
 }
 
 TEST_F(BuiltinsTest, TestIntConversions_double) {
   double ref = 100.1;
-  TestTypeConverts(builtin::kInt, CelValue::CreateDouble(ref), 100L);
+  TestTypeConverts(builtin::kInt, CelValue::CreateDouble(ref), 100LL);
 }
 
 TEST_F(BuiltinsTest, TestIntConversions_string) {
   std::string ref = "100";
-  TestTypeConverts(builtin::kInt, CelValue::CreateString(&ref), 100L);
+  TestTypeConverts(builtin::kInt, CelValue::CreateString(&ref), 100LL);
 }
 
 TEST_F(BuiltinsTest, TestIntConversions_uint) {
   uint64_t ref = 100;
-  TestTypeConverts(builtin::kInt, CelValue::CreateUint64(ref), 100L);
+  TestTypeConverts(builtin::kInt, CelValue::CreateUint64(ref), 100LL);
 }
 
 TEST_F(BuiltinsTest, TestIntConversions_doubleIntMin) {
@@ -870,21 +870,21 @@ TEST_F(BuiltinsTest, TestIntConversionError_uintRange) {
 
 TEST_F(BuiltinsTest, TestUintConversions_double) {
   double ref = 100.1;
-  TestTypeConverts(builtin::kUint, CelValue::CreateDouble(ref), 100UL);
+  TestTypeConverts(builtin::kUint, CelValue::CreateDouble(ref), 100ULL);
 }
 
 TEST_F(BuiltinsTest, TestUintConversions_int) {
   int64_t ref = 100L;
-  TestTypeConverts(builtin::kUint, CelValue::CreateInt64(ref), 100UL);
+  TestTypeConverts(builtin::kUint, CelValue::CreateInt64(ref), 100ULL);
 }
 
 TEST_F(BuiltinsTest, TestUintConversions_string) {
   std::string ref = "100";
-  TestTypeConverts(builtin::kUint, CelValue::CreateString(&ref), 100UL);
+  TestTypeConverts(builtin::kUint, CelValue::CreateString(&ref), 100ULL);
 }
 
 TEST_F(BuiltinsTest, TestUintConversions_uint) {
-  TestTypeConverts(builtin::kUint, CelValue::CreateUint64(100UL), 100UL);
+  TestTypeConverts(builtin::kUint, CelValue::CreateUint64(100UL), 100ULL);
 }
 
 TEST_F(BuiltinsTest, TestUintConversionError_doubleNegRange) {
diff --git a/eval/testutil/args.proto b/eval/testutil/args.proto
index f4ec699..cf2d04c 100644
--- a/eval/testutil/args.proto
+++ b/eval/testutil/args.proto
@@ -1,5 +1,9 @@
 syntax = "proto3";
 
+import "google/protobuf/duration.proto";
+import "google/protobuf/timestamp.proto";
+import "eval/testutil/test_message.proto";
+
 package google.api.expr.runtime;
 option cc_enable_arenas = true;
 
diff --git a/gen/eval/testutil/test_message.pb.cc b/gen/eval/testutil/test_message.pb.cc
new file mode 100644
index 0000000..7f9255b
--- /dev/null
+++ b/gen/eval/testutil/test_message.pb.cc
@@ -0,0 +1,2421 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: eval/testutil/test_message.proto
+
+#include "eval/testutil/test_message.pb.h"
+
+#include <algorithm>
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/extension_set.h"
+#include "google/protobuf/wire_format_lite.h"
+#include "google/protobuf/descriptor.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/reflection_ops.h"
+#include "google/protobuf/wire_format.h"
+#include "google/protobuf/generated_message_tctable_impl.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+PROTOBUF_PRAGMA_INIT_SEG
+namespace _pb = ::google::protobuf;
+namespace _pbi = ::google::protobuf::internal;
+namespace _fl = ::google::protobuf::internal::field_layout;
+namespace google {
+namespace api {
+namespace expr {
+namespace runtime {
+      template <typename>
+PROTOBUF_CONSTEXPR TestMessage_Int64Int32MapEntry_DoNotUse::TestMessage_Int64Int32MapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct TestMessage_Int64Int32MapEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR TestMessage_Int64Int32MapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~TestMessage_Int64Int32MapEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    TestMessage_Int64Int32MapEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessage_Int64Int32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_Int64Int32MapEntry_DoNotUse_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR TestMessage_Uint64Int32MapEntry_DoNotUse::TestMessage_Uint64Int32MapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct TestMessage_Uint64Int32MapEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR TestMessage_Uint64Int32MapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~TestMessage_Uint64Int32MapEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    TestMessage_Uint64Int32MapEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessage_Uint64Int32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_Uint64Int32MapEntry_DoNotUse_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR TestMessage_StringInt32MapEntry_DoNotUse::TestMessage_StringInt32MapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct TestMessage_StringInt32MapEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR TestMessage_StringInt32MapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~TestMessage_StringInt32MapEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    TestMessage_StringInt32MapEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessage_StringInt32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_StringInt32MapEntry_DoNotUse_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR TestMessage_BoolInt32MapEntry_DoNotUse::TestMessage_BoolInt32MapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct TestMessage_BoolInt32MapEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR TestMessage_BoolInt32MapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~TestMessage_BoolInt32MapEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    TestMessage_BoolInt32MapEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessage_BoolInt32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_BoolInt32MapEntry_DoNotUse_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR TestMessage_Int32Int32MapEntry_DoNotUse::TestMessage_Int32Int32MapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct TestMessage_Int32Int32MapEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR TestMessage_Int32Int32MapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~TestMessage_Int32Int32MapEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    TestMessage_Int32Int32MapEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessage_Int32Int32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_Int32Int32MapEntry_DoNotUse_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR TestMessage_Uint32Uint32MapEntry_DoNotUse::TestMessage_Uint32Uint32MapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct TestMessage_Uint32Uint32MapEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR TestMessage_Uint32Uint32MapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~TestMessage_Uint32Uint32MapEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    TestMessage_Uint32Uint32MapEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessage_Uint32Uint32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_Uint32Uint32MapEntry_DoNotUse_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR TestMessage::TestMessage(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.int32_list_)*/ {},
+      /* _impl_._int32_list_cached_byte_size_ = */ {0},
+      /*decltype(_impl_.int64_list_)*/ {},
+      /* _impl_._int64_list_cached_byte_size_ = */ {0},
+      /*decltype(_impl_.uint32_list_)*/ {},
+      /* _impl_._uint32_list_cached_byte_size_ = */ {0},
+      /*decltype(_impl_.uint64_list_)*/ {},
+      /* _impl_._uint64_list_cached_byte_size_ = */ {0},
+      /*decltype(_impl_.float_list_)*/ {},
+      /*decltype(_impl_.double_list_)*/ {},
+      /*decltype(_impl_.string_list_)*/ {},
+      /*decltype(_impl_.cord_list_)*/ {},
+      /*decltype(_impl_.bytes_list_)*/ {},
+      /*decltype(_impl_.bool_list_)*/ {},
+      /*decltype(_impl_.enum_list_)*/ {},
+      /*decltype(_impl_._enum_list_cached_byte_size_)*/ {0},
+      /*decltype(_impl_.message_list_)*/ {},
+      /* decltype(_impl_.int64_int32_map_) */ {},
+      /* decltype(_impl_.uint64_int32_map_) */ {},
+      /* decltype(_impl_.string_int32_map_) */ {},
+      /* decltype(_impl_.bool_int32_map_) */ {},
+      /* decltype(_impl_.int32_int32_map_) */ {},
+      /* decltype(_impl_.uint32_uint32_map_) */ {},
+      /*decltype(_impl_.string_value_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.cord_value_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.bytes_value_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.message_value_)*/ nullptr,
+      /*decltype(_impl_.any_value_)*/ nullptr,
+      /*decltype(_impl_.duration_value_)*/ nullptr,
+      /*decltype(_impl_.timestamp_value_)*/ nullptr,
+      /*decltype(_impl_.struct_value_)*/ nullptr,
+      /*decltype(_impl_.value_value_)*/ nullptr,
+      /*decltype(_impl_.int64_wrapper_value_)*/ nullptr,
+      /*decltype(_impl_.int32_wrapper_value_)*/ nullptr,
+      /*decltype(_impl_.double_wrapper_value_)*/ nullptr,
+      /*decltype(_impl_.float_wrapper_value_)*/ nullptr,
+      /*decltype(_impl_.uint64_wrapper_value_)*/ nullptr,
+      /*decltype(_impl_.uint32_wrapper_value_)*/ nullptr,
+      /*decltype(_impl_.string_wrapper_value_)*/ nullptr,
+      /*decltype(_impl_.bool_wrapper_value_)*/ nullptr,
+      /*decltype(_impl_.bytes_wrapper_value_)*/ nullptr,
+      /*decltype(_impl_.int64_value_)*/ ::int64_t{0},
+      /*decltype(_impl_.int32_value_)*/ 0,
+      /*decltype(_impl_.uint32_value_)*/ 0u,
+      /*decltype(_impl_.uint64_value_)*/ ::uint64_t{0u},
+      /*decltype(_impl_.double_value_)*/ 0,
+      /*decltype(_impl_.float_value_)*/ 0,
+      /*decltype(_impl_.bool_value_)*/ false,
+      /*decltype(_impl_.enum_value_)*/ 0,
+    } {}
+struct TestMessageDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR TestMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~TestMessageDefaultTypeInternal() {}
+  union {
+    TestMessage _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageDefaultTypeInternal _TestMessage_default_instance_;
+}  // namespace runtime
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+static ::_pb::Metadata file_level_metadata_eval_2ftestutil_2ftest_5fmessage_2eproto[7];
+static const ::_pb::EnumDescriptor* file_level_enum_descriptors_eval_2ftestutil_2ftest_5fmessage_2eproto[2];
+static constexpr const ::_pb::ServiceDescriptor**
+    file_level_service_descriptors_eval_2ftestutil_2ftest_5fmessage_2eproto = nullptr;
+const ::uint32_t TableStruct_eval_2ftestutil_2ftest_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
+    protodesc_cold) = {
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Int64Int32MapEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Int64Int32MapEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Int64Int32MapEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Int64Int32MapEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Uint64Int32MapEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Uint64Int32MapEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Uint64Int32MapEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Uint64Int32MapEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_StringInt32MapEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_StringInt32MapEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_StringInt32MapEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_StringInt32MapEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_BoolInt32MapEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_BoolInt32MapEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_BoolInt32MapEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_BoolInt32MapEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Int32Int32MapEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Int32Int32MapEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Int32Int32MapEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Int32Int32MapEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Uint32Uint32MapEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Uint32Uint32MapEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Uint32Uint32MapEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage_Uint32Uint32MapEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.int32_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.int64_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.uint32_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.uint64_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.float_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.double_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.string_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.cord_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.bytes_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.bool_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.enum_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.message_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.int32_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.int64_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.uint32_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.uint64_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.float_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.double_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.string_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.cord_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.bytes_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.bool_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.enum_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.message_list_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.int64_int32_map_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.uint64_int32_map_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.string_int32_map_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.bool_int32_map_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.int32_int32_map_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.uint32_uint32_map_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.any_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.duration_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.timestamp_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.struct_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.value_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.int64_wrapper_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.int32_wrapper_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.double_wrapper_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.float_wrapper_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.uint64_wrapper_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.uint32_wrapper_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.string_wrapper_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.bool_wrapper_value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::runtime::TestMessage, _impl_.bytes_wrapper_value_),
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    0,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    1,
+    2,
+    3,
+    4,
+    5,
+    6,
+    7,
+    8,
+    9,
+    10,
+    11,
+    12,
+    13,
+    14,
+};
+
+static const ::_pbi::MigrationSchema
+    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+        {0, 10, -1, sizeof(::google::api::expr::runtime::TestMessage_Int64Int32MapEntry_DoNotUse)},
+        {12, 22, -1, sizeof(::google::api::expr::runtime::TestMessage_Uint64Int32MapEntry_DoNotUse)},
+        {24, 34, -1, sizeof(::google::api::expr::runtime::TestMessage_StringInt32MapEntry_DoNotUse)},
+        {36, 46, -1, sizeof(::google::api::expr::runtime::TestMessage_BoolInt32MapEntry_DoNotUse)},
+        {48, 58, -1, sizeof(::google::api::expr::runtime::TestMessage_Int32Int32MapEntry_DoNotUse)},
+        {60, 70, -1, sizeof(::google::api::expr::runtime::TestMessage_Uint32Uint32MapEntry_DoNotUse)},
+        {72, 124, -1, sizeof(::google::api::expr::runtime::TestMessage)},
+};
+
+static const ::_pb::Message* const file_default_instances[] = {
+    &::google::api::expr::runtime::_TestMessage_Int64Int32MapEntry_DoNotUse_default_instance_._instance,
+    &::google::api::expr::runtime::_TestMessage_Uint64Int32MapEntry_DoNotUse_default_instance_._instance,
+    &::google::api::expr::runtime::_TestMessage_StringInt32MapEntry_DoNotUse_default_instance_._instance,
+    &::google::api::expr::runtime::_TestMessage_BoolInt32MapEntry_DoNotUse_default_instance_._instance,
+    &::google::api::expr::runtime::_TestMessage_Int32Int32MapEntry_DoNotUse_default_instance_._instance,
+    &::google::api::expr::runtime::_TestMessage_Uint32Uint32MapEntry_DoNotUse_default_instance_._instance,
+    &::google::api::expr::runtime::_TestMessage_default_instance_._instance,
+};
+const char descriptor_table_protodef_eval_2ftestutil_2ftest_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+    "\n eval/testutil/test_message.proto\022\027goog"
+    "le.api.expr.runtime\032\031google/protobuf/any"
+    ".proto\032\036google/protobuf/duration.proto\032\034"
+    "google/protobuf/struct.proto\032\037google/pro"
+    "tobuf/timestamp.proto\032\036google/protobuf/w"
+    "rappers.proto\"\363\027\n\013TestMessage\022\037\n\013int32_v"
+    "alue\030\001 \001(\005R\nint32Value\022\037\n\013int64_value\030\002 "
+    "\001(\003R\nint64Value\022!\n\014uint32_value\030\003 \001(\rR\013u"
+    "int32Value\022!\n\014uint64_value\030\004 \001(\004R\013uint64"
+    "Value\022\037\n\013float_value\030\005 \001(\002R\nfloatValue\022!"
+    "\n\014double_value\030\006 \001(\001R\013doubleValue\022!\n\014str"
+    "ing_value\030\007 \001(\tR\013stringValue\022!\n\ncord_val"
+    "ue\030\010 \001(\tB\002\010\001R\tcordValue\022\037\n\013bytes_value\030\t"
+    " \001(\014R\nbytesValue\022\035\n\nbool_value\030\n \001(\010R\tbo"
+    "olValue\022L\n\nenum_value\030\013 \001(\0162-.google.api"
+    ".expr.runtime.TestMessage.TestEnumR\tenum"
+    "Value\022I\n\rmessage_value\030\014 \001(\0132$.google.ap"
+    "i.expr.runtime.TestMessageR\014messageValue"
+    "\022\035\n\nint32_list\030e \003(\005R\tint32List\022\035\n\nint64"
+    "_list\030f \003(\003R\tint64List\022\037\n\013uint32_list\030g "
+    "\003(\rR\nuint32List\022\037\n\013uint64_list\030h \003(\004R\nui"
+    "nt64List\022\035\n\nfloat_list\030i \003(\002R\tfloatList\022"
+    "\037\n\013double_list\030j \003(\001R\ndoubleList\022\037\n\013stri"
+    "ng_list\030k \003(\tR\nstringList\022\037\n\tcord_list\030l"
+    " \003(\tB\002\010\001R\010cordList\022\035\n\nbytes_list\030m \003(\014R\t"
+    "bytesList\022\033\n\tbool_list\030n \003(\010R\010boolList\022J"
+    "\n\tenum_list\030o \003(\0162-.google.api.expr.runt"
+    "ime.TestMessage.TestEnumR\010enumList\022G\n\014me"
+    "ssage_list\030p \003(\0132$.google.api.expr.runti"
+    "me.TestMessageR\013messageList\022`\n\017int64_int"
+    "32_map\030\311\001 \003(\01327.google.api.expr.runtime."
+    "TestMessage.Int64Int32MapEntryR\rint64Int"
+    "32Map\022c\n\020uint64_int32_map\030\312\001 \003(\01328.googl"
+    "e.api.expr.runtime.TestMessage.Uint64Int"
+    "32MapEntryR\016uint64Int32Map\022c\n\020string_int"
+    "32_map\030\313\001 \003(\01328.google.api.expr.runtime."
+    "TestMessage.StringInt32MapEntryR\016stringI"
+    "nt32Map\022]\n\016bool_int32_map\030\314\001 \003(\01326.googl"
+    "e.api.expr.runtime.TestMessage.BoolInt32"
+    "MapEntryR\014boolInt32Map\022`\n\017int32_int32_ma"
+    "p\030\315\001 \003(\01327.google.api.expr.runtime.TestM"
+    "essage.Int32Int32MapEntryR\rint32Int32Map"
+    "\022f\n\021uint32_uint32_map\030\316\001 \003(\01329.google.ap"
+    "i.expr.runtime.TestMessage.Uint32Uint32M"
+    "apEntryR\017uint32Uint32Map\0222\n\tany_value\030\254\002"
+    " \001(\0132\024.google.protobuf.AnyR\010anyValue\022A\n\016"
+    "duration_value\030\255\002 \001(\0132\031.google.protobuf."
+    "DurationR\rdurationValue\022D\n\017timestamp_val"
+    "ue\030\256\002 \001(\0132\032.google.protobuf.TimestampR\016t"
+    "imestampValue\022;\n\014struct_value\030\257\002 \001(\0132\027.g"
+    "oogle.protobuf.StructR\013structValue\0228\n\013va"
+    "lue_value\030\260\002 \001(\0132\026.google.protobuf.Value"
+    "R\nvalueValue\022L\n\023int64_wrapper_value\030\261\002 \001"
+    "(\0132\033.google.protobuf.Int64ValueR\021int64Wr"
+    "apperValue\022L\n\023int32_wrapper_value\030\262\002 \001(\013"
+    "2\033.google.protobuf.Int32ValueR\021int32Wrap"
+    "perValue\022O\n\024double_wrapper_value\030\263\002 \001(\0132"
+    "\034.google.protobuf.DoubleValueR\022doubleWra"
+    "pperValue\022L\n\023float_wrapper_value\030\264\002 \001(\0132"
+    "\033.google.protobuf.FloatValueR\021floatWrapp"
+    "erValue\022O\n\024uint64_wrapper_value\030\265\002 \001(\0132\034"
+    ".google.protobuf.UInt64ValueR\022uint64Wrap"
+    "perValue\022O\n\024uint32_wrapper_value\030\266\002 \001(\0132"
+    "\034.google.protobuf.UInt32ValueR\022uint32Wra"
+    "pperValue\022O\n\024string_wrapper_value\030\267\002 \001(\013"
+    "2\034.google.protobuf.StringValueR\022stringWr"
+    "apperValue\022I\n\022bool_wrapper_value\030\270\002 \001(\0132"
+    "\032.google.protobuf.BoolValueR\020boolWrapper"
+    "Value\022L\n\023bytes_wrapper_value\030\271\002 \001(\0132\033.go"
+    "ogle.protobuf.BytesValueR\021bytesWrapperVa"
+    "lue\032@\n\022Int64Int32MapEntry\022\020\n\003key\030\001 \001(\003R\003"
+    "key\022\024\n\005value\030\002 \001(\005R\005value:\0028\001\032A\n\023Uint64I"
+    "nt32MapEntry\022\020\n\003key\030\001 \001(\004R\003key\022\024\n\005value\030"
+    "\002 \001(\005R\005value:\0028\001\032A\n\023StringInt32MapEntry\022"
+    "\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\005R\005value:"
+    "\0028\001\032\?\n\021BoolInt32MapEntry\022\020\n\003key\030\001 \001(\010R\003k"
+    "ey\022\024\n\005value\030\002 \001(\005R\005value:\0028\001\032@\n\022Int32Int"
+    "32MapEntry\022\020\n\003key\030\001 \001(\005R\003key\022\024\n\005value\030\002 "
+    "\001(\005R\005value:\0028\001\032B\n\024Uint32Uint32MapEntry\022\020"
+    "\n\003key\030\001 \001(\rR\003key\022\024\n\005value\030\002 \001(\rR\005value:\002"
+    "8\001\"G\n\010TestEnum\022\031\n\025TEST_ENUM_UNSPECIFIED\020"
+    "\000\022\017\n\013TEST_ENUM_1\020\001\022\017\n\013TEST_ENUM_2\020\002*X\n\010T"
+    "estEnum\022\031\n\025TEST_ENUM_UNSPECIFIED\020\000\022\017\n\013TE"
+    "ST_ENUM_1\020\n\022\017\n\013TEST_ENUM_2\020\024\022\017\n\013TEST_ENU"
+    "M_3\020\036B\262\001\n\033com.google.api.expr.runtimeB\020T"
+    "estMessageProtoP\001\370\001\001\242\002\004GAER\252\002\027Google.Api"
+    ".Expr.Runtime\312\002\027Google\\Api\\Expr\\Runtime\342"
+    "\002#Google\\Api\\Expr\\Runtime\\GPBMetadata\352\002\032"
+    "Google::Api::Expr::Runtimeb\006proto3"
+};
+static const ::_pbi::DescriptorTable* const descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_deps[5] =
+    {
+        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
+        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
+        &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
+        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
+        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
+};
+static ::absl::once_flag descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_once;
+const ::_pbi::DescriptorTable descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto = {
+    false,
+    false,
+    3554,
+    descriptor_table_protodef_eval_2ftestutil_2ftest_5fmessage_2eproto,
+    "eval/testutil/test_message.proto",
+    &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_once,
+    descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_deps,
+    5,
+    7,
+    schemas,
+    file_default_instances,
+    TableStruct_eval_2ftestutil_2ftest_5fmessage_2eproto::offsets,
+    file_level_metadata_eval_2ftestutil_2ftest_5fmessage_2eproto,
+    file_level_enum_descriptors_eval_2ftestutil_2ftest_5fmessage_2eproto,
+    file_level_service_descriptors_eval_2ftestutil_2ftest_5fmessage_2eproto,
+};
+
+// This function exists to be marked as weak.
+// It can significantly speed up compilation by breaking up LLVM's SCC
+// in the .pb.cc translation units. Large translation units see a
+// reduction of more than 35% of walltime for optimized builds. Without
+// the weak attribute all the messages in the file, including all the
+// vtables and everything they use become part of the same SCC through
+// a cycle like:
+// GetMetadata -> descriptor table -> default instances ->
+//   vtables -> GetMetadata
+// By adding a weak function here we break the connection from the
+// individual vtables back into the descriptor table.
+PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_getter() {
+  return &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto;
+}
+// Force running AddDescriptors() at dynamic initialization time.
+PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
+static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_eval_2ftestutil_2ftest_5fmessage_2eproto(&descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto);
+namespace google {
+namespace api {
+namespace expr {
+namespace runtime {
+const ::google::protobuf::EnumDescriptor* TestMessage_TestEnum_descriptor() {
+  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto);
+  return file_level_enum_descriptors_eval_2ftestutil_2ftest_5fmessage_2eproto[0];
+}
+bool TestMessage_TestEnum_IsValid(int value) {
+  switch (value) {
+    case 0:
+    case 1:
+    case 2:
+      return true;
+    default:
+      return false;
+  }
+}
+#if (__cplusplus < 201703) && \
+  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
+
+constexpr TestMessage_TestEnum TestMessage::TEST_ENUM_UNSPECIFIED;
+constexpr TestMessage_TestEnum TestMessage::TEST_ENUM_1;
+constexpr TestMessage_TestEnum TestMessage::TEST_ENUM_2;
+constexpr TestMessage_TestEnum TestMessage::TestEnum_MIN;
+constexpr TestMessage_TestEnum TestMessage::TestEnum_MAX;
+constexpr int TestMessage::TestEnum_ARRAYSIZE;
+
+#endif  // (__cplusplus < 201703) &&
+        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
+const ::google::protobuf::EnumDescriptor* TestEnum_descriptor() {
+  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto);
+  return file_level_enum_descriptors_eval_2ftestutil_2ftest_5fmessage_2eproto[1];
+}
+bool TestEnum_IsValid(int value) {
+  switch (value) {
+    case 0:
+    case 10:
+    case 20:
+    case 30:
+      return true;
+    default:
+      return false;
+  }
+}
+// ===================================================================
+
+TestMessage_Int64Int32MapEntry_DoNotUse::TestMessage_Int64Int32MapEntry_DoNotUse() {}
+TestMessage_Int64Int32MapEntry_DoNotUse::TestMessage_Int64Int32MapEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void TestMessage_Int64Int32MapEntry_DoNotUse::MergeFrom(const TestMessage_Int64Int32MapEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata TestMessage_Int64Int32MapEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_getter, &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_once,
+      file_level_metadata_eval_2ftestutil_2ftest_5fmessage_2eproto[0]);
+}
+// ===================================================================
+
+TestMessage_Uint64Int32MapEntry_DoNotUse::TestMessage_Uint64Int32MapEntry_DoNotUse() {}
+TestMessage_Uint64Int32MapEntry_DoNotUse::TestMessage_Uint64Int32MapEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void TestMessage_Uint64Int32MapEntry_DoNotUse::MergeFrom(const TestMessage_Uint64Int32MapEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata TestMessage_Uint64Int32MapEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_getter, &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_once,
+      file_level_metadata_eval_2ftestutil_2ftest_5fmessage_2eproto[1]);
+}
+// ===================================================================
+
+TestMessage_StringInt32MapEntry_DoNotUse::TestMessage_StringInt32MapEntry_DoNotUse() {}
+TestMessage_StringInt32MapEntry_DoNotUse::TestMessage_StringInt32MapEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void TestMessage_StringInt32MapEntry_DoNotUse::MergeFrom(const TestMessage_StringInt32MapEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata TestMessage_StringInt32MapEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_getter, &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_once,
+      file_level_metadata_eval_2ftestutil_2ftest_5fmessage_2eproto[2]);
+}
+// ===================================================================
+
+TestMessage_BoolInt32MapEntry_DoNotUse::TestMessage_BoolInt32MapEntry_DoNotUse() {}
+TestMessage_BoolInt32MapEntry_DoNotUse::TestMessage_BoolInt32MapEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void TestMessage_BoolInt32MapEntry_DoNotUse::MergeFrom(const TestMessage_BoolInt32MapEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata TestMessage_BoolInt32MapEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_getter, &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_once,
+      file_level_metadata_eval_2ftestutil_2ftest_5fmessage_2eproto[3]);
+}
+// ===================================================================
+
+TestMessage_Int32Int32MapEntry_DoNotUse::TestMessage_Int32Int32MapEntry_DoNotUse() {}
+TestMessage_Int32Int32MapEntry_DoNotUse::TestMessage_Int32Int32MapEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void TestMessage_Int32Int32MapEntry_DoNotUse::MergeFrom(const TestMessage_Int32Int32MapEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata TestMessage_Int32Int32MapEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_getter, &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_once,
+      file_level_metadata_eval_2ftestutil_2ftest_5fmessage_2eproto[4]);
+}
+// ===================================================================
+
+TestMessage_Uint32Uint32MapEntry_DoNotUse::TestMessage_Uint32Uint32MapEntry_DoNotUse() {}
+TestMessage_Uint32Uint32MapEntry_DoNotUse::TestMessage_Uint32Uint32MapEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void TestMessage_Uint32Uint32MapEntry_DoNotUse::MergeFrom(const TestMessage_Uint32Uint32MapEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata TestMessage_Uint32Uint32MapEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_getter, &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_once,
+      file_level_metadata_eval_2ftestutil_2ftest_5fmessage_2eproto[5]);
+}
+// ===================================================================
+
+class TestMessage::_Internal {
+ public:
+  using HasBits = decltype(std::declval<TestMessage>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(TestMessage, _impl_._has_bits_);
+  static const ::google::api::expr::runtime::TestMessage& message_value(const TestMessage* msg);
+  static void set_has_message_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+  static const ::google::protobuf::Any& any_value(const TestMessage* msg);
+  static void set_has_any_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 2u;
+  }
+  static const ::google::protobuf::Duration& duration_value(const TestMessage* msg);
+  static void set_has_duration_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 4u;
+  }
+  static const ::google::protobuf::Timestamp& timestamp_value(const TestMessage* msg);
+  static void set_has_timestamp_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 8u;
+  }
+  static const ::google::protobuf::Struct& struct_value(const TestMessage* msg);
+  static void set_has_struct_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 16u;
+  }
+  static const ::google::protobuf::Value& value_value(const TestMessage* msg);
+  static void set_has_value_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 32u;
+  }
+  static const ::google::protobuf::Int64Value& int64_wrapper_value(const TestMessage* msg);
+  static void set_has_int64_wrapper_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 64u;
+  }
+  static const ::google::protobuf::Int32Value& int32_wrapper_value(const TestMessage* msg);
+  static void set_has_int32_wrapper_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 128u;
+  }
+  static const ::google::protobuf::DoubleValue& double_wrapper_value(const TestMessage* msg);
+  static void set_has_double_wrapper_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 256u;
+  }
+  static const ::google::protobuf::FloatValue& float_wrapper_value(const TestMessage* msg);
+  static void set_has_float_wrapper_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 512u;
+  }
+  static const ::google::protobuf::UInt64Value& uint64_wrapper_value(const TestMessage* msg);
+  static void set_has_uint64_wrapper_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 1024u;
+  }
+  static const ::google::protobuf::UInt32Value& uint32_wrapper_value(const TestMessage* msg);
+  static void set_has_uint32_wrapper_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 2048u;
+  }
+  static const ::google::protobuf::StringValue& string_wrapper_value(const TestMessage* msg);
+  static void set_has_string_wrapper_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 4096u;
+  }
+  static const ::google::protobuf::BoolValue& bool_wrapper_value(const TestMessage* msg);
+  static void set_has_bool_wrapper_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 8192u;
+  }
+  static const ::google::protobuf::BytesValue& bytes_wrapper_value(const TestMessage* msg);
+  static void set_has_bytes_wrapper_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 16384u;
+  }
+};
+
+const ::google::api::expr::runtime::TestMessage& TestMessage::_Internal::message_value(const TestMessage* msg) {
+  return *msg->_impl_.message_value_;
+}
+const ::google::protobuf::Any& TestMessage::_Internal::any_value(const TestMessage* msg) {
+  return *msg->_impl_.any_value_;
+}
+const ::google::protobuf::Duration& TestMessage::_Internal::duration_value(const TestMessage* msg) {
+  return *msg->_impl_.duration_value_;
+}
+const ::google::protobuf::Timestamp& TestMessage::_Internal::timestamp_value(const TestMessage* msg) {
+  return *msg->_impl_.timestamp_value_;
+}
+const ::google::protobuf::Struct& TestMessage::_Internal::struct_value(const TestMessage* msg) {
+  return *msg->_impl_.struct_value_;
+}
+const ::google::protobuf::Value& TestMessage::_Internal::value_value(const TestMessage* msg) {
+  return *msg->_impl_.value_value_;
+}
+const ::google::protobuf::Int64Value& TestMessage::_Internal::int64_wrapper_value(const TestMessage* msg) {
+  return *msg->_impl_.int64_wrapper_value_;
+}
+const ::google::protobuf::Int32Value& TestMessage::_Internal::int32_wrapper_value(const TestMessage* msg) {
+  return *msg->_impl_.int32_wrapper_value_;
+}
+const ::google::protobuf::DoubleValue& TestMessage::_Internal::double_wrapper_value(const TestMessage* msg) {
+  return *msg->_impl_.double_wrapper_value_;
+}
+const ::google::protobuf::FloatValue& TestMessage::_Internal::float_wrapper_value(const TestMessage* msg) {
+  return *msg->_impl_.float_wrapper_value_;
+}
+const ::google::protobuf::UInt64Value& TestMessage::_Internal::uint64_wrapper_value(const TestMessage* msg) {
+  return *msg->_impl_.uint64_wrapper_value_;
+}
+const ::google::protobuf::UInt32Value& TestMessage::_Internal::uint32_wrapper_value(const TestMessage* msg) {
+  return *msg->_impl_.uint32_wrapper_value_;
+}
+const ::google::protobuf::StringValue& TestMessage::_Internal::string_wrapper_value(const TestMessage* msg) {
+  return *msg->_impl_.string_wrapper_value_;
+}
+const ::google::protobuf::BoolValue& TestMessage::_Internal::bool_wrapper_value(const TestMessage* msg) {
+  return *msg->_impl_.bool_wrapper_value_;
+}
+const ::google::protobuf::BytesValue& TestMessage::_Internal::bytes_wrapper_value(const TestMessage* msg) {
+  return *msg->_impl_.bytes_wrapper_value_;
+}
+void TestMessage::clear_any_value() {
+  if (_impl_.any_value_ != nullptr) _impl_.any_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000002u;
+}
+void TestMessage::clear_duration_value() {
+  if (_impl_.duration_value_ != nullptr) _impl_.duration_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000004u;
+}
+void TestMessage::clear_timestamp_value() {
+  if (_impl_.timestamp_value_ != nullptr) _impl_.timestamp_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000008u;
+}
+void TestMessage::clear_struct_value() {
+  if (_impl_.struct_value_ != nullptr) _impl_.struct_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000010u;
+}
+void TestMessage::clear_value_value() {
+  if (_impl_.value_value_ != nullptr) _impl_.value_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000020u;
+}
+void TestMessage::clear_int64_wrapper_value() {
+  if (_impl_.int64_wrapper_value_ != nullptr) _impl_.int64_wrapper_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000040u;
+}
+void TestMessage::clear_int32_wrapper_value() {
+  if (_impl_.int32_wrapper_value_ != nullptr) _impl_.int32_wrapper_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000080u;
+}
+void TestMessage::clear_double_wrapper_value() {
+  if (_impl_.double_wrapper_value_ != nullptr) _impl_.double_wrapper_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000100u;
+}
+void TestMessage::clear_float_wrapper_value() {
+  if (_impl_.float_wrapper_value_ != nullptr) _impl_.float_wrapper_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000200u;
+}
+void TestMessage::clear_uint64_wrapper_value() {
+  if (_impl_.uint64_wrapper_value_ != nullptr) _impl_.uint64_wrapper_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000400u;
+}
+void TestMessage::clear_uint32_wrapper_value() {
+  if (_impl_.uint32_wrapper_value_ != nullptr) _impl_.uint32_wrapper_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000800u;
+}
+void TestMessage::clear_string_wrapper_value() {
+  if (_impl_.string_wrapper_value_ != nullptr) _impl_.string_wrapper_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00001000u;
+}
+void TestMessage::clear_bool_wrapper_value() {
+  if (_impl_.bool_wrapper_value_ != nullptr) _impl_.bool_wrapper_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00002000u;
+}
+void TestMessage::clear_bytes_wrapper_value() {
+  if (_impl_.bytes_wrapper_value_ != nullptr) _impl_.bytes_wrapper_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00004000u;
+}
+TestMessage::TestMessage(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.runtime.TestMessage)
+}
+TestMessage::TestMessage(const TestMessage& from) : ::google::protobuf::Message() {
+  TestMessage* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.int32_list_){from._impl_.int32_list_},
+      /* _impl_._int32_list_cached_byte_size_ = */ {0},
+      decltype(_impl_.int64_list_){from._impl_.int64_list_},
+      /* _impl_._int64_list_cached_byte_size_ = */ {0},
+      decltype(_impl_.uint32_list_){from._impl_.uint32_list_},
+      /* _impl_._uint32_list_cached_byte_size_ = */ {0},
+      decltype(_impl_.uint64_list_){from._impl_.uint64_list_},
+      /* _impl_._uint64_list_cached_byte_size_ = */ {0},
+      decltype(_impl_.float_list_){from._impl_.float_list_},
+      decltype(_impl_.double_list_){from._impl_.double_list_},
+      decltype(_impl_.string_list_){from._impl_.string_list_},
+      decltype(_impl_.cord_list_){from._impl_.cord_list_},
+      decltype(_impl_.bytes_list_){from._impl_.bytes_list_},
+      decltype(_impl_.bool_list_){from._impl_.bool_list_},
+      decltype(_impl_.enum_list_){from._internal_enum_list()},
+      /*decltype(_impl_._enum_list_cached_byte_size_)*/ {0},
+      decltype(_impl_.message_list_){from._impl_.message_list_},
+      /* decltype(_impl_.int64_int32_map_) */ {},
+      /* decltype(_impl_.uint64_int32_map_) */ {},
+      /* decltype(_impl_.string_int32_map_) */ {},
+      /* decltype(_impl_.bool_int32_map_) */ {},
+      /* decltype(_impl_.int32_int32_map_) */ {},
+      /* decltype(_impl_.uint32_uint32_map_) */ {},
+      decltype(_impl_.string_value_){},
+      decltype(_impl_.cord_value_){},
+      decltype(_impl_.bytes_value_){},
+      decltype(_impl_.message_value_){nullptr},
+      decltype(_impl_.any_value_){nullptr},
+      decltype(_impl_.duration_value_){nullptr},
+      decltype(_impl_.timestamp_value_){nullptr},
+      decltype(_impl_.struct_value_){nullptr},
+      decltype(_impl_.value_value_){nullptr},
+      decltype(_impl_.int64_wrapper_value_){nullptr},
+      decltype(_impl_.int32_wrapper_value_){nullptr},
+      decltype(_impl_.double_wrapper_value_){nullptr},
+      decltype(_impl_.float_wrapper_value_){nullptr},
+      decltype(_impl_.uint64_wrapper_value_){nullptr},
+      decltype(_impl_.uint32_wrapper_value_){nullptr},
+      decltype(_impl_.string_wrapper_value_){nullptr},
+      decltype(_impl_.bool_wrapper_value_){nullptr},
+      decltype(_impl_.bytes_wrapper_value_){nullptr},
+      decltype(_impl_.int64_value_){},
+      decltype(_impl_.int32_value_){},
+      decltype(_impl_.uint32_value_){},
+      decltype(_impl_.uint64_value_){},
+      decltype(_impl_.double_value_){},
+      decltype(_impl_.float_value_){},
+      decltype(_impl_.bool_value_){},
+      decltype(_impl_.enum_value_){},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _this->_impl_.int64_int32_map_.MergeFrom(from._impl_.int64_int32_map_);
+  _this->_impl_.uint64_int32_map_.MergeFrom(from._impl_.uint64_int32_map_);
+  _this->_impl_.string_int32_map_.MergeFrom(from._impl_.string_int32_map_);
+  _this->_impl_.bool_int32_map_.MergeFrom(from._impl_.bool_int32_map_);
+  _this->_impl_.int32_int32_map_.MergeFrom(from._impl_.int32_int32_map_);
+  _this->_impl_.uint32_uint32_map_.MergeFrom(from._impl_.uint32_uint32_map_);
+  _impl_.string_value_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.string_value_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_string_value().empty()) {
+    _this->_impl_.string_value_.Set(from._internal_string_value(), _this->GetArenaForAllocation());
+  }
+  _impl_.cord_value_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.cord_value_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_cord_value().empty()) {
+    _this->_impl_.cord_value_.Set(from._internal_cord_value(), _this->GetArenaForAllocation());
+  }
+  _impl_.bytes_value_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.bytes_value_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_bytes_value().empty()) {
+    _this->_impl_.bytes_value_.Set(from._internal_bytes_value(), _this->GetArenaForAllocation());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.message_value_ = new ::google::api::expr::runtime::TestMessage(*from._impl_.message_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
+    _this->_impl_.any_value_ = new ::google::protobuf::Any(*from._impl_.any_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
+    _this->_impl_.duration_value_ = new ::google::protobuf::Duration(*from._impl_.duration_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
+    _this->_impl_.timestamp_value_ = new ::google::protobuf::Timestamp(*from._impl_.timestamp_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
+    _this->_impl_.struct_value_ = new ::google::protobuf::Struct(*from._impl_.struct_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
+    _this->_impl_.value_value_ = new ::google::protobuf::Value(*from._impl_.value_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
+    _this->_impl_.int64_wrapper_value_ = new ::google::protobuf::Int64Value(*from._impl_.int64_wrapper_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
+    _this->_impl_.int32_wrapper_value_ = new ::google::protobuf::Int32Value(*from._impl_.int32_wrapper_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
+    _this->_impl_.double_wrapper_value_ = new ::google::protobuf::DoubleValue(*from._impl_.double_wrapper_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000200u) != 0) {
+    _this->_impl_.float_wrapper_value_ = new ::google::protobuf::FloatValue(*from._impl_.float_wrapper_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000400u) != 0) {
+    _this->_impl_.uint64_wrapper_value_ = new ::google::protobuf::UInt64Value(*from._impl_.uint64_wrapper_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000800u) != 0) {
+    _this->_impl_.uint32_wrapper_value_ = new ::google::protobuf::UInt32Value(*from._impl_.uint32_wrapper_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00001000u) != 0) {
+    _this->_impl_.string_wrapper_value_ = new ::google::protobuf::StringValue(*from._impl_.string_wrapper_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00002000u) != 0) {
+    _this->_impl_.bool_wrapper_value_ = new ::google::protobuf::BoolValue(*from._impl_.bool_wrapper_value_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00004000u) != 0) {
+    _this->_impl_.bytes_wrapper_value_ = new ::google::protobuf::BytesValue(*from._impl_.bytes_wrapper_value_);
+  }
+  ::memcpy(&_impl_.int64_value_, &from._impl_.int64_value_,
+    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.enum_value_) -
+    reinterpret_cast<char*>(&_impl_.int64_value_)) + sizeof(_impl_.enum_value_));
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.runtime.TestMessage)
+}
+inline void TestMessage::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.int32_list_){arena},
+      /* _impl_._int32_list_cached_byte_size_ = */ {0},
+      decltype(_impl_.int64_list_){arena},
+      /* _impl_._int64_list_cached_byte_size_ = */ {0},
+      decltype(_impl_.uint32_list_){arena},
+      /* _impl_._uint32_list_cached_byte_size_ = */ {0},
+      decltype(_impl_.uint64_list_){arena},
+      /* _impl_._uint64_list_cached_byte_size_ = */ {0},
+      decltype(_impl_.float_list_){arena},
+      decltype(_impl_.double_list_){arena},
+      decltype(_impl_.string_list_){arena},
+      decltype(_impl_.cord_list_){arena},
+      decltype(_impl_.bytes_list_){arena},
+      decltype(_impl_.bool_list_){arena},
+      decltype(_impl_.enum_list_){arena},
+      /*decltype(_impl_._enum_list_cached_byte_size_)*/ {0},
+      decltype(_impl_.message_list_){arena},
+      /* decltype(_impl_.int64_int32_map_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      /* decltype(_impl_.uint64_int32_map_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      /* decltype(_impl_.string_int32_map_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      /* decltype(_impl_.bool_int32_map_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      /* decltype(_impl_.int32_int32_map_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      /* decltype(_impl_.uint32_uint32_map_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      decltype(_impl_.string_value_){},
+      decltype(_impl_.cord_value_){},
+      decltype(_impl_.bytes_value_){},
+      decltype(_impl_.message_value_){nullptr},
+      decltype(_impl_.any_value_){nullptr},
+      decltype(_impl_.duration_value_){nullptr},
+      decltype(_impl_.timestamp_value_){nullptr},
+      decltype(_impl_.struct_value_){nullptr},
+      decltype(_impl_.value_value_){nullptr},
+      decltype(_impl_.int64_wrapper_value_){nullptr},
+      decltype(_impl_.int32_wrapper_value_){nullptr},
+      decltype(_impl_.double_wrapper_value_){nullptr},
+      decltype(_impl_.float_wrapper_value_){nullptr},
+      decltype(_impl_.uint64_wrapper_value_){nullptr},
+      decltype(_impl_.uint32_wrapper_value_){nullptr},
+      decltype(_impl_.string_wrapper_value_){nullptr},
+      decltype(_impl_.bool_wrapper_value_){nullptr},
+      decltype(_impl_.bytes_wrapper_value_){nullptr},
+      decltype(_impl_.int64_value_){::int64_t{0}},
+      decltype(_impl_.int32_value_){0},
+      decltype(_impl_.uint32_value_){0u},
+      decltype(_impl_.uint64_value_){::uint64_t{0u}},
+      decltype(_impl_.double_value_){0},
+      decltype(_impl_.float_value_){0},
+      decltype(_impl_.bool_value_){false},
+      decltype(_impl_.enum_value_){0},
+  };
+  _impl_.string_value_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.string_value_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.cord_value_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.cord_value_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.bytes_value_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.bytes_value_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+TestMessage::~TestMessage() {
+  // @@protoc_insertion_point(destructor:google.api.expr.runtime.TestMessage)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void TestMessage::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.int32_list_.~RepeatedField();
+  _impl_.int64_list_.~RepeatedField();
+  _impl_.uint32_list_.~RepeatedField();
+  _impl_.uint64_list_.~RepeatedField();
+  _impl_.float_list_.~RepeatedField();
+  _impl_.double_list_.~RepeatedField();
+  _internal_mutable_string_list()->~RepeatedPtrField();
+  _internal_mutable_cord_list()->~RepeatedPtrField();
+  _internal_mutable_bytes_list()->~RepeatedPtrField();
+  _impl_.bool_list_.~RepeatedField();
+  _internal_mutable_enum_list()->~RepeatedField();
+  _impl_.message_list_.~RepeatedPtrField();
+  _impl_.int64_int32_map_.~MapField();
+  _impl_.uint64_int32_map_.~MapField();
+  _impl_.string_int32_map_.~MapField();
+  _impl_.bool_int32_map_.~MapField();
+  _impl_.int32_int32_map_.~MapField();
+  _impl_.uint32_uint32_map_.~MapField();
+  _impl_.string_value_.Destroy();
+  _impl_.cord_value_.Destroy();
+  _impl_.bytes_value_.Destroy();
+  if (this != internal_default_instance()) delete _impl_.message_value_;
+  if (this != internal_default_instance()) delete _impl_.any_value_;
+  if (this != internal_default_instance()) delete _impl_.duration_value_;
+  if (this != internal_default_instance()) delete _impl_.timestamp_value_;
+  if (this != internal_default_instance()) delete _impl_.struct_value_;
+  if (this != internal_default_instance()) delete _impl_.value_value_;
+  if (this != internal_default_instance()) delete _impl_.int64_wrapper_value_;
+  if (this != internal_default_instance()) delete _impl_.int32_wrapper_value_;
+  if (this != internal_default_instance()) delete _impl_.double_wrapper_value_;
+  if (this != internal_default_instance()) delete _impl_.float_wrapper_value_;
+  if (this != internal_default_instance()) delete _impl_.uint64_wrapper_value_;
+  if (this != internal_default_instance()) delete _impl_.uint32_wrapper_value_;
+  if (this != internal_default_instance()) delete _impl_.string_wrapper_value_;
+  if (this != internal_default_instance()) delete _impl_.bool_wrapper_value_;
+  if (this != internal_default_instance()) delete _impl_.bytes_wrapper_value_;
+}
+void TestMessage::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void TestMessage::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.runtime.TestMessage)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_int32_list()->Clear();
+  _internal_mutable_int64_list()->Clear();
+  _internal_mutable_uint32_list()->Clear();
+  _internal_mutable_uint64_list()->Clear();
+  _internal_mutable_float_list()->Clear();
+  _internal_mutable_double_list()->Clear();
+  _internal_mutable_string_list()->Clear();
+  _internal_mutable_cord_list()->Clear();
+  _internal_mutable_bytes_list()->Clear();
+  _internal_mutable_bool_list()->Clear();
+  _internal_mutable_enum_list()->Clear();
+  _internal_mutable_message_list()->Clear();
+  _impl_.int64_int32_map_.Clear();
+  _impl_.uint64_int32_map_.Clear();
+  _impl_.string_int32_map_.Clear();
+  _impl_.bool_int32_map_.Clear();
+  _impl_.int32_int32_map_.Clear();
+  _impl_.uint32_uint32_map_.Clear();
+  _impl_.string_value_.ClearToEmpty();
+  _impl_.cord_value_.ClearToEmpty();
+  _impl_.bytes_value_.ClearToEmpty();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x000000ffu) {
+    if (cached_has_bits & 0x00000001u) {
+      ABSL_DCHECK(_impl_.message_value_ != nullptr);
+      _impl_.message_value_->Clear();
+    }
+    if (cached_has_bits & 0x00000002u) {
+      ABSL_DCHECK(_impl_.any_value_ != nullptr);
+      _impl_.any_value_->Clear();
+    }
+    if (cached_has_bits & 0x00000004u) {
+      ABSL_DCHECK(_impl_.duration_value_ != nullptr);
+      _impl_.duration_value_->Clear();
+    }
+    if (cached_has_bits & 0x00000008u) {
+      ABSL_DCHECK(_impl_.timestamp_value_ != nullptr);
+      _impl_.timestamp_value_->Clear();
+    }
+    if (cached_has_bits & 0x00000010u) {
+      ABSL_DCHECK(_impl_.struct_value_ != nullptr);
+      _impl_.struct_value_->Clear();
+    }
+    if (cached_has_bits & 0x00000020u) {
+      ABSL_DCHECK(_impl_.value_value_ != nullptr);
+      _impl_.value_value_->Clear();
+    }
+    if (cached_has_bits & 0x00000040u) {
+      ABSL_DCHECK(_impl_.int64_wrapper_value_ != nullptr);
+      _impl_.int64_wrapper_value_->Clear();
+    }
+    if (cached_has_bits & 0x00000080u) {
+      ABSL_DCHECK(_impl_.int32_wrapper_value_ != nullptr);
+      _impl_.int32_wrapper_value_->Clear();
+    }
+  }
+  if (cached_has_bits & 0x00007f00u) {
+    if (cached_has_bits & 0x00000100u) {
+      ABSL_DCHECK(_impl_.double_wrapper_value_ != nullptr);
+      _impl_.double_wrapper_value_->Clear();
+    }
+    if (cached_has_bits & 0x00000200u) {
+      ABSL_DCHECK(_impl_.float_wrapper_value_ != nullptr);
+      _impl_.float_wrapper_value_->Clear();
+    }
+    if (cached_has_bits & 0x00000400u) {
+      ABSL_DCHECK(_impl_.uint64_wrapper_value_ != nullptr);
+      _impl_.uint64_wrapper_value_->Clear();
+    }
+    if (cached_has_bits & 0x00000800u) {
+      ABSL_DCHECK(_impl_.uint32_wrapper_value_ != nullptr);
+      _impl_.uint32_wrapper_value_->Clear();
+    }
+    if (cached_has_bits & 0x00001000u) {
+      ABSL_DCHECK(_impl_.string_wrapper_value_ != nullptr);
+      _impl_.string_wrapper_value_->Clear();
+    }
+    if (cached_has_bits & 0x00002000u) {
+      ABSL_DCHECK(_impl_.bool_wrapper_value_ != nullptr);
+      _impl_.bool_wrapper_value_->Clear();
+    }
+    if (cached_has_bits & 0x00004000u) {
+      ABSL_DCHECK(_impl_.bytes_wrapper_value_ != nullptr);
+      _impl_.bytes_wrapper_value_->Clear();
+    }
+  }
+  ::memset(&_impl_.int64_value_, 0, static_cast<::size_t>(
+      reinterpret_cast<char*>(&_impl_.enum_value_) -
+      reinterpret_cast<char*>(&_impl_.int64_value_)) + sizeof(_impl_.enum_value_));
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* TestMessage::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<5, 44, 22, 142, 17> TestMessage::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(TestMessage, _impl_._has_bits_),
+    0, // no _extensions_
+    313, 248,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294963200,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    44,  // num_field_entries
+    22,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_TestMessage_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // int32 int32_value = 1 [json_name = "int32Value"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMessage, _impl_.int32_value_), 63>(),
+     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int32_value_)}},
+    // int64 int64_value = 2 [json_name = "int64Value"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestMessage, _impl_.int64_value_), 63>(),
+     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int64_value_)}},
+    // uint32 uint32_value = 3 [json_name = "uint32Value"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMessage, _impl_.uint32_value_), 63>(),
+     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint32_value_)}},
+    // uint64 uint64_value = 4 [json_name = "uint64Value"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestMessage, _impl_.uint64_value_), 63>(),
+     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint64_value_)}},
+    // float float_value = 5 [json_name = "floatValue"];
+    {::_pbi::TcParser::FastF32S1,
+     {45, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.float_value_)}},
+    // double double_value = 6 [json_name = "doubleValue"];
+    {::_pbi::TcParser::FastF64S1,
+     {49, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.double_value_)}},
+    // string string_value = 7 [json_name = "stringValue"];
+    {::_pbi::TcParser::FastUS1,
+     {58, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.string_value_)}},
+    // string cord_value = 8 [json_name = "cordValue", ctype = CORD];
+    {::_pbi::TcParser::FastUcS1,
+     {66, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.cord_value_)}},
+    // bytes bytes_value = 9 [json_name = "bytesValue"];
+    {::_pbi::TcParser::FastBS1,
+     {74, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.bytes_value_)}},
+    // bool bool_value = 10 [json_name = "boolValue"];
+    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TestMessage, _impl_.bool_value_), 63>(),
+     {80, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.bool_value_)}},
+    // .google.api.expr.runtime.TestMessage.TestEnum enum_value = 11 [json_name = "enumValue"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMessage, _impl_.enum_value_), 63>(),
+     {88, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.enum_value_)}},
+    // .google.api.expr.runtime.TestMessage message_value = 12 [json_name = "messageValue"];
+    {::_pbi::TcParser::FastMtS1,
+     {98, 0, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.message_value_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    {::_pbi::TcParser::MiniParse, {}},
+    {::_pbi::TcParser::MiniParse, {}},
+    // repeated .google.api.expr.runtime.TestMessage message_list = 112 [json_name = "messageList"];
+    {::_pbi::TcParser::FastMtR2,
+     {1922, 63, 1, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.message_list_)}},
+    // .google.protobuf.Int64Value int64_wrapper_value = 305 [json_name = "int64WrapperValue"];
+    {::_pbi::TcParser::FastMtS2,
+     {5002, 6, 13, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int64_wrapper_value_)}},
+    // .google.protobuf.Int32Value int32_wrapper_value = 306 [json_name = "int32WrapperValue"];
+    {::_pbi::TcParser::FastMtS2,
+     {5010, 7, 14, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int32_wrapper_value_)}},
+    // .google.protobuf.DoubleValue double_wrapper_value = 307 [json_name = "doubleWrapperValue"];
+    {::_pbi::TcParser::FastMtS2,
+     {5018, 8, 15, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.double_wrapper_value_)}},
+    // .google.protobuf.FloatValue float_wrapper_value = 308 [json_name = "floatWrapperValue"];
+    {::_pbi::TcParser::FastMtS2,
+     {5026, 9, 16, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.float_wrapper_value_)}},
+    // repeated int32 int32_list = 101 [json_name = "int32List"];
+    {::_pbi::TcParser::FastV32P2,
+     {1706, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int32_list_)}},
+    // repeated int64 int64_list = 102 [json_name = "int64List"];
+    {::_pbi::TcParser::FastV64P2,
+     {1714, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int64_list_)}},
+    // repeated uint32 uint32_list = 103 [json_name = "uint32List"];
+    {::_pbi::TcParser::FastV32P2,
+     {1722, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint32_list_)}},
+    // repeated uint64 uint64_list = 104 [json_name = "uint64List"];
+    {::_pbi::TcParser::FastV64P2,
+     {1730, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint64_list_)}},
+    // repeated float float_list = 105 [json_name = "floatList"];
+    {::_pbi::TcParser::FastF32P2,
+     {1738, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.float_list_)}},
+    // repeated double double_list = 106 [json_name = "doubleList"];
+    {::_pbi::TcParser::FastF64P2,
+     {1746, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.double_list_)}},
+    // repeated string string_list = 107 [json_name = "stringList"];
+    {::_pbi::TcParser::FastUR2,
+     {1754, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.string_list_)}},
+    // .google.protobuf.Any any_value = 300 [json_name = "anyValue"];
+    {::_pbi::TcParser::FastMtS2,
+     {4834, 1, 8, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.any_value_)}},
+    // repeated bytes bytes_list = 109 [json_name = "bytesList"];
+    {::_pbi::TcParser::FastBR2,
+     {1770, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.bytes_list_)}},
+    // repeated bool bool_list = 110 [json_name = "boolList"];
+    {::_pbi::TcParser::FastV8P2,
+     {1778, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.bool_list_)}},
+    // repeated .google.api.expr.runtime.TestMessage.TestEnum enum_list = 111 [json_name = "enumList"];
+    {::_pbi::TcParser::FastV32P2,
+     {1786, 63, 0, PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.enum_list_)}},
+  }}, {{
+    101, 0, 1,
+    61440, 12,201, 0, 1,
+     65472, 24,300, 0, 1,
+     49152, 30,
+    65535, 65535
+  }}, {{
+    // int32 int32_value = 1 [json_name = "int32Value"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int32_value_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
+    // int64 int64_value = 2 [json_name = "int64Value"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int64_value_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
+    // uint32 uint32_value = 3 [json_name = "uint32Value"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint32_value_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
+    // uint64 uint64_value = 4 [json_name = "uint64Value"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint64_value_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
+    // float float_value = 5 [json_name = "floatValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.float_value_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
+    // double double_value = 6 [json_name = "doubleValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.double_value_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
+    // string string_value = 7 [json_name = "stringValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.string_value_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string cord_value = 8 [json_name = "cordValue", ctype = CORD];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.cord_value_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // bytes bytes_value = 9 [json_name = "bytesValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.bytes_value_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
+    // bool bool_value = 10 [json_name = "boolValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.bool_value_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
+    // .google.api.expr.runtime.TestMessage.TestEnum enum_value = 11 [json_name = "enumValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.enum_value_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
+    // .google.api.expr.runtime.TestMessage message_value = 12 [json_name = "messageValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.message_value_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // repeated int32 int32_list = 101 [json_name = "int32List"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int32_list_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
+    // repeated int64 int64_list = 102 [json_name = "int64List"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int64_list_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
+    // repeated uint32 uint32_list = 103 [json_name = "uint32List"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint32_list_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
+    // repeated uint64 uint64_list = 104 [json_name = "uint64List"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint64_list_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
+    // repeated float float_list = 105 [json_name = "floatList"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.float_list_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
+    // repeated double double_list = 106 [json_name = "doubleList"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.double_list_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
+    // repeated string string_list = 107 [json_name = "stringList"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.string_list_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
+    // repeated string cord_list = 108 [json_name = "cordList", ctype = CORD];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.cord_list_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
+    // repeated bytes bytes_list = 109 [json_name = "bytesList"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.bytes_list_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
+    // repeated bool bool_list = 110 [json_name = "boolList"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.bool_list_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
+    // repeated .google.api.expr.runtime.TestMessage.TestEnum enum_list = 111 [json_name = "enumList"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.enum_list_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
+    // repeated .google.api.expr.runtime.TestMessage message_list = 112 [json_name = "messageList"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.message_list_), -1, 1,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+    // map<int64, int32> int64_int32_map = 201 [json_name = "int64Int32Map"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int64_int32_map_), -1, 2,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // map<uint64, int32> uint64_int32_map = 202 [json_name = "uint64Int32Map"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint64_int32_map_), -1, 3,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // map<string, int32> string_int32_map = 203 [json_name = "stringInt32Map"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.string_int32_map_), -1, 4,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // map<bool, int32> bool_int32_map = 204 [json_name = "boolInt32Map"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.bool_int32_map_), -1, 5,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // map<int32, int32> int32_int32_map = 205 [json_name = "int32Int32Map"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int32_int32_map_), -1, 6,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // map<uint32, uint32> uint32_uint32_map = 206 [json_name = "uint32Uint32Map"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint32_uint32_map_), -1, 7,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // .google.protobuf.Any any_value = 300 [json_name = "anyValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.any_value_), _Internal::kHasBitsOffset + 1, 8,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Duration duration_value = 301 [json_name = "durationValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.duration_value_), _Internal::kHasBitsOffset + 2, 9,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Timestamp timestamp_value = 302 [json_name = "timestampValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.timestamp_value_), _Internal::kHasBitsOffset + 3, 10,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Struct struct_value = 303 [json_name = "structValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.struct_value_), _Internal::kHasBitsOffset + 4, 11,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Value value_value = 304 [json_name = "valueValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.value_value_), _Internal::kHasBitsOffset + 5, 12,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Int64Value int64_wrapper_value = 305 [json_name = "int64WrapperValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int64_wrapper_value_), _Internal::kHasBitsOffset + 6, 13,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Int32Value int32_wrapper_value = 306 [json_name = "int32WrapperValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.int32_wrapper_value_), _Internal::kHasBitsOffset + 7, 14,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.DoubleValue double_wrapper_value = 307 [json_name = "doubleWrapperValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.double_wrapper_value_), _Internal::kHasBitsOffset + 8, 15,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.FloatValue float_wrapper_value = 308 [json_name = "floatWrapperValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.float_wrapper_value_), _Internal::kHasBitsOffset + 9, 16,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.UInt64Value uint64_wrapper_value = 309 [json_name = "uint64WrapperValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint64_wrapper_value_), _Internal::kHasBitsOffset + 10, 17,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.UInt32Value uint32_wrapper_value = 310 [json_name = "uint32WrapperValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.uint32_wrapper_value_), _Internal::kHasBitsOffset + 11, 18,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.StringValue string_wrapper_value = 311 [json_name = "stringWrapperValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.string_wrapper_value_), _Internal::kHasBitsOffset + 12, 19,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.BoolValue bool_wrapper_value = 312 [json_name = "boolWrapperValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.bool_wrapper_value_), _Internal::kHasBitsOffset + 13, 20,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.BytesValue bytes_wrapper_value = 313 [json_name = "bytesWrapperValue"];
+    {PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.bytes_wrapper_value_), _Internal::kHasBitsOffset + 14, 21,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::runtime::TestMessage>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::runtime::TestMessage>()},
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(TestMessage()._impl_.int64_int32_map_)>(1, 0, 0)},
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(TestMessage()._impl_.uint64_int32_map_)>(1, 0, 0)},
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(TestMessage()._impl_.string_int32_map_)>(1, 0, 0)},
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(TestMessage()._impl_.bool_int32_map_)>(1, 0, 0)},
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(TestMessage()._impl_.int32_int32_map_)>(1, 0, 0)},
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(TestMessage()._impl_.uint32_uint32_map_)>(1, 0, 0)},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Struct>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Value>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Int32Value>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::FloatValue>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::UInt64Value>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::UInt32Value>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::BoolValue>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::BytesValue>()},
+  }}, {{
+    "\43\0\0\0\0\0\0\14\12\0\0\0\0\0\0\0\0\0\0\13\11\0\0\0\0\0\0\20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+    "google.api.expr.runtime.TestMessage"
+    "string_value"
+    "cord_value"
+    "string_list"
+    "cord_list"
+    "string_int32_map"
+  }},
+};
+
+::uint8_t* TestMessage::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.runtime.TestMessage)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // int32 int32_value = 1 [json_name = "int32Value"];
+  if (this->_internal_int32_value() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt32ToArrayWithField<1>(
+            stream, this->_internal_int32_value(), target);
+  }
+
+  // int64 int64_value = 2 [json_name = "int64Value"];
+  if (this->_internal_int64_value() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt64ToArrayWithField<2>(
+            stream, this->_internal_int64_value(), target);
+  }
+
+  // uint32 uint32_value = 3 [json_name = "uint32Value"];
+  if (this->_internal_uint32_value() != 0) {
+    target = stream->EnsureSpace(target);
+    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
+        3, this->_internal_uint32_value(), target);
+  }
+
+  // uint64 uint64_value = 4 [json_name = "uint64Value"];
+  if (this->_internal_uint64_value() != 0) {
+    target = stream->EnsureSpace(target);
+    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
+        4, this->_internal_uint64_value(), target);
+  }
+
+  // float float_value = 5 [json_name = "floatValue"];
+  static_assert(sizeof(::uint32_t) == sizeof(float),
+                "Code assumes ::uint32_t and float are the same size.");
+  float tmp_float_value = this->_internal_float_value();
+  ::uint32_t raw_float_value;
+  memcpy(&raw_float_value, &tmp_float_value, sizeof(tmp_float_value));
+  if (raw_float_value != 0) {
+    target = stream->EnsureSpace(target);
+    target = ::_pbi::WireFormatLite::WriteFloatToArray(
+        5, this->_internal_float_value(), target);
+  }
+
+  // double double_value = 6 [json_name = "doubleValue"];
+  static_assert(sizeof(::uint64_t) == sizeof(double),
+                "Code assumes ::uint64_t and double are the same size.");
+  double tmp_double_value = this->_internal_double_value();
+  ::uint64_t raw_double_value;
+  memcpy(&raw_double_value, &tmp_double_value, sizeof(tmp_double_value));
+  if (raw_double_value != 0) {
+    target = stream->EnsureSpace(target);
+    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
+        6, this->_internal_double_value(), target);
+  }
+
+  // string string_value = 7 [json_name = "stringValue"];
+  if (!this->_internal_string_value().empty()) {
+    const std::string& _s = this->_internal_string_value();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.runtime.TestMessage.string_value");
+    target = stream->WriteStringMaybeAliased(7, _s, target);
+  }
+
+  // string cord_value = 8 [json_name = "cordValue", ctype = CORD];
+  if (!this->_internal_cord_value().empty()) {
+    const std::string& _s = this->_internal_cord_value();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.runtime.TestMessage.cord_value");
+    target = stream->WriteStringMaybeAliased(8, _s, target);
+  }
+
+  // bytes bytes_value = 9 [json_name = "bytesValue"];
+  if (!this->_internal_bytes_value().empty()) {
+    const std::string& _s = this->_internal_bytes_value();
+    target = stream->WriteBytesMaybeAliased(9, _s, target);
+  }
+
+  // bool bool_value = 10 [json_name = "boolValue"];
+  if (this->_internal_bool_value() != 0) {
+    target = stream->EnsureSpace(target);
+    target = ::_pbi::WireFormatLite::WriteBoolToArray(
+        10, this->_internal_bool_value(), target);
+  }
+
+  // .google.api.expr.runtime.TestMessage.TestEnum enum_value = 11 [json_name = "enumValue"];
+  if (this->_internal_enum_value() != 0) {
+    target = stream->EnsureSpace(target);
+    target = ::_pbi::WireFormatLite::WriteEnumToArray(
+        11, this->_internal_enum_value(), target);
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.runtime.TestMessage message_value = 12 [json_name = "messageValue"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(12, _Internal::message_value(this),
+        _Internal::message_value(this).GetCachedSize(), target, stream);
+  }
+
+  // repeated int32 int32_list = 101 [json_name = "int32List"];
+  {
+    int byte_size = _impl_._int32_list_cached_byte_size_.Get();
+    if (byte_size > 0) {
+      target = stream->WriteInt32Packed(101, _internal_int32_list(),
+                                                 byte_size, target);
+    }
+  }
+
+  // repeated int64 int64_list = 102 [json_name = "int64List"];
+  {
+    int byte_size = _impl_._int64_list_cached_byte_size_.Get();
+    if (byte_size > 0) {
+      target = stream->WriteInt64Packed(102, _internal_int64_list(),
+                                                 byte_size, target);
+    }
+  }
+
+  // repeated uint32 uint32_list = 103 [json_name = "uint32List"];
+  {
+    int byte_size = _impl_._uint32_list_cached_byte_size_.Get();
+    if (byte_size > 0) {
+      target = stream->WriteUInt32Packed(103, _internal_uint32_list(),
+                                                 byte_size, target);
+    }
+  }
+
+  // repeated uint64 uint64_list = 104 [json_name = "uint64List"];
+  {
+    int byte_size = _impl_._uint64_list_cached_byte_size_.Get();
+    if (byte_size > 0) {
+      target = stream->WriteUInt64Packed(104, _internal_uint64_list(),
+                                                 byte_size, target);
+    }
+  }
+
+  // repeated float float_list = 105 [json_name = "floatList"];
+  if (this->_internal_float_list_size() > 0) {
+    target = stream->WriteFixedPacked(105, _internal_float_list(), target);
+  }
+
+  // repeated double double_list = 106 [json_name = "doubleList"];
+  if (this->_internal_double_list_size() > 0) {
+    target = stream->WriteFixedPacked(106, _internal_double_list(), target);
+  }
+
+  // repeated string string_list = 107 [json_name = "stringList"];
+  for (int i = 0, n = this->_internal_string_list_size(); i < n; ++i) {
+    const auto& s = this->_internal_string_list().Get(i);
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.runtime.TestMessage.string_list");
+    target = stream->WriteString(107, s, target);
+  }
+
+  // repeated string cord_list = 108 [json_name = "cordList", ctype = CORD];
+  for (int i = 0, n = this->_internal_cord_list_size(); i < n; ++i) {
+    const auto& s = this->_internal_cord_list().Get(i);
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.runtime.TestMessage.cord_list");
+    target = stream->WriteString(108, s, target);
+  }
+
+  // repeated bytes bytes_list = 109 [json_name = "bytesList"];
+  for (int i = 0, n = this->_internal_bytes_list_size(); i < n; ++i) {
+    const auto& s = this->_internal_bytes_list().Get(i);
+    target = stream->WriteBytes(109, s, target);
+  }
+
+  // repeated bool bool_list = 110 [json_name = "boolList"];
+  if (this->_internal_bool_list_size() > 0) {
+    target = stream->WriteFixedPacked(110, _internal_bool_list(), target);
+  }
+
+  // repeated .google.api.expr.runtime.TestMessage.TestEnum enum_list = 111 [json_name = "enumList"];
+  {
+    int byte_size = _impl_._enum_list_cached_byte_size_.Get();
+    if (byte_size > 0) {
+      target = stream->WriteEnumPacked(111, _internal_enum_list(),
+                                       byte_size, target);
+    }
+  }
+
+  // repeated .google.api.expr.runtime.TestMessage message_list = 112 [json_name = "messageList"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_message_list_size()); i < n; i++) {
+    const auto& repfield = this->_internal_message_list().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(112, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  // map<int64, int32> int64_int32_map = 201 [json_name = "int64Int32Map"];
+  if (!_internal_int64_int32_map().empty()) {
+    using MapType = ::google::protobuf::Map<::int64_t, ::int32_t>;
+    using WireHelper = TestMessage_Int64Int32MapEntry_DoNotUse::Funcs;
+    const auto& field = _internal_int64_int32_map();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            201, entry.first, entry.second, target, stream);
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            201, entry.first, entry.second, target, stream);
+      }
+    }
+  }
+
+  // map<uint64, int32> uint64_int32_map = 202 [json_name = "uint64Int32Map"];
+  if (!_internal_uint64_int32_map().empty()) {
+    using MapType = ::google::protobuf::Map<::uint64_t, ::int32_t>;
+    using WireHelper = TestMessage_Uint64Int32MapEntry_DoNotUse::Funcs;
+    const auto& field = _internal_uint64_int32_map();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            202, entry.first, entry.second, target, stream);
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            202, entry.first, entry.second, target, stream);
+      }
+    }
+  }
+
+  // map<string, int32> string_int32_map = 203 [json_name = "stringInt32Map"];
+  if (!_internal_string_int32_map().empty()) {
+    using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
+    using WireHelper = TestMessage_StringInt32MapEntry_DoNotUse::Funcs;
+    const auto& field = _internal_string_int32_map();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            203, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.runtime.TestMessage.string_int32_map");
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            203, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.runtime.TestMessage.string_int32_map");
+      }
+    }
+  }
+
+  // map<bool, int32> bool_int32_map = 204 [json_name = "boolInt32Map"];
+  if (!_internal_bool_int32_map().empty()) {
+    using MapType = ::google::protobuf::Map<bool, ::int32_t>;
+    using WireHelper = TestMessage_BoolInt32MapEntry_DoNotUse::Funcs;
+    const auto& field = _internal_bool_int32_map();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            204, entry.first, entry.second, target, stream);
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            204, entry.first, entry.second, target, stream);
+      }
+    }
+  }
+
+  // map<int32, int32> int32_int32_map = 205 [json_name = "int32Int32Map"];
+  if (!_internal_int32_int32_map().empty()) {
+    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
+    using WireHelper = TestMessage_Int32Int32MapEntry_DoNotUse::Funcs;
+    const auto& field = _internal_int32_int32_map();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            205, entry.first, entry.second, target, stream);
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            205, entry.first, entry.second, target, stream);
+      }
+    }
+  }
+
+  // map<uint32, uint32> uint32_uint32_map = 206 [json_name = "uint32Uint32Map"];
+  if (!_internal_uint32_uint32_map().empty()) {
+    using MapType = ::google::protobuf::Map<::uint32_t, ::uint32_t>;
+    using WireHelper = TestMessage_Uint32Uint32MapEntry_DoNotUse::Funcs;
+    const auto& field = _internal_uint32_uint32_map();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            206, entry.first, entry.second, target, stream);
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            206, entry.first, entry.second, target, stream);
+      }
+    }
+  }
+
+  // .google.protobuf.Any any_value = 300 [json_name = "anyValue"];
+  if (cached_has_bits & 0x00000002u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(300, _Internal::any_value(this),
+        _Internal::any_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.Duration duration_value = 301 [json_name = "durationValue"];
+  if (cached_has_bits & 0x00000004u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(301, _Internal::duration_value(this),
+        _Internal::duration_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.Timestamp timestamp_value = 302 [json_name = "timestampValue"];
+  if (cached_has_bits & 0x00000008u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(302, _Internal::timestamp_value(this),
+        _Internal::timestamp_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.Struct struct_value = 303 [json_name = "structValue"];
+  if (cached_has_bits & 0x00000010u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(303, _Internal::struct_value(this),
+        _Internal::struct_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.Value value_value = 304 [json_name = "valueValue"];
+  if (cached_has_bits & 0x00000020u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(304, _Internal::value_value(this),
+        _Internal::value_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.Int64Value int64_wrapper_value = 305 [json_name = "int64WrapperValue"];
+  if (cached_has_bits & 0x00000040u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(305, _Internal::int64_wrapper_value(this),
+        _Internal::int64_wrapper_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.Int32Value int32_wrapper_value = 306 [json_name = "int32WrapperValue"];
+  if (cached_has_bits & 0x00000080u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(306, _Internal::int32_wrapper_value(this),
+        _Internal::int32_wrapper_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.DoubleValue double_wrapper_value = 307 [json_name = "doubleWrapperValue"];
+  if (cached_has_bits & 0x00000100u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(307, _Internal::double_wrapper_value(this),
+        _Internal::double_wrapper_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.FloatValue float_wrapper_value = 308 [json_name = "floatWrapperValue"];
+  if (cached_has_bits & 0x00000200u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(308, _Internal::float_wrapper_value(this),
+        _Internal::float_wrapper_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.UInt64Value uint64_wrapper_value = 309 [json_name = "uint64WrapperValue"];
+  if (cached_has_bits & 0x00000400u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(309, _Internal::uint64_wrapper_value(this),
+        _Internal::uint64_wrapper_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.UInt32Value uint32_wrapper_value = 310 [json_name = "uint32WrapperValue"];
+  if (cached_has_bits & 0x00000800u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(310, _Internal::uint32_wrapper_value(this),
+        _Internal::uint32_wrapper_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.StringValue string_wrapper_value = 311 [json_name = "stringWrapperValue"];
+  if (cached_has_bits & 0x00001000u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(311, _Internal::string_wrapper_value(this),
+        _Internal::string_wrapper_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.BoolValue bool_wrapper_value = 312 [json_name = "boolWrapperValue"];
+  if (cached_has_bits & 0x00002000u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(312, _Internal::bool_wrapper_value(this),
+        _Internal::bool_wrapper_value(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.BytesValue bytes_wrapper_value = 313 [json_name = "bytesWrapperValue"];
+  if (cached_has_bits & 0x00004000u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(313, _Internal::bytes_wrapper_value(this),
+        _Internal::bytes_wrapper_value(this).GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.runtime.TestMessage)
+  return target;
+}
+
+::size_t TestMessage::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.runtime.TestMessage)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated int32 int32_list = 101 [json_name = "int32List"];
+  {
+    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
+        this->_internal_int32_list())
+    ;
+    _impl_._int32_list_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
+    std::size_t tag_size = data_size == 0
+        ? 0
+        : 2 + ::_pbi::WireFormatLite::Int32Size(
+                            static_cast<int32_t>(data_size))
+    ;
+    total_size += tag_size + data_size;
+  }
+  // repeated int64 int64_list = 102 [json_name = "int64List"];
+  {
+    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
+        this->_internal_int64_list())
+    ;
+    _impl_._int64_list_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
+    std::size_t tag_size = data_size == 0
+        ? 0
+        : 2 + ::_pbi::WireFormatLite::Int32Size(
+                            static_cast<int32_t>(data_size))
+    ;
+    total_size += tag_size + data_size;
+  }
+  // repeated uint32 uint32_list = 103 [json_name = "uint32List"];
+  {
+    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
+        this->_internal_uint32_list())
+    ;
+    _impl_._uint32_list_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
+    std::size_t tag_size = data_size == 0
+        ? 0
+        : 2 + ::_pbi::WireFormatLite::Int32Size(
+                            static_cast<int32_t>(data_size))
+    ;
+    total_size += tag_size + data_size;
+  }
+  // repeated uint64 uint64_list = 104 [json_name = "uint64List"];
+  {
+    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
+        this->_internal_uint64_list())
+    ;
+    _impl_._uint64_list_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
+    std::size_t tag_size = data_size == 0
+        ? 0
+        : 2 + ::_pbi::WireFormatLite::Int32Size(
+                            static_cast<int32_t>(data_size))
+    ;
+    total_size += tag_size + data_size;
+  }
+  // repeated float float_list = 105 [json_name = "floatList"];
+  {
+    std::size_t data_size = std::size_t{4} *
+        ::_pbi::FromIntSize(this->_internal_float_list_size())
+    ;
+    std::size_t tag_size = data_size == 0
+        ? 0
+        : 2 + ::_pbi::WireFormatLite::Int32Size(
+                            static_cast<int32_t>(data_size))
+    ;
+    total_size += tag_size + data_size;
+  }
+  // repeated double double_list = 106 [json_name = "doubleList"];
+  {
+    std::size_t data_size = std::size_t{8} *
+        ::_pbi::FromIntSize(this->_internal_double_list_size())
+    ;
+    std::size_t tag_size = data_size == 0
+        ? 0
+        : 2 + ::_pbi::WireFormatLite::Int32Size(
+                            static_cast<int32_t>(data_size))
+    ;
+    total_size += tag_size + data_size;
+  }
+  // repeated string string_list = 107 [json_name = "stringList"];
+  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_string_list().size());
+  for (int i = 0, n = _internal_string_list().size(); i < n; ++i) {
+    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
+        _internal_string_list().Get(i));
+  }
+  // repeated string cord_list = 108 [json_name = "cordList", ctype = CORD];
+  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_cord_list().size());
+  for (int i = 0, n = _internal_cord_list().size(); i < n; ++i) {
+    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
+        _internal_cord_list().Get(i));
+  }
+  // repeated bytes bytes_list = 109 [json_name = "bytesList"];
+  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_bytes_list().size());
+  for (int i = 0, n = _internal_bytes_list().size(); i < n; ++i) {
+    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
+        _internal_bytes_list().Get(i));
+  }
+  // repeated bool bool_list = 110 [json_name = "boolList"];
+  {
+    std::size_t data_size = std::size_t{1} *
+        ::_pbi::FromIntSize(this->_internal_bool_list_size())
+    ;
+    std::size_t tag_size = data_size == 0
+        ? 0
+        : 2 + ::_pbi::WireFormatLite::Int32Size(
+                            static_cast<int32_t>(data_size))
+    ;
+    total_size += tag_size + data_size;
+  }
+  // repeated .google.api.expr.runtime.TestMessage.TestEnum enum_list = 111 [json_name = "enumList"];
+  {
+    std::size_t data_size = 0;
+    auto count = static_cast<std::size_t>(this->_internal_enum_list_size());
+
+    for (std::size_t i = 0; i < count; ++i) {
+      data_size += ::_pbi::WireFormatLite::EnumSize(
+          this->_internal_enum_list().Get(static_cast<int>(i)));
+    }
+    total_size += data_size;
+    if (data_size > 0) {
+      total_size += 2;
+      total_size += ::_pbi::WireFormatLite::Int32Size(
+          static_cast<int32_t>(data_size));
+    }
+    _impl_._enum_list_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
+  }
+  // repeated .google.api.expr.runtime.TestMessage message_list = 112 [json_name = "messageList"];
+  total_size += 2UL * this->_internal_message_list_size();
+  for (const auto& msg : this->_internal_message_list()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  // map<int64, int32> int64_int32_map = 201 [json_name = "int64Int32Map"];
+  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_int64_int32_map_size());
+  for (const auto& entry : _internal_int64_int32_map()) {
+    total_size += TestMessage_Int64Int32MapEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // map<uint64, int32> uint64_int32_map = 202 [json_name = "uint64Int32Map"];
+  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_uint64_int32_map_size());
+  for (const auto& entry : _internal_uint64_int32_map()) {
+    total_size += TestMessage_Uint64Int32MapEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // map<string, int32> string_int32_map = 203 [json_name = "stringInt32Map"];
+  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_string_int32_map_size());
+  for (const auto& entry : _internal_string_int32_map()) {
+    total_size += TestMessage_StringInt32MapEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // map<bool, int32> bool_int32_map = 204 [json_name = "boolInt32Map"];
+  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_bool_int32_map_size());
+  for (const auto& entry : _internal_bool_int32_map()) {
+    total_size += TestMessage_BoolInt32MapEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // map<int32, int32> int32_int32_map = 205 [json_name = "int32Int32Map"];
+  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_int32_int32_map_size());
+  for (const auto& entry : _internal_int32_int32_map()) {
+    total_size += TestMessage_Int32Int32MapEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // map<uint32, uint32> uint32_uint32_map = 206 [json_name = "uint32Uint32Map"];
+  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_uint32_uint32_map_size());
+  for (const auto& entry : _internal_uint32_uint32_map()) {
+    total_size += TestMessage_Uint32Uint32MapEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // string string_value = 7 [json_name = "stringValue"];
+  if (!this->_internal_string_value().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_string_value());
+  }
+
+  // string cord_value = 8 [json_name = "cordValue", ctype = CORD];
+  if (!this->_internal_cord_value().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_cord_value());
+  }
+
+  // bytes bytes_value = 9 [json_name = "bytesValue"];
+  if (!this->_internal_bytes_value().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
+                                    this->_internal_bytes_value());
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x000000ffu) {
+    // .google.api.expr.runtime.TestMessage message_value = 12 [json_name = "messageValue"];
+    if (cached_has_bits & 0x00000001u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.message_value_);
+    }
+
+    // .google.protobuf.Any any_value = 300 [json_name = "anyValue"];
+    if (cached_has_bits & 0x00000002u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.any_value_);
+    }
+
+    // .google.protobuf.Duration duration_value = 301 [json_name = "durationValue"];
+    if (cached_has_bits & 0x00000004u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.duration_value_);
+    }
+
+    // .google.protobuf.Timestamp timestamp_value = 302 [json_name = "timestampValue"];
+    if (cached_has_bits & 0x00000008u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.timestamp_value_);
+    }
+
+    // .google.protobuf.Struct struct_value = 303 [json_name = "structValue"];
+    if (cached_has_bits & 0x00000010u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.struct_value_);
+    }
+
+    // .google.protobuf.Value value_value = 304 [json_name = "valueValue"];
+    if (cached_has_bits & 0x00000020u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.value_value_);
+    }
+
+    // .google.protobuf.Int64Value int64_wrapper_value = 305 [json_name = "int64WrapperValue"];
+    if (cached_has_bits & 0x00000040u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.int64_wrapper_value_);
+    }
+
+    // .google.protobuf.Int32Value int32_wrapper_value = 306 [json_name = "int32WrapperValue"];
+    if (cached_has_bits & 0x00000080u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.int32_wrapper_value_);
+    }
+
+  }
+  if (cached_has_bits & 0x00007f00u) {
+    // .google.protobuf.DoubleValue double_wrapper_value = 307 [json_name = "doubleWrapperValue"];
+    if (cached_has_bits & 0x00000100u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.double_wrapper_value_);
+    }
+
+    // .google.protobuf.FloatValue float_wrapper_value = 308 [json_name = "floatWrapperValue"];
+    if (cached_has_bits & 0x00000200u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.float_wrapper_value_);
+    }
+
+    // .google.protobuf.UInt64Value uint64_wrapper_value = 309 [json_name = "uint64WrapperValue"];
+    if (cached_has_bits & 0x00000400u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.uint64_wrapper_value_);
+    }
+
+    // .google.protobuf.UInt32Value uint32_wrapper_value = 310 [json_name = "uint32WrapperValue"];
+    if (cached_has_bits & 0x00000800u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.uint32_wrapper_value_);
+    }
+
+    // .google.protobuf.StringValue string_wrapper_value = 311 [json_name = "stringWrapperValue"];
+    if (cached_has_bits & 0x00001000u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.string_wrapper_value_);
+    }
+
+    // .google.protobuf.BoolValue bool_wrapper_value = 312 [json_name = "boolWrapperValue"];
+    if (cached_has_bits & 0x00002000u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.bool_wrapper_value_);
+    }
+
+    // .google.protobuf.BytesValue bytes_wrapper_value = 313 [json_name = "bytesWrapperValue"];
+    if (cached_has_bits & 0x00004000u) {
+      total_size += 2 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.bytes_wrapper_value_);
+    }
+
+  }
+  // int64 int64_value = 2 [json_name = "int64Value"];
+  if (this->_internal_int64_value() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+        this->_internal_int64_value());
+  }
+
+  // int32 int32_value = 1 [json_name = "int32Value"];
+  if (this->_internal_int32_value() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
+        this->_internal_int32_value());
+  }
+
+  // uint32 uint32_value = 3 [json_name = "uint32Value"];
+  if (this->_internal_uint32_value() != 0) {
+    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
+        this->_internal_uint32_value());
+  }
+
+  // uint64 uint64_value = 4 [json_name = "uint64Value"];
+  if (this->_internal_uint64_value() != 0) {
+    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
+        this->_internal_uint64_value());
+  }
+
+  // double double_value = 6 [json_name = "doubleValue"];
+  static_assert(sizeof(::uint64_t) == sizeof(double),
+                "Code assumes ::uint64_t and double are the same size.");
+  double tmp_double_value = this->_internal_double_value();
+  ::uint64_t raw_double_value;
+  memcpy(&raw_double_value, &tmp_double_value, sizeof(tmp_double_value));
+  if (raw_double_value != 0) {
+    total_size += 9;
+  }
+
+  // float float_value = 5 [json_name = "floatValue"];
+  static_assert(sizeof(::uint32_t) == sizeof(float),
+                "Code assumes ::uint32_t and float are the same size.");
+  float tmp_float_value = this->_internal_float_value();
+  ::uint32_t raw_float_value;
+  memcpy(&raw_float_value, &tmp_float_value, sizeof(tmp_float_value));
+  if (raw_float_value != 0) {
+    total_size += 5;
+  }
+
+  // bool bool_value = 10 [json_name = "boolValue"];
+  if (this->_internal_bool_value() != 0) {
+    total_size += 2;
+  }
+
+  // .google.api.expr.runtime.TestMessage.TestEnum enum_value = 11 [json_name = "enumValue"];
+  if (this->_internal_enum_value() != 0) {
+    total_size += 1 +
+                  ::_pbi::WireFormatLite::EnumSize(this->_internal_enum_value());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData TestMessage::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    TestMessage::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*TestMessage::GetClassData() const { return &_class_data_; }
+
+
+void TestMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<TestMessage*>(&to_msg);
+  auto& from = static_cast<const TestMessage&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.runtime.TestMessage)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_int32_list()->MergeFrom(from._internal_int32_list());
+  _this->_internal_mutable_int64_list()->MergeFrom(from._internal_int64_list());
+  _this->_internal_mutable_uint32_list()->MergeFrom(from._internal_uint32_list());
+  _this->_internal_mutable_uint64_list()->MergeFrom(from._internal_uint64_list());
+  _this->_internal_mutable_float_list()->MergeFrom(from._internal_float_list());
+  _this->_internal_mutable_double_list()->MergeFrom(from._internal_double_list());
+  _this->_internal_mutable_string_list()->MergeFrom(from._internal_string_list());
+  _this->_internal_mutable_cord_list()->MergeFrom(from._internal_cord_list());
+  _this->_internal_mutable_bytes_list()->MergeFrom(from._internal_bytes_list());
+  _this->_internal_mutable_bool_list()->MergeFrom(from._internal_bool_list());
+  _this->_internal_mutable_enum_list()->MergeFrom(from._internal_enum_list());
+  _this->_internal_mutable_message_list()->MergeFrom(from._internal_message_list());
+  _this->_impl_.int64_int32_map_.MergeFrom(from._impl_.int64_int32_map_);
+  _this->_impl_.uint64_int32_map_.MergeFrom(from._impl_.uint64_int32_map_);
+  _this->_impl_.string_int32_map_.MergeFrom(from._impl_.string_int32_map_);
+  _this->_impl_.bool_int32_map_.MergeFrom(from._impl_.bool_int32_map_);
+  _this->_impl_.int32_int32_map_.MergeFrom(from._impl_.int32_int32_map_);
+  _this->_impl_.uint32_uint32_map_.MergeFrom(from._impl_.uint32_uint32_map_);
+  if (!from._internal_string_value().empty()) {
+    _this->_internal_set_string_value(from._internal_string_value());
+  }
+  if (!from._internal_cord_value().empty()) {
+    _this->_internal_set_cord_value(from._internal_cord_value());
+  }
+  if (!from._internal_bytes_value().empty()) {
+    _this->_internal_set_bytes_value(from._internal_bytes_value());
+  }
+  cached_has_bits = from._impl_._has_bits_[0];
+  if (cached_has_bits & 0x000000ffu) {
+    if (cached_has_bits & 0x00000001u) {
+      _this->_internal_mutable_message_value()->::google::api::expr::runtime::TestMessage::MergeFrom(
+          from._internal_message_value());
+    }
+    if (cached_has_bits & 0x00000002u) {
+      _this->_internal_mutable_any_value()->::google::protobuf::Any::MergeFrom(
+          from._internal_any_value());
+    }
+    if (cached_has_bits & 0x00000004u) {
+      _this->_internal_mutable_duration_value()->::google::protobuf::Duration::MergeFrom(
+          from._internal_duration_value());
+    }
+    if (cached_has_bits & 0x00000008u) {
+      _this->_internal_mutable_timestamp_value()->::google::protobuf::Timestamp::MergeFrom(
+          from._internal_timestamp_value());
+    }
+    if (cached_has_bits & 0x00000010u) {
+      _this->_internal_mutable_struct_value()->::google::protobuf::Struct::MergeFrom(
+          from._internal_struct_value());
+    }
+    if (cached_has_bits & 0x00000020u) {
+      _this->_internal_mutable_value_value()->::google::protobuf::Value::MergeFrom(
+          from._internal_value_value());
+    }
+    if (cached_has_bits & 0x00000040u) {
+      _this->_internal_mutable_int64_wrapper_value()->::google::protobuf::Int64Value::MergeFrom(
+          from._internal_int64_wrapper_value());
+    }
+    if (cached_has_bits & 0x00000080u) {
+      _this->_internal_mutable_int32_wrapper_value()->::google::protobuf::Int32Value::MergeFrom(
+          from._internal_int32_wrapper_value());
+    }
+  }
+  if (cached_has_bits & 0x00007f00u) {
+    if (cached_has_bits & 0x00000100u) {
+      _this->_internal_mutable_double_wrapper_value()->::google::protobuf::DoubleValue::MergeFrom(
+          from._internal_double_wrapper_value());
+    }
+    if (cached_has_bits & 0x00000200u) {
+      _this->_internal_mutable_float_wrapper_value()->::google::protobuf::FloatValue::MergeFrom(
+          from._internal_float_wrapper_value());
+    }
+    if (cached_has_bits & 0x00000400u) {
+      _this->_internal_mutable_uint64_wrapper_value()->::google::protobuf::UInt64Value::MergeFrom(
+          from._internal_uint64_wrapper_value());
+    }
+    if (cached_has_bits & 0x00000800u) {
+      _this->_internal_mutable_uint32_wrapper_value()->::google::protobuf::UInt32Value::MergeFrom(
+          from._internal_uint32_wrapper_value());
+    }
+    if (cached_has_bits & 0x00001000u) {
+      _this->_internal_mutable_string_wrapper_value()->::google::protobuf::StringValue::MergeFrom(
+          from._internal_string_wrapper_value());
+    }
+    if (cached_has_bits & 0x00002000u) {
+      _this->_internal_mutable_bool_wrapper_value()->::google::protobuf::BoolValue::MergeFrom(
+          from._internal_bool_wrapper_value());
+    }
+    if (cached_has_bits & 0x00004000u) {
+      _this->_internal_mutable_bytes_wrapper_value()->::google::protobuf::BytesValue::MergeFrom(
+          from._internal_bytes_wrapper_value());
+    }
+  }
+  if (from._internal_int64_value() != 0) {
+    _this->_internal_set_int64_value(from._internal_int64_value());
+  }
+  if (from._internal_int32_value() != 0) {
+    _this->_internal_set_int32_value(from._internal_int32_value());
+  }
+  if (from._internal_uint32_value() != 0) {
+    _this->_internal_set_uint32_value(from._internal_uint32_value());
+  }
+  if (from._internal_uint64_value() != 0) {
+    _this->_internal_set_uint64_value(from._internal_uint64_value());
+  }
+  static_assert(sizeof(::uint64_t) == sizeof(double),
+                "Code assumes ::uint64_t and double are the same size.");
+  double tmp_double_value = from._internal_double_value();
+  ::uint64_t raw_double_value;
+  memcpy(&raw_double_value, &tmp_double_value, sizeof(tmp_double_value));
+  if (raw_double_value != 0) {
+    _this->_internal_set_double_value(from._internal_double_value());
+  }
+  static_assert(sizeof(::uint32_t) == sizeof(float),
+                "Code assumes ::uint32_t and float are the same size.");
+  float tmp_float_value = from._internal_float_value();
+  ::uint32_t raw_float_value;
+  memcpy(&raw_float_value, &tmp_float_value, sizeof(tmp_float_value));
+  if (raw_float_value != 0) {
+    _this->_internal_set_float_value(from._internal_float_value());
+  }
+  if (from._internal_bool_value() != 0) {
+    _this->_internal_set_bool_value(from._internal_bool_value());
+  }
+  if (from._internal_enum_value() != 0) {
+    _this->_internal_set_enum_value(from._internal_enum_value());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void TestMessage::CopyFrom(const TestMessage& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.runtime.TestMessage)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool TestMessage::IsInitialized() const {
+  return true;
+}
+
+void TestMessage::InternalSwap(TestMessage* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  _impl_.int32_list_.InternalSwap(&other->_impl_.int32_list_);
+  _impl_.int64_list_.InternalSwap(&other->_impl_.int64_list_);
+  _impl_.uint32_list_.InternalSwap(&other->_impl_.uint32_list_);
+  _impl_.uint64_list_.InternalSwap(&other->_impl_.uint64_list_);
+  _impl_.float_list_.InternalSwap(&other->_impl_.float_list_);
+  _impl_.double_list_.InternalSwap(&other->_impl_.double_list_);
+  _impl_.string_list_.InternalSwap(&other->_impl_.string_list_);
+  _impl_.cord_list_.InternalSwap(&other->_impl_.cord_list_);
+  _impl_.bytes_list_.InternalSwap(&other->_impl_.bytes_list_);
+  _impl_.bool_list_.InternalSwap(&other->_impl_.bool_list_);
+  _impl_.enum_list_.InternalSwap(&other->_impl_.enum_list_);
+  _impl_.message_list_.InternalSwap(&other->_impl_.message_list_);
+  _impl_.int64_int32_map_.InternalSwap(&other->_impl_.int64_int32_map_);
+  _impl_.uint64_int32_map_.InternalSwap(&other->_impl_.uint64_int32_map_);
+  _impl_.string_int32_map_.InternalSwap(&other->_impl_.string_int32_map_);
+  _impl_.bool_int32_map_.InternalSwap(&other->_impl_.bool_int32_map_);
+  _impl_.int32_int32_map_.InternalSwap(&other->_impl_.int32_int32_map_);
+  _impl_.uint32_uint32_map_.InternalSwap(&other->_impl_.uint32_uint32_map_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.string_value_, lhs_arena,
+                                       &other->_impl_.string_value_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cord_value_, lhs_arena,
+                                       &other->_impl_.cord_value_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bytes_value_, lhs_arena,
+                                       &other->_impl_.bytes_value_, rhs_arena);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.enum_value_)
+      + sizeof(TestMessage::_impl_.enum_value_)
+      - PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.message_value_)>(
+          reinterpret_cast<char*>(&_impl_.message_value_),
+          reinterpret_cast<char*>(&other->_impl_.message_value_));
+}
+
+::google::protobuf::Metadata TestMessage::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_getter, &descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto_once,
+      file_level_metadata_eval_2ftestutil_2ftest_5fmessage_2eproto[6]);
+}
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace runtime
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+// @@protoc_insertion_point(global_scope)
+#include "google/protobuf/port_undef.inc"
diff --git a/gen/eval/testutil/test_message.pb.h b/gen/eval/testutil/test_message.pb.h
new file mode 100644
index 0000000..e581ba3
--- /dev/null
+++ b/gen/eval/testutil/test_message.pb.h
@@ -0,0 +1,3892 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: eval/testutil/test_message.proto
+
+#ifndef GOOGLE_PROTOBUF_INCLUDED_eval_2ftestutil_2ftest_5fmessage_2eproto_2epb_2eh
+#define GOOGLE_PROTOBUF_INCLUDED_eval_2ftestutil_2ftest_5fmessage_2eproto_2epb_2eh
+
+#include <limits>
+#include <string>
+#include <type_traits>
+
+#include "google/protobuf/port_def.inc"
+#if PROTOBUF_VERSION < 4024000
+#error "This file was generated by a newer version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please update"
+#error "your headers."
+#endif  // PROTOBUF_VERSION
+
+#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
+#error "This file was generated by an older version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please"
+#error "regenerate this file with a newer version of protoc."
+#endif  // PROTOBUF_MIN_PROTOC_VERSION
+#include "google/protobuf/port_undef.inc"
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/arena.h"
+#include "google/protobuf/arenastring.h"
+#include "google/protobuf/generated_message_tctable_decl.h"
+#include "google/protobuf/generated_message_util.h"
+#include "google/protobuf/metadata_lite.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/message.h"
+#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
+#include "google/protobuf/extension_set.h"  // IWYU pragma: export
+#include "google/protobuf/map.h"  // IWYU pragma: export
+#include "google/protobuf/map_entry.h"
+#include "google/protobuf/map_field_inl.h"
+#include "google/protobuf/generated_enum_reflection.h"
+#include "google/protobuf/unknown_field_set.h"
+#include "google/protobuf/any.pb.h"
+#include "google/protobuf/duration.pb.h"
+#include "google/protobuf/struct.pb.h"
+#include "google/protobuf/timestamp.pb.h"
+#include "google/protobuf/wrappers.pb.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+
+#define PROTOBUF_INTERNAL_EXPORT_eval_2ftestutil_2ftest_5fmessage_2eproto
+
+namespace google {
+namespace protobuf {
+namespace internal {
+class AnyMetadata;
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+// Internal implementation detail -- do not use these members.
+struct TableStruct_eval_2ftestutil_2ftest_5fmessage_2eproto {
+  static const ::uint32_t offsets[];
+};
+extern const ::google::protobuf::internal::DescriptorTable
+    descriptor_table_eval_2ftestutil_2ftest_5fmessage_2eproto;
+namespace google {
+namespace api {
+namespace expr {
+namespace runtime {
+class TestMessage;
+struct TestMessageDefaultTypeInternal;
+extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
+class TestMessage_BoolInt32MapEntry_DoNotUse;
+struct TestMessage_BoolInt32MapEntry_DoNotUseDefaultTypeInternal;
+extern TestMessage_BoolInt32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_BoolInt32MapEntry_DoNotUse_default_instance_;
+class TestMessage_Int32Int32MapEntry_DoNotUse;
+struct TestMessage_Int32Int32MapEntry_DoNotUseDefaultTypeInternal;
+extern TestMessage_Int32Int32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_Int32Int32MapEntry_DoNotUse_default_instance_;
+class TestMessage_Int64Int32MapEntry_DoNotUse;
+struct TestMessage_Int64Int32MapEntry_DoNotUseDefaultTypeInternal;
+extern TestMessage_Int64Int32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_Int64Int32MapEntry_DoNotUse_default_instance_;
+class TestMessage_StringInt32MapEntry_DoNotUse;
+struct TestMessage_StringInt32MapEntry_DoNotUseDefaultTypeInternal;
+extern TestMessage_StringInt32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_StringInt32MapEntry_DoNotUse_default_instance_;
+class TestMessage_Uint32Uint32MapEntry_DoNotUse;
+struct TestMessage_Uint32Uint32MapEntry_DoNotUseDefaultTypeInternal;
+extern TestMessage_Uint32Uint32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_Uint32Uint32MapEntry_DoNotUse_default_instance_;
+class TestMessage_Uint64Int32MapEntry_DoNotUse;
+struct TestMessage_Uint64Int32MapEntry_DoNotUseDefaultTypeInternal;
+extern TestMessage_Uint64Int32MapEntry_DoNotUseDefaultTypeInternal _TestMessage_Uint64Int32MapEntry_DoNotUse_default_instance_;
+}  // namespace runtime
+}  // namespace expr
+}  // namespace api
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+
+namespace google {
+namespace api {
+namespace expr {
+namespace runtime {
+enum TestMessage_TestEnum : int {
+  TestMessage_TestEnum_TEST_ENUM_UNSPECIFIED = 0,
+  TestMessage_TestEnum_TEST_ENUM_1 = 1,
+  TestMessage_TestEnum_TEST_ENUM_2 = 2,
+  TestMessage_TestEnum_TestMessage_TestEnum_INT_MIN_SENTINEL_DO_NOT_USE_ =
+      std::numeric_limits<::int32_t>::min(),
+  TestMessage_TestEnum_TestMessage_TestEnum_INT_MAX_SENTINEL_DO_NOT_USE_ =
+      std::numeric_limits<::int32_t>::max(),
+};
+
+bool TestMessage_TestEnum_IsValid(int value);
+constexpr TestMessage_TestEnum TestMessage_TestEnum_TestEnum_MIN = static_cast<TestMessage_TestEnum>(0);
+constexpr TestMessage_TestEnum TestMessage_TestEnum_TestEnum_MAX = static_cast<TestMessage_TestEnum>(2);
+constexpr int TestMessage_TestEnum_TestEnum_ARRAYSIZE = 2 + 1;
+const ::google::protobuf::EnumDescriptor*
+TestMessage_TestEnum_descriptor();
+template <typename T>
+const std::string& TestMessage_TestEnum_Name(T value) {
+  static_assert(std::is_same<T, TestMessage_TestEnum>::value ||
+                    std::is_integral<T>::value,
+                "Incorrect type passed to TestEnum_Name().");
+  return TestMessage_TestEnum_Name(static_cast<TestMessage_TestEnum>(value));
+}
+template <>
+inline const std::string& TestMessage_TestEnum_Name(TestMessage_TestEnum value) {
+  return ::google::protobuf::internal::NameOfDenseEnum<TestMessage_TestEnum_descriptor,
+                                                 0, 2>(
+      static_cast<int>(value));
+}
+inline bool TestMessage_TestEnum_Parse(absl::string_view name, TestMessage_TestEnum* value) {
+  return ::google::protobuf::internal::ParseNamedEnum<TestMessage_TestEnum>(
+      TestMessage_TestEnum_descriptor(), name, value);
+}
+enum TestEnum : int {
+  TEST_ENUM_UNSPECIFIED = 0,
+  TEST_ENUM_1 = 10,
+  TEST_ENUM_2 = 20,
+  TEST_ENUM_3 = 30,
+  TestEnum_INT_MIN_SENTINEL_DO_NOT_USE_ =
+      std::numeric_limits<::int32_t>::min(),
+  TestEnum_INT_MAX_SENTINEL_DO_NOT_USE_ =
+      std::numeric_limits<::int32_t>::max(),
+};
+
+bool TestEnum_IsValid(int value);
+constexpr TestEnum TestEnum_MIN = static_cast<TestEnum>(0);
+constexpr TestEnum TestEnum_MAX = static_cast<TestEnum>(30);
+constexpr int TestEnum_ARRAYSIZE = 30 + 1;
+const ::google::protobuf::EnumDescriptor*
+TestEnum_descriptor();
+template <typename T>
+const std::string& TestEnum_Name(T value) {
+  static_assert(std::is_same<T, TestEnum>::value ||
+                    std::is_integral<T>::value,
+                "Incorrect type passed to TestEnum_Name().");
+  return ::google::protobuf::internal::NameOfEnum(TestEnum_descriptor(), value);
+}
+inline bool TestEnum_Parse(absl::string_view name, TestEnum* value) {
+  return ::google::protobuf::internal::ParseNamedEnum<TestEnum>(
+      TestEnum_descriptor(), name, value);
+}
+
+// ===================================================================
+
+
+// -------------------------------------------------------------------
+
+class TestMessage_Int64Int32MapEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<TestMessage_Int64Int32MapEntry_DoNotUse, 
+    ::int64_t, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<TestMessage_Int64Int32MapEntry_DoNotUse, 
+    ::int64_t, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> SuperType;
+  TestMessage_Int64Int32MapEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR TestMessage_Int64Int32MapEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit TestMessage_Int64Int32MapEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const TestMessage_Int64Int32MapEntry_DoNotUse& other);
+  static const TestMessage_Int64Int32MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMessage_Int64Int32MapEntry_DoNotUse*>(&_TestMessage_Int64Int32MapEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(void*) { return true; }
+  static bool ValidateValue(void*) { return true; }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_eval_2ftestutil_2ftest_5fmessage_2eproto;
+};
+// -------------------------------------------------------------------
+
+class TestMessage_Uint64Int32MapEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<TestMessage_Uint64Int32MapEntry_DoNotUse, 
+    ::uint64_t, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<TestMessage_Uint64Int32MapEntry_DoNotUse, 
+    ::uint64_t, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> SuperType;
+  TestMessage_Uint64Int32MapEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR TestMessage_Uint64Int32MapEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit TestMessage_Uint64Int32MapEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const TestMessage_Uint64Int32MapEntry_DoNotUse& other);
+  static const TestMessage_Uint64Int32MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMessage_Uint64Int32MapEntry_DoNotUse*>(&_TestMessage_Uint64Int32MapEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(void*) { return true; }
+  static bool ValidateValue(void*) { return true; }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_eval_2ftestutil_2ftest_5fmessage_2eproto;
+};
+// -------------------------------------------------------------------
+
+class TestMessage_StringInt32MapEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<TestMessage_StringInt32MapEntry_DoNotUse, 
+    std::string, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<TestMessage_StringInt32MapEntry_DoNotUse, 
+    std::string, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> SuperType;
+  TestMessage_StringInt32MapEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR TestMessage_StringInt32MapEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit TestMessage_StringInt32MapEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const TestMessage_StringInt32MapEntry_DoNotUse& other);
+  static const TestMessage_StringInt32MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMessage_StringInt32MapEntry_DoNotUse*>(&_TestMessage_StringInt32MapEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.api.expr.runtime.TestMessage.StringInt32MapEntry.key");
+ }
+  static bool ValidateValue(void*) { return true; }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_eval_2ftestutil_2ftest_5fmessage_2eproto;
+};
+// -------------------------------------------------------------------
+
+class TestMessage_BoolInt32MapEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<TestMessage_BoolInt32MapEntry_DoNotUse, 
+    bool, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<TestMessage_BoolInt32MapEntry_DoNotUse, 
+    bool, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> SuperType;
+  TestMessage_BoolInt32MapEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR TestMessage_BoolInt32MapEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit TestMessage_BoolInt32MapEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const TestMessage_BoolInt32MapEntry_DoNotUse& other);
+  static const TestMessage_BoolInt32MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMessage_BoolInt32MapEntry_DoNotUse*>(&_TestMessage_BoolInt32MapEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(void*) { return true; }
+  static bool ValidateValue(void*) { return true; }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_eval_2ftestutil_2ftest_5fmessage_2eproto;
+};
+// -------------------------------------------------------------------
+
+class TestMessage_Int32Int32MapEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<TestMessage_Int32Int32MapEntry_DoNotUse, 
+    ::int32_t, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<TestMessage_Int32Int32MapEntry_DoNotUse, 
+    ::int32_t, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> SuperType;
+  TestMessage_Int32Int32MapEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR TestMessage_Int32Int32MapEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit TestMessage_Int32Int32MapEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const TestMessage_Int32Int32MapEntry_DoNotUse& other);
+  static const TestMessage_Int32Int32MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMessage_Int32Int32MapEntry_DoNotUse*>(&_TestMessage_Int32Int32MapEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(void*) { return true; }
+  static bool ValidateValue(void*) { return true; }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_eval_2ftestutil_2ftest_5fmessage_2eproto;
+};
+// -------------------------------------------------------------------
+
+class TestMessage_Uint32Uint32MapEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<TestMessage_Uint32Uint32MapEntry_DoNotUse, 
+    ::uint32_t, ::uint32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
+    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<TestMessage_Uint32Uint32MapEntry_DoNotUse, 
+    ::uint32_t, ::uint32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
+    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32> SuperType;
+  TestMessage_Uint32Uint32MapEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR TestMessage_Uint32Uint32MapEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit TestMessage_Uint32Uint32MapEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const TestMessage_Uint32Uint32MapEntry_DoNotUse& other);
+  static const TestMessage_Uint32Uint32MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMessage_Uint32Uint32MapEntry_DoNotUse*>(&_TestMessage_Uint32Uint32MapEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(void*) { return true; }
+  static bool ValidateValue(void*) { return true; }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_eval_2ftestutil_2ftest_5fmessage_2eproto;
+};
+// -------------------------------------------------------------------
+
+class TestMessage final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.runtime.TestMessage) */ {
+ public:
+  inline TestMessage() : TestMessage(nullptr) {}
+  ~TestMessage() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR TestMessage(::google::protobuf::internal::ConstantInitialized);
+
+  TestMessage(const TestMessage& from);
+  TestMessage(TestMessage&& from) noexcept
+    : TestMessage() {
+    *this = ::std::move(from);
+  }
+
+  inline TestMessage& operator=(const TestMessage& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline TestMessage& operator=(TestMessage&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const TestMessage& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const TestMessage* internal_default_instance() {
+    return reinterpret_cast<const TestMessage*>(
+               &_TestMessage_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    6;
+
+  friend void swap(TestMessage& a, TestMessage& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(TestMessage* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(TestMessage* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  TestMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<TestMessage>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const TestMessage& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const TestMessage& from) {
+    TestMessage::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(TestMessage* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.runtime.TestMessage";
+  }
+  protected:
+  explicit TestMessage(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+
+  using TestEnum = TestMessage_TestEnum;
+  static constexpr TestEnum TEST_ENUM_UNSPECIFIED = TestMessage_TestEnum_TEST_ENUM_UNSPECIFIED;
+  static constexpr TestEnum TEST_ENUM_1 = TestMessage_TestEnum_TEST_ENUM_1;
+  static constexpr TestEnum TEST_ENUM_2 = TestMessage_TestEnum_TEST_ENUM_2;
+  static inline bool TestEnum_IsValid(int value) {
+    return TestMessage_TestEnum_IsValid(value);
+  }
+  static constexpr TestEnum TestEnum_MIN = TestMessage_TestEnum_TestEnum_MIN;
+  static constexpr TestEnum TestEnum_MAX = TestMessage_TestEnum_TestEnum_MAX;
+  static constexpr int TestEnum_ARRAYSIZE = TestMessage_TestEnum_TestEnum_ARRAYSIZE;
+  static inline const ::google::protobuf::EnumDescriptor* TestEnum_descriptor() {
+    return TestMessage_TestEnum_descriptor();
+  }
+  template <typename T>
+  static inline const std::string& TestEnum_Name(T value) {
+    return TestMessage_TestEnum_Name(value);
+  }
+  static inline bool TestEnum_Parse(absl::string_view name, TestEnum* value) {
+    return TestMessage_TestEnum_Parse(name, value);
+  }
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kInt32ListFieldNumber = 101,
+    kInt64ListFieldNumber = 102,
+    kUint32ListFieldNumber = 103,
+    kUint64ListFieldNumber = 104,
+    kFloatListFieldNumber = 105,
+    kDoubleListFieldNumber = 106,
+    kStringListFieldNumber = 107,
+    kCordListFieldNumber = 108,
+    kBytesListFieldNumber = 109,
+    kBoolListFieldNumber = 110,
+    kEnumListFieldNumber = 111,
+    kMessageListFieldNumber = 112,
+    kInt64Int32MapFieldNumber = 201,
+    kUint64Int32MapFieldNumber = 202,
+    kStringInt32MapFieldNumber = 203,
+    kBoolInt32MapFieldNumber = 204,
+    kInt32Int32MapFieldNumber = 205,
+    kUint32Uint32MapFieldNumber = 206,
+    kStringValueFieldNumber = 7,
+    kCordValueFieldNumber = 8,
+    kBytesValueFieldNumber = 9,
+    kMessageValueFieldNumber = 12,
+    kAnyValueFieldNumber = 300,
+    kDurationValueFieldNumber = 301,
+    kTimestampValueFieldNumber = 302,
+    kStructValueFieldNumber = 303,
+    kValueValueFieldNumber = 304,
+    kInt64WrapperValueFieldNumber = 305,
+    kInt32WrapperValueFieldNumber = 306,
+    kDoubleWrapperValueFieldNumber = 307,
+    kFloatWrapperValueFieldNumber = 308,
+    kUint64WrapperValueFieldNumber = 309,
+    kUint32WrapperValueFieldNumber = 310,
+    kStringWrapperValueFieldNumber = 311,
+    kBoolWrapperValueFieldNumber = 312,
+    kBytesWrapperValueFieldNumber = 313,
+    kInt64ValueFieldNumber = 2,
+    kInt32ValueFieldNumber = 1,
+    kUint32ValueFieldNumber = 3,
+    kUint64ValueFieldNumber = 4,
+    kDoubleValueFieldNumber = 6,
+    kFloatValueFieldNumber = 5,
+    kBoolValueFieldNumber = 10,
+    kEnumValueFieldNumber = 11,
+  };
+  // repeated int32 int32_list = 101 [json_name = "int32List"];
+  int int32_list_size() const;
+  private:
+  int _internal_int32_list_size() const;
+
+  public:
+  void clear_int32_list() ;
+  ::int32_t int32_list(int index) const;
+  void set_int32_list(int index, ::int32_t value);
+  void add_int32_list(::int32_t value);
+  const ::google::protobuf::RepeatedField<::int32_t>& int32_list() const;
+  ::google::protobuf::RepeatedField<::int32_t>* mutable_int32_list();
+
+  private:
+  const ::google::protobuf::RepeatedField<::int32_t>& _internal_int32_list() const;
+  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_int32_list();
+
+  public:
+  // repeated int64 int64_list = 102 [json_name = "int64List"];
+  int int64_list_size() const;
+  private:
+  int _internal_int64_list_size() const;
+
+  public:
+  void clear_int64_list() ;
+  ::int64_t int64_list(int index) const;
+  void set_int64_list(int index, ::int64_t value);
+  void add_int64_list(::int64_t value);
+  const ::google::protobuf::RepeatedField<::int64_t>& int64_list() const;
+  ::google::protobuf::RepeatedField<::int64_t>* mutable_int64_list();
+
+  private:
+  const ::google::protobuf::RepeatedField<::int64_t>& _internal_int64_list() const;
+  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_int64_list();
+
+  public:
+  // repeated uint32 uint32_list = 103 [json_name = "uint32List"];
+  int uint32_list_size() const;
+  private:
+  int _internal_uint32_list_size() const;
+
+  public:
+  void clear_uint32_list() ;
+  ::uint32_t uint32_list(int index) const;
+  void set_uint32_list(int index, ::uint32_t value);
+  void add_uint32_list(::uint32_t value);
+  const ::google::protobuf::RepeatedField<::uint32_t>& uint32_list() const;
+  ::google::protobuf::RepeatedField<::uint32_t>* mutable_uint32_list();
+
+  private:
+  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_uint32_list() const;
+  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_uint32_list();
+
+  public:
+  // repeated uint64 uint64_list = 104 [json_name = "uint64List"];
+  int uint64_list_size() const;
+  private:
+  int _internal_uint64_list_size() const;
+
+  public:
+  void clear_uint64_list() ;
+  ::uint64_t uint64_list(int index) const;
+  void set_uint64_list(int index, ::uint64_t value);
+  void add_uint64_list(::uint64_t value);
+  const ::google::protobuf::RepeatedField<::uint64_t>& uint64_list() const;
+  ::google::protobuf::RepeatedField<::uint64_t>* mutable_uint64_list();
+
+  private:
+  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_uint64_list() const;
+  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_uint64_list();
+
+  public:
+  // repeated float float_list = 105 [json_name = "floatList"];
+  int float_list_size() const;
+  private:
+  int _internal_float_list_size() const;
+
+  public:
+  void clear_float_list() ;
+  float float_list(int index) const;
+  void set_float_list(int index, float value);
+  void add_float_list(float value);
+  const ::google::protobuf::RepeatedField<float>& float_list() const;
+  ::google::protobuf::RepeatedField<float>* mutable_float_list();
+
+  private:
+  const ::google::protobuf::RepeatedField<float>& _internal_float_list() const;
+  ::google::protobuf::RepeatedField<float>* _internal_mutable_float_list();
+
+  public:
+  // repeated double double_list = 106 [json_name = "doubleList"];
+  int double_list_size() const;
+  private:
+  int _internal_double_list_size() const;
+
+  public:
+  void clear_double_list() ;
+  double double_list(int index) const;
+  void set_double_list(int index, double value);
+  void add_double_list(double value);
+  const ::google::protobuf::RepeatedField<double>& double_list() const;
+  ::google::protobuf::RepeatedField<double>* mutable_double_list();
+
+  private:
+  const ::google::protobuf::RepeatedField<double>& _internal_double_list() const;
+  ::google::protobuf::RepeatedField<double>* _internal_mutable_double_list();
+
+  public:
+  // repeated string string_list = 107 [json_name = "stringList"];
+  int string_list_size() const;
+  private:
+  int _internal_string_list_size() const;
+
+  public:
+  void clear_string_list() ;
+  const std::string& string_list(int index) const;
+  std::string* mutable_string_list(int index);
+  void set_string_list(int index, const std::string& value);
+  void set_string_list(int index, std::string&& value);
+  void set_string_list(int index, const char* value);
+  void set_string_list(int index, const char* value, std::size_t size);
+  void set_string_list(int index, absl::string_view value);
+  std::string* add_string_list();
+  void add_string_list(const std::string& value);
+  void add_string_list(std::string&& value);
+  void add_string_list(const char* value);
+  void add_string_list(const char* value, std::size_t size);
+  void add_string_list(absl::string_view value);
+  const ::google::protobuf::RepeatedPtrField<std::string>& string_list() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* mutable_string_list();
+
+  private:
+  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_string_list() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_string_list();
+
+  public:
+  // repeated string cord_list = 108 [json_name = "cordList", ctype = CORD];
+  int cord_list_size() const;
+  private:
+  int _internal_cord_list_size() const;
+
+  public:
+  void clear_cord_list() ;
+  private:  // Hidden due to unknown ctype option.
+  const std::string& cord_list(int index) const;
+  std::string* mutable_cord_list(int index);
+  void set_cord_list(int index, const std::string& value);
+  void set_cord_list(int index, std::string&& value);
+  void set_cord_list(int index, const char* value);
+  void set_cord_list(int index, const char* value, std::size_t size);
+  void set_cord_list(int index, absl::string_view value);
+  std::string* add_cord_list();
+  void add_cord_list(const std::string& value);
+  void add_cord_list(std::string&& value);
+  void add_cord_list(const char* value);
+  void add_cord_list(const char* value, std::size_t size);
+  void add_cord_list(absl::string_view value);
+  const ::google::protobuf::RepeatedPtrField<std::string>& cord_list() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* mutable_cord_list();
+
+  private:
+  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_cord_list() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_cord_list();
+
+  public:
+  // repeated bytes bytes_list = 109 [json_name = "bytesList"];
+  int bytes_list_size() const;
+  private:
+  int _internal_bytes_list_size() const;
+
+  public:
+  void clear_bytes_list() ;
+  const std::string& bytes_list(int index) const;
+  std::string* mutable_bytes_list(int index);
+  void set_bytes_list(int index, const std::string& value);
+  void set_bytes_list(int index, std::string&& value);
+  void set_bytes_list(int index, const char* value);
+  void set_bytes_list(int index, const void* value, std::size_t size);
+  void set_bytes_list(int index, absl::string_view value);
+  std::string* add_bytes_list();
+  void add_bytes_list(const std::string& value);
+  void add_bytes_list(std::string&& value);
+  void add_bytes_list(const char* value);
+  void add_bytes_list(const void* value, std::size_t size);
+  void add_bytes_list(absl::string_view value);
+  const ::google::protobuf::RepeatedPtrField<std::string>& bytes_list() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* mutable_bytes_list();
+
+  private:
+  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_bytes_list() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_bytes_list();
+
+  public:
+  // repeated bool bool_list = 110 [json_name = "boolList"];
+  int bool_list_size() const;
+  private:
+  int _internal_bool_list_size() const;
+
+  public:
+  void clear_bool_list() ;
+  bool bool_list(int index) const;
+  void set_bool_list(int index, bool value);
+  void add_bool_list(bool value);
+  const ::google::protobuf::RepeatedField<bool>& bool_list() const;
+  ::google::protobuf::RepeatedField<bool>* mutable_bool_list();
+
+  private:
+  const ::google::protobuf::RepeatedField<bool>& _internal_bool_list() const;
+  ::google::protobuf::RepeatedField<bool>* _internal_mutable_bool_list();
+
+  public:
+  // repeated .google.api.expr.runtime.TestMessage.TestEnum enum_list = 111 [json_name = "enumList"];
+  int enum_list_size() const;
+  private:
+  int _internal_enum_list_size() const;
+
+  public:
+  void clear_enum_list() ;
+  public:
+  ::google::api::expr::runtime::TestMessage_TestEnum enum_list(int index) const;
+  void set_enum_list(int index, ::google::api::expr::runtime::TestMessage_TestEnum value);
+  void add_enum_list(::google::api::expr::runtime::TestMessage_TestEnum value);
+  const ::google::protobuf::RepeatedField<int>& enum_list() const;
+  ::google::protobuf::RepeatedField<int>* mutable_enum_list();
+
+  private:
+  const ::google::protobuf::RepeatedField<int>& _internal_enum_list() const;
+  ::google::protobuf::RepeatedField<int>* _internal_mutable_enum_list();
+
+  public:
+  // repeated .google.api.expr.runtime.TestMessage message_list = 112 [json_name = "messageList"];
+  int message_list_size() const;
+  private:
+  int _internal_message_list_size() const;
+
+  public:
+  void clear_message_list() ;
+  ::google::api::expr::runtime::TestMessage* mutable_message_list(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::runtime::TestMessage >*
+      mutable_message_list();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::runtime::TestMessage>& _internal_message_list() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::runtime::TestMessage>* _internal_mutable_message_list();
+  public:
+  const ::google::api::expr::runtime::TestMessage& message_list(int index) const;
+  ::google::api::expr::runtime::TestMessage* add_message_list();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::runtime::TestMessage >&
+      message_list() const;
+  // map<int64, int32> int64_int32_map = 201 [json_name = "int64Int32Map"];
+  int int64_int32_map_size() const;
+  private:
+  int _internal_int64_int32_map_size() const;
+
+  public:
+  void clear_int64_int32_map() ;
+  const ::google::protobuf::Map<::int64_t, ::int32_t>& int64_int32_map() const;
+  ::google::protobuf::Map<::int64_t, ::int32_t>* mutable_int64_int32_map();
+
+  private:
+  const ::google::protobuf::Map<::int64_t, ::int32_t>& _internal_int64_int32_map() const;
+  ::google::protobuf::Map<::int64_t, ::int32_t>* _internal_mutable_int64_int32_map();
+
+  public:
+  // map<uint64, int32> uint64_int32_map = 202 [json_name = "uint64Int32Map"];
+  int uint64_int32_map_size() const;
+  private:
+  int _internal_uint64_int32_map_size() const;
+
+  public:
+  void clear_uint64_int32_map() ;
+  const ::google::protobuf::Map<::uint64_t, ::int32_t>& uint64_int32_map() const;
+  ::google::protobuf::Map<::uint64_t, ::int32_t>* mutable_uint64_int32_map();
+
+  private:
+  const ::google::protobuf::Map<::uint64_t, ::int32_t>& _internal_uint64_int32_map() const;
+  ::google::protobuf::Map<::uint64_t, ::int32_t>* _internal_mutable_uint64_int32_map();
+
+  public:
+  // map<string, int32> string_int32_map = 203 [json_name = "stringInt32Map"];
+  int string_int32_map_size() const;
+  private:
+  int _internal_string_int32_map_size() const;
+
+  public:
+  void clear_string_int32_map() ;
+  const ::google::protobuf::Map<std::string, ::int32_t>& string_int32_map() const;
+  ::google::protobuf::Map<std::string, ::int32_t>* mutable_string_int32_map();
+
+  private:
+  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_string_int32_map() const;
+  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_string_int32_map();
+
+  public:
+  // map<bool, int32> bool_int32_map = 204 [json_name = "boolInt32Map"];
+  int bool_int32_map_size() const;
+  private:
+  int _internal_bool_int32_map_size() const;
+
+  public:
+  void clear_bool_int32_map() ;
+  const ::google::protobuf::Map<bool, ::int32_t>& bool_int32_map() const;
+  ::google::protobuf::Map<bool, ::int32_t>* mutable_bool_int32_map();
+
+  private:
+  const ::google::protobuf::Map<bool, ::int32_t>& _internal_bool_int32_map() const;
+  ::google::protobuf::Map<bool, ::int32_t>* _internal_mutable_bool_int32_map();
+
+  public:
+  // map<int32, int32> int32_int32_map = 205 [json_name = "int32Int32Map"];
+  int int32_int32_map_size() const;
+  private:
+  int _internal_int32_int32_map_size() const;
+
+  public:
+  void clear_int32_int32_map() ;
+  const ::google::protobuf::Map<::int32_t, ::int32_t>& int32_int32_map() const;
+  ::google::protobuf::Map<::int32_t, ::int32_t>* mutable_int32_int32_map();
+
+  private:
+  const ::google::protobuf::Map<::int32_t, ::int32_t>& _internal_int32_int32_map() const;
+  ::google::protobuf::Map<::int32_t, ::int32_t>* _internal_mutable_int32_int32_map();
+
+  public:
+  // map<uint32, uint32> uint32_uint32_map = 206 [json_name = "uint32Uint32Map"];
+  int uint32_uint32_map_size() const;
+  private:
+  int _internal_uint32_uint32_map_size() const;
+
+  public:
+  void clear_uint32_uint32_map() ;
+  const ::google::protobuf::Map<::uint32_t, ::uint32_t>& uint32_uint32_map() const;
+  ::google::protobuf::Map<::uint32_t, ::uint32_t>* mutable_uint32_uint32_map();
+
+  private:
+  const ::google::protobuf::Map<::uint32_t, ::uint32_t>& _internal_uint32_uint32_map() const;
+  ::google::protobuf::Map<::uint32_t, ::uint32_t>* _internal_mutable_uint32_uint32_map();
+
+  public:
+  // string string_value = 7 [json_name = "stringValue"];
+  void clear_string_value() ;
+  const std::string& string_value() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_string_value(Arg_&& arg, Args_... args);
+  std::string* mutable_string_value();
+  PROTOBUF_NODISCARD std::string* release_string_value();
+  void set_allocated_string_value(std::string* ptr);
+
+  private:
+  const std::string& _internal_string_value() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
+      const std::string& value);
+  std::string* _internal_mutable_string_value();
+
+  public:
+  // string cord_value = 8 [json_name = "cordValue", ctype = CORD];
+  void clear_cord_value() ;
+  private:  // Hidden due to unknown ctype option.
+  const std::string& cord_value() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_cord_value(Arg_&& arg, Args_... args);
+  std::string* mutable_cord_value();
+  PROTOBUF_NODISCARD std::string* release_cord_value();
+  void set_allocated_cord_value(std::string* ptr);
+
+  private:
+  const std::string& _internal_cord_value() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cord_value(
+      const std::string& value);
+  std::string* _internal_mutable_cord_value();
+
+  public:
+  // bytes bytes_value = 9 [json_name = "bytesValue"];
+  void clear_bytes_value() ;
+  const std::string& bytes_value() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_bytes_value(Arg_&& arg, Args_... args);
+  std::string* mutable_bytes_value();
+  PROTOBUF_NODISCARD std::string* release_bytes_value();
+  void set_allocated_bytes_value(std::string* ptr);
+
+  private:
+  const std::string& _internal_bytes_value() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(
+      const std::string& value);
+  std::string* _internal_mutable_bytes_value();
+
+  public:
+  // .google.api.expr.runtime.TestMessage message_value = 12 [json_name = "messageValue"];
+  bool has_message_value() const;
+  void clear_message_value() ;
+  const ::google::api::expr::runtime::TestMessage& message_value() const;
+  PROTOBUF_NODISCARD ::google::api::expr::runtime::TestMessage* release_message_value();
+  ::google::api::expr::runtime::TestMessage* mutable_message_value();
+  void set_allocated_message_value(::google::api::expr::runtime::TestMessage* value);
+  void unsafe_arena_set_allocated_message_value(::google::api::expr::runtime::TestMessage* value);
+  ::google::api::expr::runtime::TestMessage* unsafe_arena_release_message_value();
+
+  private:
+  const ::google::api::expr::runtime::TestMessage& _internal_message_value() const;
+  ::google::api::expr::runtime::TestMessage* _internal_mutable_message_value();
+
+  public:
+  // .google.protobuf.Any any_value = 300 [json_name = "anyValue"];
+  bool has_any_value() const;
+  void clear_any_value() ;
+  const ::google::protobuf::Any& any_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Any* release_any_value();
+  ::google::protobuf::Any* mutable_any_value();
+  void set_allocated_any_value(::google::protobuf::Any* value);
+  void unsafe_arena_set_allocated_any_value(::google::protobuf::Any* value);
+  ::google::protobuf::Any* unsafe_arena_release_any_value();
+
+  private:
+  const ::google::protobuf::Any& _internal_any_value() const;
+  ::google::protobuf::Any* _internal_mutable_any_value();
+
+  public:
+  // .google.protobuf.Duration duration_value = 301 [json_name = "durationValue"];
+  bool has_duration_value() const;
+  void clear_duration_value() ;
+  const ::google::protobuf::Duration& duration_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_duration_value();
+  ::google::protobuf::Duration* mutable_duration_value();
+  void set_allocated_duration_value(::google::protobuf::Duration* value);
+  void unsafe_arena_set_allocated_duration_value(::google::protobuf::Duration* value);
+  ::google::protobuf::Duration* unsafe_arena_release_duration_value();
+
+  private:
+  const ::google::protobuf::Duration& _internal_duration_value() const;
+  ::google::protobuf::Duration* _internal_mutable_duration_value();
+
+  public:
+  // .google.protobuf.Timestamp timestamp_value = 302 [json_name = "timestampValue"];
+  bool has_timestamp_value() const;
+  void clear_timestamp_value() ;
+  const ::google::protobuf::Timestamp& timestamp_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp_value();
+  ::google::protobuf::Timestamp* mutable_timestamp_value();
+  void set_allocated_timestamp_value(::google::protobuf::Timestamp* value);
+  void unsafe_arena_set_allocated_timestamp_value(::google::protobuf::Timestamp* value);
+  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp_value();
+
+  private:
+  const ::google::protobuf::Timestamp& _internal_timestamp_value() const;
+  ::google::protobuf::Timestamp* _internal_mutable_timestamp_value();
+
+  public:
+  // .google.protobuf.Struct struct_value = 303 [json_name = "structValue"];
+  bool has_struct_value() const;
+  void clear_struct_value() ;
+  const ::google::protobuf::Struct& struct_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_struct_value();
+  ::google::protobuf::Struct* mutable_struct_value();
+  void set_allocated_struct_value(::google::protobuf::Struct* value);
+  void unsafe_arena_set_allocated_struct_value(::google::protobuf::Struct* value);
+  ::google::protobuf::Struct* unsafe_arena_release_struct_value();
+
+  private:
+  const ::google::protobuf::Struct& _internal_struct_value() const;
+  ::google::protobuf::Struct* _internal_mutable_struct_value();
+
+  public:
+  // .google.protobuf.Value value_value = 304 [json_name = "valueValue"];
+  bool has_value_value() const;
+  void clear_value_value() ;
+  const ::google::protobuf::Value& value_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Value* release_value_value();
+  ::google::protobuf::Value* mutable_value_value();
+  void set_allocated_value_value(::google::protobuf::Value* value);
+  void unsafe_arena_set_allocated_value_value(::google::protobuf::Value* value);
+  ::google::protobuf::Value* unsafe_arena_release_value_value();
+
+  private:
+  const ::google::protobuf::Value& _internal_value_value() const;
+  ::google::protobuf::Value* _internal_mutable_value_value();
+
+  public:
+  // .google.protobuf.Int64Value int64_wrapper_value = 305 [json_name = "int64WrapperValue"];
+  bool has_int64_wrapper_value() const;
+  void clear_int64_wrapper_value() ;
+  const ::google::protobuf::Int64Value& int64_wrapper_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_int64_wrapper_value();
+  ::google::protobuf::Int64Value* mutable_int64_wrapper_value();
+  void set_allocated_int64_wrapper_value(::google::protobuf::Int64Value* value);
+  void unsafe_arena_set_allocated_int64_wrapper_value(::google::protobuf::Int64Value* value);
+  ::google::protobuf::Int64Value* unsafe_arena_release_int64_wrapper_value();
+
+  private:
+  const ::google::protobuf::Int64Value& _internal_int64_wrapper_value() const;
+  ::google::protobuf::Int64Value* _internal_mutable_int64_wrapper_value();
+
+  public:
+  // .google.protobuf.Int32Value int32_wrapper_value = 306 [json_name = "int32WrapperValue"];
+  bool has_int32_wrapper_value() const;
+  void clear_int32_wrapper_value() ;
+  const ::google::protobuf::Int32Value& int32_wrapper_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Int32Value* release_int32_wrapper_value();
+  ::google::protobuf::Int32Value* mutable_int32_wrapper_value();
+  void set_allocated_int32_wrapper_value(::google::protobuf::Int32Value* value);
+  void unsafe_arena_set_allocated_int32_wrapper_value(::google::protobuf::Int32Value* value);
+  ::google::protobuf::Int32Value* unsafe_arena_release_int32_wrapper_value();
+
+  private:
+  const ::google::protobuf::Int32Value& _internal_int32_wrapper_value() const;
+  ::google::protobuf::Int32Value* _internal_mutable_int32_wrapper_value();
+
+  public:
+  // .google.protobuf.DoubleValue double_wrapper_value = 307 [json_name = "doubleWrapperValue"];
+  bool has_double_wrapper_value() const;
+  void clear_double_wrapper_value() ;
+  const ::google::protobuf::DoubleValue& double_wrapper_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::DoubleValue* release_double_wrapper_value();
+  ::google::protobuf::DoubleValue* mutable_double_wrapper_value();
+  void set_allocated_double_wrapper_value(::google::protobuf::DoubleValue* value);
+  void unsafe_arena_set_allocated_double_wrapper_value(::google::protobuf::DoubleValue* value);
+  ::google::protobuf::DoubleValue* unsafe_arena_release_double_wrapper_value();
+
+  private:
+  const ::google::protobuf::DoubleValue& _internal_double_wrapper_value() const;
+  ::google::protobuf::DoubleValue* _internal_mutable_double_wrapper_value();
+
+  public:
+  // .google.protobuf.FloatValue float_wrapper_value = 308 [json_name = "floatWrapperValue"];
+  bool has_float_wrapper_value() const;
+  void clear_float_wrapper_value() ;
+  const ::google::protobuf::FloatValue& float_wrapper_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::FloatValue* release_float_wrapper_value();
+  ::google::protobuf::FloatValue* mutable_float_wrapper_value();
+  void set_allocated_float_wrapper_value(::google::protobuf::FloatValue* value);
+  void unsafe_arena_set_allocated_float_wrapper_value(::google::protobuf::FloatValue* value);
+  ::google::protobuf::FloatValue* unsafe_arena_release_float_wrapper_value();
+
+  private:
+  const ::google::protobuf::FloatValue& _internal_float_wrapper_value() const;
+  ::google::protobuf::FloatValue* _internal_mutable_float_wrapper_value();
+
+  public:
+  // .google.protobuf.UInt64Value uint64_wrapper_value = 309 [json_name = "uint64WrapperValue"];
+  bool has_uint64_wrapper_value() const;
+  void clear_uint64_wrapper_value() ;
+  const ::google::protobuf::UInt64Value& uint64_wrapper_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::UInt64Value* release_uint64_wrapper_value();
+  ::google::protobuf::UInt64Value* mutable_uint64_wrapper_value();
+  void set_allocated_uint64_wrapper_value(::google::protobuf::UInt64Value* value);
+  void unsafe_arena_set_allocated_uint64_wrapper_value(::google::protobuf::UInt64Value* value);
+  ::google::protobuf::UInt64Value* unsafe_arena_release_uint64_wrapper_value();
+
+  private:
+  const ::google::protobuf::UInt64Value& _internal_uint64_wrapper_value() const;
+  ::google::protobuf::UInt64Value* _internal_mutable_uint64_wrapper_value();
+
+  public:
+  // .google.protobuf.UInt32Value uint32_wrapper_value = 310 [json_name = "uint32WrapperValue"];
+  bool has_uint32_wrapper_value() const;
+  void clear_uint32_wrapper_value() ;
+  const ::google::protobuf::UInt32Value& uint32_wrapper_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::UInt32Value* release_uint32_wrapper_value();
+  ::google::protobuf::UInt32Value* mutable_uint32_wrapper_value();
+  void set_allocated_uint32_wrapper_value(::google::protobuf::UInt32Value* value);
+  void unsafe_arena_set_allocated_uint32_wrapper_value(::google::protobuf::UInt32Value* value);
+  ::google::protobuf::UInt32Value* unsafe_arena_release_uint32_wrapper_value();
+
+  private:
+  const ::google::protobuf::UInt32Value& _internal_uint32_wrapper_value() const;
+  ::google::protobuf::UInt32Value* _internal_mutable_uint32_wrapper_value();
+
+  public:
+  // .google.protobuf.StringValue string_wrapper_value = 311 [json_name = "stringWrapperValue"];
+  bool has_string_wrapper_value() const;
+  void clear_string_wrapper_value() ;
+  const ::google::protobuf::StringValue& string_wrapper_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::StringValue* release_string_wrapper_value();
+  ::google::protobuf::StringValue* mutable_string_wrapper_value();
+  void set_allocated_string_wrapper_value(::google::protobuf::StringValue* value);
+  void unsafe_arena_set_allocated_string_wrapper_value(::google::protobuf::StringValue* value);
+  ::google::protobuf::StringValue* unsafe_arena_release_string_wrapper_value();
+
+  private:
+  const ::google::protobuf::StringValue& _internal_string_wrapper_value() const;
+  ::google::protobuf::StringValue* _internal_mutable_string_wrapper_value();
+
+  public:
+  // .google.protobuf.BoolValue bool_wrapper_value = 312 [json_name = "boolWrapperValue"];
+  bool has_bool_wrapper_value() const;
+  void clear_bool_wrapper_value() ;
+  const ::google::protobuf::BoolValue& bool_wrapper_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::BoolValue* release_bool_wrapper_value();
+  ::google::protobuf::BoolValue* mutable_bool_wrapper_value();
+  void set_allocated_bool_wrapper_value(::google::protobuf::BoolValue* value);
+  void unsafe_arena_set_allocated_bool_wrapper_value(::google::protobuf::BoolValue* value);
+  ::google::protobuf::BoolValue* unsafe_arena_release_bool_wrapper_value();
+
+  private:
+  const ::google::protobuf::BoolValue& _internal_bool_wrapper_value() const;
+  ::google::protobuf::BoolValue* _internal_mutable_bool_wrapper_value();
+
+  public:
+  // .google.protobuf.BytesValue bytes_wrapper_value = 313 [json_name = "bytesWrapperValue"];
+  bool has_bytes_wrapper_value() const;
+  void clear_bytes_wrapper_value() ;
+  const ::google::protobuf::BytesValue& bytes_wrapper_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::BytesValue* release_bytes_wrapper_value();
+  ::google::protobuf::BytesValue* mutable_bytes_wrapper_value();
+  void set_allocated_bytes_wrapper_value(::google::protobuf::BytesValue* value);
+  void unsafe_arena_set_allocated_bytes_wrapper_value(::google::protobuf::BytesValue* value);
+  ::google::protobuf::BytesValue* unsafe_arena_release_bytes_wrapper_value();
+
+  private:
+  const ::google::protobuf::BytesValue& _internal_bytes_wrapper_value() const;
+  ::google::protobuf::BytesValue* _internal_mutable_bytes_wrapper_value();
+
+  public:
+  // int64 int64_value = 2 [json_name = "int64Value"];
+  void clear_int64_value() ;
+  ::int64_t int64_value() const;
+  void set_int64_value(::int64_t value);
+
+  private:
+  ::int64_t _internal_int64_value() const;
+  void _internal_set_int64_value(::int64_t value);
+
+  public:
+  // int32 int32_value = 1 [json_name = "int32Value"];
+  void clear_int32_value() ;
+  ::int32_t int32_value() const;
+  void set_int32_value(::int32_t value);
+
+  private:
+  ::int32_t _internal_int32_value() const;
+  void _internal_set_int32_value(::int32_t value);
+
+  public:
+  // uint32 uint32_value = 3 [json_name = "uint32Value"];
+  void clear_uint32_value() ;
+  ::uint32_t uint32_value() const;
+  void set_uint32_value(::uint32_t value);
+
+  private:
+  ::uint32_t _internal_uint32_value() const;
+  void _internal_set_uint32_value(::uint32_t value);
+
+  public:
+  // uint64 uint64_value = 4 [json_name = "uint64Value"];
+  void clear_uint64_value() ;
+  ::uint64_t uint64_value() const;
+  void set_uint64_value(::uint64_t value);
+
+  private:
+  ::uint64_t _internal_uint64_value() const;
+  void _internal_set_uint64_value(::uint64_t value);
+
+  public:
+  // double double_value = 6 [json_name = "doubleValue"];
+  void clear_double_value() ;
+  double double_value() const;
+  void set_double_value(double value);
+
+  private:
+  double _internal_double_value() const;
+  void _internal_set_double_value(double value);
+
+  public:
+  // float float_value = 5 [json_name = "floatValue"];
+  void clear_float_value() ;
+  float float_value() const;
+  void set_float_value(float value);
+
+  private:
+  float _internal_float_value() const;
+  void _internal_set_float_value(float value);
+
+  public:
+  // bool bool_value = 10 [json_name = "boolValue"];
+  void clear_bool_value() ;
+  bool bool_value() const;
+  void set_bool_value(bool value);
+
+  private:
+  bool _internal_bool_value() const;
+  void _internal_set_bool_value(bool value);
+
+  public:
+  // .google.api.expr.runtime.TestMessage.TestEnum enum_value = 11 [json_name = "enumValue"];
+  void clear_enum_value() ;
+  ::google::api::expr::runtime::TestMessage_TestEnum enum_value() const;
+  void set_enum_value(::google::api::expr::runtime::TestMessage_TestEnum value);
+
+  private:
+  ::google::api::expr::runtime::TestMessage_TestEnum _internal_enum_value() const;
+  void _internal_set_enum_value(::google::api::expr::runtime::TestMessage_TestEnum value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.runtime.TestMessage)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<5, 44, 22, 142, 17> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::RepeatedField<::int32_t> int32_list_;
+    mutable ::google::protobuf::internal::CachedSize _int32_list_cached_byte_size_;
+    ::google::protobuf::RepeatedField<::int64_t> int64_list_;
+    mutable ::google::protobuf::internal::CachedSize _int64_list_cached_byte_size_;
+    ::google::protobuf::RepeatedField<::uint32_t> uint32_list_;
+    mutable ::google::protobuf::internal::CachedSize _uint32_list_cached_byte_size_;
+    ::google::protobuf::RepeatedField<::uint64_t> uint64_list_;
+    mutable ::google::protobuf::internal::CachedSize _uint64_list_cached_byte_size_;
+    ::google::protobuf::RepeatedField<float> float_list_;
+    ::google::protobuf::RepeatedField<double> double_list_;
+    ::google::protobuf::RepeatedPtrField<std::string> string_list_;
+    ::google::protobuf::RepeatedPtrField<std::string> cord_list_;
+    ::google::protobuf::RepeatedPtrField<std::string> bytes_list_;
+    ::google::protobuf::RepeatedField<bool> bool_list_;
+    ::google::protobuf::RepeatedField<int> enum_list_;
+    mutable ::google::protobuf::internal::CachedSize _enum_list_cached_byte_size_;
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::runtime::TestMessage > message_list_;
+    ::google::protobuf::internal::MapField<TestMessage_Int64Int32MapEntry_DoNotUse, ::int64_t, ::int32_t,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
+        int64_int32_map_;
+    ::google::protobuf::internal::MapField<TestMessage_Uint64Int32MapEntry_DoNotUse, ::uint64_t, ::int32_t,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
+        uint64_int32_map_;
+    ::google::protobuf::internal::MapField<TestMessage_StringInt32MapEntry_DoNotUse, std::string, ::int32_t,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
+        string_int32_map_;
+    ::google::protobuf::internal::MapField<TestMessage_BoolInt32MapEntry_DoNotUse, bool, ::int32_t,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
+        bool_int32_map_;
+    ::google::protobuf::internal::MapField<TestMessage_Int32Int32MapEntry_DoNotUse, ::int32_t, ::int32_t,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
+        int32_int32_map_;
+    ::google::protobuf::internal::MapField<TestMessage_Uint32Uint32MapEntry_DoNotUse, ::uint32_t, ::uint32_t,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>
+        uint32_uint32_map_;
+    ::google::protobuf::internal::ArenaStringPtr string_value_;
+    ::google::protobuf::internal::ArenaStringPtr cord_value_;
+    ::google::protobuf::internal::ArenaStringPtr bytes_value_;
+    ::google::api::expr::runtime::TestMessage* message_value_;
+    ::google::protobuf::Any* any_value_;
+    ::google::protobuf::Duration* duration_value_;
+    ::google::protobuf::Timestamp* timestamp_value_;
+    ::google::protobuf::Struct* struct_value_;
+    ::google::protobuf::Value* value_value_;
+    ::google::protobuf::Int64Value* int64_wrapper_value_;
+    ::google::protobuf::Int32Value* int32_wrapper_value_;
+    ::google::protobuf::DoubleValue* double_wrapper_value_;
+    ::google::protobuf::FloatValue* float_wrapper_value_;
+    ::google::protobuf::UInt64Value* uint64_wrapper_value_;
+    ::google::protobuf::UInt32Value* uint32_wrapper_value_;
+    ::google::protobuf::StringValue* string_wrapper_value_;
+    ::google::protobuf::BoolValue* bool_wrapper_value_;
+    ::google::protobuf::BytesValue* bytes_wrapper_value_;
+    ::int64_t int64_value_;
+    ::int32_t int32_value_;
+    ::uint32_t uint32_value_;
+    ::uint64_t uint64_value_;
+    double double_value_;
+    float float_value_;
+    bool bool_value_;
+    int enum_value_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_eval_2ftestutil_2ftest_5fmessage_2eproto;
+};
+
+// ===================================================================
+
+
+
+
+// ===================================================================
+
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif  // __GNUC__
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// TestMessage
+
+// int32 int32_value = 1 [json_name = "int32Value"];
+inline void TestMessage::clear_int32_value() {
+  _impl_.int32_value_ = 0;
+}
+inline ::int32_t TestMessage::int32_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.int32_value)
+  return _internal_int32_value();
+}
+inline void TestMessage::set_int32_value(::int32_t value) {
+  _internal_set_int32_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.int32_value)
+}
+inline ::int32_t TestMessage::_internal_int32_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.int32_value_;
+}
+inline void TestMessage::_internal_set_int32_value(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.int32_value_ = value;
+}
+
+// int64 int64_value = 2 [json_name = "int64Value"];
+inline void TestMessage::clear_int64_value() {
+  _impl_.int64_value_ = ::int64_t{0};
+}
+inline ::int64_t TestMessage::int64_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.int64_value)
+  return _internal_int64_value();
+}
+inline void TestMessage::set_int64_value(::int64_t value) {
+  _internal_set_int64_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.int64_value)
+}
+inline ::int64_t TestMessage::_internal_int64_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.int64_value_;
+}
+inline void TestMessage::_internal_set_int64_value(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.int64_value_ = value;
+}
+
+// uint32 uint32_value = 3 [json_name = "uint32Value"];
+inline void TestMessage::clear_uint32_value() {
+  _impl_.uint32_value_ = 0u;
+}
+inline ::uint32_t TestMessage::uint32_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.uint32_value)
+  return _internal_uint32_value();
+}
+inline void TestMessage::set_uint32_value(::uint32_t value) {
+  _internal_set_uint32_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.uint32_value)
+}
+inline ::uint32_t TestMessage::_internal_uint32_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.uint32_value_;
+}
+inline void TestMessage::_internal_set_uint32_value(::uint32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.uint32_value_ = value;
+}
+
+// uint64 uint64_value = 4 [json_name = "uint64Value"];
+inline void TestMessage::clear_uint64_value() {
+  _impl_.uint64_value_ = ::uint64_t{0u};
+}
+inline ::uint64_t TestMessage::uint64_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.uint64_value)
+  return _internal_uint64_value();
+}
+inline void TestMessage::set_uint64_value(::uint64_t value) {
+  _internal_set_uint64_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.uint64_value)
+}
+inline ::uint64_t TestMessage::_internal_uint64_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.uint64_value_;
+}
+inline void TestMessage::_internal_set_uint64_value(::uint64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.uint64_value_ = value;
+}
+
+// float float_value = 5 [json_name = "floatValue"];
+inline void TestMessage::clear_float_value() {
+  _impl_.float_value_ = 0;
+}
+inline float TestMessage::float_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.float_value)
+  return _internal_float_value();
+}
+inline void TestMessage::set_float_value(float value) {
+  _internal_set_float_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.float_value)
+}
+inline float TestMessage::_internal_float_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.float_value_;
+}
+inline void TestMessage::_internal_set_float_value(float value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.float_value_ = value;
+}
+
+// double double_value = 6 [json_name = "doubleValue"];
+inline void TestMessage::clear_double_value() {
+  _impl_.double_value_ = 0;
+}
+inline double TestMessage::double_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.double_value)
+  return _internal_double_value();
+}
+inline void TestMessage::set_double_value(double value) {
+  _internal_set_double_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.double_value)
+}
+inline double TestMessage::_internal_double_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.double_value_;
+}
+inline void TestMessage::_internal_set_double_value(double value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.double_value_ = value;
+}
+
+// string string_value = 7 [json_name = "stringValue"];
+inline void TestMessage::clear_string_value() {
+  _impl_.string_value_.ClearToEmpty();
+}
+inline const std::string& TestMessage::string_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.string_value)
+  return _internal_string_value();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void TestMessage::set_string_value(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.string_value)
+}
+inline std::string* TestMessage::mutable_string_value() {
+  std::string* _s = _internal_mutable_string_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.string_value)
+  return _s;
+}
+inline const std::string& TestMessage::_internal_string_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.string_value_.Get();
+}
+inline void TestMessage::_internal_set_string_value(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.string_value_.Set(value, GetArenaForAllocation());
+}
+inline std::string* TestMessage::_internal_mutable_string_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.string_value_.Mutable( GetArenaForAllocation());
+}
+inline std::string* TestMessage::release_string_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.string_value)
+  return _impl_.string_value_.Release();
+}
+inline void TestMessage::set_allocated_string_value(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.string_value_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.string_value_.IsDefault()) {
+          _impl_.string_value_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.string_value)
+}
+
+// string cord_value = 8 [json_name = "cordValue", ctype = CORD];
+inline void TestMessage::clear_cord_value() {
+  _impl_.cord_value_.ClearToEmpty();
+}
+inline const std::string& TestMessage::cord_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.cord_value)
+  return _internal_cord_value();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void TestMessage::set_cord_value(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.cord_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.cord_value)
+}
+inline std::string* TestMessage::mutable_cord_value() {
+  std::string* _s = _internal_mutable_cord_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.cord_value)
+  return _s;
+}
+inline const std::string& TestMessage::_internal_cord_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.cord_value_.Get();
+}
+inline void TestMessage::_internal_set_cord_value(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.cord_value_.Set(value, GetArenaForAllocation());
+}
+inline std::string* TestMessage::_internal_mutable_cord_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.cord_value_.Mutable( GetArenaForAllocation());
+}
+inline std::string* TestMessage::release_cord_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.cord_value)
+  return _impl_.cord_value_.Release();
+}
+inline void TestMessage::set_allocated_cord_value(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.cord_value_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.cord_value_.IsDefault()) {
+          _impl_.cord_value_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.cord_value)
+}
+
+// bytes bytes_value = 9 [json_name = "bytesValue"];
+inline void TestMessage::clear_bytes_value() {
+  _impl_.bytes_value_.ClearToEmpty();
+}
+inline const std::string& TestMessage::bytes_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.bytes_value)
+  return _internal_bytes_value();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void TestMessage::set_bytes_value(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.bytes_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.bytes_value)
+}
+inline std::string* TestMessage::mutable_bytes_value() {
+  std::string* _s = _internal_mutable_bytes_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.bytes_value)
+  return _s;
+}
+inline const std::string& TestMessage::_internal_bytes_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.bytes_value_.Get();
+}
+inline void TestMessage::_internal_set_bytes_value(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.bytes_value_.Set(value, GetArenaForAllocation());
+}
+inline std::string* TestMessage::_internal_mutable_bytes_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.bytes_value_.Mutable( GetArenaForAllocation());
+}
+inline std::string* TestMessage::release_bytes_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.bytes_value)
+  return _impl_.bytes_value_.Release();
+}
+inline void TestMessage::set_allocated_bytes_value(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.bytes_value_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.bytes_value_.IsDefault()) {
+          _impl_.bytes_value_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.bytes_value)
+}
+
+// bool bool_value = 10 [json_name = "boolValue"];
+inline void TestMessage::clear_bool_value() {
+  _impl_.bool_value_ = false;
+}
+inline bool TestMessage::bool_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.bool_value)
+  return _internal_bool_value();
+}
+inline void TestMessage::set_bool_value(bool value) {
+  _internal_set_bool_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.bool_value)
+}
+inline bool TestMessage::_internal_bool_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.bool_value_;
+}
+inline void TestMessage::_internal_set_bool_value(bool value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.bool_value_ = value;
+}
+
+// .google.api.expr.runtime.TestMessage.TestEnum enum_value = 11 [json_name = "enumValue"];
+inline void TestMessage::clear_enum_value() {
+  _impl_.enum_value_ = 0;
+}
+inline ::google::api::expr::runtime::TestMessage_TestEnum TestMessage::enum_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.enum_value)
+  return _internal_enum_value();
+}
+inline void TestMessage::set_enum_value(::google::api::expr::runtime::TestMessage_TestEnum value) {
+  _internal_set_enum_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.enum_value)
+}
+inline ::google::api::expr::runtime::TestMessage_TestEnum TestMessage::_internal_enum_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return static_cast<::google::api::expr::runtime::TestMessage_TestEnum>(_impl_.enum_value_);
+}
+inline void TestMessage::_internal_set_enum_value(::google::api::expr::runtime::TestMessage_TestEnum value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.enum_value_ = value;
+}
+
+// .google.api.expr.runtime.TestMessage message_value = 12 [json_name = "messageValue"];
+inline bool TestMessage::has_message_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.message_value_ != nullptr);
+  return value;
+}
+inline void TestMessage::clear_message_value() {
+  if (_impl_.message_value_ != nullptr) _impl_.message_value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::runtime::TestMessage& TestMessage::_internal_message_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::runtime::TestMessage* p = _impl_.message_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::runtime::TestMessage&>(::google::api::expr::runtime::_TestMessage_default_instance_);
+}
+inline const ::google::api::expr::runtime::TestMessage& TestMessage::message_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.message_value)
+  return _internal_message_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_message_value(::google::api::expr::runtime::TestMessage* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_value_);
+  }
+  _impl_.message_value_ = reinterpret_cast<::google::api::expr::runtime::TestMessage*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.message_value)
+}
+inline ::google::api::expr::runtime::TestMessage* TestMessage::release_message_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::runtime::TestMessage* released = _impl_.message_value_;
+  _impl_.message_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::runtime::TestMessage* TestMessage::unsafe_arena_release_message_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.message_value)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::runtime::TestMessage* temp = _impl_.message_value_;
+  _impl_.message_value_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::runtime::TestMessage* TestMessage::_internal_mutable_message_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.message_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::runtime::TestMessage>(GetArenaForAllocation());
+    _impl_.message_value_ = reinterpret_cast<::google::api::expr::runtime::TestMessage*>(p);
+  }
+  return _impl_.message_value_;
+}
+inline ::google::api::expr::runtime::TestMessage* TestMessage::mutable_message_value() {
+  ::google::api::expr::runtime::TestMessage* _msg = _internal_mutable_message_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.message_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_message_value(::google::api::expr::runtime::TestMessage* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::runtime::TestMessage*>(_impl_.message_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::runtime::TestMessage*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.message_value_ = reinterpret_cast<::google::api::expr::runtime::TestMessage*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.message_value)
+}
+
+// repeated int32 int32_list = 101 [json_name = "int32List"];
+inline int TestMessage::_internal_int32_list_size() const {
+  return _internal_int32_list().size();
+}
+inline int TestMessage::int32_list_size() const {
+  return _internal_int32_list_size();
+}
+inline void TestMessage::clear_int32_list() {
+  _internal_mutable_int32_list()->Clear();
+}
+inline ::int32_t TestMessage::int32_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.int32_list)
+  return _internal_int32_list().Get(index);
+}
+inline void TestMessage::set_int32_list(int index, ::int32_t value) {
+  _internal_mutable_int32_list()->Set(index, value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.int32_list)
+}
+inline void TestMessage::add_int32_list(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_int32_list()->Add(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.int32_list)
+}
+inline const ::google::protobuf::RepeatedField<::int32_t>& TestMessage::int32_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.int32_list)
+  return _internal_int32_list();
+}
+inline ::google::protobuf::RepeatedField<::int32_t>* TestMessage::mutable_int32_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.int32_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_int32_list();
+}
+
+inline const ::google::protobuf::RepeatedField<::int32_t>& TestMessage::_internal_int32_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.int32_list_;
+}
+inline ::google::protobuf::RepeatedField<::int32_t>* TestMessage::_internal_mutable_int32_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.int32_list_;
+}
+
+// repeated int64 int64_list = 102 [json_name = "int64List"];
+inline int TestMessage::_internal_int64_list_size() const {
+  return _internal_int64_list().size();
+}
+inline int TestMessage::int64_list_size() const {
+  return _internal_int64_list_size();
+}
+inline void TestMessage::clear_int64_list() {
+  _internal_mutable_int64_list()->Clear();
+}
+inline ::int64_t TestMessage::int64_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.int64_list)
+  return _internal_int64_list().Get(index);
+}
+inline void TestMessage::set_int64_list(int index, ::int64_t value) {
+  _internal_mutable_int64_list()->Set(index, value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.int64_list)
+}
+inline void TestMessage::add_int64_list(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_int64_list()->Add(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.int64_list)
+}
+inline const ::google::protobuf::RepeatedField<::int64_t>& TestMessage::int64_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.int64_list)
+  return _internal_int64_list();
+}
+inline ::google::protobuf::RepeatedField<::int64_t>* TestMessage::mutable_int64_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.int64_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_int64_list();
+}
+
+inline const ::google::protobuf::RepeatedField<::int64_t>& TestMessage::_internal_int64_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.int64_list_;
+}
+inline ::google::protobuf::RepeatedField<::int64_t>* TestMessage::_internal_mutable_int64_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.int64_list_;
+}
+
+// repeated uint32 uint32_list = 103 [json_name = "uint32List"];
+inline int TestMessage::_internal_uint32_list_size() const {
+  return _internal_uint32_list().size();
+}
+inline int TestMessage::uint32_list_size() const {
+  return _internal_uint32_list_size();
+}
+inline void TestMessage::clear_uint32_list() {
+  _internal_mutable_uint32_list()->Clear();
+}
+inline ::uint32_t TestMessage::uint32_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.uint32_list)
+  return _internal_uint32_list().Get(index);
+}
+inline void TestMessage::set_uint32_list(int index, ::uint32_t value) {
+  _internal_mutable_uint32_list()->Set(index, value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.uint32_list)
+}
+inline void TestMessage::add_uint32_list(::uint32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_uint32_list()->Add(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.uint32_list)
+}
+inline const ::google::protobuf::RepeatedField<::uint32_t>& TestMessage::uint32_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.uint32_list)
+  return _internal_uint32_list();
+}
+inline ::google::protobuf::RepeatedField<::uint32_t>* TestMessage::mutable_uint32_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.uint32_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_uint32_list();
+}
+
+inline const ::google::protobuf::RepeatedField<::uint32_t>& TestMessage::_internal_uint32_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.uint32_list_;
+}
+inline ::google::protobuf::RepeatedField<::uint32_t>* TestMessage::_internal_mutable_uint32_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.uint32_list_;
+}
+
+// repeated uint64 uint64_list = 104 [json_name = "uint64List"];
+inline int TestMessage::_internal_uint64_list_size() const {
+  return _internal_uint64_list().size();
+}
+inline int TestMessage::uint64_list_size() const {
+  return _internal_uint64_list_size();
+}
+inline void TestMessage::clear_uint64_list() {
+  _internal_mutable_uint64_list()->Clear();
+}
+inline ::uint64_t TestMessage::uint64_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.uint64_list)
+  return _internal_uint64_list().Get(index);
+}
+inline void TestMessage::set_uint64_list(int index, ::uint64_t value) {
+  _internal_mutable_uint64_list()->Set(index, value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.uint64_list)
+}
+inline void TestMessage::add_uint64_list(::uint64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_uint64_list()->Add(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.uint64_list)
+}
+inline const ::google::protobuf::RepeatedField<::uint64_t>& TestMessage::uint64_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.uint64_list)
+  return _internal_uint64_list();
+}
+inline ::google::protobuf::RepeatedField<::uint64_t>* TestMessage::mutable_uint64_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.uint64_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_uint64_list();
+}
+
+inline const ::google::protobuf::RepeatedField<::uint64_t>& TestMessage::_internal_uint64_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.uint64_list_;
+}
+inline ::google::protobuf::RepeatedField<::uint64_t>* TestMessage::_internal_mutable_uint64_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.uint64_list_;
+}
+
+// repeated float float_list = 105 [json_name = "floatList"];
+inline int TestMessage::_internal_float_list_size() const {
+  return _internal_float_list().size();
+}
+inline int TestMessage::float_list_size() const {
+  return _internal_float_list_size();
+}
+inline void TestMessage::clear_float_list() {
+  _internal_mutable_float_list()->Clear();
+}
+inline float TestMessage::float_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.float_list)
+  return _internal_float_list().Get(index);
+}
+inline void TestMessage::set_float_list(int index, float value) {
+  _internal_mutable_float_list()->Set(index, value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.float_list)
+}
+inline void TestMessage::add_float_list(float value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_float_list()->Add(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.float_list)
+}
+inline const ::google::protobuf::RepeatedField<float>& TestMessage::float_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.float_list)
+  return _internal_float_list();
+}
+inline ::google::protobuf::RepeatedField<float>* TestMessage::mutable_float_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.float_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_float_list();
+}
+
+inline const ::google::protobuf::RepeatedField<float>& TestMessage::_internal_float_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.float_list_;
+}
+inline ::google::protobuf::RepeatedField<float>* TestMessage::_internal_mutable_float_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.float_list_;
+}
+
+// repeated double double_list = 106 [json_name = "doubleList"];
+inline int TestMessage::_internal_double_list_size() const {
+  return _internal_double_list().size();
+}
+inline int TestMessage::double_list_size() const {
+  return _internal_double_list_size();
+}
+inline void TestMessage::clear_double_list() {
+  _internal_mutable_double_list()->Clear();
+}
+inline double TestMessage::double_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.double_list)
+  return _internal_double_list().Get(index);
+}
+inline void TestMessage::set_double_list(int index, double value) {
+  _internal_mutable_double_list()->Set(index, value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.double_list)
+}
+inline void TestMessage::add_double_list(double value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_double_list()->Add(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.double_list)
+}
+inline const ::google::protobuf::RepeatedField<double>& TestMessage::double_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.double_list)
+  return _internal_double_list();
+}
+inline ::google::protobuf::RepeatedField<double>* TestMessage::mutable_double_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.double_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_double_list();
+}
+
+inline const ::google::protobuf::RepeatedField<double>& TestMessage::_internal_double_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.double_list_;
+}
+inline ::google::protobuf::RepeatedField<double>* TestMessage::_internal_mutable_double_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.double_list_;
+}
+
+// repeated string string_list = 107 [json_name = "stringList"];
+inline int TestMessage::_internal_string_list_size() const {
+  return _internal_string_list().size();
+}
+inline int TestMessage::string_list_size() const {
+  return _internal_string_list_size();
+}
+inline void TestMessage::clear_string_list() {
+  _internal_mutable_string_list()->Clear();
+}
+inline std::string* TestMessage::add_string_list() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  std::string* _s = _internal_mutable_string_list()->Add();
+  // @@protoc_insertion_point(field_add_mutable:google.api.expr.runtime.TestMessage.string_list)
+  return _s;
+}
+inline const std::string& TestMessage::string_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.string_list)
+  return _internal_string_list().Get(index);
+}
+inline std::string* TestMessage::mutable_string_list(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.string_list)
+  return _internal_mutable_string_list()->Mutable(index);
+}
+inline void TestMessage::set_string_list(int index, const std::string& value) {
+  _internal_mutable_string_list()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.string_list)
+}
+inline void TestMessage::set_string_list(int index, std::string&& value) {
+  _internal_mutable_string_list()->Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.string_list)
+}
+inline void TestMessage::set_string_list(int index, const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  _internal_mutable_string_list()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set_char:google.api.expr.runtime.TestMessage.string_list)
+}
+inline void TestMessage::set_string_list(int index, const char* value,
+                              std::size_t size) {
+  _internal_mutable_string_list()->Mutable(index)->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_set_pointer:google.api.expr.runtime.TestMessage.string_list)
+}
+inline void TestMessage::set_string_list(int index, absl::string_view value) {
+  _internal_mutable_string_list()->Mutable(index)->assign(value.data(),
+                                                     value.size());
+  // @@protoc_insertion_point(field_set_string_piece:google.api.expr.runtime.TestMessage.string_list)
+}
+inline void TestMessage::add_string_list(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_string_list()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.string_list)
+}
+inline void TestMessage::add_string_list(std::string&& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_string_list()->Add(std::move(value));
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.string_list)
+}
+inline void TestMessage::add_string_list(const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_string_list()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add_char:google.api.expr.runtime.TestMessage.string_list)
+}
+inline void TestMessage::add_string_list(const char* value, std::size_t size) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_string_list()->Add()->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_add_pointer:google.api.expr.runtime.TestMessage.string_list)
+}
+inline void TestMessage::add_string_list(absl::string_view value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_string_list()->Add()->assign(value.data(), value.size());
+  // @@protoc_insertion_point(field_add_string_piece:google.api.expr.runtime.TestMessage.string_list)
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+TestMessage::string_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.string_list)
+  return _internal_string_list();
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>* TestMessage::mutable_string_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.string_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_string_list();
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+TestMessage::_internal_string_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.string_list_;
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>*
+TestMessage::_internal_mutable_string_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.string_list_;
+}
+
+// repeated string cord_list = 108 [json_name = "cordList", ctype = CORD];
+inline int TestMessage::_internal_cord_list_size() const {
+  return _internal_cord_list().size();
+}
+inline int TestMessage::cord_list_size() const {
+  return _internal_cord_list_size();
+}
+inline void TestMessage::clear_cord_list() {
+  _internal_mutable_cord_list()->Clear();
+}
+inline std::string* TestMessage::add_cord_list() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  std::string* _s = _internal_mutable_cord_list()->Add();
+  // @@protoc_insertion_point(field_add_mutable:google.api.expr.runtime.TestMessage.cord_list)
+  return _s;
+}
+inline const std::string& TestMessage::cord_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.cord_list)
+  return _internal_cord_list().Get(index);
+}
+inline std::string* TestMessage::mutable_cord_list(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.cord_list)
+  return _internal_mutable_cord_list()->Mutable(index);
+}
+inline void TestMessage::set_cord_list(int index, const std::string& value) {
+  _internal_mutable_cord_list()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.cord_list)
+}
+inline void TestMessage::set_cord_list(int index, std::string&& value) {
+  _internal_mutable_cord_list()->Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.cord_list)
+}
+inline void TestMessage::set_cord_list(int index, const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  _internal_mutable_cord_list()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set_char:google.api.expr.runtime.TestMessage.cord_list)
+}
+inline void TestMessage::set_cord_list(int index, const char* value,
+                              std::size_t size) {
+  _internal_mutable_cord_list()->Mutable(index)->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_set_pointer:google.api.expr.runtime.TestMessage.cord_list)
+}
+inline void TestMessage::set_cord_list(int index, absl::string_view value) {
+  _internal_mutable_cord_list()->Mutable(index)->assign(value.data(),
+                                                     value.size());
+  // @@protoc_insertion_point(field_set_string_piece:google.api.expr.runtime.TestMessage.cord_list)
+}
+inline void TestMessage::add_cord_list(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_cord_list()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.cord_list)
+}
+inline void TestMessage::add_cord_list(std::string&& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_cord_list()->Add(std::move(value));
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.cord_list)
+}
+inline void TestMessage::add_cord_list(const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_cord_list()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add_char:google.api.expr.runtime.TestMessage.cord_list)
+}
+inline void TestMessage::add_cord_list(const char* value, std::size_t size) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_cord_list()->Add()->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_add_pointer:google.api.expr.runtime.TestMessage.cord_list)
+}
+inline void TestMessage::add_cord_list(absl::string_view value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_cord_list()->Add()->assign(value.data(), value.size());
+  // @@protoc_insertion_point(field_add_string_piece:google.api.expr.runtime.TestMessage.cord_list)
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+TestMessage::cord_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.cord_list)
+  return _internal_cord_list();
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>* TestMessage::mutable_cord_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.cord_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_cord_list();
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+TestMessage::_internal_cord_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.cord_list_;
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>*
+TestMessage::_internal_mutable_cord_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.cord_list_;
+}
+
+// repeated bytes bytes_list = 109 [json_name = "bytesList"];
+inline int TestMessage::_internal_bytes_list_size() const {
+  return _internal_bytes_list().size();
+}
+inline int TestMessage::bytes_list_size() const {
+  return _internal_bytes_list_size();
+}
+inline void TestMessage::clear_bytes_list() {
+  _internal_mutable_bytes_list()->Clear();
+}
+inline std::string* TestMessage::add_bytes_list() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  std::string* _s = _internal_mutable_bytes_list()->Add();
+  // @@protoc_insertion_point(field_add_mutable:google.api.expr.runtime.TestMessage.bytes_list)
+  return _s;
+}
+inline const std::string& TestMessage::bytes_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.bytes_list)
+  return _internal_bytes_list().Get(index);
+}
+inline std::string* TestMessage::mutable_bytes_list(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.bytes_list)
+  return _internal_mutable_bytes_list()->Mutable(index);
+}
+inline void TestMessage::set_bytes_list(int index, const std::string& value) {
+  _internal_mutable_bytes_list()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.bytes_list)
+}
+inline void TestMessage::set_bytes_list(int index, std::string&& value) {
+  _internal_mutable_bytes_list()->Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.bytes_list)
+}
+inline void TestMessage::set_bytes_list(int index, const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  _internal_mutable_bytes_list()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set_char:google.api.expr.runtime.TestMessage.bytes_list)
+}
+inline void TestMessage::set_bytes_list(int index, const void* value,
+                              std::size_t size) {
+  _internal_mutable_bytes_list()->Mutable(index)->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_set_pointer:google.api.expr.runtime.TestMessage.bytes_list)
+}
+inline void TestMessage::set_bytes_list(int index, absl::string_view value) {
+  _internal_mutable_bytes_list()->Mutable(index)->assign(value.data(),
+                                                     value.size());
+  // @@protoc_insertion_point(field_set_string_piece:google.api.expr.runtime.TestMessage.bytes_list)
+}
+inline void TestMessage::add_bytes_list(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_bytes_list()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.bytes_list)
+}
+inline void TestMessage::add_bytes_list(std::string&& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_bytes_list()->Add(std::move(value));
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.bytes_list)
+}
+inline void TestMessage::add_bytes_list(const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_bytes_list()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add_char:google.api.expr.runtime.TestMessage.bytes_list)
+}
+inline void TestMessage::add_bytes_list(const void* value, std::size_t size) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_bytes_list()->Add()->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_add_pointer:google.api.expr.runtime.TestMessage.bytes_list)
+}
+inline void TestMessage::add_bytes_list(absl::string_view value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_bytes_list()->Add()->assign(value.data(), value.size());
+  // @@protoc_insertion_point(field_add_string_piece:google.api.expr.runtime.TestMessage.bytes_list)
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+TestMessage::bytes_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.bytes_list)
+  return _internal_bytes_list();
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>* TestMessage::mutable_bytes_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.bytes_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_bytes_list();
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+TestMessage::_internal_bytes_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.bytes_list_;
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>*
+TestMessage::_internal_mutable_bytes_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.bytes_list_;
+}
+
+// repeated bool bool_list = 110 [json_name = "boolList"];
+inline int TestMessage::_internal_bool_list_size() const {
+  return _internal_bool_list().size();
+}
+inline int TestMessage::bool_list_size() const {
+  return _internal_bool_list_size();
+}
+inline void TestMessage::clear_bool_list() {
+  _internal_mutable_bool_list()->Clear();
+}
+inline bool TestMessage::bool_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.bool_list)
+  return _internal_bool_list().Get(index);
+}
+inline void TestMessage::set_bool_list(int index, bool value) {
+  _internal_mutable_bool_list()->Set(index, value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.bool_list)
+}
+inline void TestMessage::add_bool_list(bool value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_bool_list()->Add(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.bool_list)
+}
+inline const ::google::protobuf::RepeatedField<bool>& TestMessage::bool_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.bool_list)
+  return _internal_bool_list();
+}
+inline ::google::protobuf::RepeatedField<bool>* TestMessage::mutable_bool_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.bool_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_bool_list();
+}
+
+inline const ::google::protobuf::RepeatedField<bool>& TestMessage::_internal_bool_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.bool_list_;
+}
+inline ::google::protobuf::RepeatedField<bool>* TestMessage::_internal_mutable_bool_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.bool_list_;
+}
+
+// repeated .google.api.expr.runtime.TestMessage.TestEnum enum_list = 111 [json_name = "enumList"];
+inline int TestMessage::_internal_enum_list_size() const {
+  return _internal_enum_list().size();
+}
+inline int TestMessage::enum_list_size() const {
+  return _internal_enum_list_size();
+}
+inline void TestMessage::clear_enum_list() {
+  _internal_mutable_enum_list()->Clear();
+}
+inline ::google::api::expr::runtime::TestMessage_TestEnum TestMessage::enum_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.enum_list)
+  return static_cast<::google::api::expr::runtime::TestMessage_TestEnum>(_internal_enum_list().Get(index));
+}
+inline void TestMessage::set_enum_list(int index, ::google::api::expr::runtime::TestMessage_TestEnum value) {
+  _internal_mutable_enum_list()->Set(index, value);
+  // @@protoc_insertion_point(field_set:google.api.expr.runtime.TestMessage.enum_list)
+}
+inline void TestMessage::add_enum_list(::google::api::expr::runtime::TestMessage_TestEnum value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_enum_list()->Add(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.enum_list)
+}
+inline const ::google::protobuf::RepeatedField<int>& TestMessage::enum_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.enum_list)
+  return _internal_enum_list();
+}
+inline ::google::protobuf::RepeatedField<int>* TestMessage::mutable_enum_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.enum_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_enum_list();
+}
+inline const ::google::protobuf::RepeatedField<int>& TestMessage::_internal_enum_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.enum_list_;
+}
+inline ::google::protobuf::RepeatedField<int>* TestMessage::_internal_mutable_enum_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.enum_list_;
+}
+
+// repeated .google.api.expr.runtime.TestMessage message_list = 112 [json_name = "messageList"];
+inline int TestMessage::_internal_message_list_size() const {
+  return _internal_message_list().size();
+}
+inline int TestMessage::message_list_size() const {
+  return _internal_message_list_size();
+}
+inline void TestMessage::clear_message_list() {
+  _internal_mutable_message_list()->Clear();
+}
+inline ::google::api::expr::runtime::TestMessage* TestMessage::mutable_message_list(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.message_list)
+  return _internal_mutable_message_list()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::runtime::TestMessage >*
+TestMessage::mutable_message_list() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.runtime.TestMessage.message_list)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_message_list();
+}
+inline const ::google::api::expr::runtime::TestMessage& TestMessage::message_list(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.message_list)
+    return _internal_message_list().Get(index);
+}
+inline ::google::api::expr::runtime::TestMessage* TestMessage::add_message_list() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::runtime::TestMessage* _add = _internal_mutable_message_list()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.runtime.TestMessage.message_list)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::runtime::TestMessage >&
+TestMessage::message_list() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.runtime.TestMessage.message_list)
+  return _internal_message_list();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::runtime::TestMessage>&
+TestMessage::_internal_message_list() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.message_list_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::runtime::TestMessage>*
+TestMessage::_internal_mutable_message_list() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.message_list_;
+}
+
+// map<int64, int32> int64_int32_map = 201 [json_name = "int64Int32Map"];
+inline int TestMessage::_internal_int64_int32_map_size() const {
+  return _internal_int64_int32_map().size();
+}
+inline int TestMessage::int64_int32_map_size() const {
+  return _internal_int64_int32_map_size();
+}
+inline void TestMessage::clear_int64_int32_map() {
+  _impl_.int64_int32_map_.Clear();
+}
+inline const ::google::protobuf::Map<::int64_t, ::int32_t>& TestMessage::_internal_int64_int32_map() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.int64_int32_map_.GetMap();
+}
+inline const ::google::protobuf::Map<::int64_t, ::int32_t>& TestMessage::int64_int32_map() const {
+  // @@protoc_insertion_point(field_map:google.api.expr.runtime.TestMessage.int64_int32_map)
+  return _internal_int64_int32_map();
+}
+inline ::google::protobuf::Map<::int64_t, ::int32_t>* TestMessage::_internal_mutable_int64_int32_map() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.int64_int32_map_.MutableMap();
+}
+inline ::google::protobuf::Map<::int64_t, ::int32_t>* TestMessage::mutable_int64_int32_map() {
+  // @@protoc_insertion_point(field_mutable_map:google.api.expr.runtime.TestMessage.int64_int32_map)
+  return _internal_mutable_int64_int32_map();
+}
+
+// map<uint64, int32> uint64_int32_map = 202 [json_name = "uint64Int32Map"];
+inline int TestMessage::_internal_uint64_int32_map_size() const {
+  return _internal_uint64_int32_map().size();
+}
+inline int TestMessage::uint64_int32_map_size() const {
+  return _internal_uint64_int32_map_size();
+}
+inline void TestMessage::clear_uint64_int32_map() {
+  _impl_.uint64_int32_map_.Clear();
+}
+inline const ::google::protobuf::Map<::uint64_t, ::int32_t>& TestMessage::_internal_uint64_int32_map() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.uint64_int32_map_.GetMap();
+}
+inline const ::google::protobuf::Map<::uint64_t, ::int32_t>& TestMessage::uint64_int32_map() const {
+  // @@protoc_insertion_point(field_map:google.api.expr.runtime.TestMessage.uint64_int32_map)
+  return _internal_uint64_int32_map();
+}
+inline ::google::protobuf::Map<::uint64_t, ::int32_t>* TestMessage::_internal_mutable_uint64_int32_map() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.uint64_int32_map_.MutableMap();
+}
+inline ::google::protobuf::Map<::uint64_t, ::int32_t>* TestMessage::mutable_uint64_int32_map() {
+  // @@protoc_insertion_point(field_mutable_map:google.api.expr.runtime.TestMessage.uint64_int32_map)
+  return _internal_mutable_uint64_int32_map();
+}
+
+// map<string, int32> string_int32_map = 203 [json_name = "stringInt32Map"];
+inline int TestMessage::_internal_string_int32_map_size() const {
+  return _internal_string_int32_map().size();
+}
+inline int TestMessage::string_int32_map_size() const {
+  return _internal_string_int32_map_size();
+}
+inline void TestMessage::clear_string_int32_map() {
+  _impl_.string_int32_map_.Clear();
+}
+inline const ::google::protobuf::Map<std::string, ::int32_t>& TestMessage::_internal_string_int32_map() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.string_int32_map_.GetMap();
+}
+inline const ::google::protobuf::Map<std::string, ::int32_t>& TestMessage::string_int32_map() const {
+  // @@protoc_insertion_point(field_map:google.api.expr.runtime.TestMessage.string_int32_map)
+  return _internal_string_int32_map();
+}
+inline ::google::protobuf::Map<std::string, ::int32_t>* TestMessage::_internal_mutable_string_int32_map() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.string_int32_map_.MutableMap();
+}
+inline ::google::protobuf::Map<std::string, ::int32_t>* TestMessage::mutable_string_int32_map() {
+  // @@protoc_insertion_point(field_mutable_map:google.api.expr.runtime.TestMessage.string_int32_map)
+  return _internal_mutable_string_int32_map();
+}
+
+// map<bool, int32> bool_int32_map = 204 [json_name = "boolInt32Map"];
+inline int TestMessage::_internal_bool_int32_map_size() const {
+  return _internal_bool_int32_map().size();
+}
+inline int TestMessage::bool_int32_map_size() const {
+  return _internal_bool_int32_map_size();
+}
+inline void TestMessage::clear_bool_int32_map() {
+  _impl_.bool_int32_map_.Clear();
+}
+inline const ::google::protobuf::Map<bool, ::int32_t>& TestMessage::_internal_bool_int32_map() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.bool_int32_map_.GetMap();
+}
+inline const ::google::protobuf::Map<bool, ::int32_t>& TestMessage::bool_int32_map() const {
+  // @@protoc_insertion_point(field_map:google.api.expr.runtime.TestMessage.bool_int32_map)
+  return _internal_bool_int32_map();
+}
+inline ::google::protobuf::Map<bool, ::int32_t>* TestMessage::_internal_mutable_bool_int32_map() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.bool_int32_map_.MutableMap();
+}
+inline ::google::protobuf::Map<bool, ::int32_t>* TestMessage::mutable_bool_int32_map() {
+  // @@protoc_insertion_point(field_mutable_map:google.api.expr.runtime.TestMessage.bool_int32_map)
+  return _internal_mutable_bool_int32_map();
+}
+
+// map<int32, int32> int32_int32_map = 205 [json_name = "int32Int32Map"];
+inline int TestMessage::_internal_int32_int32_map_size() const {
+  return _internal_int32_int32_map().size();
+}
+inline int TestMessage::int32_int32_map_size() const {
+  return _internal_int32_int32_map_size();
+}
+inline void TestMessage::clear_int32_int32_map() {
+  _impl_.int32_int32_map_.Clear();
+}
+inline const ::google::protobuf::Map<::int32_t, ::int32_t>& TestMessage::_internal_int32_int32_map() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.int32_int32_map_.GetMap();
+}
+inline const ::google::protobuf::Map<::int32_t, ::int32_t>& TestMessage::int32_int32_map() const {
+  // @@protoc_insertion_point(field_map:google.api.expr.runtime.TestMessage.int32_int32_map)
+  return _internal_int32_int32_map();
+}
+inline ::google::protobuf::Map<::int32_t, ::int32_t>* TestMessage::_internal_mutable_int32_int32_map() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.int32_int32_map_.MutableMap();
+}
+inline ::google::protobuf::Map<::int32_t, ::int32_t>* TestMessage::mutable_int32_int32_map() {
+  // @@protoc_insertion_point(field_mutable_map:google.api.expr.runtime.TestMessage.int32_int32_map)
+  return _internal_mutable_int32_int32_map();
+}
+
+// map<uint32, uint32> uint32_uint32_map = 206 [json_name = "uint32Uint32Map"];
+inline int TestMessage::_internal_uint32_uint32_map_size() const {
+  return _internal_uint32_uint32_map().size();
+}
+inline int TestMessage::uint32_uint32_map_size() const {
+  return _internal_uint32_uint32_map_size();
+}
+inline void TestMessage::clear_uint32_uint32_map() {
+  _impl_.uint32_uint32_map_.Clear();
+}
+inline const ::google::protobuf::Map<::uint32_t, ::uint32_t>& TestMessage::_internal_uint32_uint32_map() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.uint32_uint32_map_.GetMap();
+}
+inline const ::google::protobuf::Map<::uint32_t, ::uint32_t>& TestMessage::uint32_uint32_map() const {
+  // @@protoc_insertion_point(field_map:google.api.expr.runtime.TestMessage.uint32_uint32_map)
+  return _internal_uint32_uint32_map();
+}
+inline ::google::protobuf::Map<::uint32_t, ::uint32_t>* TestMessage::_internal_mutable_uint32_uint32_map() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.uint32_uint32_map_.MutableMap();
+}
+inline ::google::protobuf::Map<::uint32_t, ::uint32_t>* TestMessage::mutable_uint32_uint32_map() {
+  // @@protoc_insertion_point(field_mutable_map:google.api.expr.runtime.TestMessage.uint32_uint32_map)
+  return _internal_mutable_uint32_uint32_map();
+}
+
+// .google.protobuf.Any any_value = 300 [json_name = "anyValue"];
+inline bool TestMessage::has_any_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.any_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Any& TestMessage::_internal_any_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Any* p = _impl_.any_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
+}
+inline const ::google::protobuf::Any& TestMessage::any_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.any_value)
+  return _internal_any_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_any_value(::google::protobuf::Any* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.any_value_);
+  }
+  _impl_.any_value_ = reinterpret_cast<::google::protobuf::Any*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.any_value)
+}
+inline ::google::protobuf::Any* TestMessage::release_any_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::protobuf::Any* released = _impl_.any_value_;
+  _impl_.any_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Any* TestMessage::unsafe_arena_release_any_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.any_value)
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::protobuf::Any* temp = _impl_.any_value_;
+  _impl_.any_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Any* TestMessage::_internal_mutable_any_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000002u;
+  if (_impl_.any_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaForAllocation());
+    _impl_.any_value_ = reinterpret_cast<::google::protobuf::Any*>(p);
+  }
+  return _impl_.any_value_;
+}
+inline ::google::protobuf::Any* TestMessage::mutable_any_value() {
+  ::google::protobuf::Any* _msg = _internal_mutable_any_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.any_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_any_value(::google::protobuf::Any* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.any_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+
+  _impl_.any_value_ = reinterpret_cast<::google::protobuf::Any*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.any_value)
+}
+
+// .google.protobuf.Duration duration_value = 301 [json_name = "durationValue"];
+inline bool TestMessage::has_duration_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.duration_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Duration& TestMessage::_internal_duration_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Duration* p = _impl_.duration_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
+}
+inline const ::google::protobuf::Duration& TestMessage::duration_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.duration_value)
+  return _internal_duration_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_duration_value(::google::protobuf::Duration* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.duration_value_);
+  }
+  _impl_.duration_value_ = reinterpret_cast<::google::protobuf::Duration*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000004u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000004u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.duration_value)
+}
+inline ::google::protobuf::Duration* TestMessage::release_duration_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000004u;
+  ::google::protobuf::Duration* released = _impl_.duration_value_;
+  _impl_.duration_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Duration* TestMessage::unsafe_arena_release_duration_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.duration_value)
+
+  _impl_._has_bits_[0] &= ~0x00000004u;
+  ::google::protobuf::Duration* temp = _impl_.duration_value_;
+  _impl_.duration_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Duration* TestMessage::_internal_mutable_duration_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000004u;
+  if (_impl_.duration_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaForAllocation());
+    _impl_.duration_value_ = reinterpret_cast<::google::protobuf::Duration*>(p);
+  }
+  return _impl_.duration_value_;
+}
+inline ::google::protobuf::Duration* TestMessage::mutable_duration_value() {
+  ::google::protobuf::Duration* _msg = _internal_mutable_duration_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.duration_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_duration_value(::google::protobuf::Duration* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.duration_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000004u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000004u;
+  }
+
+  _impl_.duration_value_ = reinterpret_cast<::google::protobuf::Duration*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.duration_value)
+}
+
+// .google.protobuf.Timestamp timestamp_value = 302 [json_name = "timestampValue"];
+inline bool TestMessage::has_timestamp_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.timestamp_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Timestamp& TestMessage::_internal_timestamp_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Timestamp* p = _impl_.timestamp_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
+}
+inline const ::google::protobuf::Timestamp& TestMessage::timestamp_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.timestamp_value)
+  return _internal_timestamp_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_timestamp_value(::google::protobuf::Timestamp* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_value_);
+  }
+  _impl_.timestamp_value_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000008u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000008u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.timestamp_value)
+}
+inline ::google::protobuf::Timestamp* TestMessage::release_timestamp_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000008u;
+  ::google::protobuf::Timestamp* released = _impl_.timestamp_value_;
+  _impl_.timestamp_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Timestamp* TestMessage::unsafe_arena_release_timestamp_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.timestamp_value)
+
+  _impl_._has_bits_[0] &= ~0x00000008u;
+  ::google::protobuf::Timestamp* temp = _impl_.timestamp_value_;
+  _impl_.timestamp_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Timestamp* TestMessage::_internal_mutable_timestamp_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000008u;
+  if (_impl_.timestamp_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
+    _impl_.timestamp_value_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
+  }
+  return _impl_.timestamp_value_;
+}
+inline ::google::protobuf::Timestamp* TestMessage::mutable_timestamp_value() {
+  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.timestamp_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_timestamp_value(::google::protobuf::Timestamp* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000008u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000008u;
+  }
+
+  _impl_.timestamp_value_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.timestamp_value)
+}
+
+// .google.protobuf.Struct struct_value = 303 [json_name = "structValue"];
+inline bool TestMessage::has_struct_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.struct_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Struct& TestMessage::_internal_struct_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Struct* p = _impl_.struct_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
+}
+inline const ::google::protobuf::Struct& TestMessage::struct_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.struct_value)
+  return _internal_struct_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_struct_value(::google::protobuf::Struct* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.struct_value_);
+  }
+  _impl_.struct_value_ = reinterpret_cast<::google::protobuf::Struct*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000010u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000010u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.struct_value)
+}
+inline ::google::protobuf::Struct* TestMessage::release_struct_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000010u;
+  ::google::protobuf::Struct* released = _impl_.struct_value_;
+  _impl_.struct_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Struct* TestMessage::unsafe_arena_release_struct_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.struct_value)
+
+  _impl_._has_bits_[0] &= ~0x00000010u;
+  ::google::protobuf::Struct* temp = _impl_.struct_value_;
+  _impl_.struct_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Struct* TestMessage::_internal_mutable_struct_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000010u;
+  if (_impl_.struct_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaForAllocation());
+    _impl_.struct_value_ = reinterpret_cast<::google::protobuf::Struct*>(p);
+  }
+  return _impl_.struct_value_;
+}
+inline ::google::protobuf::Struct* TestMessage::mutable_struct_value() {
+  ::google::protobuf::Struct* _msg = _internal_mutable_struct_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.struct_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_struct_value(::google::protobuf::Struct* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.struct_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000010u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000010u;
+  }
+
+  _impl_.struct_value_ = reinterpret_cast<::google::protobuf::Struct*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.struct_value)
+}
+
+// .google.protobuf.Value value_value = 304 [json_name = "valueValue"];
+inline bool TestMessage::has_value_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.value_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Value& TestMessage::_internal_value_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Value* p = _impl_.value_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Value&>(::google::protobuf::_Value_default_instance_);
+}
+inline const ::google::protobuf::Value& TestMessage::value_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.value_value)
+  return _internal_value_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_value_value(::google::protobuf::Value* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_value_);
+  }
+  _impl_.value_value_ = reinterpret_cast<::google::protobuf::Value*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000020u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000020u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.value_value)
+}
+inline ::google::protobuf::Value* TestMessage::release_value_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000020u;
+  ::google::protobuf::Value* released = _impl_.value_value_;
+  _impl_.value_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Value* TestMessage::unsafe_arena_release_value_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.value_value)
+
+  _impl_._has_bits_[0] &= ~0x00000020u;
+  ::google::protobuf::Value* temp = _impl_.value_value_;
+  _impl_.value_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Value* TestMessage::_internal_mutable_value_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000020u;
+  if (_impl_.value_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Value>(GetArenaForAllocation());
+    _impl_.value_value_ = reinterpret_cast<::google::protobuf::Value*>(p);
+  }
+  return _impl_.value_value_;
+}
+inline ::google::protobuf::Value* TestMessage::mutable_value_value() {
+  ::google::protobuf::Value* _msg = _internal_mutable_value_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.value_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_value_value(::google::protobuf::Value* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000020u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000020u;
+  }
+
+  _impl_.value_value_ = reinterpret_cast<::google::protobuf::Value*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.value_value)
+}
+
+// .google.protobuf.Int64Value int64_wrapper_value = 305 [json_name = "int64WrapperValue"];
+inline bool TestMessage::has_int64_wrapper_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.int64_wrapper_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Int64Value& TestMessage::_internal_int64_wrapper_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Int64Value* p = _impl_.int64_wrapper_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
+}
+inline const ::google::protobuf::Int64Value& TestMessage::int64_wrapper_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.int64_wrapper_value)
+  return _internal_int64_wrapper_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_int64_wrapper_value(::google::protobuf::Int64Value* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.int64_wrapper_value_);
+  }
+  _impl_.int64_wrapper_value_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000040u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000040u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.int64_wrapper_value)
+}
+inline ::google::protobuf::Int64Value* TestMessage::release_int64_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000040u;
+  ::google::protobuf::Int64Value* released = _impl_.int64_wrapper_value_;
+  _impl_.int64_wrapper_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Int64Value* TestMessage::unsafe_arena_release_int64_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.int64_wrapper_value)
+
+  _impl_._has_bits_[0] &= ~0x00000040u;
+  ::google::protobuf::Int64Value* temp = _impl_.int64_wrapper_value_;
+  _impl_.int64_wrapper_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Int64Value* TestMessage::_internal_mutable_int64_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000040u;
+  if (_impl_.int64_wrapper_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArenaForAllocation());
+    _impl_.int64_wrapper_value_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
+  }
+  return _impl_.int64_wrapper_value_;
+}
+inline ::google::protobuf::Int64Value* TestMessage::mutable_int64_wrapper_value() {
+  ::google::protobuf::Int64Value* _msg = _internal_mutable_int64_wrapper_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.int64_wrapper_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_int64_wrapper_value(::google::protobuf::Int64Value* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.int64_wrapper_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000040u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000040u;
+  }
+
+  _impl_.int64_wrapper_value_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.int64_wrapper_value)
+}
+
+// .google.protobuf.Int32Value int32_wrapper_value = 306 [json_name = "int32WrapperValue"];
+inline bool TestMessage::has_int32_wrapper_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.int32_wrapper_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Int32Value& TestMessage::_internal_int32_wrapper_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Int32Value* p = _impl_.int32_wrapper_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int32Value&>(::google::protobuf::_Int32Value_default_instance_);
+}
+inline const ::google::protobuf::Int32Value& TestMessage::int32_wrapper_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.int32_wrapper_value)
+  return _internal_int32_wrapper_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_int32_wrapper_value(::google::protobuf::Int32Value* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.int32_wrapper_value_);
+  }
+  _impl_.int32_wrapper_value_ = reinterpret_cast<::google::protobuf::Int32Value*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000080u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000080u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.int32_wrapper_value)
+}
+inline ::google::protobuf::Int32Value* TestMessage::release_int32_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000080u;
+  ::google::protobuf::Int32Value* released = _impl_.int32_wrapper_value_;
+  _impl_.int32_wrapper_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Int32Value* TestMessage::unsafe_arena_release_int32_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.int32_wrapper_value)
+
+  _impl_._has_bits_[0] &= ~0x00000080u;
+  ::google::protobuf::Int32Value* temp = _impl_.int32_wrapper_value_;
+  _impl_.int32_wrapper_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Int32Value* TestMessage::_internal_mutable_int32_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000080u;
+  if (_impl_.int32_wrapper_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Int32Value>(GetArenaForAllocation());
+    _impl_.int32_wrapper_value_ = reinterpret_cast<::google::protobuf::Int32Value*>(p);
+  }
+  return _impl_.int32_wrapper_value_;
+}
+inline ::google::protobuf::Int32Value* TestMessage::mutable_int32_wrapper_value() {
+  ::google::protobuf::Int32Value* _msg = _internal_mutable_int32_wrapper_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.int32_wrapper_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_int32_wrapper_value(::google::protobuf::Int32Value* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.int32_wrapper_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000080u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000080u;
+  }
+
+  _impl_.int32_wrapper_value_ = reinterpret_cast<::google::protobuf::Int32Value*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.int32_wrapper_value)
+}
+
+// .google.protobuf.DoubleValue double_wrapper_value = 307 [json_name = "doubleWrapperValue"];
+inline bool TestMessage::has_double_wrapper_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.double_wrapper_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::DoubleValue& TestMessage::_internal_double_wrapper_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::DoubleValue* p = _impl_.double_wrapper_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::DoubleValue&>(::google::protobuf::_DoubleValue_default_instance_);
+}
+inline const ::google::protobuf::DoubleValue& TestMessage::double_wrapper_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.double_wrapper_value)
+  return _internal_double_wrapper_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_double_wrapper_value(::google::protobuf::DoubleValue* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.double_wrapper_value_);
+  }
+  _impl_.double_wrapper_value_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000100u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000100u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.double_wrapper_value)
+}
+inline ::google::protobuf::DoubleValue* TestMessage::release_double_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000100u;
+  ::google::protobuf::DoubleValue* released = _impl_.double_wrapper_value_;
+  _impl_.double_wrapper_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::DoubleValue* TestMessage::unsafe_arena_release_double_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.double_wrapper_value)
+
+  _impl_._has_bits_[0] &= ~0x00000100u;
+  ::google::protobuf::DoubleValue* temp = _impl_.double_wrapper_value_;
+  _impl_.double_wrapper_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::DoubleValue* TestMessage::_internal_mutable_double_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000100u;
+  if (_impl_.double_wrapper_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaForAllocation());
+    _impl_.double_wrapper_value_ = reinterpret_cast<::google::protobuf::DoubleValue*>(p);
+  }
+  return _impl_.double_wrapper_value_;
+}
+inline ::google::protobuf::DoubleValue* TestMessage::mutable_double_wrapper_value() {
+  ::google::protobuf::DoubleValue* _msg = _internal_mutable_double_wrapper_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.double_wrapper_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_double_wrapper_value(::google::protobuf::DoubleValue* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.double_wrapper_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000100u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000100u;
+  }
+
+  _impl_.double_wrapper_value_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.double_wrapper_value)
+}
+
+// .google.protobuf.FloatValue float_wrapper_value = 308 [json_name = "floatWrapperValue"];
+inline bool TestMessage::has_float_wrapper_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.float_wrapper_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::FloatValue& TestMessage::_internal_float_wrapper_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::FloatValue* p = _impl_.float_wrapper_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::FloatValue&>(::google::protobuf::_FloatValue_default_instance_);
+}
+inline const ::google::protobuf::FloatValue& TestMessage::float_wrapper_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.float_wrapper_value)
+  return _internal_float_wrapper_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_float_wrapper_value(::google::protobuf::FloatValue* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.float_wrapper_value_);
+  }
+  _impl_.float_wrapper_value_ = reinterpret_cast<::google::protobuf::FloatValue*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000200u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000200u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.float_wrapper_value)
+}
+inline ::google::protobuf::FloatValue* TestMessage::release_float_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000200u;
+  ::google::protobuf::FloatValue* released = _impl_.float_wrapper_value_;
+  _impl_.float_wrapper_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::FloatValue* TestMessage::unsafe_arena_release_float_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.float_wrapper_value)
+
+  _impl_._has_bits_[0] &= ~0x00000200u;
+  ::google::protobuf::FloatValue* temp = _impl_.float_wrapper_value_;
+  _impl_.float_wrapper_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::FloatValue* TestMessage::_internal_mutable_float_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000200u;
+  if (_impl_.float_wrapper_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::FloatValue>(GetArenaForAllocation());
+    _impl_.float_wrapper_value_ = reinterpret_cast<::google::protobuf::FloatValue*>(p);
+  }
+  return _impl_.float_wrapper_value_;
+}
+inline ::google::protobuf::FloatValue* TestMessage::mutable_float_wrapper_value() {
+  ::google::protobuf::FloatValue* _msg = _internal_mutable_float_wrapper_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.float_wrapper_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_float_wrapper_value(::google::protobuf::FloatValue* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.float_wrapper_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000200u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000200u;
+  }
+
+  _impl_.float_wrapper_value_ = reinterpret_cast<::google::protobuf::FloatValue*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.float_wrapper_value)
+}
+
+// .google.protobuf.UInt64Value uint64_wrapper_value = 309 [json_name = "uint64WrapperValue"];
+inline bool TestMessage::has_uint64_wrapper_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.uint64_wrapper_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::UInt64Value& TestMessage::_internal_uint64_wrapper_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::UInt64Value* p = _impl_.uint64_wrapper_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::UInt64Value&>(::google::protobuf::_UInt64Value_default_instance_);
+}
+inline const ::google::protobuf::UInt64Value& TestMessage::uint64_wrapper_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.uint64_wrapper_value)
+  return _internal_uint64_wrapper_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_uint64_wrapper_value(::google::protobuf::UInt64Value* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.uint64_wrapper_value_);
+  }
+  _impl_.uint64_wrapper_value_ = reinterpret_cast<::google::protobuf::UInt64Value*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000400u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000400u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.uint64_wrapper_value)
+}
+inline ::google::protobuf::UInt64Value* TestMessage::release_uint64_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000400u;
+  ::google::protobuf::UInt64Value* released = _impl_.uint64_wrapper_value_;
+  _impl_.uint64_wrapper_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::UInt64Value* TestMessage::unsafe_arena_release_uint64_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.uint64_wrapper_value)
+
+  _impl_._has_bits_[0] &= ~0x00000400u;
+  ::google::protobuf::UInt64Value* temp = _impl_.uint64_wrapper_value_;
+  _impl_.uint64_wrapper_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::UInt64Value* TestMessage::_internal_mutable_uint64_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000400u;
+  if (_impl_.uint64_wrapper_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::UInt64Value>(GetArenaForAllocation());
+    _impl_.uint64_wrapper_value_ = reinterpret_cast<::google::protobuf::UInt64Value*>(p);
+  }
+  return _impl_.uint64_wrapper_value_;
+}
+inline ::google::protobuf::UInt64Value* TestMessage::mutable_uint64_wrapper_value() {
+  ::google::protobuf::UInt64Value* _msg = _internal_mutable_uint64_wrapper_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.uint64_wrapper_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_uint64_wrapper_value(::google::protobuf::UInt64Value* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.uint64_wrapper_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000400u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000400u;
+  }
+
+  _impl_.uint64_wrapper_value_ = reinterpret_cast<::google::protobuf::UInt64Value*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.uint64_wrapper_value)
+}
+
+// .google.protobuf.UInt32Value uint32_wrapper_value = 310 [json_name = "uint32WrapperValue"];
+inline bool TestMessage::has_uint32_wrapper_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.uint32_wrapper_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::UInt32Value& TestMessage::_internal_uint32_wrapper_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::UInt32Value* p = _impl_.uint32_wrapper_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::UInt32Value&>(::google::protobuf::_UInt32Value_default_instance_);
+}
+inline const ::google::protobuf::UInt32Value& TestMessage::uint32_wrapper_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.uint32_wrapper_value)
+  return _internal_uint32_wrapper_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_uint32_wrapper_value(::google::protobuf::UInt32Value* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.uint32_wrapper_value_);
+  }
+  _impl_.uint32_wrapper_value_ = reinterpret_cast<::google::protobuf::UInt32Value*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000800u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000800u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.uint32_wrapper_value)
+}
+inline ::google::protobuf::UInt32Value* TestMessage::release_uint32_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000800u;
+  ::google::protobuf::UInt32Value* released = _impl_.uint32_wrapper_value_;
+  _impl_.uint32_wrapper_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::UInt32Value* TestMessage::unsafe_arena_release_uint32_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.uint32_wrapper_value)
+
+  _impl_._has_bits_[0] &= ~0x00000800u;
+  ::google::protobuf::UInt32Value* temp = _impl_.uint32_wrapper_value_;
+  _impl_.uint32_wrapper_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::UInt32Value* TestMessage::_internal_mutable_uint32_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000800u;
+  if (_impl_.uint32_wrapper_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::UInt32Value>(GetArenaForAllocation());
+    _impl_.uint32_wrapper_value_ = reinterpret_cast<::google::protobuf::UInt32Value*>(p);
+  }
+  return _impl_.uint32_wrapper_value_;
+}
+inline ::google::protobuf::UInt32Value* TestMessage::mutable_uint32_wrapper_value() {
+  ::google::protobuf::UInt32Value* _msg = _internal_mutable_uint32_wrapper_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.uint32_wrapper_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_uint32_wrapper_value(::google::protobuf::UInt32Value* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.uint32_wrapper_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000800u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000800u;
+  }
+
+  _impl_.uint32_wrapper_value_ = reinterpret_cast<::google::protobuf::UInt32Value*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.uint32_wrapper_value)
+}
+
+// .google.protobuf.StringValue string_wrapper_value = 311 [json_name = "stringWrapperValue"];
+inline bool TestMessage::has_string_wrapper_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.string_wrapper_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::StringValue& TestMessage::_internal_string_wrapper_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::StringValue* p = _impl_.string_wrapper_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::StringValue&>(::google::protobuf::_StringValue_default_instance_);
+}
+inline const ::google::protobuf::StringValue& TestMessage::string_wrapper_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.string_wrapper_value)
+  return _internal_string_wrapper_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_string_wrapper_value(::google::protobuf::StringValue* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.string_wrapper_value_);
+  }
+  _impl_.string_wrapper_value_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00001000u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00001000u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.string_wrapper_value)
+}
+inline ::google::protobuf::StringValue* TestMessage::release_string_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00001000u;
+  ::google::protobuf::StringValue* released = _impl_.string_wrapper_value_;
+  _impl_.string_wrapper_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::StringValue* TestMessage::unsafe_arena_release_string_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.string_wrapper_value)
+
+  _impl_._has_bits_[0] &= ~0x00001000u;
+  ::google::protobuf::StringValue* temp = _impl_.string_wrapper_value_;
+  _impl_.string_wrapper_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::StringValue* TestMessage::_internal_mutable_string_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00001000u;
+  if (_impl_.string_wrapper_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaForAllocation());
+    _impl_.string_wrapper_value_ = reinterpret_cast<::google::protobuf::StringValue*>(p);
+  }
+  return _impl_.string_wrapper_value_;
+}
+inline ::google::protobuf::StringValue* TestMessage::mutable_string_wrapper_value() {
+  ::google::protobuf::StringValue* _msg = _internal_mutable_string_wrapper_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.string_wrapper_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_string_wrapper_value(::google::protobuf::StringValue* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.string_wrapper_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00001000u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00001000u;
+  }
+
+  _impl_.string_wrapper_value_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.string_wrapper_value)
+}
+
+// .google.protobuf.BoolValue bool_wrapper_value = 312 [json_name = "boolWrapperValue"];
+inline bool TestMessage::has_bool_wrapper_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.bool_wrapper_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::BoolValue& TestMessage::_internal_bool_wrapper_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::BoolValue* p = _impl_.bool_wrapper_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::BoolValue&>(::google::protobuf::_BoolValue_default_instance_);
+}
+inline const ::google::protobuf::BoolValue& TestMessage::bool_wrapper_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.bool_wrapper_value)
+  return _internal_bool_wrapper_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_bool_wrapper_value(::google::protobuf::BoolValue* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bool_wrapper_value_);
+  }
+  _impl_.bool_wrapper_value_ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00002000u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00002000u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.bool_wrapper_value)
+}
+inline ::google::protobuf::BoolValue* TestMessage::release_bool_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00002000u;
+  ::google::protobuf::BoolValue* released = _impl_.bool_wrapper_value_;
+  _impl_.bool_wrapper_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::BoolValue* TestMessage::unsafe_arena_release_bool_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.bool_wrapper_value)
+
+  _impl_._has_bits_[0] &= ~0x00002000u;
+  ::google::protobuf::BoolValue* temp = _impl_.bool_wrapper_value_;
+  _impl_.bool_wrapper_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::BoolValue* TestMessage::_internal_mutable_bool_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00002000u;
+  if (_impl_.bool_wrapper_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaForAllocation());
+    _impl_.bool_wrapper_value_ = reinterpret_cast<::google::protobuf::BoolValue*>(p);
+  }
+  return _impl_.bool_wrapper_value_;
+}
+inline ::google::protobuf::BoolValue* TestMessage::mutable_bool_wrapper_value() {
+  ::google::protobuf::BoolValue* _msg = _internal_mutable_bool_wrapper_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.bool_wrapper_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_bool_wrapper_value(::google::protobuf::BoolValue* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bool_wrapper_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00002000u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00002000u;
+  }
+
+  _impl_.bool_wrapper_value_ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.bool_wrapper_value)
+}
+
+// .google.protobuf.BytesValue bytes_wrapper_value = 313 [json_name = "bytesWrapperValue"];
+inline bool TestMessage::has_bytes_wrapper_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.bytes_wrapper_value_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::BytesValue& TestMessage::_internal_bytes_wrapper_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::BytesValue* p = _impl_.bytes_wrapper_value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::BytesValue&>(::google::protobuf::_BytesValue_default_instance_);
+}
+inline const ::google::protobuf::BytesValue& TestMessage::bytes_wrapper_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.runtime.TestMessage.bytes_wrapper_value)
+  return _internal_bytes_wrapper_value();
+}
+inline void TestMessage::unsafe_arena_set_allocated_bytes_wrapper_value(::google::protobuf::BytesValue* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bytes_wrapper_value_);
+  }
+  _impl_.bytes_wrapper_value_ = reinterpret_cast<::google::protobuf::BytesValue*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00004000u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00004000u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.runtime.TestMessage.bytes_wrapper_value)
+}
+inline ::google::protobuf::BytesValue* TestMessage::release_bytes_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00004000u;
+  ::google::protobuf::BytesValue* released = _impl_.bytes_wrapper_value_;
+  _impl_.bytes_wrapper_value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::BytesValue* TestMessage::unsafe_arena_release_bytes_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.runtime.TestMessage.bytes_wrapper_value)
+
+  _impl_._has_bits_[0] &= ~0x00004000u;
+  ::google::protobuf::BytesValue* temp = _impl_.bytes_wrapper_value_;
+  _impl_.bytes_wrapper_value_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::BytesValue* TestMessage::_internal_mutable_bytes_wrapper_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00004000u;
+  if (_impl_.bytes_wrapper_value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::BytesValue>(GetArenaForAllocation());
+    _impl_.bytes_wrapper_value_ = reinterpret_cast<::google::protobuf::BytesValue*>(p);
+  }
+  return _impl_.bytes_wrapper_value_;
+}
+inline ::google::protobuf::BytesValue* TestMessage::mutable_bytes_wrapper_value() {
+  ::google::protobuf::BytesValue* _msg = _internal_mutable_bytes_wrapper_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.runtime.TestMessage.bytes_wrapper_value)
+  return _msg;
+}
+inline void TestMessage::set_allocated_bytes_wrapper_value(::google::protobuf::BytesValue* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bytes_wrapper_value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00004000u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00004000u;
+  }
+
+  _impl_.bytes_wrapper_value_ = reinterpret_cast<::google::protobuf::BytesValue*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.runtime.TestMessage.bytes_wrapper_value)
+}
+
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif  // __GNUC__
+
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace runtime
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+
+
+namespace google {
+namespace protobuf {
+
+template <>
+struct is_proto_enum<::google::api::expr::runtime::TestMessage_TestEnum> : std::true_type {};
+template <>
+inline const EnumDescriptor* GetEnumDescriptor<::google::api::expr::runtime::TestMessage_TestEnum>() {
+  return ::google::api::expr::runtime::TestMessage_TestEnum_descriptor();
+}
+template <>
+struct is_proto_enum<::google::api::expr::runtime::TestEnum> : std::true_type {};
+template <>
+inline const EnumDescriptor* GetEnumDescriptor<::google::api::expr::runtime::TestEnum>() {
+  return ::google::api::expr::runtime::TestEnum_descriptor();
+}
+
+}  // namespace protobuf
+}  // namespace google
+
+// @@protoc_insertion_point(global_scope)
+
+#include "google/protobuf/port_undef.inc"
+
+#endif  // GOOGLE_PROTOBUF_INCLUDED_eval_2ftestutil_2ftest_5fmessage_2eproto_2epb_2eh
diff --git a/gen/google/api/expr/v1alpha1/checked.pb.cc b/gen/google/api/expr/v1alpha1/checked.pb.cc
new file mode 100644
index 0000000..d5ec5f7
--- /dev/null
+++ b/gen/google/api/expr/v1alpha1/checked.pb.cc
@@ -0,0 +1,4190 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/api/expr/v1alpha1/checked.proto
+
+#include "google/api/expr/v1alpha1/checked.pb.h"
+
+#include <algorithm>
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/extension_set.h"
+#include "google/protobuf/wire_format_lite.h"
+#include "google/protobuf/descriptor.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/reflection_ops.h"
+#include "google/protobuf/wire_format.h"
+#include "google/protobuf/generated_message_tctable_impl.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+PROTOBUF_PRAGMA_INIT_SEG
+namespace _pb = ::google::protobuf;
+namespace _pbi = ::google::protobuf::internal;
+namespace _fl = ::google::protobuf::internal::field_layout;
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+      template <typename>
+PROTOBUF_CONSTEXPR CheckedExpr_ReferenceMapEntry_DoNotUse::CheckedExpr_ReferenceMapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    CheckedExpr_ReferenceMapEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal _CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR CheckedExpr_TypeMapEntry_DoNotUse::CheckedExpr_TypeMapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    CheckedExpr_TypeMapEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal _CheckedExpr_TypeMapEntry_DoNotUse_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR CheckedExpr::CheckedExpr(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.reference_map_) */ {},
+      /* decltype(_impl_.type_map_) */ {},
+      /*decltype(_impl_.expr_version_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.expr_)*/ nullptr,
+      /*decltype(_impl_.source_info_)*/ nullptr,
+    } {}
+struct CheckedExprDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR CheckedExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~CheckedExprDefaultTypeInternal() {}
+  union {
+    CheckedExpr _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckedExprDefaultTypeInternal _CheckedExpr_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Type_ListType::Type_ListType(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.elem_type_)*/ nullptr,
+    } {}
+struct Type_ListTypeDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Type_ListTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Type_ListTypeDefaultTypeInternal() {}
+  union {
+    Type_ListType _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_ListTypeDefaultTypeInternal _Type_ListType_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Type_MapType::Type_MapType(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.key_type_)*/ nullptr,
+      /*decltype(_impl_.value_type_)*/ nullptr,
+    } {}
+struct Type_MapTypeDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Type_MapTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Type_MapTypeDefaultTypeInternal() {}
+  union {
+    Type_MapType _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_MapTypeDefaultTypeInternal _Type_MapType_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Type_FunctionType::Type_FunctionType(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.arg_types_)*/ {},
+      /*decltype(_impl_.result_type_)*/ nullptr,
+    } {}
+struct Type_FunctionTypeDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Type_FunctionTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Type_FunctionTypeDefaultTypeInternal() {}
+  union {
+    Type_FunctionType _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_FunctionTypeDefaultTypeInternal _Type_FunctionType_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Type_AbstractType::Type_AbstractType(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.parameter_types_)*/ {},
+      /*decltype(_impl_.name_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct Type_AbstractTypeDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Type_AbstractTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Type_AbstractTypeDefaultTypeInternal() {}
+  union {
+    Type_AbstractType _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_AbstractTypeDefaultTypeInternal _Type_AbstractType_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Type::Type(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.type_kind_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+    } {}
+struct TypeDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR TypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~TypeDefaultTypeInternal() {}
+  union {
+    Type _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeDefaultTypeInternal _Type_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Decl_IdentDecl::Decl_IdentDecl(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.doc_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.type_)*/ nullptr,
+      /*decltype(_impl_.value_)*/ nullptr,
+    } {}
+struct Decl_IdentDeclDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Decl_IdentDeclDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Decl_IdentDeclDefaultTypeInternal() {}
+  union {
+    Decl_IdentDecl _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Decl_IdentDeclDefaultTypeInternal _Decl_IdentDecl_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Decl_FunctionDecl_Overload::Decl_FunctionDecl_Overload(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.params_)*/ {},
+      /*decltype(_impl_.type_params_)*/ {},
+      /*decltype(_impl_.overload_id_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.doc_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.result_type_)*/ nullptr,
+      /*decltype(_impl_.is_instance_function_)*/ false,
+    } {}
+struct Decl_FunctionDecl_OverloadDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Decl_FunctionDecl_OverloadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Decl_FunctionDecl_OverloadDefaultTypeInternal() {}
+  union {
+    Decl_FunctionDecl_Overload _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Decl_FunctionDecl_OverloadDefaultTypeInternal _Decl_FunctionDecl_Overload_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Decl_FunctionDecl::Decl_FunctionDecl(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.overloads_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct Decl_FunctionDeclDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Decl_FunctionDeclDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Decl_FunctionDeclDefaultTypeInternal() {}
+  union {
+    Decl_FunctionDecl _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Decl_FunctionDeclDefaultTypeInternal _Decl_FunctionDecl_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Decl::Decl(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.name_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.decl_kind_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+    } {}
+struct DeclDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR DeclDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~DeclDefaultTypeInternal() {}
+  union {
+    Decl _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeclDefaultTypeInternal _Decl_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Reference::Reference(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.overload_id_)*/ {},
+      /*decltype(_impl_.name_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.value_)*/ nullptr,
+    } {}
+struct ReferenceDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ReferenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ReferenceDefaultTypeInternal() {}
+  union {
+    Reference _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceDefaultTypeInternal _Reference_default_instance_;
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+static ::_pb::Metadata file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[13];
+static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[2];
+static constexpr const ::_pb::ServiceDescriptor**
+    file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto = nullptr;
+const ::uint32_t TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
+    protodesc_cold) = {
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _impl_.reference_map_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _impl_.type_map_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _impl_.source_info_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _impl_.expr_version_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _impl_.expr_),
+    ~0u,
+    ~0u,
+    1,
+    ~0u,
+    0,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_ListType, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_ListType, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_ListType, _impl_.elem_type_),
+    0,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_MapType, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_MapType, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_MapType, _impl_.key_type_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_MapType, _impl_.value_type_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_FunctionType, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_FunctionType, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_FunctionType, _impl_.result_type_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_FunctionType, _impl_.arg_types_),
+    0,
+    ~0u,
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_AbstractType, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_AbstractType, _impl_.name_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_AbstractType, _impl_.parameter_types_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type, _internal_metadata_),
+    ~0u,  // no _extensions_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type, _impl_._oneof_case_[0]),
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type, _impl_.type_kind_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, _impl_.type_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, _impl_.value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, _impl_.doc_),
+    0,
+    1,
+    ~0u,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.overload_id_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.params_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.type_params_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.result_type_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.is_instance_function_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.doc_),
+    ~0u,
+    ~0u,
+    ~0u,
+    0,
+    ~0u,
+    ~0u,
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl, _impl_.overloads_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, _internal_metadata_),
+    ~0u,  // no _extensions_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, _impl_._oneof_case_[0]),
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, _impl_.name_),
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, _impl_.decl_kind_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, _impl_.name_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, _impl_.overload_id_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, _impl_.value_),
+    ~0u,
+    ~0u,
+    0,
+};
+
+static const ::_pbi::MigrationSchema
+    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+        {0, 10, -1, sizeof(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse)},
+        {12, 22, -1, sizeof(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse)},
+        {24, 37, -1, sizeof(::google::api::expr::v1alpha1::CheckedExpr)},
+        {42, 51, -1, sizeof(::google::api::expr::v1alpha1::Type_ListType)},
+        {52, 62, -1, sizeof(::google::api::expr::v1alpha1::Type_MapType)},
+        {64, 74, -1, sizeof(::google::api::expr::v1alpha1::Type_FunctionType)},
+        {76, -1, -1, sizeof(::google::api::expr::v1alpha1::Type_AbstractType)},
+        {86, -1, -1, sizeof(::google::api::expr::v1alpha1::Type)},
+        {108, 119, -1, sizeof(::google::api::expr::v1alpha1::Decl_IdentDecl)},
+        {122, 136, -1, sizeof(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload)},
+        {142, -1, -1, sizeof(::google::api::expr::v1alpha1::Decl_FunctionDecl)},
+        {151, -1, -1, sizeof(::google::api::expr::v1alpha1::Decl)},
+        {163, 174, -1, sizeof(::google::api::expr::v1alpha1::Reference)},
+};
+
+static const ::_pb::Message* const file_default_instances[] = {
+    &::google::api::expr::v1alpha1::_CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_CheckedExpr_TypeMapEntry_DoNotUse_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_CheckedExpr_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Type_ListType_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Type_MapType_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Type_FunctionType_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Type_AbstractType_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Type_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Decl_IdentDecl_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Decl_FunctionDecl_Overload_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Decl_FunctionDecl_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Decl_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Reference_default_instance_._instance,
+};
+const char descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+    "\n&google/api/expr/v1alpha1/checked.proto"
+    "\022\030google.api.expr.v1alpha1\032%google/api/e"
+    "xpr/v1alpha1/syntax.proto\032\033google/protob"
+    "uf/empty.proto\032\034google/protobuf/struct.p"
+    "roto\"\232\004\n\013CheckedExpr\022\\\n\rreference_map\030\002 "
+    "\003(\01327.google.api.expr.v1alpha1.CheckedEx"
+    "pr.ReferenceMapEntryR\014referenceMap\022M\n\010ty"
+    "pe_map\030\003 \003(\01322.google.api.expr.v1alpha1."
+    "CheckedExpr.TypeMapEntryR\007typeMap\022E\n\013sou"
+    "rce_info\030\005 \001(\0132$.google.api.expr.v1alpha"
+    "1.SourceInfoR\nsourceInfo\022!\n\014expr_version"
+    "\030\006 \001(\tR\013exprVersion\0222\n\004expr\030\004 \001(\0132\036.goog"
+    "le.api.expr.v1alpha1.ExprR\004expr\032d\n\021Refer"
+    "enceMapEntry\022\020\n\003key\030\001 \001(\003R\003key\0229\n\005value\030"
+    "\002 \001(\0132#.google.api.expr.v1alpha1.Referen"
+    "ceR\005value:\0028\001\032Z\n\014TypeMapEntry\022\020\n\003key\030\001 \001"
+    "(\003R\003key\0224\n\005value\030\002 \001(\0132\036.google.api.expr"
+    ".v1alpha1.TypeR\005value:\0028\001\"\310\013\n\004Type\022*\n\003dy"
+    "n\030\001 \001(\0132\026.google.protobuf.EmptyH\000R\003dyn\0220"
+    "\n\004null\030\002 \001(\0162\032.google.protobuf.NullValue"
+    "H\000R\004null\022L\n\tprimitive\030\003 \001(\0162,.google.api"
+    ".expr.v1alpha1.Type.PrimitiveTypeH\000R\tpri"
+    "mitive\022H\n\007wrapper\030\004 \001(\0162,.google.api.exp"
+    "r.v1alpha1.Type.PrimitiveTypeH\000R\007wrapper"
+    "\022M\n\nwell_known\030\005 \001(\0162,.google.api.expr.v"
+    "1alpha1.Type.WellKnownTypeH\000R\twellKnown\022"
+    "F\n\tlist_type\030\006 \001(\0132\'.google.api.expr.v1a"
+    "lpha1.Type.ListTypeH\000R\010listType\022C\n\010map_t"
+    "ype\030\007 \001(\0132&.google.api.expr.v1alpha1.Typ"
+    "e.MapTypeH\000R\007mapType\022I\n\010function\030\010 \001(\0132+"
+    ".google.api.expr.v1alpha1.Type.FunctionT"
+    "ypeH\000R\010function\022#\n\014message_type\030\t \001(\tH\000R"
+    "\013messageType\022\037\n\ntype_param\030\n \001(\tH\000R\ttype"
+    "Param\0224\n\004type\030\013 \001(\0132\036.google.api.expr.v1"
+    "alpha1.TypeH\000R\004type\022.\n\005error\030\014 \001(\0132\026.goo"
+    "gle.protobuf.EmptyH\000R\005error\022R\n\rabstract_"
+    "type\030\016 \001(\0132+.google.api.expr.v1alpha1.Ty"
+    "pe.AbstractTypeH\000R\014abstractType\032G\n\010ListT"
+    "ype\022;\n\telem_type\030\001 \001(\0132\036.google.api.expr"
+    ".v1alpha1.TypeR\010elemType\032\203\001\n\007MapType\0229\n\010"
+    "key_type\030\001 \001(\0132\036.google.api.expr.v1alpha"
+    "1.TypeR\007keyType\022=\n\nvalue_type\030\002 \001(\0132\036.go"
+    "ogle.api.expr.v1alpha1.TypeR\tvalueType\032\214"
+    "\001\n\014FunctionType\022\?\n\013result_type\030\001 \001(\0132\036.g"
+    "oogle.api.expr.v1alpha1.TypeR\nresultType"
+    "\022;\n\targ_types\030\002 \003(\0132\036.google.api.expr.v1"
+    "alpha1.TypeR\010argTypes\032k\n\014AbstractType\022\022\n"
+    "\004name\030\001 \001(\tR\004name\022G\n\017parameter_types\030\002 \003"
+    "(\0132\036.google.api.expr.v1alpha1.TypeR\016para"
+    "meterTypes\"s\n\rPrimitiveType\022\036\n\032PRIMITIVE"
+    "_TYPE_UNSPECIFIED\020\000\022\010\n\004BOOL\020\001\022\t\n\005INT64\020\002"
+    "\022\n\n\006UINT64\020\003\022\n\n\006DOUBLE\020\004\022\n\n\006STRING\020\005\022\t\n\005"
+    "BYTES\020\006\"V\n\rWellKnownType\022\037\n\033WELL_KNOWN_T"
+    "YPE_UNSPECIFIED\020\000\022\007\n\003ANY\020\001\022\r\n\tTIMESTAMP\020"
+    "\002\022\014\n\010DURATION\020\003B\013\n\ttype_kind\"\263\005\n\004Decl\022\022\n"
+    "\004name\030\001 \001(\tR\004name\022@\n\005ident\030\002 \001(\0132(.googl"
+    "e.api.expr.v1alpha1.Decl.IdentDeclH\000R\005id"
+    "ent\022I\n\010function\030\003 \001(\0132+.google.api.expr."
+    "v1alpha1.Decl.FunctionDeclH\000R\010function\032\213"
+    "\001\n\tIdentDecl\0222\n\004type\030\001 \001(\0132\036.google.api."
+    "expr.v1alpha1.TypeR\004type\0228\n\005value\030\002 \001(\0132"
+    "\".google.api.expr.v1alpha1.ConstantR\005val"
+    "ue\022\020\n\003doc\030\003 \001(\tR\003doc\032\356\002\n\014FunctionDecl\022R\n"
+    "\toverloads\030\001 \003(\01324.google.api.expr.v1alp"
+    "ha1.Decl.FunctionDecl.OverloadR\toverload"
+    "s\032\211\002\n\010Overload\022\037\n\013overload_id\030\001 \001(\tR\nove"
+    "rloadId\0226\n\006params\030\002 \003(\0132\036.google.api.exp"
+    "r.v1alpha1.TypeR\006params\022\037\n\013type_params\030\003"
+    " \003(\tR\ntypeParams\022\?\n\013result_type\030\004 \001(\0132\036."
+    "google.api.expr.v1alpha1.TypeR\nresultTyp"
+    "e\0220\n\024is_instance_function\030\005 \001(\010R\022isInsta"
+    "nceFunction\022\020\n\003doc\030\006 \001(\tR\003docB\013\n\tdecl_ki"
+    "nd\"z\n\tReference\022\022\n\004name\030\001 \001(\tR\004name\022\037\n\013o"
+    "verload_id\030\003 \003(\tR\noverloadId\0228\n\005value\030\004 "
+    "\001(\0132\".google.api.expr.v1alpha1.ConstantR"
+    "\005valueB\360\001\n\034com.google.api.expr.v1alpha1B"
+    "\014CheckedProtoP\001Z<google.golang.org/genpr"
+    "oto/googleapis/api/expr/v1alpha1;expr\370\001\001"
+    "\242\002\003GAE\252\002\030Google.Api.Expr.V1alpha1\312\002\030Goog"
+    "le\\Api\\Expr\\V1alpha1\342\002$Google\\Api\\Expr\\V"
+    "1alpha1\\GPBMetadata\352\002\033Google::Api::Expr:"
+    ":V1alpha1b\006proto3"
+};
+static const ::_pbi::DescriptorTable* const descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_deps[3] =
+    {
+        &::descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto,
+        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
+        &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
+};
+static ::absl::once_flag descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once;
+const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto = {
+    false,
+    false,
+    3257,
+    descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto,
+    "google/api/expr/v1alpha1/checked.proto",
+    &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+    descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_deps,
+    3,
+    13,
+    schemas,
+    file_default_instances,
+    TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::offsets,
+    file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto,
+    file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto,
+    file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto,
+};
+
+// This function exists to be marked as weak.
+// It can significantly speed up compilation by breaking up LLVM's SCC
+// in the .pb.cc translation units. Large translation units see a
+// reduction of more than 35% of walltime for optimized builds. Without
+// the weak attribute all the messages in the file, including all the
+// vtables and everything they use become part of the same SCC through
+// a cycle like:
+// GetMetadata -> descriptor table -> default instances ->
+//   vtables -> GetMetadata
+// By adding a weak function here we break the connection from the
+// individual vtables back into the descriptor table.
+PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter() {
+  return &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+}
+// Force running AddDescriptors() at dynamic initialization time.
+PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
+static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto);
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+const ::google::protobuf::EnumDescriptor* Type_PrimitiveType_descriptor() {
+  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto);
+  return file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[0];
+}
+bool Type_PrimitiveType_IsValid(int value) {
+  switch (value) {
+    case 0:
+    case 1:
+    case 2:
+    case 3:
+    case 4:
+    case 5:
+    case 6:
+      return true;
+    default:
+      return false;
+  }
+}
+#if (__cplusplus < 201703) && \
+  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
+
+constexpr Type_PrimitiveType Type::PRIMITIVE_TYPE_UNSPECIFIED;
+constexpr Type_PrimitiveType Type::BOOL;
+constexpr Type_PrimitiveType Type::INT64;
+constexpr Type_PrimitiveType Type::UINT64;
+constexpr Type_PrimitiveType Type::DOUBLE;
+constexpr Type_PrimitiveType Type::STRING;
+constexpr Type_PrimitiveType Type::BYTES;
+constexpr Type_PrimitiveType Type::PrimitiveType_MIN;
+constexpr Type_PrimitiveType Type::PrimitiveType_MAX;
+constexpr int Type::PrimitiveType_ARRAYSIZE;
+
+#endif  // (__cplusplus < 201703) &&
+        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
+const ::google::protobuf::EnumDescriptor* Type_WellKnownType_descriptor() {
+  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto);
+  return file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[1];
+}
+bool Type_WellKnownType_IsValid(int value) {
+  switch (value) {
+    case 0:
+    case 1:
+    case 2:
+    case 3:
+      return true;
+    default:
+      return false;
+  }
+}
+#if (__cplusplus < 201703) && \
+  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
+
+constexpr Type_WellKnownType Type::WELL_KNOWN_TYPE_UNSPECIFIED;
+constexpr Type_WellKnownType Type::ANY;
+constexpr Type_WellKnownType Type::TIMESTAMP;
+constexpr Type_WellKnownType Type::DURATION;
+constexpr Type_WellKnownType Type::WellKnownType_MIN;
+constexpr Type_WellKnownType Type::WellKnownType_MAX;
+constexpr int Type::WellKnownType_ARRAYSIZE;
+
+#endif  // (__cplusplus < 201703) &&
+        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
+// ===================================================================
+
+CheckedExpr_ReferenceMapEntry_DoNotUse::CheckedExpr_ReferenceMapEntry_DoNotUse() {}
+CheckedExpr_ReferenceMapEntry_DoNotUse::CheckedExpr_ReferenceMapEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void CheckedExpr_ReferenceMapEntry_DoNotUse::MergeFrom(const CheckedExpr_ReferenceMapEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata CheckedExpr_ReferenceMapEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[0]);
+}
+// ===================================================================
+
+CheckedExpr_TypeMapEntry_DoNotUse::CheckedExpr_TypeMapEntry_DoNotUse() {}
+CheckedExpr_TypeMapEntry_DoNotUse::CheckedExpr_TypeMapEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void CheckedExpr_TypeMapEntry_DoNotUse::MergeFrom(const CheckedExpr_TypeMapEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata CheckedExpr_TypeMapEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[1]);
+}
+// ===================================================================
+
+class CheckedExpr::_Internal {
+ public:
+  using HasBits = decltype(std::declval<CheckedExpr>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::SourceInfo& source_info(const CheckedExpr* msg);
+  static void set_has_source_info(HasBits* has_bits) {
+    (*has_bits)[0] |= 2u;
+  }
+  static const ::google::api::expr::v1alpha1::Expr& expr(const CheckedExpr* msg);
+  static void set_has_expr(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::SourceInfo& CheckedExpr::_Internal::source_info(const CheckedExpr* msg) {
+  return *msg->_impl_.source_info_;
+}
+const ::google::api::expr::v1alpha1::Expr& CheckedExpr::_Internal::expr(const CheckedExpr* msg) {
+  return *msg->_impl_.expr_;
+}
+void CheckedExpr::clear_source_info() {
+  if (_impl_.source_info_ != nullptr) _impl_.source_info_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000002u;
+}
+void CheckedExpr::clear_expr() {
+  if (_impl_.expr_ != nullptr) _impl_.expr_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+CheckedExpr::CheckedExpr(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.CheckedExpr)
+}
+CheckedExpr::CheckedExpr(const CheckedExpr& from) : ::google::protobuf::Message() {
+  CheckedExpr* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.reference_map_) */ {},
+      /* decltype(_impl_.type_map_) */ {},
+      decltype(_impl_.expr_version_){},
+      decltype(_impl_.expr_){nullptr},
+      decltype(_impl_.source_info_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _this->_impl_.reference_map_.MergeFrom(from._impl_.reference_map_);
+  _this->_impl_.type_map_.MergeFrom(from._impl_.type_map_);
+  _impl_.expr_version_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.expr_version_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_expr_version().empty()) {
+    _this->_impl_.expr_version_.Set(from._internal_expr_version(), _this->GetArenaForAllocation());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.expr_ = new ::google::api::expr::v1alpha1::Expr(*from._impl_.expr_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
+    _this->_impl_.source_info_ = new ::google::api::expr::v1alpha1::SourceInfo(*from._impl_.source_info_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.CheckedExpr)
+}
+inline void CheckedExpr::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.reference_map_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      /* decltype(_impl_.type_map_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      decltype(_impl_.expr_version_){},
+      decltype(_impl_.expr_){nullptr},
+      decltype(_impl_.source_info_){nullptr},
+  };
+  _impl_.expr_version_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.expr_version_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+CheckedExpr::~CheckedExpr() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.CheckedExpr)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void CheckedExpr::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.reference_map_.~MapField();
+  _impl_.type_map_.~MapField();
+  _impl_.expr_version_.Destroy();
+  if (this != internal_default_instance()) delete _impl_.expr_;
+  if (this != internal_default_instance()) delete _impl_.source_info_;
+}
+void CheckedExpr::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void CheckedExpr::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.CheckedExpr)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.reference_map_.Clear();
+  _impl_.type_map_.Clear();
+  _impl_.expr_version_.ClearToEmpty();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      ABSL_DCHECK(_impl_.expr_ != nullptr);
+      _impl_.expr_->Clear();
+    }
+    if (cached_has_bits & 0x00000002u) {
+      ABSL_DCHECK(_impl_.source_info_ != nullptr);
+      _impl_.source_info_->Clear();
+    }
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* CheckedExpr::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 5, 6, 57, 2> CheckedExpr::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_._has_bits_),
+    0, // no _extensions_
+    6, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967233,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    5,  // num_field_entries
+    6,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_CheckedExpr_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // .google.api.expr.v1alpha1.Expr expr = 4 [json_name = "expr"];
+    {::_pbi::TcParser::FastMtS1,
+     {34, 0, 4, PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.expr_)}},
+    // .google.api.expr.v1alpha1.SourceInfo source_info = 5 [json_name = "sourceInfo"];
+    {::_pbi::TcParser::FastMtS1,
+     {42, 1, 5, PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.source_info_)}},
+    // string expr_version = 6 [json_name = "exprVersion"];
+    {::_pbi::TcParser::FastUS1,
+     {50, 63, 0, PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.expr_version_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2 [json_name = "referenceMap"];
+    {PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.reference_map_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3 [json_name = "typeMap"];
+    {PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.type_map_), -1, 2,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // .google.api.expr.v1alpha1.Expr expr = 4 [json_name = "expr"];
+    {PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.expr_), _Internal::kHasBitsOffset + 0, 4,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.SourceInfo source_info = 5 [json_name = "sourceInfo"];
+    {PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.source_info_), _Internal::kHasBitsOffset + 1, 5,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // string expr_version = 6 [json_name = "exprVersion"];
+    {PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.expr_version_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }}, {{
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(CheckedExpr()._impl_.reference_map_)>(1, 0, 0)},
+    {::_pbi::TcParser::CreateInArenaStorageCb<::google::api::expr::v1alpha1::Reference>},
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(CheckedExpr()._impl_.type_map_)>(1, 0, 0)},
+    {::_pbi::TcParser::CreateInArenaStorageCb<::google::api::expr::v1alpha1::Type>},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::SourceInfo>()},
+  }}, {{
+    "\44\0\0\0\0\14\0\0"
+    "google.api.expr.v1alpha1.CheckedExpr"
+    "expr_version"
+  }},
+};
+
+::uint8_t* CheckedExpr::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.CheckedExpr)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2 [json_name = "referenceMap"];
+  if (!_internal_reference_map().empty()) {
+    using MapType = ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Reference>;
+    using WireHelper = CheckedExpr_ReferenceMapEntry_DoNotUse::Funcs;
+    const auto& field = _internal_reference_map();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            2, entry.first, entry.second, target, stream);
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            2, entry.first, entry.second, target, stream);
+      }
+    }
+  }
+
+  // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3 [json_name = "typeMap"];
+  if (!_internal_type_map().empty()) {
+    using MapType = ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Type>;
+    using WireHelper = CheckedExpr_TypeMapEntry_DoNotUse::Funcs;
+    const auto& field = _internal_type_map();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            3, entry.first, entry.second, target, stream);
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            3, entry.first, entry.second, target, stream);
+      }
+    }
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Expr expr = 4 [json_name = "expr"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(4, _Internal::expr(this),
+        _Internal::expr(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.api.expr.v1alpha1.SourceInfo source_info = 5 [json_name = "sourceInfo"];
+  if (cached_has_bits & 0x00000002u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(5, _Internal::source_info(this),
+        _Internal::source_info(this).GetCachedSize(), target, stream);
+  }
+
+  // string expr_version = 6 [json_name = "exprVersion"];
+  if (!this->_internal_expr_version().empty()) {
+    const std::string& _s = this->_internal_expr_version();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.CheckedExpr.expr_version");
+    target = stream->WriteStringMaybeAliased(6, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.CheckedExpr)
+  return target;
+}
+
+::size_t CheckedExpr::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.CheckedExpr)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2 [json_name = "referenceMap"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_reference_map_size());
+  for (const auto& entry : _internal_reference_map()) {
+    total_size += CheckedExpr_ReferenceMapEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3 [json_name = "typeMap"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_type_map_size());
+  for (const auto& entry : _internal_type_map()) {
+    total_size += CheckedExpr_TypeMapEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // string expr_version = 6 [json_name = "exprVersion"];
+  if (!this->_internal_expr_version().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_expr_version());
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    // .google.api.expr.v1alpha1.Expr expr = 4 [json_name = "expr"];
+    if (cached_has_bits & 0x00000001u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.expr_);
+    }
+
+    // .google.api.expr.v1alpha1.SourceInfo source_info = 5 [json_name = "sourceInfo"];
+    if (cached_has_bits & 0x00000002u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.source_info_);
+    }
+
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData CheckedExpr::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    CheckedExpr::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*CheckedExpr::GetClassData() const { return &_class_data_; }
+
+
+void CheckedExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<CheckedExpr*>(&to_msg);
+  auto& from = static_cast<const CheckedExpr&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.CheckedExpr)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_impl_.reference_map_.MergeFrom(from._impl_.reference_map_);
+  _this->_impl_.type_map_.MergeFrom(from._impl_.type_map_);
+  if (!from._internal_expr_version().empty()) {
+    _this->_internal_set_expr_version(from._internal_expr_version());
+  }
+  cached_has_bits = from._impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      _this->_internal_mutable_expr()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+          from._internal_expr());
+    }
+    if (cached_has_bits & 0x00000002u) {
+      _this->_internal_mutable_source_info()->::google::api::expr::v1alpha1::SourceInfo::MergeFrom(
+          from._internal_source_info());
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void CheckedExpr::CopyFrom(const CheckedExpr& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.CheckedExpr)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool CheckedExpr::IsInitialized() const {
+  return true;
+}
+
+void CheckedExpr::InternalSwap(CheckedExpr* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  _impl_.reference_map_.InternalSwap(&other->_impl_.reference_map_);
+  _impl_.type_map_.InternalSwap(&other->_impl_.type_map_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.expr_version_, lhs_arena,
+                                       &other->_impl_.expr_version_, rhs_arena);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.source_info_)
+      + sizeof(CheckedExpr::_impl_.source_info_)
+      - PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.expr_)>(
+          reinterpret_cast<char*>(&_impl_.expr_),
+          reinterpret_cast<char*>(&other->_impl_.expr_));
+}
+
+::google::protobuf::Metadata CheckedExpr::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[2]);
+}
+// ===================================================================
+
+class Type_ListType::_Internal {
+ public:
+  using HasBits = decltype(std::declval<Type_ListType>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(Type_ListType, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::Type& elem_type(const Type_ListType* msg);
+  static void set_has_elem_type(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Type& Type_ListType::_Internal::elem_type(const Type_ListType* msg) {
+  return *msg->_impl_.elem_type_;
+}
+Type_ListType::Type_ListType(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.ListType)
+}
+Type_ListType::Type_ListType(const Type_ListType& from) : ::google::protobuf::Message() {
+  Type_ListType* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.elem_type_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.elem_type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.elem_type_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.ListType)
+}
+inline void Type_ListType::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.elem_type_){nullptr},
+  };
+}
+Type_ListType::~Type_ListType() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.ListType)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Type_ListType::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  if (this != internal_default_instance()) delete _impl_.elem_type_;
+}
+void Type_ListType::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Type_ListType::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.ListType)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    ABSL_DCHECK(_impl_.elem_type_ != nullptr);
+    _impl_.elem_type_->Clear();
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Type_ListType::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Type_ListType::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(Type_ListType, _impl_._has_bits_),
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Type_ListType_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // .google.api.expr.v1alpha1.Type elem_type = 1 [json_name = "elemType"];
+    {::_pbi::TcParser::FastMtS1,
+     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Type_ListType, _impl_.elem_type_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.api.expr.v1alpha1.Type elem_type = 1 [json_name = "elemType"];
+    {PROTOBUF_FIELD_OFFSET(Type_ListType, _impl_.elem_type_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* Type_ListType::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.ListType)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Type elem_type = 1 [json_name = "elemType"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(1, _Internal::elem_type(this),
+        _Internal::elem_type(this).GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.ListType)
+  return target;
+}
+
+::size_t Type_ListType::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.ListType)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // .google.api.expr.v1alpha1.Type elem_type = 1 [json_name = "elemType"];
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    total_size += 1 +
+      ::google::protobuf::internal::WireFormatLite::MessageSize(
+        *_impl_.elem_type_);
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Type_ListType::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Type_ListType::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Type_ListType::GetClassData() const { return &_class_data_; }
+
+
+void Type_ListType::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Type_ListType*>(&to_msg);
+  auto& from = static_cast<const Type_ListType&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.ListType)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_internal_mutable_elem_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
+        from._internal_elem_type());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Type_ListType::CopyFrom(const Type_ListType& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.ListType)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Type_ListType::IsInitialized() const {
+  return true;
+}
+
+void Type_ListType::InternalSwap(Type_ListType* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  swap(_impl_.elem_type_, other->_impl_.elem_type_);
+}
+
+::google::protobuf::Metadata Type_ListType::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[3]);
+}
+// ===================================================================
+
+class Type_MapType::_Internal {
+ public:
+  using HasBits = decltype(std::declval<Type_MapType>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(Type_MapType, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::Type& key_type(const Type_MapType* msg);
+  static void set_has_key_type(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+  static const ::google::api::expr::v1alpha1::Type& value_type(const Type_MapType* msg);
+  static void set_has_value_type(HasBits* has_bits) {
+    (*has_bits)[0] |= 2u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Type& Type_MapType::_Internal::key_type(const Type_MapType* msg) {
+  return *msg->_impl_.key_type_;
+}
+const ::google::api::expr::v1alpha1::Type& Type_MapType::_Internal::value_type(const Type_MapType* msg) {
+  return *msg->_impl_.value_type_;
+}
+Type_MapType::Type_MapType(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.MapType)
+}
+Type_MapType::Type_MapType(const Type_MapType& from) : ::google::protobuf::Message() {
+  Type_MapType* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.key_type_){nullptr},
+      decltype(_impl_.value_type_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.key_type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.key_type_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
+    _this->_impl_.value_type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.value_type_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.MapType)
+}
+inline void Type_MapType::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.key_type_){nullptr},
+      decltype(_impl_.value_type_){nullptr},
+  };
+}
+Type_MapType::~Type_MapType() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.MapType)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Type_MapType::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  if (this != internal_default_instance()) delete _impl_.key_type_;
+  if (this != internal_default_instance()) delete _impl_.value_type_;
+}
+void Type_MapType::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Type_MapType::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.MapType)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      ABSL_DCHECK(_impl_.key_type_ != nullptr);
+      _impl_.key_type_->Clear();
+    }
+    if (cached_has_bits & 0x00000002u) {
+      ABSL_DCHECK(_impl_.value_type_ != nullptr);
+      _impl_.value_type_->Clear();
+    }
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Type_MapType::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Type_MapType::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(Type_MapType, _impl_._has_bits_),
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Type_MapType_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // .google.api.expr.v1alpha1.Type value_type = 2 [json_name = "valueType"];
+    {::_pbi::TcParser::FastMtS1,
+     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Type_MapType, _impl_.value_type_)}},
+    // .google.api.expr.v1alpha1.Type key_type = 1 [json_name = "keyType"];
+    {::_pbi::TcParser::FastMtS1,
+     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Type_MapType, _impl_.key_type_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.api.expr.v1alpha1.Type key_type = 1 [json_name = "keyType"];
+    {PROTOBUF_FIELD_OFFSET(Type_MapType, _impl_.key_type_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Type value_type = 2 [json_name = "valueType"];
+    {PROTOBUF_FIELD_OFFSET(Type_MapType, _impl_.value_type_), _Internal::kHasBitsOffset + 1, 1,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* Type_MapType::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.MapType)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Type key_type = 1 [json_name = "keyType"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(1, _Internal::key_type(this),
+        _Internal::key_type(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.api.expr.v1alpha1.Type value_type = 2 [json_name = "valueType"];
+  if (cached_has_bits & 0x00000002u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(2, _Internal::value_type(this),
+        _Internal::value_type(this).GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.MapType)
+  return target;
+}
+
+::size_t Type_MapType::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.MapType)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    // .google.api.expr.v1alpha1.Type key_type = 1 [json_name = "keyType"];
+    if (cached_has_bits & 0x00000001u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.key_type_);
+    }
+
+    // .google.api.expr.v1alpha1.Type value_type = 2 [json_name = "valueType"];
+    if (cached_has_bits & 0x00000002u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.value_type_);
+    }
+
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Type_MapType::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Type_MapType::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Type_MapType::GetClassData() const { return &_class_data_; }
+
+
+void Type_MapType::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Type_MapType*>(&to_msg);
+  auto& from = static_cast<const Type_MapType&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.MapType)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  cached_has_bits = from._impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      _this->_internal_mutable_key_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
+          from._internal_key_type());
+    }
+    if (cached_has_bits & 0x00000002u) {
+      _this->_internal_mutable_value_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
+          from._internal_value_type());
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Type_MapType::CopyFrom(const Type_MapType& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.MapType)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Type_MapType::IsInitialized() const {
+  return true;
+}
+
+void Type_MapType::InternalSwap(Type_MapType* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(Type_MapType, _impl_.value_type_)
+      + sizeof(Type_MapType::_impl_.value_type_)
+      - PROTOBUF_FIELD_OFFSET(Type_MapType, _impl_.key_type_)>(
+          reinterpret_cast<char*>(&_impl_.key_type_),
+          reinterpret_cast<char*>(&other->_impl_.key_type_));
+}
+
+::google::protobuf::Metadata Type_MapType::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[4]);
+}
+// ===================================================================
+
+class Type_FunctionType::_Internal {
+ public:
+  using HasBits = decltype(std::declval<Type_FunctionType>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(Type_FunctionType, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::Type& result_type(const Type_FunctionType* msg);
+  static void set_has_result_type(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Type& Type_FunctionType::_Internal::result_type(const Type_FunctionType* msg) {
+  return *msg->_impl_.result_type_;
+}
+Type_FunctionType::Type_FunctionType(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.FunctionType)
+}
+Type_FunctionType::Type_FunctionType(const Type_FunctionType& from) : ::google::protobuf::Message() {
+  Type_FunctionType* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.arg_types_){from._impl_.arg_types_},
+      decltype(_impl_.result_type_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.result_type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.result_type_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.FunctionType)
+}
+inline void Type_FunctionType::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.arg_types_){arena},
+      decltype(_impl_.result_type_){nullptr},
+  };
+}
+Type_FunctionType::~Type_FunctionType() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.FunctionType)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Type_FunctionType::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.arg_types_.~RepeatedPtrField();
+  if (this != internal_default_instance()) delete _impl_.result_type_;
+}
+void Type_FunctionType::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Type_FunctionType::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.FunctionType)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_arg_types()->Clear();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    ABSL_DCHECK(_impl_.result_type_ != nullptr);
+    _impl_.result_type_->Clear();
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Type_FunctionType::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Type_FunctionType::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(Type_FunctionType, _impl_._has_bits_),
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Type_FunctionType_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.api.expr.v1alpha1.Type arg_types = 2 [json_name = "argTypes"];
+    {::_pbi::TcParser::FastMtR1,
+     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Type_FunctionType, _impl_.arg_types_)}},
+    // .google.api.expr.v1alpha1.Type result_type = 1 [json_name = "resultType"];
+    {::_pbi::TcParser::FastMtS1,
+     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Type_FunctionType, _impl_.result_type_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.api.expr.v1alpha1.Type result_type = 1 [json_name = "resultType"];
+    {PROTOBUF_FIELD_OFFSET(Type_FunctionType, _impl_.result_type_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // repeated .google.api.expr.v1alpha1.Type arg_types = 2 [json_name = "argTypes"];
+    {PROTOBUF_FIELD_OFFSET(Type_FunctionType, _impl_.arg_types_), -1, 1,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* Type_FunctionType::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.FunctionType)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Type result_type = 1 [json_name = "resultType"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(1, _Internal::result_type(this),
+        _Internal::result_type(this).GetCachedSize(), target, stream);
+  }
+
+  // repeated .google.api.expr.v1alpha1.Type arg_types = 2 [json_name = "argTypes"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_arg_types_size()); i < n; i++) {
+    const auto& repfield = this->_internal_arg_types().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.FunctionType)
+  return target;
+}
+
+::size_t Type_FunctionType::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.FunctionType)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Type arg_types = 2 [json_name = "argTypes"];
+  total_size += 1UL * this->_internal_arg_types_size();
+  for (const auto& msg : this->_internal_arg_types()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  // .google.api.expr.v1alpha1.Type result_type = 1 [json_name = "resultType"];
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    total_size += 1 +
+      ::google::protobuf::internal::WireFormatLite::MessageSize(
+        *_impl_.result_type_);
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Type_FunctionType::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Type_FunctionType::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Type_FunctionType::GetClassData() const { return &_class_data_; }
+
+
+void Type_FunctionType::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Type_FunctionType*>(&to_msg);
+  auto& from = static_cast<const Type_FunctionType&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.FunctionType)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_arg_types()->MergeFrom(from._internal_arg_types());
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_internal_mutable_result_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
+        from._internal_result_type());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Type_FunctionType::CopyFrom(const Type_FunctionType& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.FunctionType)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Type_FunctionType::IsInitialized() const {
+  return true;
+}
+
+void Type_FunctionType::InternalSwap(Type_FunctionType* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  _impl_.arg_types_.InternalSwap(&other->_impl_.arg_types_);
+  swap(_impl_.result_type_, other->_impl_.result_type_);
+}
+
+::google::protobuf::Metadata Type_FunctionType::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[5]);
+}
+// ===================================================================
+
+class Type_AbstractType::_Internal {
+ public:
+};
+
+Type_AbstractType::Type_AbstractType(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.AbstractType)
+}
+Type_AbstractType::Type_AbstractType(const Type_AbstractType& from) : ::google::protobuf::Message() {
+  Type_AbstractType* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.parameter_types_){from._impl_.parameter_types_},
+      decltype(_impl_.name_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_name().empty()) {
+    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.AbstractType)
+}
+inline void Type_AbstractType::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.parameter_types_){arena},
+      decltype(_impl_.name_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+Type_AbstractType::~Type_AbstractType() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.AbstractType)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Type_AbstractType::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.parameter_types_.~RepeatedPtrField();
+  _impl_.name_.Destroy();
+}
+void Type_AbstractType::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Type_AbstractType::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.AbstractType)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_parameter_types()->Clear();
+  _impl_.name_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Type_AbstractType::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 1, 55, 2> Type_AbstractType::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Type_AbstractType_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.api.expr.v1alpha1.Type parameter_types = 2 [json_name = "parameterTypes"];
+    {::_pbi::TcParser::FastMtR1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Type_AbstractType, _impl_.parameter_types_)}},
+    // string name = 1 [json_name = "name"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Type_AbstractType, _impl_.name_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string name = 1 [json_name = "name"];
+    {PROTOBUF_FIELD_OFFSET(Type_AbstractType, _impl_.name_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // repeated .google.api.expr.v1alpha1.Type parameter_types = 2 [json_name = "parameterTypes"];
+    {PROTOBUF_FIELD_OFFSET(Type_AbstractType, _impl_.parameter_types_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type>()},
+  }}, {{
+    "\52\4\0\0\0\0\0\0"
+    "google.api.expr.v1alpha1.Type.AbstractType"
+    "name"
+  }},
+};
+
+::uint8_t* Type_AbstractType::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.AbstractType)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string name = 1 [json_name = "name"];
+  if (!this->_internal_name().empty()) {
+    const std::string& _s = this->_internal_name();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Type.AbstractType.name");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // repeated .google.api.expr.v1alpha1.Type parameter_types = 2 [json_name = "parameterTypes"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_parameter_types_size()); i < n; i++) {
+    const auto& repfield = this->_internal_parameter_types().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.AbstractType)
+  return target;
+}
+
+::size_t Type_AbstractType::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.AbstractType)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Type parameter_types = 2 [json_name = "parameterTypes"];
+  total_size += 1UL * this->_internal_parameter_types_size();
+  for (const auto& msg : this->_internal_parameter_types()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  // string name = 1 [json_name = "name"];
+  if (!this->_internal_name().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_name());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Type_AbstractType::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Type_AbstractType::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Type_AbstractType::GetClassData() const { return &_class_data_; }
+
+
+void Type_AbstractType::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Type_AbstractType*>(&to_msg);
+  auto& from = static_cast<const Type_AbstractType&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.AbstractType)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_parameter_types()->MergeFrom(from._internal_parameter_types());
+  if (!from._internal_name().empty()) {
+    _this->_internal_set_name(from._internal_name());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Type_AbstractType::CopyFrom(const Type_AbstractType& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.AbstractType)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Type_AbstractType::IsInitialized() const {
+  return true;
+}
+
+void Type_AbstractType::InternalSwap(Type_AbstractType* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.parameter_types_.InternalSwap(&other->_impl_.parameter_types_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
+                                       &other->_impl_.name_, rhs_arena);
+}
+
+::google::protobuf::Metadata Type_AbstractType::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[6]);
+}
+// ===================================================================
+
+class Type::_Internal {
+ public:
+  static constexpr ::int32_t kOneofCaseOffset =
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type, _impl_._oneof_case_);
+  static const ::google::protobuf::Empty& dyn(const Type* msg);
+  static const ::google::api::expr::v1alpha1::Type_ListType& list_type(const Type* msg);
+  static const ::google::api::expr::v1alpha1::Type_MapType& map_type(const Type* msg);
+  static const ::google::api::expr::v1alpha1::Type_FunctionType& function(const Type* msg);
+  static const ::google::api::expr::v1alpha1::Type& type(const Type* msg);
+  static const ::google::protobuf::Empty& error(const Type* msg);
+  static const ::google::api::expr::v1alpha1::Type_AbstractType& abstract_type(const Type* msg);
+};
+
+const ::google::protobuf::Empty& Type::_Internal::dyn(const Type* msg) {
+  return *msg->_impl_.type_kind_.dyn_;
+}
+const ::google::api::expr::v1alpha1::Type_ListType& Type::_Internal::list_type(const Type* msg) {
+  return *msg->_impl_.type_kind_.list_type_;
+}
+const ::google::api::expr::v1alpha1::Type_MapType& Type::_Internal::map_type(const Type* msg) {
+  return *msg->_impl_.type_kind_.map_type_;
+}
+const ::google::api::expr::v1alpha1::Type_FunctionType& Type::_Internal::function(const Type* msg) {
+  return *msg->_impl_.type_kind_.function_;
+}
+const ::google::api::expr::v1alpha1::Type& Type::_Internal::type(const Type* msg) {
+  return *msg->_impl_.type_kind_.type_;
+}
+const ::google::protobuf::Empty& Type::_Internal::error(const Type* msg) {
+  return *msg->_impl_.type_kind_.error_;
+}
+const ::google::api::expr::v1alpha1::Type_AbstractType& Type::_Internal::abstract_type(const Type* msg) {
+  return *msg->_impl_.type_kind_.abstract_type_;
+}
+void Type::set_allocated_dyn(::google::protobuf::Empty* dyn) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_type_kind();
+  if (dyn) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(
+                reinterpret_cast<::google::protobuf::MessageLite*>(dyn));
+    if (message_arena != submessage_arena) {
+      dyn = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, dyn, submessage_arena);
+    }
+    set_has_dyn();
+    _impl_.type_kind_.dyn_ = dyn;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.dyn)
+}
+void Type::clear_dyn() {
+  if (type_kind_case() == kDyn) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.type_kind_.dyn_;
+    }
+    clear_has_type_kind();
+  }
+}
+void Type::set_allocated_list_type(::google::api::expr::v1alpha1::Type_ListType* list_type) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_type_kind();
+  if (list_type) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(list_type);
+    if (message_arena != submessage_arena) {
+      list_type = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, list_type, submessage_arena);
+    }
+    set_has_list_type();
+    _impl_.type_kind_.list_type_ = list_type;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.list_type)
+}
+void Type::set_allocated_map_type(::google::api::expr::v1alpha1::Type_MapType* map_type) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_type_kind();
+  if (map_type) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(map_type);
+    if (message_arena != submessage_arena) {
+      map_type = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, map_type, submessage_arena);
+    }
+    set_has_map_type();
+    _impl_.type_kind_.map_type_ = map_type;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.map_type)
+}
+void Type::set_allocated_function(::google::api::expr::v1alpha1::Type_FunctionType* function) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_type_kind();
+  if (function) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(function);
+    if (message_arena != submessage_arena) {
+      function = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, function, submessage_arena);
+    }
+    set_has_function();
+    _impl_.type_kind_.function_ = function;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.function)
+}
+void Type::set_allocated_type(::google::api::expr::v1alpha1::Type* type) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_type_kind();
+  if (type) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(type);
+    if (message_arena != submessage_arena) {
+      type = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, type, submessage_arena);
+    }
+    set_has_type();
+    _impl_.type_kind_.type_ = type;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.type)
+}
+void Type::set_allocated_error(::google::protobuf::Empty* error) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_type_kind();
+  if (error) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(
+                reinterpret_cast<::google::protobuf::MessageLite*>(error));
+    if (message_arena != submessage_arena) {
+      error = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, error, submessage_arena);
+    }
+    set_has_error();
+    _impl_.type_kind_.error_ = error;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.error)
+}
+void Type::clear_error() {
+  if (type_kind_case() == kError) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.type_kind_.error_;
+    }
+    clear_has_type_kind();
+  }
+}
+void Type::set_allocated_abstract_type(::google::api::expr::v1alpha1::Type_AbstractType* abstract_type) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_type_kind();
+  if (abstract_type) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(abstract_type);
+    if (message_arena != submessage_arena) {
+      abstract_type = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, abstract_type, submessage_arena);
+    }
+    set_has_abstract_type();
+    _impl_.type_kind_.abstract_type_ = abstract_type;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.abstract_type)
+}
+Type::Type(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type)
+}
+Type::Type(const Type& from) : ::google::protobuf::Message() {
+  Type* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.type_kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  clear_has_type_kind();
+  switch (from.type_kind_case()) {
+    case kDyn: {
+      _this->_internal_mutable_dyn()->::google::protobuf::Empty::MergeFrom(
+          from._internal_dyn());
+      break;
+    }
+    case kNull: {
+      _this->_internal_set_null(from._internal_null());
+      break;
+    }
+    case kPrimitive: {
+      _this->_internal_set_primitive(from._internal_primitive());
+      break;
+    }
+    case kWrapper: {
+      _this->_internal_set_wrapper(from._internal_wrapper());
+      break;
+    }
+    case kWellKnown: {
+      _this->_internal_set_well_known(from._internal_well_known());
+      break;
+    }
+    case kListType: {
+      _this->_internal_mutable_list_type()->::google::api::expr::v1alpha1::Type_ListType::MergeFrom(
+          from._internal_list_type());
+      break;
+    }
+    case kMapType: {
+      _this->_internal_mutable_map_type()->::google::api::expr::v1alpha1::Type_MapType::MergeFrom(
+          from._internal_map_type());
+      break;
+    }
+    case kFunction: {
+      _this->_internal_mutable_function()->::google::api::expr::v1alpha1::Type_FunctionType::MergeFrom(
+          from._internal_function());
+      break;
+    }
+    case kMessageType: {
+      _this->_internal_set_message_type(from._internal_message_type());
+      break;
+    }
+    case kTypeParam: {
+      _this->_internal_set_type_param(from._internal_type_param());
+      break;
+    }
+    case kType: {
+      _this->_internal_mutable_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
+          from._internal_type());
+      break;
+    }
+    case kError: {
+      _this->_internal_mutable_error()->::google::protobuf::Empty::MergeFrom(
+          from._internal_error());
+      break;
+    }
+    case kAbstractType: {
+      _this->_internal_mutable_abstract_type()->::google::api::expr::v1alpha1::Type_AbstractType::MergeFrom(
+          from._internal_abstract_type());
+      break;
+    }
+    case TYPE_KIND_NOT_SET: {
+      break;
+    }
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type)
+}
+inline void Type::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.type_kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  clear_has_type_kind();
+}
+Type::~Type() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Type::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  if (has_type_kind()) {
+    clear_type_kind();
+  }
+}
+void Type::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+void Type::clear_type_kind() {
+// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1alpha1.Type)
+  switch (type_kind_case()) {
+    case kDyn: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.type_kind_.dyn_;
+      }
+      break;
+    }
+    case kNull: {
+      // No need to clear
+      break;
+    }
+    case kPrimitive: {
+      // No need to clear
+      break;
+    }
+    case kWrapper: {
+      // No need to clear
+      break;
+    }
+    case kWellKnown: {
+      // No need to clear
+      break;
+    }
+    case kListType: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.type_kind_.list_type_;
+      }
+      break;
+    }
+    case kMapType: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.type_kind_.map_type_;
+      }
+      break;
+    }
+    case kFunction: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.type_kind_.function_;
+      }
+      break;
+    }
+    case kMessageType: {
+      _impl_.type_kind_.message_type_.Destroy();
+      break;
+    }
+    case kTypeParam: {
+      _impl_.type_kind_.type_param_.Destroy();
+      break;
+    }
+    case kType: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.type_kind_.type_;
+      }
+      break;
+    }
+    case kError: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.type_kind_.error_;
+      }
+      break;
+    }
+    case kAbstractType: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.type_kind_.abstract_type_;
+      }
+      break;
+    }
+    case TYPE_KIND_NOT_SET: {
+      break;
+    }
+  }
+  _impl_._oneof_case_[0] = TYPE_KIND_NOT_SET;
+}
+
+
+PROTOBUF_NOINLINE void Type::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  clear_type_kind();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Type::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 13, 7, 68, 2> Type::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    14, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294955008,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    13,  // num_field_entries
+    7,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Type_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.protobuf.Empty dyn = 1 [json_name = "dyn"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.dyn_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
+    // .google.protobuf.NullValue null = 2 [json_name = "null"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.null_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
+    // .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3 [json_name = "primitive"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.primitive_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
+    // .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4 [json_name = "wrapper"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.wrapper_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
+    // .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5 [json_name = "wellKnown"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.well_known_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
+    // .google.api.expr.v1alpha1.Type.ListType list_type = 6 [json_name = "listType"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.list_type_), _Internal::kOneofCaseOffset + 0, 1,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Type.MapType map_type = 7 [json_name = "mapType"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.map_type_), _Internal::kOneofCaseOffset + 0, 2,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Type.FunctionType function = 8 [json_name = "function"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.function_), _Internal::kOneofCaseOffset + 0, 3,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // string message_type = 9 [json_name = "messageType"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.message_type_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string type_param = 10 [json_name = "typeParam"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.type_param_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // .google.api.expr.v1alpha1.Type type = 11 [json_name = "type"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.type_), _Internal::kOneofCaseOffset + 0, 4,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Empty error = 12 [json_name = "error"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.error_), _Internal::kOneofCaseOffset + 0, 5,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
+    // .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14 [json_name = "abstractType"];
+    {PROTOBUF_FIELD_OFFSET(Type, _impl_.type_kind_.abstract_type_), _Internal::kOneofCaseOffset + 0, 6,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::FieldAuxDefaultMessage{}, &::google::protobuf::_Empty_default_instance_},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type_ListType>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type_MapType>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type_FunctionType>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type>()},
+    {::_pbi::FieldAuxDefaultMessage{}, &::google::protobuf::_Empty_default_instance_},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type_AbstractType>()},
+  }}, {{
+    "\35\0\0\0\0\0\0\0\0\14\12\0\0\0\0\0"
+    "google.api.expr.v1alpha1.Type"
+    "message_type"
+    "type_param"
+  }},
+};
+
+::uint8_t* Type::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  switch (type_kind_case()) {
+    case kDyn: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, _Internal::dyn(this),
+          _Internal::dyn(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kNull: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteEnumToArray(
+          2, this->_internal_null(), target);
+      break;
+    }
+    case kPrimitive: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteEnumToArray(
+          3, this->_internal_primitive(), target);
+      break;
+    }
+    case kWrapper: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteEnumToArray(
+          4, this->_internal_wrapper(), target);
+      break;
+    }
+    case kWellKnown: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteEnumToArray(
+          5, this->_internal_well_known(), target);
+      break;
+    }
+    case kListType: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(6, _Internal::list_type(this),
+          _Internal::list_type(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kMapType: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(7, _Internal::map_type(this),
+          _Internal::map_type(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kFunction: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(8, _Internal::function(this),
+          _Internal::function(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kMessageType: {
+      const std::string& _s = this->_internal_message_type();
+      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Type.message_type");
+      target = stream->WriteStringMaybeAliased(9, _s, target);
+      break;
+    }
+    case kTypeParam: {
+      const std::string& _s = this->_internal_type_param();
+      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Type.type_param");
+      target = stream->WriteStringMaybeAliased(10, _s, target);
+      break;
+    }
+    case kType: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(11, _Internal::type(this),
+          _Internal::type(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kError: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(12, _Internal::error(this),
+          _Internal::error(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kAbstractType: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(14, _Internal::abstract_type(this),
+          _Internal::abstract_type(this).GetCachedSize(), target, stream);
+      break;
+    }
+    default:
+      break;
+  }
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type)
+  return target;
+}
+
+::size_t Type::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  switch (type_kind_case()) {
+    // .google.protobuf.Empty dyn = 1 [json_name = "dyn"];
+    case kDyn: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.type_kind_.dyn_);
+      break;
+    }
+    // .google.protobuf.NullValue null = 2 [json_name = "null"];
+    case kNull: {
+      total_size += 1 +
+                    ::_pbi::WireFormatLite::EnumSize(this->_internal_null());
+      break;
+    }
+    // .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3 [json_name = "primitive"];
+    case kPrimitive: {
+      total_size += 1 +
+                    ::_pbi::WireFormatLite::EnumSize(this->_internal_primitive());
+      break;
+    }
+    // .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4 [json_name = "wrapper"];
+    case kWrapper: {
+      total_size += 1 +
+                    ::_pbi::WireFormatLite::EnumSize(this->_internal_wrapper());
+      break;
+    }
+    // .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5 [json_name = "wellKnown"];
+    case kWellKnown: {
+      total_size += 1 +
+                    ::_pbi::WireFormatLite::EnumSize(this->_internal_well_known());
+      break;
+    }
+    // .google.api.expr.v1alpha1.Type.ListType list_type = 6 [json_name = "listType"];
+    case kListType: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.type_kind_.list_type_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.Type.MapType map_type = 7 [json_name = "mapType"];
+    case kMapType: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.type_kind_.map_type_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.Type.FunctionType function = 8 [json_name = "function"];
+    case kFunction: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.type_kind_.function_);
+      break;
+    }
+    // string message_type = 9 [json_name = "messageType"];
+    case kMessageType: {
+      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                      this->_internal_message_type());
+      break;
+    }
+    // string type_param = 10 [json_name = "typeParam"];
+    case kTypeParam: {
+      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                      this->_internal_type_param());
+      break;
+    }
+    // .google.api.expr.v1alpha1.Type type = 11 [json_name = "type"];
+    case kType: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.type_kind_.type_);
+      break;
+    }
+    // .google.protobuf.Empty error = 12 [json_name = "error"];
+    case kError: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.type_kind_.error_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14 [json_name = "abstractType"];
+    case kAbstractType: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.type_kind_.abstract_type_);
+      break;
+    }
+    case TYPE_KIND_NOT_SET: {
+      break;
+    }
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Type::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Type::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Type::GetClassData() const { return &_class_data_; }
+
+
+void Type::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Type*>(&to_msg);
+  auto& from = static_cast<const Type&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  switch (from.type_kind_case()) {
+    case kDyn: {
+      _this->_internal_mutable_dyn()->::google::protobuf::Empty::MergeFrom(
+          from._internal_dyn());
+      break;
+    }
+    case kNull: {
+      _this->_internal_set_null(from._internal_null());
+      break;
+    }
+    case kPrimitive: {
+      _this->_internal_set_primitive(from._internal_primitive());
+      break;
+    }
+    case kWrapper: {
+      _this->_internal_set_wrapper(from._internal_wrapper());
+      break;
+    }
+    case kWellKnown: {
+      _this->_internal_set_well_known(from._internal_well_known());
+      break;
+    }
+    case kListType: {
+      _this->_internal_mutable_list_type()->::google::api::expr::v1alpha1::Type_ListType::MergeFrom(
+          from._internal_list_type());
+      break;
+    }
+    case kMapType: {
+      _this->_internal_mutable_map_type()->::google::api::expr::v1alpha1::Type_MapType::MergeFrom(
+          from._internal_map_type());
+      break;
+    }
+    case kFunction: {
+      _this->_internal_mutable_function()->::google::api::expr::v1alpha1::Type_FunctionType::MergeFrom(
+          from._internal_function());
+      break;
+    }
+    case kMessageType: {
+      _this->_internal_set_message_type(from._internal_message_type());
+      break;
+    }
+    case kTypeParam: {
+      _this->_internal_set_type_param(from._internal_type_param());
+      break;
+    }
+    case kType: {
+      _this->_internal_mutable_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
+          from._internal_type());
+      break;
+    }
+    case kError: {
+      _this->_internal_mutable_error()->::google::protobuf::Empty::MergeFrom(
+          from._internal_error());
+      break;
+    }
+    case kAbstractType: {
+      _this->_internal_mutable_abstract_type()->::google::api::expr::v1alpha1::Type_AbstractType::MergeFrom(
+          from._internal_abstract_type());
+      break;
+    }
+    case TYPE_KIND_NOT_SET: {
+      break;
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Type::CopyFrom(const Type& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Type::IsInitialized() const {
+  return true;
+}
+
+void Type::InternalSwap(Type* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_.type_kind_, other->_impl_.type_kind_);
+  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
+}
+
+::google::protobuf::Metadata Type::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[7]);
+}
+// ===================================================================
+
+class Decl_IdentDecl::_Internal {
+ public:
+  using HasBits = decltype(std::declval<Decl_IdentDecl>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::Type& type(const Decl_IdentDecl* msg);
+  static void set_has_type(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+  static const ::google::api::expr::v1alpha1::Constant& value(const Decl_IdentDecl* msg);
+  static void set_has_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 2u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Type& Decl_IdentDecl::_Internal::type(const Decl_IdentDecl* msg) {
+  return *msg->_impl_.type_;
+}
+const ::google::api::expr::v1alpha1::Constant& Decl_IdentDecl::_Internal::value(const Decl_IdentDecl* msg) {
+  return *msg->_impl_.value_;
+}
+void Decl_IdentDecl::clear_value() {
+  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000002u;
+}
+Decl_IdentDecl::Decl_IdentDecl(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl.IdentDecl)
+}
+Decl_IdentDecl::Decl_IdentDecl(const Decl_IdentDecl& from) : ::google::protobuf::Message() {
+  Decl_IdentDecl* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.doc_){},
+      decltype(_impl_.type_){nullptr},
+      decltype(_impl_.value_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.doc_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.doc_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_doc().empty()) {
+    _this->_impl_.doc_.Set(from._internal_doc(), _this->GetArenaForAllocation());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.type_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
+    _this->_impl_.value_ = new ::google::api::expr::v1alpha1::Constant(*from._impl_.value_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl.IdentDecl)
+}
+inline void Decl_IdentDecl::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.doc_){},
+      decltype(_impl_.type_){nullptr},
+      decltype(_impl_.value_){nullptr},
+  };
+  _impl_.doc_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.doc_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+Decl_IdentDecl::~Decl_IdentDecl() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl.IdentDecl)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Decl_IdentDecl::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.doc_.Destroy();
+  if (this != internal_default_instance()) delete _impl_.type_;
+  if (this != internal_default_instance()) delete _impl_.value_;
+}
+void Decl_IdentDecl::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Decl_IdentDecl::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl.IdentDecl)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.doc_.ClearToEmpty();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      ABSL_DCHECK(_impl_.type_ != nullptr);
+      _impl_.type_->Clear();
+    }
+    if (cached_has_bits & 0x00000002u) {
+      ABSL_DCHECK(_impl_.value_ != nullptr);
+      _impl_.value_->Clear();
+    }
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Decl_IdentDecl::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 3, 2, 51, 2> Decl_IdentDecl::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_._has_bits_),
+    0, // no _extensions_
+    3, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967288,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    3,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Decl_IdentDecl_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // .google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];
+    {::_pbi::TcParser::FastMtS1,
+     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_.type_)}},
+    // .google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];
+    {::_pbi::TcParser::FastMtS1,
+     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_.value_)}},
+    // string doc = 3 [json_name = "doc"];
+    {::_pbi::TcParser::FastUS1,
+     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_.doc_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];
+    {PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_.type_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];
+    {PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_.value_), _Internal::kHasBitsOffset + 1, 1,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // string doc = 3 [json_name = "doc"];
+    {PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_.doc_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Constant>()},
+  }}, {{
+    "\47\0\0\3\0\0\0\0"
+    "google.api.expr.v1alpha1.Decl.IdentDecl"
+    "doc"
+  }},
+};
+
+::uint8_t* Decl_IdentDecl::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl.IdentDecl)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(1, _Internal::type(this),
+        _Internal::type(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];
+  if (cached_has_bits & 0x00000002u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(2, _Internal::value(this),
+        _Internal::value(this).GetCachedSize(), target, stream);
+  }
+
+  // string doc = 3 [json_name = "doc"];
+  if (!this->_internal_doc().empty()) {
+    const std::string& _s = this->_internal_doc();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Decl.IdentDecl.doc");
+    target = stream->WriteStringMaybeAliased(3, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl.IdentDecl)
+  return target;
+}
+
+::size_t Decl_IdentDecl::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl.IdentDecl)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string doc = 3 [json_name = "doc"];
+  if (!this->_internal_doc().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_doc());
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    // .google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];
+    if (cached_has_bits & 0x00000001u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.type_);
+    }
+
+    // .google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];
+    if (cached_has_bits & 0x00000002u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.value_);
+    }
+
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Decl_IdentDecl::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Decl_IdentDecl::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Decl_IdentDecl::GetClassData() const { return &_class_data_; }
+
+
+void Decl_IdentDecl::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Decl_IdentDecl*>(&to_msg);
+  auto& from = static_cast<const Decl_IdentDecl&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl.IdentDecl)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_doc().empty()) {
+    _this->_internal_set_doc(from._internal_doc());
+  }
+  cached_has_bits = from._impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      _this->_internal_mutable_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
+          from._internal_type());
+    }
+    if (cached_has_bits & 0x00000002u) {
+      _this->_internal_mutable_value()->::google::api::expr::v1alpha1::Constant::MergeFrom(
+          from._internal_value());
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Decl_IdentDecl::CopyFrom(const Decl_IdentDecl& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl.IdentDecl)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Decl_IdentDecl::IsInitialized() const {
+  return true;
+}
+
+void Decl_IdentDecl::InternalSwap(Decl_IdentDecl* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.doc_, lhs_arena,
+                                       &other->_impl_.doc_, rhs_arena);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_.value_)
+      + sizeof(Decl_IdentDecl::_impl_.value_)
+      - PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_.type_)>(
+          reinterpret_cast<char*>(&_impl_.type_),
+          reinterpret_cast<char*>(&other->_impl_.type_));
+}
+
+::google::protobuf::Metadata Decl_IdentDecl::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[8]);
+}
+// ===================================================================
+
+class Decl_FunctionDecl_Overload::_Internal {
+ public:
+  using HasBits = decltype(std::declval<Decl_FunctionDecl_Overload>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::Type& result_type(const Decl_FunctionDecl_Overload* msg);
+  static void set_has_result_type(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Type& Decl_FunctionDecl_Overload::_Internal::result_type(const Decl_FunctionDecl_Overload* msg) {
+  return *msg->_impl_.result_type_;
+}
+Decl_FunctionDecl_Overload::Decl_FunctionDecl_Overload(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
+}
+Decl_FunctionDecl_Overload::Decl_FunctionDecl_Overload(const Decl_FunctionDecl_Overload& from) : ::google::protobuf::Message() {
+  Decl_FunctionDecl_Overload* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.params_){from._impl_.params_},
+      decltype(_impl_.type_params_){from._impl_.type_params_},
+      decltype(_impl_.overload_id_){},
+      decltype(_impl_.doc_){},
+      decltype(_impl_.result_type_){nullptr},
+      decltype(_impl_.is_instance_function_){},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.overload_id_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.overload_id_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_overload_id().empty()) {
+    _this->_impl_.overload_id_.Set(from._internal_overload_id(), _this->GetArenaForAllocation());
+  }
+  _impl_.doc_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.doc_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_doc().empty()) {
+    _this->_impl_.doc_.Set(from._internal_doc(), _this->GetArenaForAllocation());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.result_type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.result_type_);
+  }
+  _this->_impl_.is_instance_function_ = from._impl_.is_instance_function_;
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
+}
+inline void Decl_FunctionDecl_Overload::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.params_){arena},
+      decltype(_impl_.type_params_){arena},
+      decltype(_impl_.overload_id_){},
+      decltype(_impl_.doc_){},
+      decltype(_impl_.result_type_){nullptr},
+      decltype(_impl_.is_instance_function_){false},
+  };
+  _impl_.overload_id_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.overload_id_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.doc_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.doc_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+Decl_FunctionDecl_Overload::~Decl_FunctionDecl_Overload() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Decl_FunctionDecl_Overload::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.params_.~RepeatedPtrField();
+  _internal_mutable_type_params()->~RepeatedPtrField();
+  _impl_.overload_id_.Destroy();
+  _impl_.doc_.Destroy();
+  if (this != internal_default_instance()) delete _impl_.result_type_;
+}
+void Decl_FunctionDecl_Overload::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Decl_FunctionDecl_Overload::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_params()->Clear();
+  _internal_mutable_type_params()->Clear();
+  _impl_.overload_id_.ClearToEmpty();
+  _impl_.doc_.ClearToEmpty();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    ABSL_DCHECK(_impl_.result_type_ != nullptr);
+    _impl_.result_type_->Clear();
+  }
+  _impl_.is_instance_function_ = false;
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Decl_FunctionDecl_Overload::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<3, 6, 2, 85, 2> Decl_FunctionDecl_Overload::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_._has_bits_),
+    0, // no _extensions_
+    6, 56,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967232,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    6,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Decl_FunctionDecl_Overload_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // string overload_id = 1 [json_name = "overloadId"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.overload_id_)}},
+    // repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];
+    {::_pbi::TcParser::FastMtR1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.params_)}},
+    // repeated string type_params = 3 [json_name = "typeParams"];
+    {::_pbi::TcParser::FastUR1,
+     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.type_params_)}},
+    // .google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];
+    {::_pbi::TcParser::FastMtS1,
+     {34, 0, 1, PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.result_type_)}},
+    // bool is_instance_function = 5 [json_name = "isInstanceFunction"];
+    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Decl_FunctionDecl_Overload, _impl_.is_instance_function_), 63>(),
+     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.is_instance_function_)}},
+    // string doc = 6 [json_name = "doc"];
+    {::_pbi::TcParser::FastUS1,
+     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.doc_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string overload_id = 1 [json_name = "overloadId"];
+    {PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.overload_id_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];
+    {PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.params_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+    // repeated string type_params = 3 [json_name = "typeParams"];
+    {PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.type_params_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
+    // .google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];
+    {PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.result_type_), _Internal::kHasBitsOffset + 0, 1,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // bool is_instance_function = 5 [json_name = "isInstanceFunction"];
+    {PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.is_instance_function_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
+    // string doc = 6 [json_name = "doc"];
+    {PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.doc_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Type>()},
+  }}, {{
+    "\63\13\0\13\0\0\3\0"
+    "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload"
+    "overload_id"
+    "type_params"
+    "doc"
+  }},
+};
+
+::uint8_t* Decl_FunctionDecl_Overload::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string overload_id = 1 [json_name = "overloadId"];
+  if (!this->_internal_overload_id().empty()) {
+    const std::string& _s = this->_internal_overload_id();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_params_size()); i < n; i++) {
+    const auto& repfield = this->_internal_params().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  // repeated string type_params = 3 [json_name = "typeParams"];
+  for (int i = 0, n = this->_internal_type_params_size(); i < n; ++i) {
+    const auto& s = this->_internal_type_params().Get(i);
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params");
+    target = stream->WriteString(3, s, target);
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(4, _Internal::result_type(this),
+        _Internal::result_type(this).GetCachedSize(), target, stream);
+  }
+
+  // bool is_instance_function = 5 [json_name = "isInstanceFunction"];
+  if (this->_internal_is_instance_function() != 0) {
+    target = stream->EnsureSpace(target);
+    target = ::_pbi::WireFormatLite::WriteBoolToArray(
+        5, this->_internal_is_instance_function(), target);
+  }
+
+  // string doc = 6 [json_name = "doc"];
+  if (!this->_internal_doc().empty()) {
+    const std::string& _s = this->_internal_doc();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc");
+    target = stream->WriteStringMaybeAliased(6, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
+  return target;
+}
+
+::size_t Decl_FunctionDecl_Overload::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];
+  total_size += 1UL * this->_internal_params_size();
+  for (const auto& msg : this->_internal_params()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  // repeated string type_params = 3 [json_name = "typeParams"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_type_params().size());
+  for (int i = 0, n = _internal_type_params().size(); i < n; ++i) {
+    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
+        _internal_type_params().Get(i));
+  }
+  // string overload_id = 1 [json_name = "overloadId"];
+  if (!this->_internal_overload_id().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_overload_id());
+  }
+
+  // string doc = 6 [json_name = "doc"];
+  if (!this->_internal_doc().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_doc());
+  }
+
+  // .google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    total_size += 1 +
+      ::google::protobuf::internal::WireFormatLite::MessageSize(
+        *_impl_.result_type_);
+  }
+
+  // bool is_instance_function = 5 [json_name = "isInstanceFunction"];
+  if (this->_internal_is_instance_function() != 0) {
+    total_size += 2;
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Decl_FunctionDecl_Overload::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Decl_FunctionDecl_Overload::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Decl_FunctionDecl_Overload::GetClassData() const { return &_class_data_; }
+
+
+void Decl_FunctionDecl_Overload::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Decl_FunctionDecl_Overload*>(&to_msg);
+  auto& from = static_cast<const Decl_FunctionDecl_Overload&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_params()->MergeFrom(from._internal_params());
+  _this->_internal_mutable_type_params()->MergeFrom(from._internal_type_params());
+  if (!from._internal_overload_id().empty()) {
+    _this->_internal_set_overload_id(from._internal_overload_id());
+  }
+  if (!from._internal_doc().empty()) {
+    _this->_internal_set_doc(from._internal_doc());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_internal_mutable_result_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
+        from._internal_result_type());
+  }
+  if (from._internal_is_instance_function() != 0) {
+    _this->_internal_set_is_instance_function(from._internal_is_instance_function());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Decl_FunctionDecl_Overload::CopyFrom(const Decl_FunctionDecl_Overload& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Decl_FunctionDecl_Overload::IsInitialized() const {
+  return true;
+}
+
+void Decl_FunctionDecl_Overload::InternalSwap(Decl_FunctionDecl_Overload* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  _impl_.params_.InternalSwap(&other->_impl_.params_);
+  _impl_.type_params_.InternalSwap(&other->_impl_.type_params_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.overload_id_, lhs_arena,
+                                       &other->_impl_.overload_id_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.doc_, lhs_arena,
+                                       &other->_impl_.doc_, rhs_arena);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.is_instance_function_)
+      + sizeof(Decl_FunctionDecl_Overload::_impl_.is_instance_function_)
+      - PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.result_type_)>(
+          reinterpret_cast<char*>(&_impl_.result_type_),
+          reinterpret_cast<char*>(&other->_impl_.result_type_));
+}
+
+::google::protobuf::Metadata Decl_FunctionDecl_Overload::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[9]);
+}
+// ===================================================================
+
+class Decl_FunctionDecl::_Internal {
+ public:
+};
+
+Decl_FunctionDecl::Decl_FunctionDecl(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl)
+}
+Decl_FunctionDecl::Decl_FunctionDecl(const Decl_FunctionDecl& from) : ::google::protobuf::Message() {
+  Decl_FunctionDecl* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.overloads_){from._impl_.overloads_},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl)
+}
+inline void Decl_FunctionDecl::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.overloads_){arena},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+Decl_FunctionDecl::~Decl_FunctionDecl() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl.FunctionDecl)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Decl_FunctionDecl::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.overloads_.~RepeatedPtrField();
+}
+void Decl_FunctionDecl::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Decl_FunctionDecl::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_overloads()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Decl_FunctionDecl::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Decl_FunctionDecl::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Decl_FunctionDecl_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];
+    {::_pbi::TcParser::FastMtR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl, _impl_.overloads_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];
+    {PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl, _impl_.overloads_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* Decl_FunctionDecl::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_overloads_size()); i < n; i++) {
+    const auto& repfield = this->_internal_overloads().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl.FunctionDecl)
+  return target;
+}
+
+::size_t Decl_FunctionDecl::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];
+  total_size += 1UL * this->_internal_overloads_size();
+  for (const auto& msg : this->_internal_overloads()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Decl_FunctionDecl::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Decl_FunctionDecl::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Decl_FunctionDecl::GetClassData() const { return &_class_data_; }
+
+
+void Decl_FunctionDecl::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Decl_FunctionDecl*>(&to_msg);
+  auto& from = static_cast<const Decl_FunctionDecl&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_overloads()->MergeFrom(from._internal_overloads());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Decl_FunctionDecl::CopyFrom(const Decl_FunctionDecl& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Decl_FunctionDecl::IsInitialized() const {
+  return true;
+}
+
+void Decl_FunctionDecl::InternalSwap(Decl_FunctionDecl* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.overloads_.InternalSwap(&other->_impl_.overloads_);
+}
+
+::google::protobuf::Metadata Decl_FunctionDecl::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[10]);
+}
+// ===================================================================
+
+class Decl::_Internal {
+ public:
+  static constexpr ::int32_t kOneofCaseOffset =
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, _impl_._oneof_case_);
+  static const ::google::api::expr::v1alpha1::Decl_IdentDecl& ident(const Decl* msg);
+  static const ::google::api::expr::v1alpha1::Decl_FunctionDecl& function(const Decl* msg);
+};
+
+const ::google::api::expr::v1alpha1::Decl_IdentDecl& Decl::_Internal::ident(const Decl* msg) {
+  return *msg->_impl_.decl_kind_.ident_;
+}
+const ::google::api::expr::v1alpha1::Decl_FunctionDecl& Decl::_Internal::function(const Decl* msg) {
+  return *msg->_impl_.decl_kind_.function_;
+}
+void Decl::set_allocated_ident(::google::api::expr::v1alpha1::Decl_IdentDecl* ident) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_decl_kind();
+  if (ident) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(ident);
+    if (message_arena != submessage_arena) {
+      ident = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, ident, submessage_arena);
+    }
+    set_has_ident();
+    _impl_.decl_kind_.ident_ = ident;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.ident)
+}
+void Decl::set_allocated_function(::google::api::expr::v1alpha1::Decl_FunctionDecl* function) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_decl_kind();
+  if (function) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(function);
+    if (message_arena != submessage_arena) {
+      function = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, function, submessage_arena);
+    }
+    set_has_function();
+    _impl_.decl_kind_.function_ = function;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.function)
+}
+Decl::Decl(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl)
+}
+Decl::Decl(const Decl& from) : ::google::protobuf::Message() {
+  Decl* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.name_){},
+      decltype(_impl_.decl_kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_name().empty()) {
+    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
+  }
+  clear_has_decl_kind();
+  switch (from.decl_kind_case()) {
+    case kIdent: {
+      _this->_internal_mutable_ident()->::google::api::expr::v1alpha1::Decl_IdentDecl::MergeFrom(
+          from._internal_ident());
+      break;
+    }
+    case kFunction: {
+      _this->_internal_mutable_function()->::google::api::expr::v1alpha1::Decl_FunctionDecl::MergeFrom(
+          from._internal_function());
+      break;
+    }
+    case DECL_KIND_NOT_SET: {
+      break;
+    }
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl)
+}
+inline void Decl::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.name_){},
+      decltype(_impl_.decl_kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  _impl_.name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  clear_has_decl_kind();
+}
+Decl::~Decl() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Decl::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.name_.Destroy();
+  if (has_decl_kind()) {
+    clear_decl_kind();
+  }
+}
+void Decl::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+void Decl::clear_decl_kind() {
+// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1alpha1.Decl)
+  switch (decl_kind_case()) {
+    case kIdent: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.decl_kind_.ident_;
+      }
+      break;
+    }
+    case kFunction: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.decl_kind_.function_;
+      }
+      break;
+    }
+    case DECL_KIND_NOT_SET: {
+      break;
+    }
+  }
+  _impl_._oneof_case_[0] = DECL_KIND_NOT_SET;
+}
+
+
+PROTOBUF_NOINLINE void Decl::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.name_.ClearToEmpty();
+  clear_decl_kind();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Decl::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 3, 2, 42, 2> Decl::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    3, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967288,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    3,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Decl_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string name = 1 [json_name = "name"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Decl, _impl_.name_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string name = 1 [json_name = "name"];
+    {PROTOBUF_FIELD_OFFSET(Decl, _impl_.name_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];
+    {PROTOBUF_FIELD_OFFSET(Decl, _impl_.decl_kind_.ident_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];
+    {PROTOBUF_FIELD_OFFSET(Decl, _impl_.decl_kind_.function_), _Internal::kOneofCaseOffset + 0, 1,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Decl_IdentDecl>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Decl_FunctionDecl>()},
+  }}, {{
+    "\35\4\0\0\0\0\0\0"
+    "google.api.expr.v1alpha1.Decl"
+    "name"
+  }},
+};
+
+::uint8_t* Decl::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string name = 1 [json_name = "name"];
+  if (!this->_internal_name().empty()) {
+    const std::string& _s = this->_internal_name();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Decl.name");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  switch (decl_kind_case()) {
+    case kIdent: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(2, _Internal::ident(this),
+          _Internal::ident(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kFunction: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(3, _Internal::function(this),
+          _Internal::function(this).GetCachedSize(), target, stream);
+      break;
+    }
+    default:
+      break;
+  }
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl)
+  return target;
+}
+
+::size_t Decl::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string name = 1 [json_name = "name"];
+  if (!this->_internal_name().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_name());
+  }
+
+  switch (decl_kind_case()) {
+    // .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];
+    case kIdent: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.decl_kind_.ident_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];
+    case kFunction: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.decl_kind_.function_);
+      break;
+    }
+    case DECL_KIND_NOT_SET: {
+      break;
+    }
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Decl::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Decl::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Decl::GetClassData() const { return &_class_data_; }
+
+
+void Decl::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Decl*>(&to_msg);
+  auto& from = static_cast<const Decl&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_name().empty()) {
+    _this->_internal_set_name(from._internal_name());
+  }
+  switch (from.decl_kind_case()) {
+    case kIdent: {
+      _this->_internal_mutable_ident()->::google::api::expr::v1alpha1::Decl_IdentDecl::MergeFrom(
+          from._internal_ident());
+      break;
+    }
+    case kFunction: {
+      _this->_internal_mutable_function()->::google::api::expr::v1alpha1::Decl_FunctionDecl::MergeFrom(
+          from._internal_function());
+      break;
+    }
+    case DECL_KIND_NOT_SET: {
+      break;
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Decl::CopyFrom(const Decl& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Decl::IsInitialized() const {
+  return true;
+}
+
+void Decl::InternalSwap(Decl* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
+                                       &other->_impl_.name_, rhs_arena);
+  swap(_impl_.decl_kind_, other->_impl_.decl_kind_);
+  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
+}
+
+::google::protobuf::Metadata Decl::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[11]);
+}
+// ===================================================================
+
+class Reference::_Internal {
+ public:
+  using HasBits = decltype(std::declval<Reference>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(Reference, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::Constant& value(const Reference* msg);
+  static void set_has_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Constant& Reference::_Internal::value(const Reference* msg) {
+  return *msg->_impl_.value_;
+}
+void Reference::clear_value() {
+  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+Reference::Reference(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Reference)
+}
+Reference::Reference(const Reference& from) : ::google::protobuf::Message() {
+  Reference* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.overload_id_){from._impl_.overload_id_},
+      decltype(_impl_.name_){},
+      decltype(_impl_.value_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_name().empty()) {
+    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.value_ = new ::google::api::expr::v1alpha1::Constant(*from._impl_.value_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Reference)
+}
+inline void Reference::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.overload_id_){arena},
+      decltype(_impl_.name_){},
+      decltype(_impl_.value_){nullptr},
+  };
+  _impl_.name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+Reference::~Reference() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Reference)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Reference::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _internal_mutable_overload_id()->~RepeatedPtrField();
+  _impl_.name_.Destroy();
+  if (this != internal_default_instance()) delete _impl_.value_;
+}
+void Reference::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Reference::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Reference)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_overload_id()->Clear();
+  _impl_.name_.ClearToEmpty();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    ABSL_DCHECK(_impl_.value_ != nullptr);
+    _impl_.value_->Clear();
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Reference::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 3, 1, 58, 2> Reference::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(Reference, _impl_._has_bits_),
+    0, // no _extensions_
+    4, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967282,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    3,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Reference_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // .google.api.expr.v1alpha1.Constant value = 4 [json_name = "value"];
+    {::_pbi::TcParser::FastMtS1,
+     {34, 0, 0, PROTOBUF_FIELD_OFFSET(Reference, _impl_.value_)}},
+    // string name = 1 [json_name = "name"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Reference, _impl_.name_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    // repeated string overload_id = 3 [json_name = "overloadId"];
+    {::_pbi::TcParser::FastUR1,
+     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Reference, _impl_.overload_id_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string name = 1 [json_name = "name"];
+    {PROTOBUF_FIELD_OFFSET(Reference, _impl_.name_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // repeated string overload_id = 3 [json_name = "overloadId"];
+    {PROTOBUF_FIELD_OFFSET(Reference, _impl_.overload_id_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
+    // .google.api.expr.v1alpha1.Constant value = 4 [json_name = "value"];
+    {PROTOBUF_FIELD_OFFSET(Reference, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Constant>()},
+  }}, {{
+    "\42\4\13\0\0\0\0\0"
+    "google.api.expr.v1alpha1.Reference"
+    "name"
+    "overload_id"
+  }},
+};
+
+::uint8_t* Reference::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Reference)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string name = 1 [json_name = "name"];
+  if (!this->_internal_name().empty()) {
+    const std::string& _s = this->_internal_name();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Reference.name");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // repeated string overload_id = 3 [json_name = "overloadId"];
+  for (int i = 0, n = this->_internal_overload_id_size(); i < n; ++i) {
+    const auto& s = this->_internal_overload_id().Get(i);
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Reference.overload_id");
+    target = stream->WriteString(3, s, target);
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Constant value = 4 [json_name = "value"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(4, _Internal::value(this),
+        _Internal::value(this).GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Reference)
+  return target;
+}
+
+::size_t Reference::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Reference)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated string overload_id = 3 [json_name = "overloadId"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_overload_id().size());
+  for (int i = 0, n = _internal_overload_id().size(); i < n; ++i) {
+    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
+        _internal_overload_id().Get(i));
+  }
+  // string name = 1 [json_name = "name"];
+  if (!this->_internal_name().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_name());
+  }
+
+  // .google.api.expr.v1alpha1.Constant value = 4 [json_name = "value"];
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    total_size += 1 +
+      ::google::protobuf::internal::WireFormatLite::MessageSize(
+        *_impl_.value_);
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Reference::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Reference::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Reference::GetClassData() const { return &_class_data_; }
+
+
+void Reference::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Reference*>(&to_msg);
+  auto& from = static_cast<const Reference&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Reference)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_overload_id()->MergeFrom(from._internal_overload_id());
+  if (!from._internal_name().empty()) {
+    _this->_internal_set_name(from._internal_name());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_internal_mutable_value()->::google::api::expr::v1alpha1::Constant::MergeFrom(
+        from._internal_value());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Reference::CopyFrom(const Reference& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Reference)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Reference::IsInitialized() const {
+  return true;
+}
+
+void Reference::InternalSwap(Reference* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  _impl_.overload_id_.InternalSwap(&other->_impl_.overload_id_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
+                                       &other->_impl_.name_, rhs_arena);
+  swap(_impl_.value_, other->_impl_.value_);
+}
+
+::google::protobuf::Metadata Reference::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[12]);
+}
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+// @@protoc_insertion_point(global_scope)
+#include "google/protobuf/port_undef.inc"
diff --git a/gen/google/api/expr/v1alpha1/checked.pb.h b/gen/google/api/expr/v1alpha1/checked.pb.h
new file mode 100644
index 0000000..e3dce2c
--- /dev/null
+++ b/gen/google/api/expr/v1alpha1/checked.pb.h
@@ -0,0 +1,5561 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/api/expr/v1alpha1/checked.proto
+
+#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_2epb_2eh
+#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_2epb_2eh
+
+#include <limits>
+#include <string>
+#include <type_traits>
+
+#include "google/protobuf/port_def.inc"
+#if PROTOBUF_VERSION < 4024000
+#error "This file was generated by a newer version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please update"
+#error "your headers."
+#endif  // PROTOBUF_VERSION
+
+#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
+#error "This file was generated by an older version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please"
+#error "regenerate this file with a newer version of protoc."
+#endif  // PROTOBUF_MIN_PROTOC_VERSION
+#include "google/protobuf/port_undef.inc"
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/arena.h"
+#include "google/protobuf/arenastring.h"
+#include "google/protobuf/generated_message_tctable_decl.h"
+#include "google/protobuf/generated_message_util.h"
+#include "google/protobuf/metadata_lite.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/message.h"
+#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
+#include "google/protobuf/extension_set.h"  // IWYU pragma: export
+#include "google/protobuf/map.h"  // IWYU pragma: export
+#include "google/protobuf/map_entry.h"
+#include "google/protobuf/map_field_inl.h"
+#include "google/protobuf/generated_enum_reflection.h"
+#include "google/protobuf/unknown_field_set.h"
+#include "google/api/expr/v1alpha1/syntax.pb.h"
+#include "google/protobuf/empty.pb.h"
+#include "google/protobuf/struct.pb.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+
+#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto
+
+namespace google {
+namespace protobuf {
+namespace internal {
+class AnyMetadata;
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+// Internal implementation detail -- do not use these members.
+struct TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto {
+  static const ::uint32_t offsets[];
+};
+extern const ::google::protobuf::internal::DescriptorTable
+    descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+class CheckedExpr;
+struct CheckedExprDefaultTypeInternal;
+extern CheckedExprDefaultTypeInternal _CheckedExpr_default_instance_;
+class CheckedExpr_ReferenceMapEntry_DoNotUse;
+struct CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal;
+extern CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal _CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_;
+class CheckedExpr_TypeMapEntry_DoNotUse;
+struct CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal;
+extern CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal _CheckedExpr_TypeMapEntry_DoNotUse_default_instance_;
+class Decl;
+struct DeclDefaultTypeInternal;
+extern DeclDefaultTypeInternal _Decl_default_instance_;
+class Decl_FunctionDecl;
+struct Decl_FunctionDeclDefaultTypeInternal;
+extern Decl_FunctionDeclDefaultTypeInternal _Decl_FunctionDecl_default_instance_;
+class Decl_FunctionDecl_Overload;
+struct Decl_FunctionDecl_OverloadDefaultTypeInternal;
+extern Decl_FunctionDecl_OverloadDefaultTypeInternal _Decl_FunctionDecl_Overload_default_instance_;
+class Decl_IdentDecl;
+struct Decl_IdentDeclDefaultTypeInternal;
+extern Decl_IdentDeclDefaultTypeInternal _Decl_IdentDecl_default_instance_;
+class Reference;
+struct ReferenceDefaultTypeInternal;
+extern ReferenceDefaultTypeInternal _Reference_default_instance_;
+class Type;
+struct TypeDefaultTypeInternal;
+extern TypeDefaultTypeInternal _Type_default_instance_;
+class Type_AbstractType;
+struct Type_AbstractTypeDefaultTypeInternal;
+extern Type_AbstractTypeDefaultTypeInternal _Type_AbstractType_default_instance_;
+class Type_FunctionType;
+struct Type_FunctionTypeDefaultTypeInternal;
+extern Type_FunctionTypeDefaultTypeInternal _Type_FunctionType_default_instance_;
+class Type_ListType;
+struct Type_ListTypeDefaultTypeInternal;
+extern Type_ListTypeDefaultTypeInternal _Type_ListType_default_instance_;
+class Type_MapType;
+struct Type_MapTypeDefaultTypeInternal;
+extern Type_MapTypeDefaultTypeInternal _Type_MapType_default_instance_;
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+enum Type_PrimitiveType : int {
+  Type_PrimitiveType_PRIMITIVE_TYPE_UNSPECIFIED = 0,
+  Type_PrimitiveType_BOOL = 1,
+  Type_PrimitiveType_INT64 = 2,
+  Type_PrimitiveType_UINT64 = 3,
+  Type_PrimitiveType_DOUBLE = 4,
+  Type_PrimitiveType_STRING = 5,
+  Type_PrimitiveType_BYTES = 6,
+  Type_PrimitiveType_Type_PrimitiveType_INT_MIN_SENTINEL_DO_NOT_USE_ =
+      std::numeric_limits<::int32_t>::min(),
+  Type_PrimitiveType_Type_PrimitiveType_INT_MAX_SENTINEL_DO_NOT_USE_ =
+      std::numeric_limits<::int32_t>::max(),
+};
+
+bool Type_PrimitiveType_IsValid(int value);
+constexpr Type_PrimitiveType Type_PrimitiveType_PrimitiveType_MIN = static_cast<Type_PrimitiveType>(0);
+constexpr Type_PrimitiveType Type_PrimitiveType_PrimitiveType_MAX = static_cast<Type_PrimitiveType>(6);
+constexpr int Type_PrimitiveType_PrimitiveType_ARRAYSIZE = 6 + 1;
+const ::google::protobuf::EnumDescriptor*
+Type_PrimitiveType_descriptor();
+template <typename T>
+const std::string& Type_PrimitiveType_Name(T value) {
+  static_assert(std::is_same<T, Type_PrimitiveType>::value ||
+                    std::is_integral<T>::value,
+                "Incorrect type passed to PrimitiveType_Name().");
+  return Type_PrimitiveType_Name(static_cast<Type_PrimitiveType>(value));
+}
+template <>
+inline const std::string& Type_PrimitiveType_Name(Type_PrimitiveType value) {
+  return ::google::protobuf::internal::NameOfDenseEnum<Type_PrimitiveType_descriptor,
+                                                 0, 6>(
+      static_cast<int>(value));
+}
+inline bool Type_PrimitiveType_Parse(absl::string_view name, Type_PrimitiveType* value) {
+  return ::google::protobuf::internal::ParseNamedEnum<Type_PrimitiveType>(
+      Type_PrimitiveType_descriptor(), name, value);
+}
+enum Type_WellKnownType : int {
+  Type_WellKnownType_WELL_KNOWN_TYPE_UNSPECIFIED = 0,
+  Type_WellKnownType_ANY = 1,
+  Type_WellKnownType_TIMESTAMP = 2,
+  Type_WellKnownType_DURATION = 3,
+  Type_WellKnownType_Type_WellKnownType_INT_MIN_SENTINEL_DO_NOT_USE_ =
+      std::numeric_limits<::int32_t>::min(),
+  Type_WellKnownType_Type_WellKnownType_INT_MAX_SENTINEL_DO_NOT_USE_ =
+      std::numeric_limits<::int32_t>::max(),
+};
+
+bool Type_WellKnownType_IsValid(int value);
+constexpr Type_WellKnownType Type_WellKnownType_WellKnownType_MIN = static_cast<Type_WellKnownType>(0);
+constexpr Type_WellKnownType Type_WellKnownType_WellKnownType_MAX = static_cast<Type_WellKnownType>(3);
+constexpr int Type_WellKnownType_WellKnownType_ARRAYSIZE = 3 + 1;
+const ::google::protobuf::EnumDescriptor*
+Type_WellKnownType_descriptor();
+template <typename T>
+const std::string& Type_WellKnownType_Name(T value) {
+  static_assert(std::is_same<T, Type_WellKnownType>::value ||
+                    std::is_integral<T>::value,
+                "Incorrect type passed to WellKnownType_Name().");
+  return Type_WellKnownType_Name(static_cast<Type_WellKnownType>(value));
+}
+template <>
+inline const std::string& Type_WellKnownType_Name(Type_WellKnownType value) {
+  return ::google::protobuf::internal::NameOfDenseEnum<Type_WellKnownType_descriptor,
+                                                 0, 3>(
+      static_cast<int>(value));
+}
+inline bool Type_WellKnownType_Parse(absl::string_view name, Type_WellKnownType* value) {
+  return ::google::protobuf::internal::ParseNamedEnum<Type_WellKnownType>(
+      Type_WellKnownType_descriptor(), name, value);
+}
+
+// ===================================================================
+
+
+// -------------------------------------------------------------------
+
+class CheckedExpr_ReferenceMapEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<CheckedExpr_ReferenceMapEntry_DoNotUse, 
+    ::int64_t, ::google::api::expr::v1alpha1::Reference,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<CheckedExpr_ReferenceMapEntry_DoNotUse, 
+    ::int64_t, ::google::api::expr::v1alpha1::Reference,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
+  CheckedExpr_ReferenceMapEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR CheckedExpr_ReferenceMapEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit CheckedExpr_ReferenceMapEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const CheckedExpr_ReferenceMapEntry_DoNotUse& other);
+  static const CheckedExpr_ReferenceMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CheckedExpr_ReferenceMapEntry_DoNotUse*>(&_CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(void*) { return true; }
+  static bool ValidateValue(void*) { return true; }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};
+// -------------------------------------------------------------------
+
+class CheckedExpr_TypeMapEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<CheckedExpr_TypeMapEntry_DoNotUse, 
+    ::int64_t, ::google::api::expr::v1alpha1::Type,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<CheckedExpr_TypeMapEntry_DoNotUse, 
+    ::int64_t, ::google::api::expr::v1alpha1::Type,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
+  CheckedExpr_TypeMapEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR CheckedExpr_TypeMapEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit CheckedExpr_TypeMapEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const CheckedExpr_TypeMapEntry_DoNotUse& other);
+  static const CheckedExpr_TypeMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CheckedExpr_TypeMapEntry_DoNotUse*>(&_CheckedExpr_TypeMapEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(void*) { return true; }
+  static bool ValidateValue(void*) { return true; }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};
+// -------------------------------------------------------------------
+
+class CheckedExpr final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.CheckedExpr) */ {
+ public:
+  inline CheckedExpr() : CheckedExpr(nullptr) {}
+  ~CheckedExpr() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR CheckedExpr(::google::protobuf::internal::ConstantInitialized);
+
+  CheckedExpr(const CheckedExpr& from);
+  CheckedExpr(CheckedExpr&& from) noexcept
+    : CheckedExpr() {
+    *this = ::std::move(from);
+  }
+
+  inline CheckedExpr& operator=(const CheckedExpr& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline CheckedExpr& operator=(CheckedExpr&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const CheckedExpr& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const CheckedExpr* internal_default_instance() {
+    return reinterpret_cast<const CheckedExpr*>(
+               &_CheckedExpr_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    2;
+
+  friend void swap(CheckedExpr& a, CheckedExpr& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(CheckedExpr* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(CheckedExpr* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  CheckedExpr* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<CheckedExpr>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const CheckedExpr& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const CheckedExpr& from) {
+    CheckedExpr::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(CheckedExpr* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.CheckedExpr";
+  }
+  protected:
+  explicit CheckedExpr(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kReferenceMapFieldNumber = 2,
+    kTypeMapFieldNumber = 3,
+    kExprVersionFieldNumber = 6,
+    kExprFieldNumber = 4,
+    kSourceInfoFieldNumber = 5,
+  };
+  // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2 [json_name = "referenceMap"];
+  int reference_map_size() const;
+  private:
+  int _internal_reference_map_size() const;
+
+  public:
+  void clear_reference_map() ;
+  const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Reference>& reference_map() const;
+  ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Reference>* mutable_reference_map();
+
+  private:
+  const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Reference>& _internal_reference_map() const;
+  ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Reference>* _internal_mutable_reference_map();
+
+  public:
+  // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3 [json_name = "typeMap"];
+  int type_map_size() const;
+  private:
+  int _internal_type_map_size() const;
+
+  public:
+  void clear_type_map() ;
+  const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Type>& type_map() const;
+  ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Type>* mutable_type_map();
+
+  private:
+  const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Type>& _internal_type_map() const;
+  ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Type>* _internal_mutable_type_map();
+
+  public:
+  // string expr_version = 6 [json_name = "exprVersion"];
+  void clear_expr_version() ;
+  const std::string& expr_version() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_expr_version(Arg_&& arg, Args_... args);
+  std::string* mutable_expr_version();
+  PROTOBUF_NODISCARD std::string* release_expr_version();
+  void set_allocated_expr_version(std::string* ptr);
+
+  private:
+  const std::string& _internal_expr_version() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr_version(
+      const std::string& value);
+  std::string* _internal_mutable_expr_version();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr expr = 4 [json_name = "expr"];
+  bool has_expr() const;
+  void clear_expr() ;
+  const ::google::api::expr::v1alpha1::Expr& expr() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_expr();
+  ::google::api::expr::v1alpha1::Expr* mutable_expr();
+  void set_allocated_expr(::google::api::expr::v1alpha1::Expr* value);
+  void unsafe_arena_set_allocated_expr(::google::api::expr::v1alpha1::Expr* value);
+  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_expr();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr& _internal_expr() const;
+  ::google::api::expr::v1alpha1::Expr* _internal_mutable_expr();
+
+  public:
+  // .google.api.expr.v1alpha1.SourceInfo source_info = 5 [json_name = "sourceInfo"];
+  bool has_source_info() const;
+  void clear_source_info() ;
+  const ::google::api::expr::v1alpha1::SourceInfo& source_info() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::SourceInfo* release_source_info();
+  ::google::api::expr::v1alpha1::SourceInfo* mutable_source_info();
+  void set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* value);
+  void unsafe_arena_set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* value);
+  ::google::api::expr::v1alpha1::SourceInfo* unsafe_arena_release_source_info();
+
+  private:
+  const ::google::api::expr::v1alpha1::SourceInfo& _internal_source_info() const;
+  ::google::api::expr::v1alpha1::SourceInfo* _internal_mutable_source_info();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.CheckedExpr)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 5, 6, 57, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::internal::MapField<CheckedExpr_ReferenceMapEntry_DoNotUse, ::int64_t, ::google::api::expr::v1alpha1::Reference,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
+        reference_map_;
+    ::google::protobuf::internal::MapField<CheckedExpr_TypeMapEntry_DoNotUse, ::int64_t, ::google::api::expr::v1alpha1::Type,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
+        type_map_;
+    ::google::protobuf::internal::ArenaStringPtr expr_version_;
+    ::google::api::expr::v1alpha1::Expr* expr_;
+    ::google::api::expr::v1alpha1::SourceInfo* source_info_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};// -------------------------------------------------------------------
+
+class Type_ListType final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.ListType) */ {
+ public:
+  inline Type_ListType() : Type_ListType(nullptr) {}
+  ~Type_ListType() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Type_ListType(::google::protobuf::internal::ConstantInitialized);
+
+  Type_ListType(const Type_ListType& from);
+  Type_ListType(Type_ListType&& from) noexcept
+    : Type_ListType() {
+    *this = ::std::move(from);
+  }
+
+  inline Type_ListType& operator=(const Type_ListType& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Type_ListType& operator=(Type_ListType&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Type_ListType& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Type_ListType* internal_default_instance() {
+    return reinterpret_cast<const Type_ListType*>(
+               &_Type_ListType_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    3;
+
+  friend void swap(Type_ListType& a, Type_ListType& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Type_ListType* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Type_ListType* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Type_ListType* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Type_ListType>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Type_ListType& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Type_ListType& from) {
+    Type_ListType::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Type_ListType* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Type.ListType";
+  }
+  protected:
+  explicit Type_ListType(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kElemTypeFieldNumber = 1,
+  };
+  // .google.api.expr.v1alpha1.Type elem_type = 1 [json_name = "elemType"];
+  bool has_elem_type() const;
+  void clear_elem_type() ;
+  const ::google::api::expr::v1alpha1::Type& elem_type() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_elem_type();
+  ::google::api::expr::v1alpha1::Type* mutable_elem_type();
+  void set_allocated_elem_type(::google::api::expr::v1alpha1::Type* value);
+  void unsafe_arena_set_allocated_elem_type(::google::api::expr::v1alpha1::Type* value);
+  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_elem_type();
+
+  private:
+  const ::google::api::expr::v1alpha1::Type& _internal_elem_type() const;
+  ::google::api::expr::v1alpha1::Type* _internal_mutable_elem_type();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.ListType)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::api::expr::v1alpha1::Type* elem_type_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};// -------------------------------------------------------------------
+
+class Type_MapType final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.MapType) */ {
+ public:
+  inline Type_MapType() : Type_MapType(nullptr) {}
+  ~Type_MapType() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Type_MapType(::google::protobuf::internal::ConstantInitialized);
+
+  Type_MapType(const Type_MapType& from);
+  Type_MapType(Type_MapType&& from) noexcept
+    : Type_MapType() {
+    *this = ::std::move(from);
+  }
+
+  inline Type_MapType& operator=(const Type_MapType& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Type_MapType& operator=(Type_MapType&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Type_MapType& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Type_MapType* internal_default_instance() {
+    return reinterpret_cast<const Type_MapType*>(
+               &_Type_MapType_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    4;
+
+  friend void swap(Type_MapType& a, Type_MapType& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Type_MapType* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Type_MapType* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Type_MapType* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Type_MapType>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Type_MapType& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Type_MapType& from) {
+    Type_MapType::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Type_MapType* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Type.MapType";
+  }
+  protected:
+  explicit Type_MapType(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kKeyTypeFieldNumber = 1,
+    kValueTypeFieldNumber = 2,
+  };
+  // .google.api.expr.v1alpha1.Type key_type = 1 [json_name = "keyType"];
+  bool has_key_type() const;
+  void clear_key_type() ;
+  const ::google::api::expr::v1alpha1::Type& key_type() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_key_type();
+  ::google::api::expr::v1alpha1::Type* mutable_key_type();
+  void set_allocated_key_type(::google::api::expr::v1alpha1::Type* value);
+  void unsafe_arena_set_allocated_key_type(::google::api::expr::v1alpha1::Type* value);
+  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_key_type();
+
+  private:
+  const ::google::api::expr::v1alpha1::Type& _internal_key_type() const;
+  ::google::api::expr::v1alpha1::Type* _internal_mutable_key_type();
+
+  public:
+  // .google.api.expr.v1alpha1.Type value_type = 2 [json_name = "valueType"];
+  bool has_value_type() const;
+  void clear_value_type() ;
+  const ::google::api::expr::v1alpha1::Type& value_type() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_value_type();
+  ::google::api::expr::v1alpha1::Type* mutable_value_type();
+  void set_allocated_value_type(::google::api::expr::v1alpha1::Type* value);
+  void unsafe_arena_set_allocated_value_type(::google::api::expr::v1alpha1::Type* value);
+  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_value_type();
+
+  private:
+  const ::google::api::expr::v1alpha1::Type& _internal_value_type() const;
+  ::google::api::expr::v1alpha1::Type* _internal_mutable_value_type();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.MapType)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::api::expr::v1alpha1::Type* key_type_;
+    ::google::api::expr::v1alpha1::Type* value_type_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};// -------------------------------------------------------------------
+
+class Type_FunctionType final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.FunctionType) */ {
+ public:
+  inline Type_FunctionType() : Type_FunctionType(nullptr) {}
+  ~Type_FunctionType() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Type_FunctionType(::google::protobuf::internal::ConstantInitialized);
+
+  Type_FunctionType(const Type_FunctionType& from);
+  Type_FunctionType(Type_FunctionType&& from) noexcept
+    : Type_FunctionType() {
+    *this = ::std::move(from);
+  }
+
+  inline Type_FunctionType& operator=(const Type_FunctionType& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Type_FunctionType& operator=(Type_FunctionType&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Type_FunctionType& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Type_FunctionType* internal_default_instance() {
+    return reinterpret_cast<const Type_FunctionType*>(
+               &_Type_FunctionType_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    5;
+
+  friend void swap(Type_FunctionType& a, Type_FunctionType& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Type_FunctionType* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Type_FunctionType* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Type_FunctionType* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Type_FunctionType>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Type_FunctionType& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Type_FunctionType& from) {
+    Type_FunctionType::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Type_FunctionType* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Type.FunctionType";
+  }
+  protected:
+  explicit Type_FunctionType(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kArgTypesFieldNumber = 2,
+    kResultTypeFieldNumber = 1,
+  };
+  // repeated .google.api.expr.v1alpha1.Type arg_types = 2 [json_name = "argTypes"];
+  int arg_types_size() const;
+  private:
+  int _internal_arg_types_size() const;
+
+  public:
+  void clear_arg_types() ;
+  ::google::api::expr::v1alpha1::Type* mutable_arg_types(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
+      mutable_arg_types();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>& _internal_arg_types() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>* _internal_mutable_arg_types();
+  public:
+  const ::google::api::expr::v1alpha1::Type& arg_types(int index) const;
+  ::google::api::expr::v1alpha1::Type* add_arg_types();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
+      arg_types() const;
+  // .google.api.expr.v1alpha1.Type result_type = 1 [json_name = "resultType"];
+  bool has_result_type() const;
+  void clear_result_type() ;
+  const ::google::api::expr::v1alpha1::Type& result_type() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_result_type();
+  ::google::api::expr::v1alpha1::Type* mutable_result_type();
+  void set_allocated_result_type(::google::api::expr::v1alpha1::Type* value);
+  void unsafe_arena_set_allocated_result_type(::google::api::expr::v1alpha1::Type* value);
+  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_result_type();
+
+  private:
+  const ::google::api::expr::v1alpha1::Type& _internal_result_type() const;
+  ::google::api::expr::v1alpha1::Type* _internal_mutable_result_type();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.FunctionType)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type > arg_types_;
+    ::google::api::expr::v1alpha1::Type* result_type_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};// -------------------------------------------------------------------
+
+class Type_AbstractType final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.AbstractType) */ {
+ public:
+  inline Type_AbstractType() : Type_AbstractType(nullptr) {}
+  ~Type_AbstractType() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Type_AbstractType(::google::protobuf::internal::ConstantInitialized);
+
+  Type_AbstractType(const Type_AbstractType& from);
+  Type_AbstractType(Type_AbstractType&& from) noexcept
+    : Type_AbstractType() {
+    *this = ::std::move(from);
+  }
+
+  inline Type_AbstractType& operator=(const Type_AbstractType& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Type_AbstractType& operator=(Type_AbstractType&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Type_AbstractType& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Type_AbstractType* internal_default_instance() {
+    return reinterpret_cast<const Type_AbstractType*>(
+               &_Type_AbstractType_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    6;
+
+  friend void swap(Type_AbstractType& a, Type_AbstractType& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Type_AbstractType* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Type_AbstractType* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Type_AbstractType* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Type_AbstractType>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Type_AbstractType& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Type_AbstractType& from) {
+    Type_AbstractType::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Type_AbstractType* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Type.AbstractType";
+  }
+  protected:
+  explicit Type_AbstractType(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kParameterTypesFieldNumber = 2,
+    kNameFieldNumber = 1,
+  };
+  // repeated .google.api.expr.v1alpha1.Type parameter_types = 2 [json_name = "parameterTypes"];
+  int parameter_types_size() const;
+  private:
+  int _internal_parameter_types_size() const;
+
+  public:
+  void clear_parameter_types() ;
+  ::google::api::expr::v1alpha1::Type* mutable_parameter_types(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
+      mutable_parameter_types();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>& _internal_parameter_types() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>* _internal_mutable_parameter_types();
+  public:
+  const ::google::api::expr::v1alpha1::Type& parameter_types(int index) const;
+  ::google::api::expr::v1alpha1::Type* add_parameter_types();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
+      parameter_types() const;
+  // string name = 1 [json_name = "name"];
+  void clear_name() ;
+  const std::string& name() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_name(Arg_&& arg, Args_... args);
+  std::string* mutable_name();
+  PROTOBUF_NODISCARD std::string* release_name();
+  void set_allocated_name(std::string* ptr);
+
+  private:
+  const std::string& _internal_name() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
+      const std::string& value);
+  std::string* _internal_mutable_name();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.AbstractType)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 55, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type > parameter_types_;
+    ::google::protobuf::internal::ArenaStringPtr name_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};// -------------------------------------------------------------------
+
+class Type final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type) */ {
+ public:
+  inline Type() : Type(nullptr) {}
+  ~Type() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Type(::google::protobuf::internal::ConstantInitialized);
+
+  Type(const Type& from);
+  Type(Type&& from) noexcept
+    : Type() {
+    *this = ::std::move(from);
+  }
+
+  inline Type& operator=(const Type& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Type& operator=(Type&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Type& default_instance() {
+    return *internal_default_instance();
+  }
+  enum TypeKindCase {
+    kDyn = 1,
+    kNull = 2,
+    kPrimitive = 3,
+    kWrapper = 4,
+    kWellKnown = 5,
+    kListType = 6,
+    kMapType = 7,
+    kFunction = 8,
+    kMessageType = 9,
+    kTypeParam = 10,
+    kType = 11,
+    kError = 12,
+    kAbstractType = 14,
+    TYPE_KIND_NOT_SET = 0,
+  };
+
+  static inline const Type* internal_default_instance() {
+    return reinterpret_cast<const Type*>(
+               &_Type_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    7;
+
+  friend void swap(Type& a, Type& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Type* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Type* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Type* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Type>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Type& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Type& from) {
+    Type::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Type* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Type";
+  }
+  protected:
+  explicit Type(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef Type_ListType ListType;
+  typedef Type_MapType MapType;
+  typedef Type_FunctionType FunctionType;
+  typedef Type_AbstractType AbstractType;
+
+  using PrimitiveType = Type_PrimitiveType;
+  static constexpr PrimitiveType PRIMITIVE_TYPE_UNSPECIFIED = Type_PrimitiveType_PRIMITIVE_TYPE_UNSPECIFIED;
+  static constexpr PrimitiveType BOOL = Type_PrimitiveType_BOOL;
+  static constexpr PrimitiveType INT64 = Type_PrimitiveType_INT64;
+  static constexpr PrimitiveType UINT64 = Type_PrimitiveType_UINT64;
+  static constexpr PrimitiveType DOUBLE = Type_PrimitiveType_DOUBLE;
+  static constexpr PrimitiveType STRING = Type_PrimitiveType_STRING;
+  static constexpr PrimitiveType BYTES = Type_PrimitiveType_BYTES;
+  static inline bool PrimitiveType_IsValid(int value) {
+    return Type_PrimitiveType_IsValid(value);
+  }
+  static constexpr PrimitiveType PrimitiveType_MIN = Type_PrimitiveType_PrimitiveType_MIN;
+  static constexpr PrimitiveType PrimitiveType_MAX = Type_PrimitiveType_PrimitiveType_MAX;
+  static constexpr int PrimitiveType_ARRAYSIZE = Type_PrimitiveType_PrimitiveType_ARRAYSIZE;
+  static inline const ::google::protobuf::EnumDescriptor* PrimitiveType_descriptor() {
+    return Type_PrimitiveType_descriptor();
+  }
+  template <typename T>
+  static inline const std::string& PrimitiveType_Name(T value) {
+    return Type_PrimitiveType_Name(value);
+  }
+  static inline bool PrimitiveType_Parse(absl::string_view name, PrimitiveType* value) {
+    return Type_PrimitiveType_Parse(name, value);
+  }
+
+  using WellKnownType = Type_WellKnownType;
+  static constexpr WellKnownType WELL_KNOWN_TYPE_UNSPECIFIED = Type_WellKnownType_WELL_KNOWN_TYPE_UNSPECIFIED;
+  static constexpr WellKnownType ANY = Type_WellKnownType_ANY;
+  static constexpr WellKnownType TIMESTAMP = Type_WellKnownType_TIMESTAMP;
+  static constexpr WellKnownType DURATION = Type_WellKnownType_DURATION;
+  static inline bool WellKnownType_IsValid(int value) {
+    return Type_WellKnownType_IsValid(value);
+  }
+  static constexpr WellKnownType WellKnownType_MIN = Type_WellKnownType_WellKnownType_MIN;
+  static constexpr WellKnownType WellKnownType_MAX = Type_WellKnownType_WellKnownType_MAX;
+  static constexpr int WellKnownType_ARRAYSIZE = Type_WellKnownType_WellKnownType_ARRAYSIZE;
+  static inline const ::google::protobuf::EnumDescriptor* WellKnownType_descriptor() {
+    return Type_WellKnownType_descriptor();
+  }
+  template <typename T>
+  static inline const std::string& WellKnownType_Name(T value) {
+    return Type_WellKnownType_Name(value);
+  }
+  static inline bool WellKnownType_Parse(absl::string_view name, WellKnownType* value) {
+    return Type_WellKnownType_Parse(name, value);
+  }
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kDynFieldNumber = 1,
+    kNullFieldNumber = 2,
+    kPrimitiveFieldNumber = 3,
+    kWrapperFieldNumber = 4,
+    kWellKnownFieldNumber = 5,
+    kListTypeFieldNumber = 6,
+    kMapTypeFieldNumber = 7,
+    kFunctionFieldNumber = 8,
+    kMessageTypeFieldNumber = 9,
+    kTypeParamFieldNumber = 10,
+    kTypeFieldNumber = 11,
+    kErrorFieldNumber = 12,
+    kAbstractTypeFieldNumber = 14,
+  };
+  // .google.protobuf.Empty dyn = 1 [json_name = "dyn"];
+  bool has_dyn() const;
+  private:
+  bool _internal_has_dyn() const;
+
+  public:
+  void clear_dyn() ;
+  const ::google::protobuf::Empty& dyn() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Empty* release_dyn();
+  ::google::protobuf::Empty* mutable_dyn();
+  void set_allocated_dyn(::google::protobuf::Empty* value);
+  void unsafe_arena_set_allocated_dyn(::google::protobuf::Empty* value);
+  ::google::protobuf::Empty* unsafe_arena_release_dyn();
+
+  private:
+  const ::google::protobuf::Empty& _internal_dyn() const;
+  ::google::protobuf::Empty* _internal_mutable_dyn();
+
+  public:
+  // .google.protobuf.NullValue null = 2 [json_name = "null"];
+  bool has_null() const;
+  void clear_null() ;
+  ::google::protobuf::NullValue null() const;
+  void set_null(::google::protobuf::NullValue value);
+
+  private:
+  ::google::protobuf::NullValue _internal_null() const;
+  void _internal_set_null(::google::protobuf::NullValue value);
+
+  public:
+  // .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3 [json_name = "primitive"];
+  bool has_primitive() const;
+  void clear_primitive() ;
+  ::google::api::expr::v1alpha1::Type_PrimitiveType primitive() const;
+  void set_primitive(::google::api::expr::v1alpha1::Type_PrimitiveType value);
+
+  private:
+  ::google::api::expr::v1alpha1::Type_PrimitiveType _internal_primitive() const;
+  void _internal_set_primitive(::google::api::expr::v1alpha1::Type_PrimitiveType value);
+
+  public:
+  // .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4 [json_name = "wrapper"];
+  bool has_wrapper() const;
+  void clear_wrapper() ;
+  ::google::api::expr::v1alpha1::Type_PrimitiveType wrapper() const;
+  void set_wrapper(::google::api::expr::v1alpha1::Type_PrimitiveType value);
+
+  private:
+  ::google::api::expr::v1alpha1::Type_PrimitiveType _internal_wrapper() const;
+  void _internal_set_wrapper(::google::api::expr::v1alpha1::Type_PrimitiveType value);
+
+  public:
+  // .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5 [json_name = "wellKnown"];
+  bool has_well_known() const;
+  void clear_well_known() ;
+  ::google::api::expr::v1alpha1::Type_WellKnownType well_known() const;
+  void set_well_known(::google::api::expr::v1alpha1::Type_WellKnownType value);
+
+  private:
+  ::google::api::expr::v1alpha1::Type_WellKnownType _internal_well_known() const;
+  void _internal_set_well_known(::google::api::expr::v1alpha1::Type_WellKnownType value);
+
+  public:
+  // .google.api.expr.v1alpha1.Type.ListType list_type = 6 [json_name = "listType"];
+  bool has_list_type() const;
+  private:
+  bool _internal_has_list_type() const;
+
+  public:
+  void clear_list_type() ;
+  const ::google::api::expr::v1alpha1::Type_ListType& list_type() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type_ListType* release_list_type();
+  ::google::api::expr::v1alpha1::Type_ListType* mutable_list_type();
+  void set_allocated_list_type(::google::api::expr::v1alpha1::Type_ListType* value);
+  void unsafe_arena_set_allocated_list_type(::google::api::expr::v1alpha1::Type_ListType* value);
+  ::google::api::expr::v1alpha1::Type_ListType* unsafe_arena_release_list_type();
+
+  private:
+  const ::google::api::expr::v1alpha1::Type_ListType& _internal_list_type() const;
+  ::google::api::expr::v1alpha1::Type_ListType* _internal_mutable_list_type();
+
+  public:
+  // .google.api.expr.v1alpha1.Type.MapType map_type = 7 [json_name = "mapType"];
+  bool has_map_type() const;
+  private:
+  bool _internal_has_map_type() const;
+
+  public:
+  void clear_map_type() ;
+  const ::google::api::expr::v1alpha1::Type_MapType& map_type() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type_MapType* release_map_type();
+  ::google::api::expr::v1alpha1::Type_MapType* mutable_map_type();
+  void set_allocated_map_type(::google::api::expr::v1alpha1::Type_MapType* value);
+  void unsafe_arena_set_allocated_map_type(::google::api::expr::v1alpha1::Type_MapType* value);
+  ::google::api::expr::v1alpha1::Type_MapType* unsafe_arena_release_map_type();
+
+  private:
+  const ::google::api::expr::v1alpha1::Type_MapType& _internal_map_type() const;
+  ::google::api::expr::v1alpha1::Type_MapType* _internal_mutable_map_type();
+
+  public:
+  // .google.api.expr.v1alpha1.Type.FunctionType function = 8 [json_name = "function"];
+  bool has_function() const;
+  private:
+  bool _internal_has_function() const;
+
+  public:
+  void clear_function() ;
+  const ::google::api::expr::v1alpha1::Type_FunctionType& function() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type_FunctionType* release_function();
+  ::google::api::expr::v1alpha1::Type_FunctionType* mutable_function();
+  void set_allocated_function(::google::api::expr::v1alpha1::Type_FunctionType* value);
+  void unsafe_arena_set_allocated_function(::google::api::expr::v1alpha1::Type_FunctionType* value);
+  ::google::api::expr::v1alpha1::Type_FunctionType* unsafe_arena_release_function();
+
+  private:
+  const ::google::api::expr::v1alpha1::Type_FunctionType& _internal_function() const;
+  ::google::api::expr::v1alpha1::Type_FunctionType* _internal_mutable_function();
+
+  public:
+  // string message_type = 9 [json_name = "messageType"];
+  bool has_message_type() const;
+  void clear_message_type() ;
+  const std::string& message_type() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_message_type(Arg_&& arg, Args_... args);
+  std::string* mutable_message_type();
+  PROTOBUF_NODISCARD std::string* release_message_type();
+  void set_allocated_message_type(std::string* ptr);
+
+  private:
+  const std::string& _internal_message_type() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_type(
+      const std::string& value);
+  std::string* _internal_mutable_message_type();
+
+  public:
+  // string type_param = 10 [json_name = "typeParam"];
+  bool has_type_param() const;
+  void clear_type_param() ;
+  const std::string& type_param() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_type_param(Arg_&& arg, Args_... args);
+  std::string* mutable_type_param();
+  PROTOBUF_NODISCARD std::string* release_type_param();
+  void set_allocated_type_param(std::string* ptr);
+
+  private:
+  const std::string& _internal_type_param() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_param(
+      const std::string& value);
+  std::string* _internal_mutable_type_param();
+
+  public:
+  // .google.api.expr.v1alpha1.Type type = 11 [json_name = "type"];
+  bool has_type() const;
+  private:
+  bool _internal_has_type() const;
+
+  public:
+  void clear_type() ;
+  const ::google::api::expr::v1alpha1::Type& type() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_type();
+  ::google::api::expr::v1alpha1::Type* mutable_type();
+  void set_allocated_type(::google::api::expr::v1alpha1::Type* value);
+  void unsafe_arena_set_allocated_type(::google::api::expr::v1alpha1::Type* value);
+  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_type();
+
+  private:
+  const ::google::api::expr::v1alpha1::Type& _internal_type() const;
+  ::google::api::expr::v1alpha1::Type* _internal_mutable_type();
+
+  public:
+  // .google.protobuf.Empty error = 12 [json_name = "error"];
+  bool has_error() const;
+  private:
+  bool _internal_has_error() const;
+
+  public:
+  void clear_error() ;
+  const ::google::protobuf::Empty& error() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Empty* release_error();
+  ::google::protobuf::Empty* mutable_error();
+  void set_allocated_error(::google::protobuf::Empty* value);
+  void unsafe_arena_set_allocated_error(::google::protobuf::Empty* value);
+  ::google::protobuf::Empty* unsafe_arena_release_error();
+
+  private:
+  const ::google::protobuf::Empty& _internal_error() const;
+  ::google::protobuf::Empty* _internal_mutable_error();
+
+  public:
+  // .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14 [json_name = "abstractType"];
+  bool has_abstract_type() const;
+  private:
+  bool _internal_has_abstract_type() const;
+
+  public:
+  void clear_abstract_type() ;
+  const ::google::api::expr::v1alpha1::Type_AbstractType& abstract_type() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type_AbstractType* release_abstract_type();
+  ::google::api::expr::v1alpha1::Type_AbstractType* mutable_abstract_type();
+  void set_allocated_abstract_type(::google::api::expr::v1alpha1::Type_AbstractType* value);
+  void unsafe_arena_set_allocated_abstract_type(::google::api::expr::v1alpha1::Type_AbstractType* value);
+  ::google::api::expr::v1alpha1::Type_AbstractType* unsafe_arena_release_abstract_type();
+
+  private:
+  const ::google::api::expr::v1alpha1::Type_AbstractType& _internal_abstract_type() const;
+  ::google::api::expr::v1alpha1::Type_AbstractType* _internal_mutable_abstract_type();
+
+  public:
+  void clear_type_kind();
+  TypeKindCase type_kind_case() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type)
+ private:
+  class _Internal;
+  void set_has_dyn();
+  void set_has_null();
+  void set_has_primitive();
+  void set_has_wrapper();
+  void set_has_well_known();
+  void set_has_list_type();
+  void set_has_map_type();
+  void set_has_function();
+  void set_has_message_type();
+  void set_has_type_param();
+  void set_has_type();
+  void set_has_error();
+  void set_has_abstract_type();
+
+  inline bool has_type_kind() const;
+  inline void clear_has_type_kind();
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 13, 7, 68, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    union TypeKindUnion {
+      constexpr TypeKindUnion() : _constinit_{} {}
+        ::google::protobuf::internal::ConstantInitialized _constinit_;
+      ::google::protobuf::Empty* dyn_;
+      int null_;
+      int primitive_;
+      int wrapper_;
+      int well_known_;
+      ::google::api::expr::v1alpha1::Type_ListType* list_type_;
+      ::google::api::expr::v1alpha1::Type_MapType* map_type_;
+      ::google::api::expr::v1alpha1::Type_FunctionType* function_;
+      ::google::protobuf::internal::ArenaStringPtr message_type_;
+      ::google::protobuf::internal::ArenaStringPtr type_param_;
+      ::google::api::expr::v1alpha1::Type* type_;
+      ::google::protobuf::Empty* error_;
+      ::google::api::expr::v1alpha1::Type_AbstractType* abstract_type_;
+    } type_kind_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::uint32_t _oneof_case_[1];
+
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};// -------------------------------------------------------------------
+
+class Decl_IdentDecl final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl.IdentDecl) */ {
+ public:
+  inline Decl_IdentDecl() : Decl_IdentDecl(nullptr) {}
+  ~Decl_IdentDecl() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Decl_IdentDecl(::google::protobuf::internal::ConstantInitialized);
+
+  Decl_IdentDecl(const Decl_IdentDecl& from);
+  Decl_IdentDecl(Decl_IdentDecl&& from) noexcept
+    : Decl_IdentDecl() {
+    *this = ::std::move(from);
+  }
+
+  inline Decl_IdentDecl& operator=(const Decl_IdentDecl& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Decl_IdentDecl& operator=(Decl_IdentDecl&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Decl_IdentDecl& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Decl_IdentDecl* internal_default_instance() {
+    return reinterpret_cast<const Decl_IdentDecl*>(
+               &_Decl_IdentDecl_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    8;
+
+  friend void swap(Decl_IdentDecl& a, Decl_IdentDecl& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Decl_IdentDecl* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Decl_IdentDecl* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Decl_IdentDecl* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Decl_IdentDecl>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Decl_IdentDecl& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Decl_IdentDecl& from) {
+    Decl_IdentDecl::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Decl_IdentDecl* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Decl.IdentDecl";
+  }
+  protected:
+  explicit Decl_IdentDecl(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kDocFieldNumber = 3,
+    kTypeFieldNumber = 1,
+    kValueFieldNumber = 2,
+  };
+  // string doc = 3 [json_name = "doc"];
+  void clear_doc() ;
+  const std::string& doc() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_doc(Arg_&& arg, Args_... args);
+  std::string* mutable_doc();
+  PROTOBUF_NODISCARD std::string* release_doc();
+  void set_allocated_doc(std::string* ptr);
+
+  private:
+  const std::string& _internal_doc() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc(
+      const std::string& value);
+  std::string* _internal_mutable_doc();
+
+  public:
+  // .google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];
+  bool has_type() const;
+  void clear_type() ;
+  const ::google::api::expr::v1alpha1::Type& type() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_type();
+  ::google::api::expr::v1alpha1::Type* mutable_type();
+  void set_allocated_type(::google::api::expr::v1alpha1::Type* value);
+  void unsafe_arena_set_allocated_type(::google::api::expr::v1alpha1::Type* value);
+  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_type();
+
+  private:
+  const ::google::api::expr::v1alpha1::Type& _internal_type() const;
+  ::google::api::expr::v1alpha1::Type* _internal_mutable_type();
+
+  public:
+  // .google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];
+  bool has_value() const;
+  void clear_value() ;
+  const ::google::api::expr::v1alpha1::Constant& value() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Constant* release_value();
+  ::google::api::expr::v1alpha1::Constant* mutable_value();
+  void set_allocated_value(::google::api::expr::v1alpha1::Constant* value);
+  void unsafe_arena_set_allocated_value(::google::api::expr::v1alpha1::Constant* value);
+  ::google::api::expr::v1alpha1::Constant* unsafe_arena_release_value();
+
+  private:
+  const ::google::api::expr::v1alpha1::Constant& _internal_value() const;
+  ::google::api::expr::v1alpha1::Constant* _internal_mutable_value();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.IdentDecl)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 3, 2, 51, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::internal::ArenaStringPtr doc_;
+    ::google::api::expr::v1alpha1::Type* type_;
+    ::google::api::expr::v1alpha1::Constant* value_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};// -------------------------------------------------------------------
+
+class Decl_FunctionDecl_Overload final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload) */ {
+ public:
+  inline Decl_FunctionDecl_Overload() : Decl_FunctionDecl_Overload(nullptr) {}
+  ~Decl_FunctionDecl_Overload() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Decl_FunctionDecl_Overload(::google::protobuf::internal::ConstantInitialized);
+
+  Decl_FunctionDecl_Overload(const Decl_FunctionDecl_Overload& from);
+  Decl_FunctionDecl_Overload(Decl_FunctionDecl_Overload&& from) noexcept
+    : Decl_FunctionDecl_Overload() {
+    *this = ::std::move(from);
+  }
+
+  inline Decl_FunctionDecl_Overload& operator=(const Decl_FunctionDecl_Overload& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Decl_FunctionDecl_Overload& operator=(Decl_FunctionDecl_Overload&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Decl_FunctionDecl_Overload& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Decl_FunctionDecl_Overload* internal_default_instance() {
+    return reinterpret_cast<const Decl_FunctionDecl_Overload*>(
+               &_Decl_FunctionDecl_Overload_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    9;
+
+  friend void swap(Decl_FunctionDecl_Overload& a, Decl_FunctionDecl_Overload& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Decl_FunctionDecl_Overload* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Decl_FunctionDecl_Overload* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Decl_FunctionDecl_Overload* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Decl_FunctionDecl_Overload>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Decl_FunctionDecl_Overload& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Decl_FunctionDecl_Overload& from) {
+    Decl_FunctionDecl_Overload::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Decl_FunctionDecl_Overload* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload";
+  }
+  protected:
+  explicit Decl_FunctionDecl_Overload(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kParamsFieldNumber = 2,
+    kTypeParamsFieldNumber = 3,
+    kOverloadIdFieldNumber = 1,
+    kDocFieldNumber = 6,
+    kResultTypeFieldNumber = 4,
+    kIsInstanceFunctionFieldNumber = 5,
+  };
+  // repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];
+  int params_size() const;
+  private:
+  int _internal_params_size() const;
+
+  public:
+  void clear_params() ;
+  ::google::api::expr::v1alpha1::Type* mutable_params(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
+      mutable_params();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>& _internal_params() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>* _internal_mutable_params();
+  public:
+  const ::google::api::expr::v1alpha1::Type& params(int index) const;
+  ::google::api::expr::v1alpha1::Type* add_params();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
+      params() const;
+  // repeated string type_params = 3 [json_name = "typeParams"];
+  int type_params_size() const;
+  private:
+  int _internal_type_params_size() const;
+
+  public:
+  void clear_type_params() ;
+  const std::string& type_params(int index) const;
+  std::string* mutable_type_params(int index);
+  void set_type_params(int index, const std::string& value);
+  void set_type_params(int index, std::string&& value);
+  void set_type_params(int index, const char* value);
+  void set_type_params(int index, const char* value, std::size_t size);
+  void set_type_params(int index, absl::string_view value);
+  std::string* add_type_params();
+  void add_type_params(const std::string& value);
+  void add_type_params(std::string&& value);
+  void add_type_params(const char* value);
+  void add_type_params(const char* value, std::size_t size);
+  void add_type_params(absl::string_view value);
+  const ::google::protobuf::RepeatedPtrField<std::string>& type_params() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* mutable_type_params();
+
+  private:
+  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_type_params() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_type_params();
+
+  public:
+  // string overload_id = 1 [json_name = "overloadId"];
+  void clear_overload_id() ;
+  const std::string& overload_id() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_overload_id(Arg_&& arg, Args_... args);
+  std::string* mutable_overload_id();
+  PROTOBUF_NODISCARD std::string* release_overload_id();
+  void set_allocated_overload_id(std::string* ptr);
+
+  private:
+  const std::string& _internal_overload_id() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_overload_id(
+      const std::string& value);
+  std::string* _internal_mutable_overload_id();
+
+  public:
+  // string doc = 6 [json_name = "doc"];
+  void clear_doc() ;
+  const std::string& doc() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_doc(Arg_&& arg, Args_... args);
+  std::string* mutable_doc();
+  PROTOBUF_NODISCARD std::string* release_doc();
+  void set_allocated_doc(std::string* ptr);
+
+  private:
+  const std::string& _internal_doc() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc(
+      const std::string& value);
+  std::string* _internal_mutable_doc();
+
+  public:
+  // .google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];
+  bool has_result_type() const;
+  void clear_result_type() ;
+  const ::google::api::expr::v1alpha1::Type& result_type() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_result_type();
+  ::google::api::expr::v1alpha1::Type* mutable_result_type();
+  void set_allocated_result_type(::google::api::expr::v1alpha1::Type* value);
+  void unsafe_arena_set_allocated_result_type(::google::api::expr::v1alpha1::Type* value);
+  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_result_type();
+
+  private:
+  const ::google::api::expr::v1alpha1::Type& _internal_result_type() const;
+  ::google::api::expr::v1alpha1::Type* _internal_mutable_result_type();
+
+  public:
+  // bool is_instance_function = 5 [json_name = "isInstanceFunction"];
+  void clear_is_instance_function() ;
+  bool is_instance_function() const;
+  void set_is_instance_function(bool value);
+
+  private:
+  bool _internal_is_instance_function() const;
+  void _internal_set_is_instance_function(bool value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<3, 6, 2, 85, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type > params_;
+    ::google::protobuf::RepeatedPtrField<std::string> type_params_;
+    ::google::protobuf::internal::ArenaStringPtr overload_id_;
+    ::google::protobuf::internal::ArenaStringPtr doc_;
+    ::google::api::expr::v1alpha1::Type* result_type_;
+    bool is_instance_function_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};// -------------------------------------------------------------------
+
+class Decl_FunctionDecl final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl.FunctionDecl) */ {
+ public:
+  inline Decl_FunctionDecl() : Decl_FunctionDecl(nullptr) {}
+  ~Decl_FunctionDecl() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Decl_FunctionDecl(::google::protobuf::internal::ConstantInitialized);
+
+  Decl_FunctionDecl(const Decl_FunctionDecl& from);
+  Decl_FunctionDecl(Decl_FunctionDecl&& from) noexcept
+    : Decl_FunctionDecl() {
+    *this = ::std::move(from);
+  }
+
+  inline Decl_FunctionDecl& operator=(const Decl_FunctionDecl& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Decl_FunctionDecl& operator=(Decl_FunctionDecl&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Decl_FunctionDecl& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Decl_FunctionDecl* internal_default_instance() {
+    return reinterpret_cast<const Decl_FunctionDecl*>(
+               &_Decl_FunctionDecl_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    10;
+
+  friend void swap(Decl_FunctionDecl& a, Decl_FunctionDecl& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Decl_FunctionDecl* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Decl_FunctionDecl* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Decl_FunctionDecl* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Decl_FunctionDecl>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Decl_FunctionDecl& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Decl_FunctionDecl& from) {
+    Decl_FunctionDecl::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Decl_FunctionDecl* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Decl.FunctionDecl";
+  }
+  protected:
+  explicit Decl_FunctionDecl(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef Decl_FunctionDecl_Overload Overload;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kOverloadsFieldNumber = 1,
+  };
+  // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];
+  int overloads_size() const;
+  private:
+  int _internal_overloads_size() const;
+
+  public:
+  void clear_overloads() ;
+  ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* mutable_overloads(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >*
+      mutable_overloads();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload>& _internal_overloads() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload>* _internal_mutable_overloads();
+  public:
+  const ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload& overloads(int index) const;
+  ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* add_overloads();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >&
+      overloads() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.FunctionDecl)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload > overloads_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};// -------------------------------------------------------------------
+
+class Decl final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl) */ {
+ public:
+  inline Decl() : Decl(nullptr) {}
+  ~Decl() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Decl(::google::protobuf::internal::ConstantInitialized);
+
+  Decl(const Decl& from);
+  Decl(Decl&& from) noexcept
+    : Decl() {
+    *this = ::std::move(from);
+  }
+
+  inline Decl& operator=(const Decl& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Decl& operator=(Decl&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Decl& default_instance() {
+    return *internal_default_instance();
+  }
+  enum DeclKindCase {
+    kIdent = 2,
+    kFunction = 3,
+    DECL_KIND_NOT_SET = 0,
+  };
+
+  static inline const Decl* internal_default_instance() {
+    return reinterpret_cast<const Decl*>(
+               &_Decl_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    11;
+
+  friend void swap(Decl& a, Decl& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Decl* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Decl* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Decl* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Decl>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Decl& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Decl& from) {
+    Decl::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Decl* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Decl";
+  }
+  protected:
+  explicit Decl(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef Decl_IdentDecl IdentDecl;
+  typedef Decl_FunctionDecl FunctionDecl;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kNameFieldNumber = 1,
+    kIdentFieldNumber = 2,
+    kFunctionFieldNumber = 3,
+  };
+  // string name = 1 [json_name = "name"];
+  void clear_name() ;
+  const std::string& name() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_name(Arg_&& arg, Args_... args);
+  std::string* mutable_name();
+  PROTOBUF_NODISCARD std::string* release_name();
+  void set_allocated_name(std::string* ptr);
+
+  private:
+  const std::string& _internal_name() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
+      const std::string& value);
+  std::string* _internal_mutable_name();
+
+  public:
+  // .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];
+  bool has_ident() const;
+  private:
+  bool _internal_has_ident() const;
+
+  public:
+  void clear_ident() ;
+  const ::google::api::expr::v1alpha1::Decl_IdentDecl& ident() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Decl_IdentDecl* release_ident();
+  ::google::api::expr::v1alpha1::Decl_IdentDecl* mutable_ident();
+  void set_allocated_ident(::google::api::expr::v1alpha1::Decl_IdentDecl* value);
+  void unsafe_arena_set_allocated_ident(::google::api::expr::v1alpha1::Decl_IdentDecl* value);
+  ::google::api::expr::v1alpha1::Decl_IdentDecl* unsafe_arena_release_ident();
+
+  private:
+  const ::google::api::expr::v1alpha1::Decl_IdentDecl& _internal_ident() const;
+  ::google::api::expr::v1alpha1::Decl_IdentDecl* _internal_mutable_ident();
+
+  public:
+  // .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];
+  bool has_function() const;
+  private:
+  bool _internal_has_function() const;
+
+  public:
+  void clear_function() ;
+  const ::google::api::expr::v1alpha1::Decl_FunctionDecl& function() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Decl_FunctionDecl* release_function();
+  ::google::api::expr::v1alpha1::Decl_FunctionDecl* mutable_function();
+  void set_allocated_function(::google::api::expr::v1alpha1::Decl_FunctionDecl* value);
+  void unsafe_arena_set_allocated_function(::google::api::expr::v1alpha1::Decl_FunctionDecl* value);
+  ::google::api::expr::v1alpha1::Decl_FunctionDecl* unsafe_arena_release_function();
+
+  private:
+  const ::google::api::expr::v1alpha1::Decl_FunctionDecl& _internal_function() const;
+  ::google::api::expr::v1alpha1::Decl_FunctionDecl* _internal_mutable_function();
+
+  public:
+  void clear_decl_kind();
+  DeclKindCase decl_kind_case() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl)
+ private:
+  class _Internal;
+  void set_has_ident();
+  void set_has_function();
+
+  inline bool has_decl_kind() const;
+  inline void clear_has_decl_kind();
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 3, 2, 42, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr name_;
+    union DeclKindUnion {
+      constexpr DeclKindUnion() : _constinit_{} {}
+        ::google::protobuf::internal::ConstantInitialized _constinit_;
+      ::google::api::expr::v1alpha1::Decl_IdentDecl* ident_;
+      ::google::api::expr::v1alpha1::Decl_FunctionDecl* function_;
+    } decl_kind_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::uint32_t _oneof_case_[1];
+
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};// -------------------------------------------------------------------
+
+class Reference final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Reference) */ {
+ public:
+  inline Reference() : Reference(nullptr) {}
+  ~Reference() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Reference(::google::protobuf::internal::ConstantInitialized);
+
+  Reference(const Reference& from);
+  Reference(Reference&& from) noexcept
+    : Reference() {
+    *this = ::std::move(from);
+  }
+
+  inline Reference& operator=(const Reference& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Reference& operator=(Reference&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Reference& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Reference* internal_default_instance() {
+    return reinterpret_cast<const Reference*>(
+               &_Reference_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    12;
+
+  friend void swap(Reference& a, Reference& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Reference* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Reference* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Reference* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Reference>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Reference& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Reference& from) {
+    Reference::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Reference* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Reference";
+  }
+  protected:
+  explicit Reference(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kOverloadIdFieldNumber = 3,
+    kNameFieldNumber = 1,
+    kValueFieldNumber = 4,
+  };
+  // repeated string overload_id = 3 [json_name = "overloadId"];
+  int overload_id_size() const;
+  private:
+  int _internal_overload_id_size() const;
+
+  public:
+  void clear_overload_id() ;
+  const std::string& overload_id(int index) const;
+  std::string* mutable_overload_id(int index);
+  void set_overload_id(int index, const std::string& value);
+  void set_overload_id(int index, std::string&& value);
+  void set_overload_id(int index, const char* value);
+  void set_overload_id(int index, const char* value, std::size_t size);
+  void set_overload_id(int index, absl::string_view value);
+  std::string* add_overload_id();
+  void add_overload_id(const std::string& value);
+  void add_overload_id(std::string&& value);
+  void add_overload_id(const char* value);
+  void add_overload_id(const char* value, std::size_t size);
+  void add_overload_id(absl::string_view value);
+  const ::google::protobuf::RepeatedPtrField<std::string>& overload_id() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* mutable_overload_id();
+
+  private:
+  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_overload_id() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_overload_id();
+
+  public:
+  // string name = 1 [json_name = "name"];
+  void clear_name() ;
+  const std::string& name() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_name(Arg_&& arg, Args_... args);
+  std::string* mutable_name();
+  PROTOBUF_NODISCARD std::string* release_name();
+  void set_allocated_name(std::string* ptr);
+
+  private:
+  const std::string& _internal_name() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
+      const std::string& value);
+  std::string* _internal_mutable_name();
+
+  public:
+  // .google.api.expr.v1alpha1.Constant value = 4 [json_name = "value"];
+  bool has_value() const;
+  void clear_value() ;
+  const ::google::api::expr::v1alpha1::Constant& value() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Constant* release_value();
+  ::google::api::expr::v1alpha1::Constant* mutable_value();
+  void set_allocated_value(::google::api::expr::v1alpha1::Constant* value);
+  void unsafe_arena_set_allocated_value(::google::api::expr::v1alpha1::Constant* value);
+  ::google::api::expr::v1alpha1::Constant* unsafe_arena_release_value();
+
+  private:
+  const ::google::api::expr::v1alpha1::Constant& _internal_value() const;
+  ::google::api::expr::v1alpha1::Constant* _internal_mutable_value();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Reference)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 58, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::RepeatedPtrField<std::string> overload_id_;
+    ::google::protobuf::internal::ArenaStringPtr name_;
+    ::google::api::expr::v1alpha1::Constant* value_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
+};
+
+// ===================================================================
+
+
+
+
+// ===================================================================
+
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif  // __GNUC__
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// CheckedExpr
+
+// map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2 [json_name = "referenceMap"];
+inline int CheckedExpr::_internal_reference_map_size() const {
+  return _internal_reference_map().size();
+}
+inline int CheckedExpr::reference_map_size() const {
+  return _internal_reference_map_size();
+}
+inline void CheckedExpr::clear_reference_map() {
+  _impl_.reference_map_.Clear();
+}
+inline const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Reference>& CheckedExpr::_internal_reference_map() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.reference_map_.GetMap();
+}
+inline const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Reference>& CheckedExpr::reference_map() const {
+  // @@protoc_insertion_point(field_map:google.api.expr.v1alpha1.CheckedExpr.reference_map)
+  return _internal_reference_map();
+}
+inline ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Reference>* CheckedExpr::_internal_mutable_reference_map() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.reference_map_.MutableMap();
+}
+inline ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Reference>* CheckedExpr::mutable_reference_map() {
+  // @@protoc_insertion_point(field_mutable_map:google.api.expr.v1alpha1.CheckedExpr.reference_map)
+  return _internal_mutable_reference_map();
+}
+
+// map<int64, .google.api.expr.v1alpha1.Type> type_map = 3 [json_name = "typeMap"];
+inline int CheckedExpr::_internal_type_map_size() const {
+  return _internal_type_map().size();
+}
+inline int CheckedExpr::type_map_size() const {
+  return _internal_type_map_size();
+}
+inline void CheckedExpr::clear_type_map() {
+  _impl_.type_map_.Clear();
+}
+inline const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Type>& CheckedExpr::_internal_type_map() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.type_map_.GetMap();
+}
+inline const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Type>& CheckedExpr::type_map() const {
+  // @@protoc_insertion_point(field_map:google.api.expr.v1alpha1.CheckedExpr.type_map)
+  return _internal_type_map();
+}
+inline ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Type>* CheckedExpr::_internal_mutable_type_map() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.type_map_.MutableMap();
+}
+inline ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Type>* CheckedExpr::mutable_type_map() {
+  // @@protoc_insertion_point(field_mutable_map:google.api.expr.v1alpha1.CheckedExpr.type_map)
+  return _internal_mutable_type_map();
+}
+
+// .google.api.expr.v1alpha1.SourceInfo source_info = 5 [json_name = "sourceInfo"];
+inline bool CheckedExpr::has_source_info() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.source_info_ != nullptr);
+  return value;
+}
+inline const ::google::api::expr::v1alpha1::SourceInfo& CheckedExpr::_internal_source_info() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::SourceInfo* p = _impl_.source_info_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::SourceInfo&>(::google::api::expr::v1alpha1::_SourceInfo_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::SourceInfo& CheckedExpr::source_info() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.CheckedExpr.source_info)
+  return _internal_source_info();
+}
+inline void CheckedExpr::unsafe_arena_set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_info_);
+  }
+  _impl_.source_info_ = reinterpret_cast<::google::api::expr::v1alpha1::SourceInfo*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.CheckedExpr.source_info)
+}
+inline ::google::api::expr::v1alpha1::SourceInfo* CheckedExpr::release_source_info() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::SourceInfo* released = _impl_.source_info_;
+  _impl_.source_info_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::SourceInfo* CheckedExpr::unsafe_arena_release_source_info() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.CheckedExpr.source_info)
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::SourceInfo* temp = _impl_.source_info_;
+  _impl_.source_info_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::SourceInfo* CheckedExpr::_internal_mutable_source_info() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000002u;
+  if (_impl_.source_info_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::SourceInfo>(GetArenaForAllocation());
+    _impl_.source_info_ = reinterpret_cast<::google::api::expr::v1alpha1::SourceInfo*>(p);
+  }
+  return _impl_.source_info_;
+}
+inline ::google::api::expr::v1alpha1::SourceInfo* CheckedExpr::mutable_source_info() {
+  ::google::api::expr::v1alpha1::SourceInfo* _msg = _internal_mutable_source_info();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.CheckedExpr.source_info)
+  return _msg;
+}
+inline void CheckedExpr::set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_info_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+
+  _impl_.source_info_ = reinterpret_cast<::google::api::expr::v1alpha1::SourceInfo*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.CheckedExpr.source_info)
+}
+
+// string expr_version = 6 [json_name = "exprVersion"];
+inline void CheckedExpr::clear_expr_version() {
+  _impl_.expr_version_.ClearToEmpty();
+}
+inline const std::string& CheckedExpr::expr_version() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.CheckedExpr.expr_version)
+  return _internal_expr_version();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void CheckedExpr::set_expr_version(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.expr_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.CheckedExpr.expr_version)
+}
+inline std::string* CheckedExpr::mutable_expr_version() {
+  std::string* _s = _internal_mutable_expr_version();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.CheckedExpr.expr_version)
+  return _s;
+}
+inline const std::string& CheckedExpr::_internal_expr_version() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.expr_version_.Get();
+}
+inline void CheckedExpr::_internal_set_expr_version(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.expr_version_.Set(value, GetArenaForAllocation());
+}
+inline std::string* CheckedExpr::_internal_mutable_expr_version() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.expr_version_.Mutable( GetArenaForAllocation());
+}
+inline std::string* CheckedExpr::release_expr_version() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.CheckedExpr.expr_version)
+  return _impl_.expr_version_.Release();
+}
+inline void CheckedExpr::set_allocated_expr_version(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.expr_version_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.expr_version_.IsDefault()) {
+          _impl_.expr_version_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.CheckedExpr.expr_version)
+}
+
+// .google.api.expr.v1alpha1.Expr expr = 4 [json_name = "expr"];
+inline bool CheckedExpr::has_expr() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.expr_ != nullptr);
+  return value;
+}
+inline const ::google::api::expr::v1alpha1::Expr& CheckedExpr::_internal_expr() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Expr* p = _impl_.expr_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr& CheckedExpr::expr() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.CheckedExpr.expr)
+  return _internal_expr();
+}
+inline void CheckedExpr::unsafe_arena_set_allocated_expr(::google::api::expr::v1alpha1::Expr* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expr_);
+  }
+  _impl_.expr_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.CheckedExpr.expr)
+}
+inline ::google::api::expr::v1alpha1::Expr* CheckedExpr::release_expr() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* released = _impl_.expr_;
+  _impl_.expr_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Expr* CheckedExpr::unsafe_arena_release_expr() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.CheckedExpr.expr)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* temp = _impl_.expr_;
+  _impl_.expr_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Expr* CheckedExpr::_internal_mutable_expr() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.expr_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
+    _impl_.expr_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(p);
+  }
+  return _impl_.expr_;
+}
+inline ::google::api::expr::v1alpha1::Expr* CheckedExpr::mutable_expr() {
+  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_expr();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.CheckedExpr.expr)
+  return _msg;
+}
+inline void CheckedExpr::set_allocated_expr(::google::api::expr::v1alpha1::Expr* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expr_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.expr_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.CheckedExpr.expr)
+}
+
+// -------------------------------------------------------------------
+
+// Type_ListType
+
+// .google.api.expr.v1alpha1.Type elem_type = 1 [json_name = "elemType"];
+inline bool Type_ListType::has_elem_type() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.elem_type_ != nullptr);
+  return value;
+}
+inline void Type_ListType::clear_elem_type() {
+  if (_impl_.elem_type_ != nullptr) _impl_.elem_type_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::v1alpha1::Type& Type_ListType::_internal_elem_type() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Type* p = _impl_.elem_type_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(::google::api::expr::v1alpha1::_Type_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Type& Type_ListType::elem_type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.ListType.elem_type)
+  return _internal_elem_type();
+}
+inline void Type_ListType::unsafe_arena_set_allocated_elem_type(::google::api::expr::v1alpha1::Type* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.elem_type_);
+  }
+  _impl_.elem_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.ListType.elem_type)
+}
+inline ::google::api::expr::v1alpha1::Type* Type_ListType::release_elem_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Type* released = _impl_.elem_type_;
+  _impl_.elem_type_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_ListType::unsafe_arena_release_elem_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.ListType.elem_type)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Type* temp = _impl_.elem_type_;
+  _impl_.elem_type_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_ListType::_internal_mutable_elem_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.elem_type_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
+    _impl_.elem_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(p);
+  }
+  return _impl_.elem_type_;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_ListType::mutable_elem_type() {
+  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_elem_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.ListType.elem_type)
+  return _msg;
+}
+inline void Type_ListType::set_allocated_elem_type(::google::api::expr::v1alpha1::Type* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Type*>(_impl_.elem_type_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.elem_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.ListType.elem_type)
+}
+
+// -------------------------------------------------------------------
+
+// Type_MapType
+
+// .google.api.expr.v1alpha1.Type key_type = 1 [json_name = "keyType"];
+inline bool Type_MapType::has_key_type() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.key_type_ != nullptr);
+  return value;
+}
+inline void Type_MapType::clear_key_type() {
+  if (_impl_.key_type_ != nullptr) _impl_.key_type_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::v1alpha1::Type& Type_MapType::_internal_key_type() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Type* p = _impl_.key_type_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(::google::api::expr::v1alpha1::_Type_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Type& Type_MapType::key_type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.MapType.key_type)
+  return _internal_key_type();
+}
+inline void Type_MapType::unsafe_arena_set_allocated_key_type(::google::api::expr::v1alpha1::Type* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.key_type_);
+  }
+  _impl_.key_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.MapType.key_type)
+}
+inline ::google::api::expr::v1alpha1::Type* Type_MapType::release_key_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Type* released = _impl_.key_type_;
+  _impl_.key_type_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_MapType::unsafe_arena_release_key_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.MapType.key_type)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Type* temp = _impl_.key_type_;
+  _impl_.key_type_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_MapType::_internal_mutable_key_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.key_type_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
+    _impl_.key_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(p);
+  }
+  return _impl_.key_type_;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_MapType::mutable_key_type() {
+  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_key_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.MapType.key_type)
+  return _msg;
+}
+inline void Type_MapType::set_allocated_key_type(::google::api::expr::v1alpha1::Type* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Type*>(_impl_.key_type_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.key_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.MapType.key_type)
+}
+
+// .google.api.expr.v1alpha1.Type value_type = 2 [json_name = "valueType"];
+inline bool Type_MapType::has_value_type() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.value_type_ != nullptr);
+  return value;
+}
+inline void Type_MapType::clear_value_type() {
+  if (_impl_.value_type_ != nullptr) _impl_.value_type_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000002u;
+}
+inline const ::google::api::expr::v1alpha1::Type& Type_MapType::_internal_value_type() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Type* p = _impl_.value_type_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(::google::api::expr::v1alpha1::_Type_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Type& Type_MapType::value_type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.MapType.value_type)
+  return _internal_value_type();
+}
+inline void Type_MapType::unsafe_arena_set_allocated_value_type(::google::api::expr::v1alpha1::Type* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_type_);
+  }
+  _impl_.value_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.MapType.value_type)
+}
+inline ::google::api::expr::v1alpha1::Type* Type_MapType::release_value_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::Type* released = _impl_.value_type_;
+  _impl_.value_type_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_MapType::unsafe_arena_release_value_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.MapType.value_type)
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::Type* temp = _impl_.value_type_;
+  _impl_.value_type_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_MapType::_internal_mutable_value_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000002u;
+  if (_impl_.value_type_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
+    _impl_.value_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(p);
+  }
+  return _impl_.value_type_;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_MapType::mutable_value_type() {
+  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_value_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.MapType.value_type)
+  return _msg;
+}
+inline void Type_MapType::set_allocated_value_type(::google::api::expr::v1alpha1::Type* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Type*>(_impl_.value_type_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+
+  _impl_.value_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.MapType.value_type)
+}
+
+// -------------------------------------------------------------------
+
+// Type_FunctionType
+
+// .google.api.expr.v1alpha1.Type result_type = 1 [json_name = "resultType"];
+inline bool Type_FunctionType::has_result_type() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.result_type_ != nullptr);
+  return value;
+}
+inline void Type_FunctionType::clear_result_type() {
+  if (_impl_.result_type_ != nullptr) _impl_.result_type_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::v1alpha1::Type& Type_FunctionType::_internal_result_type() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Type* p = _impl_.result_type_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(::google::api::expr::v1alpha1::_Type_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Type& Type_FunctionType::result_type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.FunctionType.result_type)
+  return _internal_result_type();
+}
+inline void Type_FunctionType::unsafe_arena_set_allocated_result_type(::google::api::expr::v1alpha1::Type* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_type_);
+  }
+  _impl_.result_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.FunctionType.result_type)
+}
+inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::release_result_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Type* released = _impl_.result_type_;
+  _impl_.result_type_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::unsafe_arena_release_result_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.FunctionType.result_type)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Type* temp = _impl_.result_type_;
+  _impl_.result_type_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::_internal_mutable_result_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.result_type_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
+    _impl_.result_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(p);
+  }
+  return _impl_.result_type_;
+}
+inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::mutable_result_type() {
+  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_result_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.FunctionType.result_type)
+  return _msg;
+}
+inline void Type_FunctionType::set_allocated_result_type(::google::api::expr::v1alpha1::Type* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Type*>(_impl_.result_type_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.result_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.FunctionType.result_type)
+}
+
+// repeated .google.api.expr.v1alpha1.Type arg_types = 2 [json_name = "argTypes"];
+inline int Type_FunctionType::_internal_arg_types_size() const {
+  return _internal_arg_types().size();
+}
+inline int Type_FunctionType::arg_types_size() const {
+  return _internal_arg_types_size();
+}
+inline void Type_FunctionType::clear_arg_types() {
+  _internal_mutable_arg_types()->Clear();
+}
+inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::mutable_arg_types(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
+  return _internal_mutable_arg_types()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
+Type_FunctionType::mutable_arg_types() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_arg_types();
+}
+inline const ::google::api::expr::v1alpha1::Type& Type_FunctionType::arg_types(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
+    return _internal_arg_types().Get(index);
+}
+inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::add_arg_types() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::Type* _add = _internal_mutable_arg_types()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
+Type_FunctionType::arg_types() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
+  return _internal_arg_types();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>&
+Type_FunctionType::_internal_arg_types() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.arg_types_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>*
+Type_FunctionType::_internal_mutable_arg_types() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.arg_types_;
+}
+
+// -------------------------------------------------------------------
+
+// Type_AbstractType
+
+// string name = 1 [json_name = "name"];
+inline void Type_AbstractType::clear_name() {
+  _impl_.name_.ClearToEmpty();
+}
+inline const std::string& Type_AbstractType::name() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.AbstractType.name)
+  return _internal_name();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Type_AbstractType::set_name(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.AbstractType.name)
+}
+inline std::string* Type_AbstractType::mutable_name() {
+  std::string* _s = _internal_mutable_name();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.AbstractType.name)
+  return _s;
+}
+inline const std::string& Type_AbstractType::_internal_name() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.name_.Get();
+}
+inline void Type_AbstractType::_internal_set_name(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.name_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Type_AbstractType::_internal_mutable_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.name_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Type_AbstractType::release_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.AbstractType.name)
+  return _impl_.name_.Release();
+}
+inline void Type_AbstractType::set_allocated_name(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.name_.IsDefault()) {
+          _impl_.name_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.AbstractType.name)
+}
+
+// repeated .google.api.expr.v1alpha1.Type parameter_types = 2 [json_name = "parameterTypes"];
+inline int Type_AbstractType::_internal_parameter_types_size() const {
+  return _internal_parameter_types().size();
+}
+inline int Type_AbstractType::parameter_types_size() const {
+  return _internal_parameter_types_size();
+}
+inline void Type_AbstractType::clear_parameter_types() {
+  _internal_mutable_parameter_types()->Clear();
+}
+inline ::google::api::expr::v1alpha1::Type* Type_AbstractType::mutable_parameter_types(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
+  return _internal_mutable_parameter_types()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
+Type_AbstractType::mutable_parameter_types() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_parameter_types();
+}
+inline const ::google::api::expr::v1alpha1::Type& Type_AbstractType::parameter_types(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
+    return _internal_parameter_types().Get(index);
+}
+inline ::google::api::expr::v1alpha1::Type* Type_AbstractType::add_parameter_types() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::Type* _add = _internal_mutable_parameter_types()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
+Type_AbstractType::parameter_types() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
+  return _internal_parameter_types();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>&
+Type_AbstractType::_internal_parameter_types() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.parameter_types_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>*
+Type_AbstractType::_internal_mutable_parameter_types() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.parameter_types_;
+}
+
+// -------------------------------------------------------------------
+
+// Type
+
+// .google.protobuf.Empty dyn = 1 [json_name = "dyn"];
+inline bool Type::has_dyn() const {
+  return type_kind_case() == kDyn;
+}
+inline bool Type::_internal_has_dyn() const {
+  return type_kind_case() == kDyn;
+}
+inline void Type::set_has_dyn() {
+  _impl_._oneof_case_[0] = kDyn;
+}
+inline ::google::protobuf::Empty* Type::release_dyn() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.dyn)
+  if (type_kind_case() == kDyn) {
+    clear_has_type_kind();
+    ::google::protobuf::Empty* temp = _impl_.type_kind_.dyn_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.type_kind_.dyn_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::protobuf::Empty& Type::_internal_dyn() const {
+  return type_kind_case() == kDyn
+      ? *_impl_.type_kind_.dyn_
+      : reinterpret_cast<::google::protobuf::Empty&>(::google::protobuf::_Empty_default_instance_);
+}
+inline const ::google::protobuf::Empty& Type::dyn() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.dyn)
+  return _internal_dyn();
+}
+inline ::google::protobuf::Empty* Type::unsafe_arena_release_dyn() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.dyn)
+  if (type_kind_case() == kDyn) {
+    clear_has_type_kind();
+    ::google::protobuf::Empty* temp = _impl_.type_kind_.dyn_;
+    _impl_.type_kind_.dyn_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Type::unsafe_arena_set_allocated_dyn(::google::protobuf::Empty* dyn) {
+  clear_type_kind();
+  if (dyn) {
+    set_has_dyn();
+    _impl_.type_kind_.dyn_ = dyn;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.dyn)
+}
+inline ::google::protobuf::Empty* Type::_internal_mutable_dyn() {
+  if (type_kind_case() != kDyn) {
+    clear_type_kind();
+    set_has_dyn();
+    _impl_.type_kind_.dyn_ = CreateMaybeMessage< ::google::protobuf::Empty >(GetArenaForAllocation());
+  }
+  return _impl_.type_kind_.dyn_;
+}
+inline ::google::protobuf::Empty* Type::mutable_dyn() {
+  ::google::protobuf::Empty* _msg = _internal_mutable_dyn();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.dyn)
+  return _msg;
+}
+
+// .google.protobuf.NullValue null = 2 [json_name = "null"];
+inline bool Type::has_null() const {
+  return type_kind_case() == kNull;
+}
+inline void Type::set_has_null() {
+  _impl_._oneof_case_[0] = kNull;
+}
+inline void Type::clear_null() {
+  if (type_kind_case() == kNull) {
+    _impl_.type_kind_.null_ = 0;
+    clear_has_type_kind();
+  }
+}
+inline ::google::protobuf::NullValue Type::null() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.null)
+  return _internal_null();
+}
+inline void Type::set_null(::google::protobuf::NullValue value) {
+  _internal_set_null(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.null)
+}
+inline ::google::protobuf::NullValue Type::_internal_null() const {
+  if (type_kind_case() == kNull) {
+    return static_cast<::google::protobuf::NullValue>(_impl_.type_kind_.null_);
+  }
+  return static_cast<::google::protobuf::NullValue>(0);
+}
+inline void Type::_internal_set_null(::google::protobuf::NullValue value) {
+  if (type_kind_case() != kNull) {
+    clear_type_kind();
+    set_has_null();
+  }
+  _impl_.type_kind_.null_ = value;
+}
+
+// .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3 [json_name = "primitive"];
+inline bool Type::has_primitive() const {
+  return type_kind_case() == kPrimitive;
+}
+inline void Type::set_has_primitive() {
+  _impl_._oneof_case_[0] = kPrimitive;
+}
+inline void Type::clear_primitive() {
+  if (type_kind_case() == kPrimitive) {
+    _impl_.type_kind_.primitive_ = 0;
+    clear_has_type_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Type_PrimitiveType Type::primitive() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.primitive)
+  return _internal_primitive();
+}
+inline void Type::set_primitive(::google::api::expr::v1alpha1::Type_PrimitiveType value) {
+  _internal_set_primitive(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.primitive)
+}
+inline ::google::api::expr::v1alpha1::Type_PrimitiveType Type::_internal_primitive() const {
+  if (type_kind_case() == kPrimitive) {
+    return static_cast<::google::api::expr::v1alpha1::Type_PrimitiveType>(_impl_.type_kind_.primitive_);
+  }
+  return static_cast<::google::api::expr::v1alpha1::Type_PrimitiveType>(0);
+}
+inline void Type::_internal_set_primitive(::google::api::expr::v1alpha1::Type_PrimitiveType value) {
+  if (type_kind_case() != kPrimitive) {
+    clear_type_kind();
+    set_has_primitive();
+  }
+  _impl_.type_kind_.primitive_ = value;
+}
+
+// .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4 [json_name = "wrapper"];
+inline bool Type::has_wrapper() const {
+  return type_kind_case() == kWrapper;
+}
+inline void Type::set_has_wrapper() {
+  _impl_._oneof_case_[0] = kWrapper;
+}
+inline void Type::clear_wrapper() {
+  if (type_kind_case() == kWrapper) {
+    _impl_.type_kind_.wrapper_ = 0;
+    clear_has_type_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Type_PrimitiveType Type::wrapper() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.wrapper)
+  return _internal_wrapper();
+}
+inline void Type::set_wrapper(::google::api::expr::v1alpha1::Type_PrimitiveType value) {
+  _internal_set_wrapper(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.wrapper)
+}
+inline ::google::api::expr::v1alpha1::Type_PrimitiveType Type::_internal_wrapper() const {
+  if (type_kind_case() == kWrapper) {
+    return static_cast<::google::api::expr::v1alpha1::Type_PrimitiveType>(_impl_.type_kind_.wrapper_);
+  }
+  return static_cast<::google::api::expr::v1alpha1::Type_PrimitiveType>(0);
+}
+inline void Type::_internal_set_wrapper(::google::api::expr::v1alpha1::Type_PrimitiveType value) {
+  if (type_kind_case() != kWrapper) {
+    clear_type_kind();
+    set_has_wrapper();
+  }
+  _impl_.type_kind_.wrapper_ = value;
+}
+
+// .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5 [json_name = "wellKnown"];
+inline bool Type::has_well_known() const {
+  return type_kind_case() == kWellKnown;
+}
+inline void Type::set_has_well_known() {
+  _impl_._oneof_case_[0] = kWellKnown;
+}
+inline void Type::clear_well_known() {
+  if (type_kind_case() == kWellKnown) {
+    _impl_.type_kind_.well_known_ = 0;
+    clear_has_type_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Type_WellKnownType Type::well_known() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.well_known)
+  return _internal_well_known();
+}
+inline void Type::set_well_known(::google::api::expr::v1alpha1::Type_WellKnownType value) {
+  _internal_set_well_known(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.well_known)
+}
+inline ::google::api::expr::v1alpha1::Type_WellKnownType Type::_internal_well_known() const {
+  if (type_kind_case() == kWellKnown) {
+    return static_cast<::google::api::expr::v1alpha1::Type_WellKnownType>(_impl_.type_kind_.well_known_);
+  }
+  return static_cast<::google::api::expr::v1alpha1::Type_WellKnownType>(0);
+}
+inline void Type::_internal_set_well_known(::google::api::expr::v1alpha1::Type_WellKnownType value) {
+  if (type_kind_case() != kWellKnown) {
+    clear_type_kind();
+    set_has_well_known();
+  }
+  _impl_.type_kind_.well_known_ = value;
+}
+
+// .google.api.expr.v1alpha1.Type.ListType list_type = 6 [json_name = "listType"];
+inline bool Type::has_list_type() const {
+  return type_kind_case() == kListType;
+}
+inline bool Type::_internal_has_list_type() const {
+  return type_kind_case() == kListType;
+}
+inline void Type::set_has_list_type() {
+  _impl_._oneof_case_[0] = kListType;
+}
+inline void Type::clear_list_type() {
+  if (type_kind_case() == kListType) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.type_kind_.list_type_;
+    }
+    clear_has_type_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Type_ListType* Type::release_list_type() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.list_type)
+  if (type_kind_case() == kListType) {
+    clear_has_type_kind();
+    ::google::api::expr::v1alpha1::Type_ListType* temp = _impl_.type_kind_.list_type_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.type_kind_.list_type_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Type_ListType& Type::_internal_list_type() const {
+  return type_kind_case() == kListType
+      ? *_impl_.type_kind_.list_type_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Type_ListType&>(::google::api::expr::v1alpha1::_Type_ListType_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Type_ListType& Type::list_type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.list_type)
+  return _internal_list_type();
+}
+inline ::google::api::expr::v1alpha1::Type_ListType* Type::unsafe_arena_release_list_type() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.list_type)
+  if (type_kind_case() == kListType) {
+    clear_has_type_kind();
+    ::google::api::expr::v1alpha1::Type_ListType* temp = _impl_.type_kind_.list_type_;
+    _impl_.type_kind_.list_type_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Type::unsafe_arena_set_allocated_list_type(::google::api::expr::v1alpha1::Type_ListType* list_type) {
+  clear_type_kind();
+  if (list_type) {
+    set_has_list_type();
+    _impl_.type_kind_.list_type_ = list_type;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.list_type)
+}
+inline ::google::api::expr::v1alpha1::Type_ListType* Type::_internal_mutable_list_type() {
+  if (type_kind_case() != kListType) {
+    clear_type_kind();
+    set_has_list_type();
+    _impl_.type_kind_.list_type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_ListType >(GetArenaForAllocation());
+  }
+  return _impl_.type_kind_.list_type_;
+}
+inline ::google::api::expr::v1alpha1::Type_ListType* Type::mutable_list_type() {
+  ::google::api::expr::v1alpha1::Type_ListType* _msg = _internal_mutable_list_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.list_type)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.Type.MapType map_type = 7 [json_name = "mapType"];
+inline bool Type::has_map_type() const {
+  return type_kind_case() == kMapType;
+}
+inline bool Type::_internal_has_map_type() const {
+  return type_kind_case() == kMapType;
+}
+inline void Type::set_has_map_type() {
+  _impl_._oneof_case_[0] = kMapType;
+}
+inline void Type::clear_map_type() {
+  if (type_kind_case() == kMapType) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.type_kind_.map_type_;
+    }
+    clear_has_type_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Type_MapType* Type::release_map_type() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.map_type)
+  if (type_kind_case() == kMapType) {
+    clear_has_type_kind();
+    ::google::api::expr::v1alpha1::Type_MapType* temp = _impl_.type_kind_.map_type_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.type_kind_.map_type_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Type_MapType& Type::_internal_map_type() const {
+  return type_kind_case() == kMapType
+      ? *_impl_.type_kind_.map_type_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Type_MapType&>(::google::api::expr::v1alpha1::_Type_MapType_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Type_MapType& Type::map_type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.map_type)
+  return _internal_map_type();
+}
+inline ::google::api::expr::v1alpha1::Type_MapType* Type::unsafe_arena_release_map_type() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.map_type)
+  if (type_kind_case() == kMapType) {
+    clear_has_type_kind();
+    ::google::api::expr::v1alpha1::Type_MapType* temp = _impl_.type_kind_.map_type_;
+    _impl_.type_kind_.map_type_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Type::unsafe_arena_set_allocated_map_type(::google::api::expr::v1alpha1::Type_MapType* map_type) {
+  clear_type_kind();
+  if (map_type) {
+    set_has_map_type();
+    _impl_.type_kind_.map_type_ = map_type;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.map_type)
+}
+inline ::google::api::expr::v1alpha1::Type_MapType* Type::_internal_mutable_map_type() {
+  if (type_kind_case() != kMapType) {
+    clear_type_kind();
+    set_has_map_type();
+    _impl_.type_kind_.map_type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_MapType >(GetArenaForAllocation());
+  }
+  return _impl_.type_kind_.map_type_;
+}
+inline ::google::api::expr::v1alpha1::Type_MapType* Type::mutable_map_type() {
+  ::google::api::expr::v1alpha1::Type_MapType* _msg = _internal_mutable_map_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.map_type)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.Type.FunctionType function = 8 [json_name = "function"];
+inline bool Type::has_function() const {
+  return type_kind_case() == kFunction;
+}
+inline bool Type::_internal_has_function() const {
+  return type_kind_case() == kFunction;
+}
+inline void Type::set_has_function() {
+  _impl_._oneof_case_[0] = kFunction;
+}
+inline void Type::clear_function() {
+  if (type_kind_case() == kFunction) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.type_kind_.function_;
+    }
+    clear_has_type_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Type_FunctionType* Type::release_function() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.function)
+  if (type_kind_case() == kFunction) {
+    clear_has_type_kind();
+    ::google::api::expr::v1alpha1::Type_FunctionType* temp = _impl_.type_kind_.function_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.type_kind_.function_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Type_FunctionType& Type::_internal_function() const {
+  return type_kind_case() == kFunction
+      ? *_impl_.type_kind_.function_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Type_FunctionType&>(::google::api::expr::v1alpha1::_Type_FunctionType_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Type_FunctionType& Type::function() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.function)
+  return _internal_function();
+}
+inline ::google::api::expr::v1alpha1::Type_FunctionType* Type::unsafe_arena_release_function() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.function)
+  if (type_kind_case() == kFunction) {
+    clear_has_type_kind();
+    ::google::api::expr::v1alpha1::Type_FunctionType* temp = _impl_.type_kind_.function_;
+    _impl_.type_kind_.function_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Type::unsafe_arena_set_allocated_function(::google::api::expr::v1alpha1::Type_FunctionType* function) {
+  clear_type_kind();
+  if (function) {
+    set_has_function();
+    _impl_.type_kind_.function_ = function;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.function)
+}
+inline ::google::api::expr::v1alpha1::Type_FunctionType* Type::_internal_mutable_function() {
+  if (type_kind_case() != kFunction) {
+    clear_type_kind();
+    set_has_function();
+    _impl_.type_kind_.function_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_FunctionType >(GetArenaForAllocation());
+  }
+  return _impl_.type_kind_.function_;
+}
+inline ::google::api::expr::v1alpha1::Type_FunctionType* Type::mutable_function() {
+  ::google::api::expr::v1alpha1::Type_FunctionType* _msg = _internal_mutable_function();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.function)
+  return _msg;
+}
+
+// string message_type = 9 [json_name = "messageType"];
+inline bool Type::has_message_type() const {
+  return type_kind_case() == kMessageType;
+}
+inline void Type::set_has_message_type() {
+  _impl_._oneof_case_[0] = kMessageType;
+}
+inline void Type::clear_message_type() {
+  if (type_kind_case() == kMessageType) {
+    _impl_.type_kind_.message_type_.Destroy();
+    clear_has_type_kind();
+  }
+}
+inline const std::string& Type::message_type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.message_type)
+  return _internal_message_type();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Type::set_message_type(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (type_kind_case() != kMessageType) {
+    clear_type_kind();
+
+    set_has_message_type();
+    _impl_.type_kind_.message_type_.InitDefault();
+  }
+  _impl_.type_kind_.message_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.message_type)
+}
+inline std::string* Type::mutable_message_type() {
+  std::string* _s = _internal_mutable_message_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.message_type)
+  return _s;
+}
+inline const std::string& Type::_internal_message_type() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  if (type_kind_case() != kMessageType) {
+    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
+  }
+  return _impl_.type_kind_.message_type_.Get();
+}
+inline void Type::_internal_set_message_type(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (type_kind_case() != kMessageType) {
+    clear_type_kind();
+
+    set_has_message_type();
+    _impl_.type_kind_.message_type_.InitDefault();
+  }
+  _impl_.type_kind_.message_type_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Type::_internal_mutable_message_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (type_kind_case() != kMessageType) {
+    clear_type_kind();
+
+    set_has_message_type();
+    _impl_.type_kind_.message_type_.InitDefault();
+  }
+  return _impl_.type_kind_.message_type_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Type::release_message_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.message_type)
+  if (type_kind_case() != kMessageType) {
+    return nullptr;
+  }
+  clear_has_type_kind();
+  return _impl_.type_kind_.message_type_.Release();
+}
+inline void Type::set_allocated_message_type(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (has_type_kind()) {
+    clear_type_kind();
+  }
+  if (value != nullptr) {
+    set_has_message_type();
+    _impl_.type_kind_.message_type_.InitAllocated(value, GetArenaForAllocation());
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.message_type)
+}
+
+// string type_param = 10 [json_name = "typeParam"];
+inline bool Type::has_type_param() const {
+  return type_kind_case() == kTypeParam;
+}
+inline void Type::set_has_type_param() {
+  _impl_._oneof_case_[0] = kTypeParam;
+}
+inline void Type::clear_type_param() {
+  if (type_kind_case() == kTypeParam) {
+    _impl_.type_kind_.type_param_.Destroy();
+    clear_has_type_kind();
+  }
+}
+inline const std::string& Type::type_param() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.type_param)
+  return _internal_type_param();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Type::set_type_param(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (type_kind_case() != kTypeParam) {
+    clear_type_kind();
+
+    set_has_type_param();
+    _impl_.type_kind_.type_param_.InitDefault();
+  }
+  _impl_.type_kind_.type_param_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.type_param)
+}
+inline std::string* Type::mutable_type_param() {
+  std::string* _s = _internal_mutable_type_param();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.type_param)
+  return _s;
+}
+inline const std::string& Type::_internal_type_param() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  if (type_kind_case() != kTypeParam) {
+    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
+  }
+  return _impl_.type_kind_.type_param_.Get();
+}
+inline void Type::_internal_set_type_param(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (type_kind_case() != kTypeParam) {
+    clear_type_kind();
+
+    set_has_type_param();
+    _impl_.type_kind_.type_param_.InitDefault();
+  }
+  _impl_.type_kind_.type_param_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Type::_internal_mutable_type_param() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (type_kind_case() != kTypeParam) {
+    clear_type_kind();
+
+    set_has_type_param();
+    _impl_.type_kind_.type_param_.InitDefault();
+  }
+  return _impl_.type_kind_.type_param_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Type::release_type_param() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.type_param)
+  if (type_kind_case() != kTypeParam) {
+    return nullptr;
+  }
+  clear_has_type_kind();
+  return _impl_.type_kind_.type_param_.Release();
+}
+inline void Type::set_allocated_type_param(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (has_type_kind()) {
+    clear_type_kind();
+  }
+  if (value != nullptr) {
+    set_has_type_param();
+    _impl_.type_kind_.type_param_.InitAllocated(value, GetArenaForAllocation());
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.type_param)
+}
+
+// .google.api.expr.v1alpha1.Type type = 11 [json_name = "type"];
+inline bool Type::has_type() const {
+  return type_kind_case() == kType;
+}
+inline bool Type::_internal_has_type() const {
+  return type_kind_case() == kType;
+}
+inline void Type::set_has_type() {
+  _impl_._oneof_case_[0] = kType;
+}
+inline void Type::clear_type() {
+  if (type_kind_case() == kType) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.type_kind_.type_;
+    }
+    clear_has_type_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Type* Type::release_type() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.type)
+  if (type_kind_case() == kType) {
+    clear_has_type_kind();
+    ::google::api::expr::v1alpha1::Type* temp = _impl_.type_kind_.type_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.type_kind_.type_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Type& Type::_internal_type() const {
+  return type_kind_case() == kType
+      ? *_impl_.type_kind_.type_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Type&>(::google::api::expr::v1alpha1::_Type_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Type& Type::type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.type)
+  return _internal_type();
+}
+inline ::google::api::expr::v1alpha1::Type* Type::unsafe_arena_release_type() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.type)
+  if (type_kind_case() == kType) {
+    clear_has_type_kind();
+    ::google::api::expr::v1alpha1::Type* temp = _impl_.type_kind_.type_;
+    _impl_.type_kind_.type_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Type::unsafe_arena_set_allocated_type(::google::api::expr::v1alpha1::Type* type) {
+  clear_type_kind();
+  if (type) {
+    set_has_type();
+    _impl_.type_kind_.type_ = type;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.type)
+}
+inline ::google::api::expr::v1alpha1::Type* Type::_internal_mutable_type() {
+  if (type_kind_case() != kType) {
+    clear_type_kind();
+    set_has_type();
+    _impl_.type_kind_.type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type >(GetArenaForAllocation());
+  }
+  return _impl_.type_kind_.type_;
+}
+inline ::google::api::expr::v1alpha1::Type* Type::mutable_type() {
+  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.type)
+  return _msg;
+}
+
+// .google.protobuf.Empty error = 12 [json_name = "error"];
+inline bool Type::has_error() const {
+  return type_kind_case() == kError;
+}
+inline bool Type::_internal_has_error() const {
+  return type_kind_case() == kError;
+}
+inline void Type::set_has_error() {
+  _impl_._oneof_case_[0] = kError;
+}
+inline ::google::protobuf::Empty* Type::release_error() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.error)
+  if (type_kind_case() == kError) {
+    clear_has_type_kind();
+    ::google::protobuf::Empty* temp = _impl_.type_kind_.error_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.type_kind_.error_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::protobuf::Empty& Type::_internal_error() const {
+  return type_kind_case() == kError
+      ? *_impl_.type_kind_.error_
+      : reinterpret_cast<::google::protobuf::Empty&>(::google::protobuf::_Empty_default_instance_);
+}
+inline const ::google::protobuf::Empty& Type::error() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.error)
+  return _internal_error();
+}
+inline ::google::protobuf::Empty* Type::unsafe_arena_release_error() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.error)
+  if (type_kind_case() == kError) {
+    clear_has_type_kind();
+    ::google::protobuf::Empty* temp = _impl_.type_kind_.error_;
+    _impl_.type_kind_.error_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Type::unsafe_arena_set_allocated_error(::google::protobuf::Empty* error) {
+  clear_type_kind();
+  if (error) {
+    set_has_error();
+    _impl_.type_kind_.error_ = error;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.error)
+}
+inline ::google::protobuf::Empty* Type::_internal_mutable_error() {
+  if (type_kind_case() != kError) {
+    clear_type_kind();
+    set_has_error();
+    _impl_.type_kind_.error_ = CreateMaybeMessage< ::google::protobuf::Empty >(GetArenaForAllocation());
+  }
+  return _impl_.type_kind_.error_;
+}
+inline ::google::protobuf::Empty* Type::mutable_error() {
+  ::google::protobuf::Empty* _msg = _internal_mutable_error();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.error)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14 [json_name = "abstractType"];
+inline bool Type::has_abstract_type() const {
+  return type_kind_case() == kAbstractType;
+}
+inline bool Type::_internal_has_abstract_type() const {
+  return type_kind_case() == kAbstractType;
+}
+inline void Type::set_has_abstract_type() {
+  _impl_._oneof_case_[0] = kAbstractType;
+}
+inline void Type::clear_abstract_type() {
+  if (type_kind_case() == kAbstractType) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.type_kind_.abstract_type_;
+    }
+    clear_has_type_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Type_AbstractType* Type::release_abstract_type() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.abstract_type)
+  if (type_kind_case() == kAbstractType) {
+    clear_has_type_kind();
+    ::google::api::expr::v1alpha1::Type_AbstractType* temp = _impl_.type_kind_.abstract_type_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.type_kind_.abstract_type_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Type_AbstractType& Type::_internal_abstract_type() const {
+  return type_kind_case() == kAbstractType
+      ? *_impl_.type_kind_.abstract_type_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Type_AbstractType&>(::google::api::expr::v1alpha1::_Type_AbstractType_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Type_AbstractType& Type::abstract_type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.abstract_type)
+  return _internal_abstract_type();
+}
+inline ::google::api::expr::v1alpha1::Type_AbstractType* Type::unsafe_arena_release_abstract_type() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.abstract_type)
+  if (type_kind_case() == kAbstractType) {
+    clear_has_type_kind();
+    ::google::api::expr::v1alpha1::Type_AbstractType* temp = _impl_.type_kind_.abstract_type_;
+    _impl_.type_kind_.abstract_type_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Type::unsafe_arena_set_allocated_abstract_type(::google::api::expr::v1alpha1::Type_AbstractType* abstract_type) {
+  clear_type_kind();
+  if (abstract_type) {
+    set_has_abstract_type();
+    _impl_.type_kind_.abstract_type_ = abstract_type;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.abstract_type)
+}
+inline ::google::api::expr::v1alpha1::Type_AbstractType* Type::_internal_mutable_abstract_type() {
+  if (type_kind_case() != kAbstractType) {
+    clear_type_kind();
+    set_has_abstract_type();
+    _impl_.type_kind_.abstract_type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_AbstractType >(GetArenaForAllocation());
+  }
+  return _impl_.type_kind_.abstract_type_;
+}
+inline ::google::api::expr::v1alpha1::Type_AbstractType* Type::mutable_abstract_type() {
+  ::google::api::expr::v1alpha1::Type_AbstractType* _msg = _internal_mutable_abstract_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.abstract_type)
+  return _msg;
+}
+
+inline bool Type::has_type_kind() const {
+  return type_kind_case() != TYPE_KIND_NOT_SET;
+}
+inline void Type::clear_has_type_kind() {
+  _impl_._oneof_case_[0] = TYPE_KIND_NOT_SET;
+}
+inline Type::TypeKindCase Type::type_kind_case() const {
+  return Type::TypeKindCase(_impl_._oneof_case_[0]);
+}
+// -------------------------------------------------------------------
+
+// Decl_IdentDecl
+
+// .google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];
+inline bool Decl_IdentDecl::has_type() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
+  return value;
+}
+inline void Decl_IdentDecl::clear_type() {
+  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::v1alpha1::Type& Decl_IdentDecl::_internal_type() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Type* p = _impl_.type_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(::google::api::expr::v1alpha1::_Type_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Type& Decl_IdentDecl::type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.IdentDecl.type)
+  return _internal_type();
+}
+inline void Decl_IdentDecl::unsafe_arena_set_allocated_type(::google::api::expr::v1alpha1::Type* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_);
+  }
+  _impl_.type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.type)
+}
+inline ::google::api::expr::v1alpha1::Type* Decl_IdentDecl::release_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Type* released = _impl_.type_;
+  _impl_.type_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Type* Decl_IdentDecl::unsafe_arena_release_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.IdentDecl.type)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Type* temp = _impl_.type_;
+  _impl_.type_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Type* Decl_IdentDecl::_internal_mutable_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.type_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
+    _impl_.type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(p);
+  }
+  return _impl_.type_;
+}
+inline ::google::api::expr::v1alpha1::Type* Decl_IdentDecl::mutable_type() {
+  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.IdentDecl.type)
+  return _msg;
+}
+inline void Decl_IdentDecl::set_allocated_type(::google::api::expr::v1alpha1::Type* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Type*>(_impl_.type_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.type)
+}
+
+// .google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];
+inline bool Decl_IdentDecl::has_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
+  return value;
+}
+inline const ::google::api::expr::v1alpha1::Constant& Decl_IdentDecl::_internal_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Constant* p = _impl_.value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Constant&>(::google::api::expr::v1alpha1::_Constant_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Constant& Decl_IdentDecl::value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.IdentDecl.value)
+  return _internal_value();
+}
+inline void Decl_IdentDecl::unsafe_arena_set_allocated_value(::google::api::expr::v1alpha1::Constant* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
+  }
+  _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Constant*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.value)
+}
+inline ::google::api::expr::v1alpha1::Constant* Decl_IdentDecl::release_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::Constant* released = _impl_.value_;
+  _impl_.value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Constant* Decl_IdentDecl::unsafe_arena_release_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.IdentDecl.value)
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::Constant* temp = _impl_.value_;
+  _impl_.value_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Constant* Decl_IdentDecl::_internal_mutable_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000002u;
+  if (_impl_.value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Constant>(GetArenaForAllocation());
+    _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Constant*>(p);
+  }
+  return _impl_.value_;
+}
+inline ::google::api::expr::v1alpha1::Constant* Decl_IdentDecl::mutable_value() {
+  ::google::api::expr::v1alpha1::Constant* _msg = _internal_mutable_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.IdentDecl.value)
+  return _msg;
+}
+inline void Decl_IdentDecl::set_allocated_value(::google::api::expr::v1alpha1::Constant* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+
+  _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Constant*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.value)
+}
+
+// string doc = 3 [json_name = "doc"];
+inline void Decl_IdentDecl::clear_doc() {
+  _impl_.doc_.ClearToEmpty();
+}
+inline const std::string& Decl_IdentDecl::doc() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
+  return _internal_doc();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Decl_IdentDecl::set_doc(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.doc_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
+}
+inline std::string* Decl_IdentDecl::mutable_doc() {
+  std::string* _s = _internal_mutable_doc();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
+  return _s;
+}
+inline const std::string& Decl_IdentDecl::_internal_doc() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.doc_.Get();
+}
+inline void Decl_IdentDecl::_internal_set_doc(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.doc_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Decl_IdentDecl::_internal_mutable_doc() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.doc_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Decl_IdentDecl::release_doc() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
+  return _impl_.doc_.Release();
+}
+inline void Decl_IdentDecl::set_allocated_doc(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.doc_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.doc_.IsDefault()) {
+          _impl_.doc_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
+}
+
+// -------------------------------------------------------------------
+
+// Decl_FunctionDecl_Overload
+
+// string overload_id = 1 [json_name = "overloadId"];
+inline void Decl_FunctionDecl_Overload::clear_overload_id() {
+  _impl_.overload_id_.ClearToEmpty();
+}
+inline const std::string& Decl_FunctionDecl_Overload::overload_id() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
+  return _internal_overload_id();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Decl_FunctionDecl_Overload::set_overload_id(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.overload_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
+}
+inline std::string* Decl_FunctionDecl_Overload::mutable_overload_id() {
+  std::string* _s = _internal_mutable_overload_id();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
+  return _s;
+}
+inline const std::string& Decl_FunctionDecl_Overload::_internal_overload_id() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.overload_id_.Get();
+}
+inline void Decl_FunctionDecl_Overload::_internal_set_overload_id(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.overload_id_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Decl_FunctionDecl_Overload::_internal_mutable_overload_id() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.overload_id_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Decl_FunctionDecl_Overload::release_overload_id() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
+  return _impl_.overload_id_.Release();
+}
+inline void Decl_FunctionDecl_Overload::set_allocated_overload_id(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.overload_id_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.overload_id_.IsDefault()) {
+          _impl_.overload_id_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
+}
+
+// repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];
+inline int Decl_FunctionDecl_Overload::_internal_params_size() const {
+  return _internal_params().size();
+}
+inline int Decl_FunctionDecl_Overload::params_size() const {
+  return _internal_params_size();
+}
+inline void Decl_FunctionDecl_Overload::clear_params() {
+  _internal_mutable_params()->Clear();
+}
+inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::mutable_params(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
+  return _internal_mutable_params()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
+Decl_FunctionDecl_Overload::mutable_params() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_params();
+}
+inline const ::google::api::expr::v1alpha1::Type& Decl_FunctionDecl_Overload::params(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
+    return _internal_params().Get(index);
+}
+inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::add_params() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::Type* _add = _internal_mutable_params()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
+Decl_FunctionDecl_Overload::params() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
+  return _internal_params();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>&
+Decl_FunctionDecl_Overload::_internal_params() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.params_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Type>*
+Decl_FunctionDecl_Overload::_internal_mutable_params() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.params_;
+}
+
+// repeated string type_params = 3 [json_name = "typeParams"];
+inline int Decl_FunctionDecl_Overload::_internal_type_params_size() const {
+  return _internal_type_params().size();
+}
+inline int Decl_FunctionDecl_Overload::type_params_size() const {
+  return _internal_type_params_size();
+}
+inline void Decl_FunctionDecl_Overload::clear_type_params() {
+  _internal_mutable_type_params()->Clear();
+}
+inline std::string* Decl_FunctionDecl_Overload::add_type_params() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  std::string* _s = _internal_mutable_type_params()->Add();
+  // @@protoc_insertion_point(field_add_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+  return _s;
+}
+inline const std::string& Decl_FunctionDecl_Overload::type_params(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+  return _internal_type_params().Get(index);
+}
+inline std::string* Decl_FunctionDecl_Overload::mutable_type_params(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+  return _internal_mutable_type_params()->Mutable(index);
+}
+inline void Decl_FunctionDecl_Overload::set_type_params(int index, const std::string& value) {
+  _internal_mutable_type_params()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+}
+inline void Decl_FunctionDecl_Overload::set_type_params(int index, std::string&& value) {
+  _internal_mutable_type_params()->Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+}
+inline void Decl_FunctionDecl_Overload::set_type_params(int index, const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  _internal_mutable_type_params()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+}
+inline void Decl_FunctionDecl_Overload::set_type_params(int index, const char* value,
+                              std::size_t size) {
+  _internal_mutable_type_params()->Mutable(index)->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+}
+inline void Decl_FunctionDecl_Overload::set_type_params(int index, absl::string_view value) {
+  _internal_mutable_type_params()->Mutable(index)->assign(value.data(),
+                                                     value.size());
+  // @@protoc_insertion_point(field_set_string_piece:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+}
+inline void Decl_FunctionDecl_Overload::add_type_params(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_type_params()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+}
+inline void Decl_FunctionDecl_Overload::add_type_params(std::string&& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_type_params()->Add(std::move(value));
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+}
+inline void Decl_FunctionDecl_Overload::add_type_params(const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_type_params()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add_char:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+}
+inline void Decl_FunctionDecl_Overload::add_type_params(const char* value, std::size_t size) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_type_params()->Add()->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_add_pointer:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+}
+inline void Decl_FunctionDecl_Overload::add_type_params(absl::string_view value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_type_params()->Add()->assign(value.data(), value.size());
+  // @@protoc_insertion_point(field_add_string_piece:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+Decl_FunctionDecl_Overload::type_params() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+  return _internal_type_params();
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>* Decl_FunctionDecl_Overload::mutable_type_params() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_type_params();
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+Decl_FunctionDecl_Overload::_internal_type_params() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.type_params_;
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>*
+Decl_FunctionDecl_Overload::_internal_mutable_type_params() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.type_params_;
+}
+
+// .google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];
+inline bool Decl_FunctionDecl_Overload::has_result_type() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.result_type_ != nullptr);
+  return value;
+}
+inline void Decl_FunctionDecl_Overload::clear_result_type() {
+  if (_impl_.result_type_ != nullptr) _impl_.result_type_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::v1alpha1::Type& Decl_FunctionDecl_Overload::_internal_result_type() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Type* p = _impl_.result_type_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(::google::api::expr::v1alpha1::_Type_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Type& Decl_FunctionDecl_Overload::result_type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
+  return _internal_result_type();
+}
+inline void Decl_FunctionDecl_Overload::unsafe_arena_set_allocated_result_type(::google::api::expr::v1alpha1::Type* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_type_);
+  }
+  _impl_.result_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
+}
+inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::release_result_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Type* released = _impl_.result_type_;
+  _impl_.result_type_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::unsafe_arena_release_result_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Type* temp = _impl_.result_type_;
+  _impl_.result_type_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::_internal_mutable_result_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.result_type_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
+    _impl_.result_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(p);
+  }
+  return _impl_.result_type_;
+}
+inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::mutable_result_type() {
+  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_result_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
+  return _msg;
+}
+inline void Decl_FunctionDecl_Overload::set_allocated_result_type(::google::api::expr::v1alpha1::Type* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Type*>(_impl_.result_type_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.result_type_ = reinterpret_cast<::google::api::expr::v1alpha1::Type*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
+}
+
+// bool is_instance_function = 5 [json_name = "isInstanceFunction"];
+inline void Decl_FunctionDecl_Overload::clear_is_instance_function() {
+  _impl_.is_instance_function_ = false;
+}
+inline bool Decl_FunctionDecl_Overload::is_instance_function() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.is_instance_function)
+  return _internal_is_instance_function();
+}
+inline void Decl_FunctionDecl_Overload::set_is_instance_function(bool value) {
+  _internal_set_is_instance_function(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.is_instance_function)
+}
+inline bool Decl_FunctionDecl_Overload::_internal_is_instance_function() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.is_instance_function_;
+}
+inline void Decl_FunctionDecl_Overload::_internal_set_is_instance_function(bool value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.is_instance_function_ = value;
+}
+
+// string doc = 6 [json_name = "doc"];
+inline void Decl_FunctionDecl_Overload::clear_doc() {
+  _impl_.doc_.ClearToEmpty();
+}
+inline const std::string& Decl_FunctionDecl_Overload::doc() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
+  return _internal_doc();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Decl_FunctionDecl_Overload::set_doc(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.doc_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
+}
+inline std::string* Decl_FunctionDecl_Overload::mutable_doc() {
+  std::string* _s = _internal_mutable_doc();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
+  return _s;
+}
+inline const std::string& Decl_FunctionDecl_Overload::_internal_doc() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.doc_.Get();
+}
+inline void Decl_FunctionDecl_Overload::_internal_set_doc(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.doc_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Decl_FunctionDecl_Overload::_internal_mutable_doc() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.doc_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Decl_FunctionDecl_Overload::release_doc() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
+  return _impl_.doc_.Release();
+}
+inline void Decl_FunctionDecl_Overload::set_allocated_doc(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.doc_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.doc_.IsDefault()) {
+          _impl_.doc_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
+}
+
+// -------------------------------------------------------------------
+
+// Decl_FunctionDecl
+
+// repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];
+inline int Decl_FunctionDecl::_internal_overloads_size() const {
+  return _internal_overloads().size();
+}
+inline int Decl_FunctionDecl::overloads_size() const {
+  return _internal_overloads_size();
+}
+inline void Decl_FunctionDecl::clear_overloads() {
+  _internal_mutable_overloads()->Clear();
+}
+inline ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* Decl_FunctionDecl::mutable_overloads(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
+  return _internal_mutable_overloads()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >*
+Decl_FunctionDecl::mutable_overloads() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_overloads();
+}
+inline const ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload& Decl_FunctionDecl::overloads(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
+    return _internal_overloads().Get(index);
+}
+inline ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* Decl_FunctionDecl::add_overloads() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* _add = _internal_mutable_overloads()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >&
+Decl_FunctionDecl::overloads() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
+  return _internal_overloads();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload>&
+Decl_FunctionDecl::_internal_overloads() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.overloads_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload>*
+Decl_FunctionDecl::_internal_mutable_overloads() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.overloads_;
+}
+
+// -------------------------------------------------------------------
+
+// Decl
+
+// string name = 1 [json_name = "name"];
+inline void Decl::clear_name() {
+  _impl_.name_.ClearToEmpty();
+}
+inline const std::string& Decl::name() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.name)
+  return _internal_name();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Decl::set_name(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.name)
+}
+inline std::string* Decl::mutable_name() {
+  std::string* _s = _internal_mutable_name();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.name)
+  return _s;
+}
+inline const std::string& Decl::_internal_name() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.name_.Get();
+}
+inline void Decl::_internal_set_name(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.name_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Decl::_internal_mutable_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.name_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Decl::release_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.name)
+  return _impl_.name_.Release();
+}
+inline void Decl::set_allocated_name(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.name_.IsDefault()) {
+          _impl_.name_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.name)
+}
+
+// .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];
+inline bool Decl::has_ident() const {
+  return decl_kind_case() == kIdent;
+}
+inline bool Decl::_internal_has_ident() const {
+  return decl_kind_case() == kIdent;
+}
+inline void Decl::set_has_ident() {
+  _impl_._oneof_case_[0] = kIdent;
+}
+inline void Decl::clear_ident() {
+  if (decl_kind_case() == kIdent) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.decl_kind_.ident_;
+    }
+    clear_has_decl_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Decl_IdentDecl* Decl::release_ident() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.ident)
+  if (decl_kind_case() == kIdent) {
+    clear_has_decl_kind();
+    ::google::api::expr::v1alpha1::Decl_IdentDecl* temp = _impl_.decl_kind_.ident_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.decl_kind_.ident_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Decl_IdentDecl& Decl::_internal_ident() const {
+  return decl_kind_case() == kIdent
+      ? *_impl_.decl_kind_.ident_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Decl_IdentDecl&>(::google::api::expr::v1alpha1::_Decl_IdentDecl_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Decl_IdentDecl& Decl::ident() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.ident)
+  return _internal_ident();
+}
+inline ::google::api::expr::v1alpha1::Decl_IdentDecl* Decl::unsafe_arena_release_ident() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.ident)
+  if (decl_kind_case() == kIdent) {
+    clear_has_decl_kind();
+    ::google::api::expr::v1alpha1::Decl_IdentDecl* temp = _impl_.decl_kind_.ident_;
+    _impl_.decl_kind_.ident_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Decl::unsafe_arena_set_allocated_ident(::google::api::expr::v1alpha1::Decl_IdentDecl* ident) {
+  clear_decl_kind();
+  if (ident) {
+    set_has_ident();
+    _impl_.decl_kind_.ident_ = ident;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.ident)
+}
+inline ::google::api::expr::v1alpha1::Decl_IdentDecl* Decl::_internal_mutable_ident() {
+  if (decl_kind_case() != kIdent) {
+    clear_decl_kind();
+    set_has_ident();
+    _impl_.decl_kind_.ident_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_IdentDecl >(GetArenaForAllocation());
+  }
+  return _impl_.decl_kind_.ident_;
+}
+inline ::google::api::expr::v1alpha1::Decl_IdentDecl* Decl::mutable_ident() {
+  ::google::api::expr::v1alpha1::Decl_IdentDecl* _msg = _internal_mutable_ident();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.ident)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];
+inline bool Decl::has_function() const {
+  return decl_kind_case() == kFunction;
+}
+inline bool Decl::_internal_has_function() const {
+  return decl_kind_case() == kFunction;
+}
+inline void Decl::set_has_function() {
+  _impl_._oneof_case_[0] = kFunction;
+}
+inline void Decl::clear_function() {
+  if (decl_kind_case() == kFunction) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.decl_kind_.function_;
+    }
+    clear_has_decl_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Decl_FunctionDecl* Decl::release_function() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.function)
+  if (decl_kind_case() == kFunction) {
+    clear_has_decl_kind();
+    ::google::api::expr::v1alpha1::Decl_FunctionDecl* temp = _impl_.decl_kind_.function_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.decl_kind_.function_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Decl_FunctionDecl& Decl::_internal_function() const {
+  return decl_kind_case() == kFunction
+      ? *_impl_.decl_kind_.function_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Decl_FunctionDecl&>(::google::api::expr::v1alpha1::_Decl_FunctionDecl_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Decl_FunctionDecl& Decl::function() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.function)
+  return _internal_function();
+}
+inline ::google::api::expr::v1alpha1::Decl_FunctionDecl* Decl::unsafe_arena_release_function() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.function)
+  if (decl_kind_case() == kFunction) {
+    clear_has_decl_kind();
+    ::google::api::expr::v1alpha1::Decl_FunctionDecl* temp = _impl_.decl_kind_.function_;
+    _impl_.decl_kind_.function_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Decl::unsafe_arena_set_allocated_function(::google::api::expr::v1alpha1::Decl_FunctionDecl* function) {
+  clear_decl_kind();
+  if (function) {
+    set_has_function();
+    _impl_.decl_kind_.function_ = function;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.function)
+}
+inline ::google::api::expr::v1alpha1::Decl_FunctionDecl* Decl::_internal_mutable_function() {
+  if (decl_kind_case() != kFunction) {
+    clear_decl_kind();
+    set_has_function();
+    _impl_.decl_kind_.function_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_FunctionDecl >(GetArenaForAllocation());
+  }
+  return _impl_.decl_kind_.function_;
+}
+inline ::google::api::expr::v1alpha1::Decl_FunctionDecl* Decl::mutable_function() {
+  ::google::api::expr::v1alpha1::Decl_FunctionDecl* _msg = _internal_mutable_function();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.function)
+  return _msg;
+}
+
+inline bool Decl::has_decl_kind() const {
+  return decl_kind_case() != DECL_KIND_NOT_SET;
+}
+inline void Decl::clear_has_decl_kind() {
+  _impl_._oneof_case_[0] = DECL_KIND_NOT_SET;
+}
+inline Decl::DeclKindCase Decl::decl_kind_case() const {
+  return Decl::DeclKindCase(_impl_._oneof_case_[0]);
+}
+// -------------------------------------------------------------------
+
+// Reference
+
+// string name = 1 [json_name = "name"];
+inline void Reference::clear_name() {
+  _impl_.name_.ClearToEmpty();
+}
+inline const std::string& Reference::name() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Reference.name)
+  return _internal_name();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Reference::set_name(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Reference.name)
+}
+inline std::string* Reference::mutable_name() {
+  std::string* _s = _internal_mutable_name();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Reference.name)
+  return _s;
+}
+inline const std::string& Reference::_internal_name() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.name_.Get();
+}
+inline void Reference::_internal_set_name(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.name_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Reference::_internal_mutable_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.name_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Reference::release_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Reference.name)
+  return _impl_.name_.Release();
+}
+inline void Reference::set_allocated_name(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.name_.IsDefault()) {
+          _impl_.name_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Reference.name)
+}
+
+// repeated string overload_id = 3 [json_name = "overloadId"];
+inline int Reference::_internal_overload_id_size() const {
+  return _internal_overload_id().size();
+}
+inline int Reference::overload_id_size() const {
+  return _internal_overload_id_size();
+}
+inline void Reference::clear_overload_id() {
+  _internal_mutable_overload_id()->Clear();
+}
+inline std::string* Reference::add_overload_id() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  std::string* _s = _internal_mutable_overload_id()->Add();
+  // @@protoc_insertion_point(field_add_mutable:google.api.expr.v1alpha1.Reference.overload_id)
+  return _s;
+}
+inline const std::string& Reference::overload_id(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Reference.overload_id)
+  return _internal_overload_id().Get(index);
+}
+inline std::string* Reference::mutable_overload_id(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Reference.overload_id)
+  return _internal_mutable_overload_id()->Mutable(index);
+}
+inline void Reference::set_overload_id(int index, const std::string& value) {
+  _internal_mutable_overload_id()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Reference.overload_id)
+}
+inline void Reference::set_overload_id(int index, std::string&& value) {
+  _internal_mutable_overload_id()->Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Reference.overload_id)
+}
+inline void Reference::set_overload_id(int index, const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  _internal_mutable_overload_id()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Reference.overload_id)
+}
+inline void Reference::set_overload_id(int index, const char* value,
+                              std::size_t size) {
+  _internal_mutable_overload_id()->Mutable(index)->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Reference.overload_id)
+}
+inline void Reference::set_overload_id(int index, absl::string_view value) {
+  _internal_mutable_overload_id()->Mutable(index)->assign(value.data(),
+                                                     value.size());
+  // @@protoc_insertion_point(field_set_string_piece:google.api.expr.v1alpha1.Reference.overload_id)
+}
+inline void Reference::add_overload_id(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_overload_id()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Reference.overload_id)
+}
+inline void Reference::add_overload_id(std::string&& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_overload_id()->Add(std::move(value));
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Reference.overload_id)
+}
+inline void Reference::add_overload_id(const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_overload_id()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add_char:google.api.expr.v1alpha1.Reference.overload_id)
+}
+inline void Reference::add_overload_id(const char* value, std::size_t size) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_overload_id()->Add()->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_add_pointer:google.api.expr.v1alpha1.Reference.overload_id)
+}
+inline void Reference::add_overload_id(absl::string_view value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_overload_id()->Add()->assign(value.data(), value.size());
+  // @@protoc_insertion_point(field_add_string_piece:google.api.expr.v1alpha1.Reference.overload_id)
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+Reference::overload_id() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Reference.overload_id)
+  return _internal_overload_id();
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>* Reference::mutable_overload_id() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Reference.overload_id)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_overload_id();
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+Reference::_internal_overload_id() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.overload_id_;
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>*
+Reference::_internal_mutable_overload_id() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.overload_id_;
+}
+
+// .google.api.expr.v1alpha1.Constant value = 4 [json_name = "value"];
+inline bool Reference::has_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
+  return value;
+}
+inline const ::google::api::expr::v1alpha1::Constant& Reference::_internal_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Constant* p = _impl_.value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Constant&>(::google::api::expr::v1alpha1::_Constant_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Constant& Reference::value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Reference.value)
+  return _internal_value();
+}
+inline void Reference::unsafe_arena_set_allocated_value(::google::api::expr::v1alpha1::Constant* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
+  }
+  _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Constant*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Reference.value)
+}
+inline ::google::api::expr::v1alpha1::Constant* Reference::release_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Constant* released = _impl_.value_;
+  _impl_.value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Constant* Reference::unsafe_arena_release_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Reference.value)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Constant* temp = _impl_.value_;
+  _impl_.value_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Constant* Reference::_internal_mutable_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Constant>(GetArenaForAllocation());
+    _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Constant*>(p);
+  }
+  return _impl_.value_;
+}
+inline ::google::api::expr::v1alpha1::Constant* Reference::mutable_value() {
+  ::google::api::expr::v1alpha1::Constant* _msg = _internal_mutable_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Reference.value)
+  return _msg;
+}
+inline void Reference::set_allocated_value(::google::api::expr::v1alpha1::Constant* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Constant*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Reference.value)
+}
+
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif  // __GNUC__
+
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+
+
+namespace google {
+namespace protobuf {
+
+template <>
+struct is_proto_enum<::google::api::expr::v1alpha1::Type_PrimitiveType> : std::true_type {};
+template <>
+inline const EnumDescriptor* GetEnumDescriptor<::google::api::expr::v1alpha1::Type_PrimitiveType>() {
+  return ::google::api::expr::v1alpha1::Type_PrimitiveType_descriptor();
+}
+template <>
+struct is_proto_enum<::google::api::expr::v1alpha1::Type_WellKnownType> : std::true_type {};
+template <>
+inline const EnumDescriptor* GetEnumDescriptor<::google::api::expr::v1alpha1::Type_WellKnownType>() {
+  return ::google::api::expr::v1alpha1::Type_WellKnownType_descriptor();
+}
+
+}  // namespace protobuf
+}  // namespace google
+
+// @@protoc_insertion_point(global_scope)
+
+#include "google/protobuf/port_undef.inc"
+
+#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_2epb_2eh
diff --git a/gen/google/api/expr/v1alpha1/eval.pb.cc b/gen/google/api/expr/v1alpha1/eval.pb.cc
new file mode 100644
index 0000000..06b4593
--- /dev/null
+++ b/gen/google/api/expr/v1alpha1/eval.pb.cc
@@ -0,0 +1,1378 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/api/expr/v1alpha1/eval.proto
+
+#include "google/api/expr/v1alpha1/eval.pb.h"
+
+#include <algorithm>
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/extension_set.h"
+#include "google/protobuf/wire_format_lite.h"
+#include "google/protobuf/descriptor.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/reflection_ops.h"
+#include "google/protobuf/wire_format.h"
+#include "google/protobuf/generated_message_tctable_impl.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+PROTOBUF_PRAGMA_INIT_SEG
+namespace _pb = ::google::protobuf;
+namespace _pbi = ::google::protobuf::internal;
+namespace _fl = ::google::protobuf::internal::field_layout;
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+        template <typename>
+PROTOBUF_CONSTEXPR EvalState_Result::EvalState_Result(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.expr_)*/ ::int64_t{0},
+      /*decltype(_impl_.value_)*/ ::int64_t{0},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct EvalState_ResultDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR EvalState_ResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~EvalState_ResultDefaultTypeInternal() {}
+  union {
+    EvalState_Result _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvalState_ResultDefaultTypeInternal _EvalState_Result_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR EvalState::EvalState(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.values_)*/ {},
+      /*decltype(_impl_.results_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct EvalStateDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR EvalStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~EvalStateDefaultTypeInternal() {}
+  union {
+    EvalState _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvalStateDefaultTypeInternal _EvalState_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR ExprValue::ExprValue(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.kind_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+    } {}
+struct ExprValueDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ExprValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ExprValueDefaultTypeInternal() {}
+  union {
+    ExprValue _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExprValueDefaultTypeInternal _ExprValue_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR ErrorSet::ErrorSet(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.errors_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct ErrorSetDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ErrorSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ErrorSetDefaultTypeInternal() {}
+  union {
+    ErrorSet _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorSetDefaultTypeInternal _ErrorSet_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR UnknownSet::UnknownSet(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.exprs_)*/ {},
+      /* _impl_._exprs_cached_byte_size_ = */ {0},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct UnknownSetDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR UnknownSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~UnknownSetDefaultTypeInternal() {}
+  union {
+    UnknownSet _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnknownSetDefaultTypeInternal _UnknownSet_default_instance_;
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+static ::_pb::Metadata file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto[5];
+static constexpr const ::_pb::EnumDescriptor**
+    file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto = nullptr;
+static constexpr const ::_pb::ServiceDescriptor**
+    file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto = nullptr;
+const ::uint32_t TableStruct_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
+    protodesc_cold) = {
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::EvalState_Result, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::EvalState_Result, _impl_.expr_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::EvalState_Result, _impl_.value_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::EvalState, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::EvalState, _impl_.values_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::EvalState, _impl_.results_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ExprValue, _internal_metadata_),
+    ~0u,  // no _extensions_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ExprValue, _impl_._oneof_case_[0]),
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ExprValue, _impl_.kind_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ErrorSet, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ErrorSet, _impl_.errors_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::UnknownSet, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::UnknownSet, _impl_.exprs_),
+};
+
+static const ::_pbi::MigrationSchema
+    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+        {0, -1, -1, sizeof(::google::api::expr::v1alpha1::EvalState_Result)},
+        {10, -1, -1, sizeof(::google::api::expr::v1alpha1::EvalState)},
+        {20, -1, -1, sizeof(::google::api::expr::v1alpha1::ExprValue)},
+        {32, -1, -1, sizeof(::google::api::expr::v1alpha1::ErrorSet)},
+        {41, -1, -1, sizeof(::google::api::expr::v1alpha1::UnknownSet)},
+};
+
+static const ::_pb::Message* const file_default_instances[] = {
+    &::google::api::expr::v1alpha1::_EvalState_Result_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_EvalState_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_ExprValue_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_ErrorSet_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_UnknownSet_default_instance_._instance,
+};
+const char descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+    "\n#google/api/expr/v1alpha1/eval.proto\022\030g"
+    "oogle.api.expr.v1alpha1\032$google/api/expr"
+    "/v1alpha1/value.proto\032\027google/rpc/status"
+    ".proto\"\302\001\n\tEvalState\022;\n\006values\030\001 \003(\0132#.g"
+    "oogle.api.expr.v1alpha1.ExprValueR\006value"
+    "s\022D\n\007results\030\003 \003(\0132*.google.api.expr.v1a"
+    "lpha1.EvalState.ResultR\007results\0322\n\006Resul"
+    "t\022\022\n\004expr\030\001 \001(\003R\004expr\022\024\n\005value\030\002 \001(\003R\005va"
+    "lue\"\312\001\n\tExprValue\0227\n\005value\030\001 \001(\0132\037.googl"
+    "e.api.expr.v1alpha1.ValueH\000R\005value\022:\n\005er"
+    "ror\030\002 \001(\0132\".google.api.expr.v1alpha1.Err"
+    "orSetH\000R\005error\022@\n\007unknown\030\003 \001(\0132$.google"
+    ".api.expr.v1alpha1.UnknownSetH\000R\007unknown"
+    "B\006\n\004kind\"6\n\010ErrorSet\022*\n\006errors\030\001 \003(\0132\022.g"
+    "oogle.rpc.StatusR\006errors\"\"\n\nUnknownSet\022\024"
+    "\n\005exprs\030\001 \003(\003R\005exprsB\355\001\n\034com.google.api."
+    "expr.v1alpha1B\tEvalProtoP\001Z<google.golan"
+    "g.org/genproto/googleapis/api/expr/v1alp"
+    "ha1;expr\370\001\001\242\002\003GAE\252\002\030Google.Api.Expr.V1al"
+    "pha1\312\002\030Google\\Api\\Expr\\V1alpha1\342\002$Google"
+    "\\Api\\Expr\\V1alpha1\\GPBMetadata\352\002\033Google:"
+    ":Api::Expr::V1alpha1b\006proto3"
+};
+static const ::_pbi::DescriptorTable* const descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_deps[2] =
+    {
+        &::descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto,
+        &::descriptor_table_google_2frpc_2fstatus_2eproto,
+};
+static ::absl::once_flag descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_once;
+const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto = {
+    false,
+    false,
+    868,
+    descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto,
+    "google/api/expr/v1alpha1/eval.proto",
+    &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_once,
+    descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_deps,
+    2,
+    5,
+    schemas,
+    file_default_instances,
+    TableStruct_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto::offsets,
+    file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto,
+    file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto,
+    file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto,
+};
+
+// This function exists to be marked as weak.
+// It can significantly speed up compilation by breaking up LLVM's SCC
+// in the .pb.cc translation units. Large translation units see a
+// reduction of more than 35% of walltime for optimized builds. Without
+// the weak attribute all the messages in the file, including all the
+// vtables and everything they use become part of the same SCC through
+// a cycle like:
+// GetMetadata -> descriptor table -> default instances ->
+//   vtables -> GetMetadata
+// By adding a weak function here we break the connection from the
+// individual vtables back into the descriptor table.
+PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_getter() {
+  return &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto;
+}
+// Force running AddDescriptors() at dynamic initialization time.
+PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
+static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto);
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+// ===================================================================
+
+class EvalState_Result::_Internal {
+ public:
+};
+
+EvalState_Result::EvalState_Result(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.EvalState.Result)
+}
+EvalState_Result::EvalState_Result(const EvalState_Result& from)
+    : ::google::protobuf::Message(), _impl_(from._impl_) {
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.EvalState.Result)
+}
+inline void EvalState_Result::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.expr_){::int64_t{0}},
+      decltype(_impl_.value_){::int64_t{0}},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+EvalState_Result::~EvalState_Result() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.EvalState.Result)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void EvalState_Result::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+}
+void EvalState_Result::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void EvalState_Result::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.EvalState.Result)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  ::memset(&_impl_.expr_, 0, static_cast<::size_t>(
+      reinterpret_cast<char*>(&_impl_.value_) -
+      reinterpret_cast<char*>(&_impl_.expr_)) + sizeof(_impl_.value_));
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* EvalState_Result::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 0, 0, 2> EvalState_Result::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_EvalState_Result_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // int64 value = 2 [json_name = "value"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EvalState_Result, _impl_.value_), 63>(),
+     {16, 63, 0, PROTOBUF_FIELD_OFFSET(EvalState_Result, _impl_.value_)}},
+    // int64 expr = 1 [json_name = "expr"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EvalState_Result, _impl_.expr_), 63>(),
+     {8, 63, 0, PROTOBUF_FIELD_OFFSET(EvalState_Result, _impl_.expr_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // int64 expr = 1 [json_name = "expr"];
+    {PROTOBUF_FIELD_OFFSET(EvalState_Result, _impl_.expr_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
+    // int64 value = 2 [json_name = "value"];
+    {PROTOBUF_FIELD_OFFSET(EvalState_Result, _impl_.value_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
+  }},
+  // no aux_entries
+  {{
+  }},
+};
+
+::uint8_t* EvalState_Result::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.EvalState.Result)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // int64 expr = 1 [json_name = "expr"];
+  if (this->_internal_expr() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt64ToArrayWithField<1>(
+            stream, this->_internal_expr(), target);
+  }
+
+  // int64 value = 2 [json_name = "value"];
+  if (this->_internal_value() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt64ToArrayWithField<2>(
+            stream, this->_internal_value(), target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.EvalState.Result)
+  return target;
+}
+
+::size_t EvalState_Result::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.EvalState.Result)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // int64 expr = 1 [json_name = "expr"];
+  if (this->_internal_expr() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+        this->_internal_expr());
+  }
+
+  // int64 value = 2 [json_name = "value"];
+  if (this->_internal_value() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+        this->_internal_value());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData EvalState_Result::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    EvalState_Result::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*EvalState_Result::GetClassData() const { return &_class_data_; }
+
+
+void EvalState_Result::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<EvalState_Result*>(&to_msg);
+  auto& from = static_cast<const EvalState_Result&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.EvalState.Result)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (from._internal_expr() != 0) {
+    _this->_internal_set_expr(from._internal_expr());
+  }
+  if (from._internal_value() != 0) {
+    _this->_internal_set_value(from._internal_value());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void EvalState_Result::CopyFrom(const EvalState_Result& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.EvalState.Result)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool EvalState_Result::IsInitialized() const {
+  return true;
+}
+
+void EvalState_Result::InternalSwap(EvalState_Result* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(EvalState_Result, _impl_.value_)
+      + sizeof(EvalState_Result::_impl_.value_)
+      - PROTOBUF_FIELD_OFFSET(EvalState_Result, _impl_.expr_)>(
+          reinterpret_cast<char*>(&_impl_.expr_),
+          reinterpret_cast<char*>(&other->_impl_.expr_));
+}
+
+::google::protobuf::Metadata EvalState_Result::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto[0]);
+}
+// ===================================================================
+
+class EvalState::_Internal {
+ public:
+};
+
+EvalState::EvalState(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.EvalState)
+}
+EvalState::EvalState(const EvalState& from) : ::google::protobuf::Message() {
+  EvalState* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.values_){from._impl_.values_},
+      decltype(_impl_.results_){from._impl_.results_},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.EvalState)
+}
+inline void EvalState::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.values_){arena},
+      decltype(_impl_.results_){arena},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+EvalState::~EvalState() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.EvalState)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void EvalState::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.values_.~RepeatedPtrField();
+  _impl_.results_.~RepeatedPtrField();
+}
+void EvalState::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void EvalState::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.EvalState)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_values()->Clear();
+  _internal_mutable_results()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* EvalState::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 2, 2, 0, 2> EvalState::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    3, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967290,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_EvalState_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // repeated .google.api.expr.v1alpha1.ExprValue values = 1 [json_name = "values"];
+    {::_pbi::TcParser::FastMtR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EvalState, _impl_.values_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    // repeated .google.api.expr.v1alpha1.EvalState.Result results = 3 [json_name = "results"];
+    {::_pbi::TcParser::FastMtR1,
+     {26, 63, 1, PROTOBUF_FIELD_OFFSET(EvalState, _impl_.results_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated .google.api.expr.v1alpha1.ExprValue values = 1 [json_name = "values"];
+    {PROTOBUF_FIELD_OFFSET(EvalState, _impl_.values_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+    // repeated .google.api.expr.v1alpha1.EvalState.Result results = 3 [json_name = "results"];
+    {PROTOBUF_FIELD_OFFSET(EvalState, _impl_.results_), 0, 1,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::ExprValue>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::EvalState_Result>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* EvalState::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.EvalState)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.ExprValue values = 1 [json_name = "values"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
+    const auto& repfield = this->_internal_values().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  // repeated .google.api.expr.v1alpha1.EvalState.Result results = 3 [json_name = "results"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
+    const auto& repfield = this->_internal_results().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.EvalState)
+  return target;
+}
+
+::size_t EvalState::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.EvalState)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.ExprValue values = 1 [json_name = "values"];
+  total_size += 1UL * this->_internal_values_size();
+  for (const auto& msg : this->_internal_values()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  // repeated .google.api.expr.v1alpha1.EvalState.Result results = 3 [json_name = "results"];
+  total_size += 1UL * this->_internal_results_size();
+  for (const auto& msg : this->_internal_results()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData EvalState::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    EvalState::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*EvalState::GetClassData() const { return &_class_data_; }
+
+
+void EvalState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<EvalState*>(&to_msg);
+  auto& from = static_cast<const EvalState&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.EvalState)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
+  _this->_internal_mutable_results()->MergeFrom(from._internal_results());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void EvalState::CopyFrom(const EvalState& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.EvalState)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool EvalState::IsInitialized() const {
+  return true;
+}
+
+void EvalState::InternalSwap(EvalState* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.values_.InternalSwap(&other->_impl_.values_);
+  _impl_.results_.InternalSwap(&other->_impl_.results_);
+}
+
+::google::protobuf::Metadata EvalState::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto[1]);
+}
+// ===================================================================
+
+class ExprValue::_Internal {
+ public:
+  static constexpr ::int32_t kOneofCaseOffset =
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ExprValue, _impl_._oneof_case_);
+  static const ::google::api::expr::v1alpha1::Value& value(const ExprValue* msg);
+  static const ::google::api::expr::v1alpha1::ErrorSet& error(const ExprValue* msg);
+  static const ::google::api::expr::v1alpha1::UnknownSet& unknown(const ExprValue* msg);
+};
+
+const ::google::api::expr::v1alpha1::Value& ExprValue::_Internal::value(const ExprValue* msg) {
+  return *msg->_impl_.kind_.value_;
+}
+const ::google::api::expr::v1alpha1::ErrorSet& ExprValue::_Internal::error(const ExprValue* msg) {
+  return *msg->_impl_.kind_.error_;
+}
+const ::google::api::expr::v1alpha1::UnknownSet& ExprValue::_Internal::unknown(const ExprValue* msg) {
+  return *msg->_impl_.kind_.unknown_;
+}
+void ExprValue::set_allocated_value(::google::api::expr::v1alpha1::Value* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_kind();
+  if (value) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(
+                reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, value, submessage_arena);
+    }
+    set_has_value();
+    _impl_.kind_.value_ = value;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.ExprValue.value)
+}
+void ExprValue::clear_value() {
+  if (kind_case() == kValue) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.kind_.value_;
+    }
+    clear_has_kind();
+  }
+}
+void ExprValue::set_allocated_error(::google::api::expr::v1alpha1::ErrorSet* error) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_kind();
+  if (error) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(error);
+    if (message_arena != submessage_arena) {
+      error = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, error, submessage_arena);
+    }
+    set_has_error();
+    _impl_.kind_.error_ = error;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.ExprValue.error)
+}
+void ExprValue::set_allocated_unknown(::google::api::expr::v1alpha1::UnknownSet* unknown) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_kind();
+  if (unknown) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(unknown);
+    if (message_arena != submessage_arena) {
+      unknown = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, unknown, submessage_arena);
+    }
+    set_has_unknown();
+    _impl_.kind_.unknown_ = unknown;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.ExprValue.unknown)
+}
+ExprValue::ExprValue(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.ExprValue)
+}
+ExprValue::ExprValue(const ExprValue& from) : ::google::protobuf::Message() {
+  ExprValue* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  clear_has_kind();
+  switch (from.kind_case()) {
+    case kValue: {
+      _this->_internal_mutable_value()->::google::api::expr::v1alpha1::Value::MergeFrom(
+          from._internal_value());
+      break;
+    }
+    case kError: {
+      _this->_internal_mutable_error()->::google::api::expr::v1alpha1::ErrorSet::MergeFrom(
+          from._internal_error());
+      break;
+    }
+    case kUnknown: {
+      _this->_internal_mutable_unknown()->::google::api::expr::v1alpha1::UnknownSet::MergeFrom(
+          from._internal_unknown());
+      break;
+    }
+    case KIND_NOT_SET: {
+      break;
+    }
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.ExprValue)
+}
+inline void ExprValue::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  clear_has_kind();
+}
+ExprValue::~ExprValue() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.ExprValue)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void ExprValue::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  if (has_kind()) {
+    clear_kind();
+  }
+}
+void ExprValue::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+void ExprValue::clear_kind() {
+// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1alpha1.ExprValue)
+  switch (kind_case()) {
+    case kValue: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.kind_.value_;
+      }
+      break;
+    }
+    case kError: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.kind_.error_;
+      }
+      break;
+    }
+    case kUnknown: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.kind_.unknown_;
+      }
+      break;
+    }
+    case KIND_NOT_SET: {
+      break;
+    }
+  }
+  _impl_._oneof_case_[0] = KIND_NOT_SET;
+}
+
+
+PROTOBUF_NOINLINE void ExprValue::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.ExprValue)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  clear_kind();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* ExprValue::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 3, 3, 0, 2> ExprValue::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    3, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967288,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    3,  // num_field_entries
+    3,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_ExprValue_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];
+    {PROTOBUF_FIELD_OFFSET(ExprValue, _impl_.kind_.value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];
+    {PROTOBUF_FIELD_OFFSET(ExprValue, _impl_.kind_.error_), _Internal::kOneofCaseOffset + 0, 1,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];
+    {PROTOBUF_FIELD_OFFSET(ExprValue, _impl_.kind_.unknown_), _Internal::kOneofCaseOffset + 0, 2,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Value>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::ErrorSet>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::UnknownSet>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* ExprValue::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.ExprValue)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  switch (kind_case()) {
+    case kValue: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, _Internal::value(this),
+          _Internal::value(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kError: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(2, _Internal::error(this),
+          _Internal::error(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kUnknown: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(3, _Internal::unknown(this),
+          _Internal::unknown(this).GetCachedSize(), target, stream);
+      break;
+    }
+    default:
+      break;
+  }
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.ExprValue)
+  return target;
+}
+
+::size_t ExprValue::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.ExprValue)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  switch (kind_case()) {
+    // .google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];
+    case kValue: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.kind_.value_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];
+    case kError: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.kind_.error_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];
+    case kUnknown: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.kind_.unknown_);
+      break;
+    }
+    case KIND_NOT_SET: {
+      break;
+    }
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData ExprValue::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    ExprValue::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*ExprValue::GetClassData() const { return &_class_data_; }
+
+
+void ExprValue::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<ExprValue*>(&to_msg);
+  auto& from = static_cast<const ExprValue&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.ExprValue)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  switch (from.kind_case()) {
+    case kValue: {
+      _this->_internal_mutable_value()->::google::api::expr::v1alpha1::Value::MergeFrom(
+          from._internal_value());
+      break;
+    }
+    case kError: {
+      _this->_internal_mutable_error()->::google::api::expr::v1alpha1::ErrorSet::MergeFrom(
+          from._internal_error());
+      break;
+    }
+    case kUnknown: {
+      _this->_internal_mutable_unknown()->::google::api::expr::v1alpha1::UnknownSet::MergeFrom(
+          from._internal_unknown());
+      break;
+    }
+    case KIND_NOT_SET: {
+      break;
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void ExprValue::CopyFrom(const ExprValue& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.ExprValue)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool ExprValue::IsInitialized() const {
+  return true;
+}
+
+void ExprValue::InternalSwap(ExprValue* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_.kind_, other->_impl_.kind_);
+  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
+}
+
+::google::protobuf::Metadata ExprValue::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto[2]);
+}
+// ===================================================================
+
+class ErrorSet::_Internal {
+ public:
+};
+
+void ErrorSet::clear_errors() {
+  _internal_mutable_errors()->Clear();
+}
+ErrorSet::ErrorSet(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.ErrorSet)
+}
+ErrorSet::ErrorSet(const ErrorSet& from) : ::google::protobuf::Message() {
+  ErrorSet* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.errors_){from._impl_.errors_},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.ErrorSet)
+}
+inline void ErrorSet::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.errors_){arena},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+ErrorSet::~ErrorSet() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.ErrorSet)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void ErrorSet::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.errors_.~RepeatedPtrField();
+}
+void ErrorSet::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void ErrorSet::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.ErrorSet)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_errors()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* ErrorSet::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ErrorSet::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_ErrorSet_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.rpc.Status errors = 1 [json_name = "errors"];
+    {::_pbi::TcParser::FastMtR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorSet, _impl_.errors_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated .google.rpc.Status errors = 1 [json_name = "errors"];
+    {PROTOBUF_FIELD_OFFSET(ErrorSet, _impl_.errors_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::rpc::Status>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* ErrorSet::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.ErrorSet)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated .google.rpc.Status errors = 1 [json_name = "errors"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_errors_size()); i < n; i++) {
+    const auto& repfield = this->_internal_errors().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.ErrorSet)
+  return target;
+}
+
+::size_t ErrorSet::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.ErrorSet)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.rpc.Status errors = 1 [json_name = "errors"];
+  total_size += 1UL * this->_internal_errors_size();
+  for (const auto& msg : this->_internal_errors()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData ErrorSet::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    ErrorSet::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*ErrorSet::GetClassData() const { return &_class_data_; }
+
+
+void ErrorSet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<ErrorSet*>(&to_msg);
+  auto& from = static_cast<const ErrorSet&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.ErrorSet)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_errors()->MergeFrom(from._internal_errors());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void ErrorSet::CopyFrom(const ErrorSet& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.ErrorSet)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool ErrorSet::IsInitialized() const {
+  return true;
+}
+
+void ErrorSet::InternalSwap(ErrorSet* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
+}
+
+::google::protobuf::Metadata ErrorSet::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto[3]);
+}
+// ===================================================================
+
+class UnknownSet::_Internal {
+ public:
+};
+
+UnknownSet::UnknownSet(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.UnknownSet)
+}
+UnknownSet::UnknownSet(const UnknownSet& from) : ::google::protobuf::Message() {
+  UnknownSet* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.exprs_){from._impl_.exprs_},
+      /* _impl_._exprs_cached_byte_size_ = */ {0},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.UnknownSet)
+}
+inline void UnknownSet::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.exprs_){arena},
+      /* _impl_._exprs_cached_byte_size_ = */ {0},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+UnknownSet::~UnknownSet() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.UnknownSet)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void UnknownSet::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.exprs_.~RepeatedField();
+}
+void UnknownSet::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void UnknownSet::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.UnknownSet)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_exprs()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* UnknownSet::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 0, 0, 2> UnknownSet::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_UnknownSet_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated int64 exprs = 1 [json_name = "exprs"];
+    {::_pbi::TcParser::FastV64P1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(UnknownSet, _impl_.exprs_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated int64 exprs = 1 [json_name = "exprs"];
+    {PROTOBUF_FIELD_OFFSET(UnknownSet, _impl_.exprs_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
+  }},
+  // no aux_entries
+  {{
+  }},
+};
+
+::uint8_t* UnknownSet::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.UnknownSet)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated int64 exprs = 1 [json_name = "exprs"];
+  {
+    int byte_size = _impl_._exprs_cached_byte_size_.Get();
+    if (byte_size > 0) {
+      target = stream->WriteInt64Packed(1, _internal_exprs(),
+                                                 byte_size, target);
+    }
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.UnknownSet)
+  return target;
+}
+
+::size_t UnknownSet::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.UnknownSet)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated int64 exprs = 1 [json_name = "exprs"];
+  {
+    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
+        this->_internal_exprs())
+    ;
+    _impl_._exprs_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
+    std::size_t tag_size = data_size == 0
+        ? 0
+        : 1 + ::_pbi::WireFormatLite::Int32Size(
+                            static_cast<int32_t>(data_size))
+    ;
+    total_size += tag_size + data_size;
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData UnknownSet::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    UnknownSet::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*UnknownSet::GetClassData() const { return &_class_data_; }
+
+
+void UnknownSet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<UnknownSet*>(&to_msg);
+  auto& from = static_cast<const UnknownSet&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.UnknownSet)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_exprs()->MergeFrom(from._internal_exprs());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void UnknownSet::CopyFrom(const UnknownSet& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.UnknownSet)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool UnknownSet::IsInitialized() const {
+  return true;
+}
+
+void UnknownSet::InternalSwap(UnknownSet* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.exprs_.InternalSwap(&other->_impl_.exprs_);
+}
+
+::google::protobuf::Metadata UnknownSet::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto[4]);
+}
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+// @@protoc_insertion_point(global_scope)
+#include "google/protobuf/port_undef.inc"
diff --git a/gen/google/api/expr/v1alpha1/eval.pb.h b/gen/google/api/expr/v1alpha1/eval.pb.h
new file mode 100644
index 0000000..76edb20
--- /dev/null
+++ b/gen/google/api/expr/v1alpha1/eval.pb.h
@@ -0,0 +1,1506 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/api/expr/v1alpha1/eval.proto
+
+#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_2epb_2eh
+#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_2epb_2eh
+
+#include <limits>
+#include <string>
+#include <type_traits>
+
+#include "google/protobuf/port_def.inc"
+#if PROTOBUF_VERSION < 4024000
+#error "This file was generated by a newer version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please update"
+#error "your headers."
+#endif  // PROTOBUF_VERSION
+
+#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
+#error "This file was generated by an older version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please"
+#error "regenerate this file with a newer version of protoc."
+#endif  // PROTOBUF_MIN_PROTOC_VERSION
+#include "google/protobuf/port_undef.inc"
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/arena.h"
+#include "google/protobuf/arenastring.h"
+#include "google/protobuf/generated_message_tctable_decl.h"
+#include "google/protobuf/generated_message_util.h"
+#include "google/protobuf/metadata_lite.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/message.h"
+#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
+#include "google/protobuf/extension_set.h"  // IWYU pragma: export
+#include "google/protobuf/unknown_field_set.h"
+#include "google/api/expr/v1alpha1/value.pb.h"
+#include "google/rpc/status.pb.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+
+#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto
+
+namespace google {
+namespace protobuf {
+namespace internal {
+class AnyMetadata;
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+// Internal implementation detail -- do not use these members.
+struct TableStruct_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto {
+  static const ::uint32_t offsets[];
+};
+extern const ::google::protobuf::internal::DescriptorTable
+    descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto;
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+class ErrorSet;
+struct ErrorSetDefaultTypeInternal;
+extern ErrorSetDefaultTypeInternal _ErrorSet_default_instance_;
+class EvalState;
+struct EvalStateDefaultTypeInternal;
+extern EvalStateDefaultTypeInternal _EvalState_default_instance_;
+class EvalState_Result;
+struct EvalState_ResultDefaultTypeInternal;
+extern EvalState_ResultDefaultTypeInternal _EvalState_Result_default_instance_;
+class ExprValue;
+struct ExprValueDefaultTypeInternal;
+extern ExprValueDefaultTypeInternal _ExprValue_default_instance_;
+class UnknownSet;
+struct UnknownSetDefaultTypeInternal;
+extern UnknownSetDefaultTypeInternal _UnknownSet_default_instance_;
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+
+// ===================================================================
+
+
+// -------------------------------------------------------------------
+
+class EvalState_Result final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.EvalState.Result) */ {
+ public:
+  inline EvalState_Result() : EvalState_Result(nullptr) {}
+  ~EvalState_Result() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR EvalState_Result(::google::protobuf::internal::ConstantInitialized);
+
+  EvalState_Result(const EvalState_Result& from);
+  EvalState_Result(EvalState_Result&& from) noexcept
+    : EvalState_Result() {
+    *this = ::std::move(from);
+  }
+
+  inline EvalState_Result& operator=(const EvalState_Result& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline EvalState_Result& operator=(EvalState_Result&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const EvalState_Result& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const EvalState_Result* internal_default_instance() {
+    return reinterpret_cast<const EvalState_Result*>(
+               &_EvalState_Result_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    0;
+
+  friend void swap(EvalState_Result& a, EvalState_Result& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(EvalState_Result* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(EvalState_Result* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  EvalState_Result* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<EvalState_Result>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const EvalState_Result& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const EvalState_Result& from) {
+    EvalState_Result::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(EvalState_Result* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.EvalState.Result";
+  }
+  protected:
+  explicit EvalState_Result(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kExprFieldNumber = 1,
+    kValueFieldNumber = 2,
+  };
+  // int64 expr = 1 [json_name = "expr"];
+  void clear_expr() ;
+  ::int64_t expr() const;
+  void set_expr(::int64_t value);
+
+  private:
+  ::int64_t _internal_expr() const;
+  void _internal_set_expr(::int64_t value);
+
+  public:
+  // int64 value = 2 [json_name = "value"];
+  void clear_value() ;
+  ::int64_t value() const;
+  void set_value(::int64_t value);
+
+  private:
+  ::int64_t _internal_value() const;
+  void _internal_set_value(::int64_t value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.EvalState.Result)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::int64_t expr_;
+    ::int64_t value_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto;
+};// -------------------------------------------------------------------
+
+class EvalState final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.EvalState) */ {
+ public:
+  inline EvalState() : EvalState(nullptr) {}
+  ~EvalState() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR EvalState(::google::protobuf::internal::ConstantInitialized);
+
+  EvalState(const EvalState& from);
+  EvalState(EvalState&& from) noexcept
+    : EvalState() {
+    *this = ::std::move(from);
+  }
+
+  inline EvalState& operator=(const EvalState& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline EvalState& operator=(EvalState&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const EvalState& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const EvalState* internal_default_instance() {
+    return reinterpret_cast<const EvalState*>(
+               &_EvalState_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    1;
+
+  friend void swap(EvalState& a, EvalState& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(EvalState* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(EvalState* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  EvalState* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<EvalState>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const EvalState& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const EvalState& from) {
+    EvalState::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(EvalState* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.EvalState";
+  }
+  protected:
+  explicit EvalState(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef EvalState_Result Result;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kValuesFieldNumber = 1,
+    kResultsFieldNumber = 3,
+  };
+  // repeated .google.api.expr.v1alpha1.ExprValue values = 1 [json_name = "values"];
+  int values_size() const;
+  private:
+  int _internal_values_size() const;
+
+  public:
+  void clear_values() ;
+  ::google::api::expr::v1alpha1::ExprValue* mutable_values(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::ExprValue >*
+      mutable_values();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::ExprValue>& _internal_values() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::ExprValue>* _internal_mutable_values();
+  public:
+  const ::google::api::expr::v1alpha1::ExprValue& values(int index) const;
+  ::google::api::expr::v1alpha1::ExprValue* add_values();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::ExprValue >&
+      values() const;
+  // repeated .google.api.expr.v1alpha1.EvalState.Result results = 3 [json_name = "results"];
+  int results_size() const;
+  private:
+  int _internal_results_size() const;
+
+  public:
+  void clear_results() ;
+  ::google::api::expr::v1alpha1::EvalState_Result* mutable_results(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::EvalState_Result >*
+      mutable_results();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::EvalState_Result>& _internal_results() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::EvalState_Result>* _internal_mutable_results();
+  public:
+  const ::google::api::expr::v1alpha1::EvalState_Result& results(int index) const;
+  ::google::api::expr::v1alpha1::EvalState_Result* add_results();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::EvalState_Result >&
+      results() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.EvalState)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 2, 2, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::ExprValue > values_;
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::EvalState_Result > results_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto;
+};// -------------------------------------------------------------------
+
+class ExprValue final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.ExprValue) */ {
+ public:
+  inline ExprValue() : ExprValue(nullptr) {}
+  ~ExprValue() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR ExprValue(::google::protobuf::internal::ConstantInitialized);
+
+  ExprValue(const ExprValue& from);
+  ExprValue(ExprValue&& from) noexcept
+    : ExprValue() {
+    *this = ::std::move(from);
+  }
+
+  inline ExprValue& operator=(const ExprValue& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline ExprValue& operator=(ExprValue&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const ExprValue& default_instance() {
+    return *internal_default_instance();
+  }
+  enum KindCase {
+    kValue = 1,
+    kError = 2,
+    kUnknown = 3,
+    KIND_NOT_SET = 0,
+  };
+
+  static inline const ExprValue* internal_default_instance() {
+    return reinterpret_cast<const ExprValue*>(
+               &_ExprValue_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    2;
+
+  friend void swap(ExprValue& a, ExprValue& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(ExprValue* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(ExprValue* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  ExprValue* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<ExprValue>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const ExprValue& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const ExprValue& from) {
+    ExprValue::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(ExprValue* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.ExprValue";
+  }
+  protected:
+  explicit ExprValue(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kValueFieldNumber = 1,
+    kErrorFieldNumber = 2,
+    kUnknownFieldNumber = 3,
+  };
+  // .google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];
+  bool has_value() const;
+  private:
+  bool _internal_has_value() const;
+
+  public:
+  void clear_value() ;
+  const ::google::api::expr::v1alpha1::Value& value() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Value* release_value();
+  ::google::api::expr::v1alpha1::Value* mutable_value();
+  void set_allocated_value(::google::api::expr::v1alpha1::Value* value);
+  void unsafe_arena_set_allocated_value(::google::api::expr::v1alpha1::Value* value);
+  ::google::api::expr::v1alpha1::Value* unsafe_arena_release_value();
+
+  private:
+  const ::google::api::expr::v1alpha1::Value& _internal_value() const;
+  ::google::api::expr::v1alpha1::Value* _internal_mutable_value();
+
+  public:
+  // .google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];
+  bool has_error() const;
+  private:
+  bool _internal_has_error() const;
+
+  public:
+  void clear_error() ;
+  const ::google::api::expr::v1alpha1::ErrorSet& error() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::ErrorSet* release_error();
+  ::google::api::expr::v1alpha1::ErrorSet* mutable_error();
+  void set_allocated_error(::google::api::expr::v1alpha1::ErrorSet* value);
+  void unsafe_arena_set_allocated_error(::google::api::expr::v1alpha1::ErrorSet* value);
+  ::google::api::expr::v1alpha1::ErrorSet* unsafe_arena_release_error();
+
+  private:
+  const ::google::api::expr::v1alpha1::ErrorSet& _internal_error() const;
+  ::google::api::expr::v1alpha1::ErrorSet* _internal_mutable_error();
+
+  public:
+  // .google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];
+  bool has_unknown() const;
+  private:
+  bool _internal_has_unknown() const;
+
+  public:
+  void clear_unknown() ;
+  const ::google::api::expr::v1alpha1::UnknownSet& unknown() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::UnknownSet* release_unknown();
+  ::google::api::expr::v1alpha1::UnknownSet* mutable_unknown();
+  void set_allocated_unknown(::google::api::expr::v1alpha1::UnknownSet* value);
+  void unsafe_arena_set_allocated_unknown(::google::api::expr::v1alpha1::UnknownSet* value);
+  ::google::api::expr::v1alpha1::UnknownSet* unsafe_arena_release_unknown();
+
+  private:
+  const ::google::api::expr::v1alpha1::UnknownSet& _internal_unknown() const;
+  ::google::api::expr::v1alpha1::UnknownSet* _internal_mutable_unknown();
+
+  public:
+  void clear_kind();
+  KindCase kind_case() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.ExprValue)
+ private:
+  class _Internal;
+  void set_has_value();
+  void set_has_error();
+  void set_has_unknown();
+
+  inline bool has_kind() const;
+  inline void clear_has_kind();
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 3, 3, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    union KindUnion {
+      constexpr KindUnion() : _constinit_{} {}
+        ::google::protobuf::internal::ConstantInitialized _constinit_;
+      ::google::api::expr::v1alpha1::Value* value_;
+      ::google::api::expr::v1alpha1::ErrorSet* error_;
+      ::google::api::expr::v1alpha1::UnknownSet* unknown_;
+    } kind_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::uint32_t _oneof_case_[1];
+
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto;
+};// -------------------------------------------------------------------
+
+class ErrorSet final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.ErrorSet) */ {
+ public:
+  inline ErrorSet() : ErrorSet(nullptr) {}
+  ~ErrorSet() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR ErrorSet(::google::protobuf::internal::ConstantInitialized);
+
+  ErrorSet(const ErrorSet& from);
+  ErrorSet(ErrorSet&& from) noexcept
+    : ErrorSet() {
+    *this = ::std::move(from);
+  }
+
+  inline ErrorSet& operator=(const ErrorSet& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline ErrorSet& operator=(ErrorSet&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const ErrorSet& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const ErrorSet* internal_default_instance() {
+    return reinterpret_cast<const ErrorSet*>(
+               &_ErrorSet_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    3;
+
+  friend void swap(ErrorSet& a, ErrorSet& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(ErrorSet* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(ErrorSet* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  ErrorSet* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<ErrorSet>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const ErrorSet& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const ErrorSet& from) {
+    ErrorSet::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(ErrorSet* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.ErrorSet";
+  }
+  protected:
+  explicit ErrorSet(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kErrorsFieldNumber = 1,
+  };
+  // repeated .google.rpc.Status errors = 1 [json_name = "errors"];
+  int errors_size() const;
+  private:
+  int _internal_errors_size() const;
+
+  public:
+  void clear_errors() ;
+  ::google::rpc::Status* mutable_errors(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >*
+      mutable_errors();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::rpc::Status>& _internal_errors() const;
+  ::google::protobuf::RepeatedPtrField<::google::rpc::Status>* _internal_mutable_errors();
+  public:
+  const ::google::rpc::Status& errors(int index) const;
+  ::google::rpc::Status* add_errors();
+  const ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >&
+      errors() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.ErrorSet)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::rpc::Status > errors_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto;
+};// -------------------------------------------------------------------
+
+class UnknownSet final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.UnknownSet) */ {
+ public:
+  inline UnknownSet() : UnknownSet(nullptr) {}
+  ~UnknownSet() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR UnknownSet(::google::protobuf::internal::ConstantInitialized);
+
+  UnknownSet(const UnknownSet& from);
+  UnknownSet(UnknownSet&& from) noexcept
+    : UnknownSet() {
+    *this = ::std::move(from);
+  }
+
+  inline UnknownSet& operator=(const UnknownSet& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline UnknownSet& operator=(UnknownSet&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const UnknownSet& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const UnknownSet* internal_default_instance() {
+    return reinterpret_cast<const UnknownSet*>(
+               &_UnknownSet_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    4;
+
+  friend void swap(UnknownSet& a, UnknownSet& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(UnknownSet* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(UnknownSet* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  UnknownSet* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<UnknownSet>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const UnknownSet& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const UnknownSet& from) {
+    UnknownSet::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(UnknownSet* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.UnknownSet";
+  }
+  protected:
+  explicit UnknownSet(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kExprsFieldNumber = 1,
+  };
+  // repeated int64 exprs = 1 [json_name = "exprs"];
+  int exprs_size() const;
+  private:
+  int _internal_exprs_size() const;
+
+  public:
+  void clear_exprs() ;
+  ::int64_t exprs(int index) const;
+  void set_exprs(int index, ::int64_t value);
+  void add_exprs(::int64_t value);
+  const ::google::protobuf::RepeatedField<::int64_t>& exprs() const;
+  ::google::protobuf::RepeatedField<::int64_t>* mutable_exprs();
+
+  private:
+  const ::google::protobuf::RepeatedField<::int64_t>& _internal_exprs() const;
+  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_exprs();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.UnknownSet)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedField<::int64_t> exprs_;
+    mutable ::google::protobuf::internal::CachedSize _exprs_cached_byte_size_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto;
+};
+
+// ===================================================================
+
+
+
+
+// ===================================================================
+
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif  // __GNUC__
+// -------------------------------------------------------------------
+
+// EvalState_Result
+
+// int64 expr = 1 [json_name = "expr"];
+inline void EvalState_Result::clear_expr() {
+  _impl_.expr_ = ::int64_t{0};
+}
+inline ::int64_t EvalState_Result::expr() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.EvalState.Result.expr)
+  return _internal_expr();
+}
+inline void EvalState_Result::set_expr(::int64_t value) {
+  _internal_set_expr(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.EvalState.Result.expr)
+}
+inline ::int64_t EvalState_Result::_internal_expr() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.expr_;
+}
+inline void EvalState_Result::_internal_set_expr(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.expr_ = value;
+}
+
+// int64 value = 2 [json_name = "value"];
+inline void EvalState_Result::clear_value() {
+  _impl_.value_ = ::int64_t{0};
+}
+inline ::int64_t EvalState_Result::value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.EvalState.Result.value)
+  return _internal_value();
+}
+inline void EvalState_Result::set_value(::int64_t value) {
+  _internal_set_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.EvalState.Result.value)
+}
+inline ::int64_t EvalState_Result::_internal_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.value_;
+}
+inline void EvalState_Result::_internal_set_value(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.value_ = value;
+}
+
+// -------------------------------------------------------------------
+
+// EvalState
+
+// repeated .google.api.expr.v1alpha1.ExprValue values = 1 [json_name = "values"];
+inline int EvalState::_internal_values_size() const {
+  return _internal_values().size();
+}
+inline int EvalState::values_size() const {
+  return _internal_values_size();
+}
+inline void EvalState::clear_values() {
+  _internal_mutable_values()->Clear();
+}
+inline ::google::api::expr::v1alpha1::ExprValue* EvalState::mutable_values(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.EvalState.values)
+  return _internal_mutable_values()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::ExprValue >*
+EvalState::mutable_values() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.EvalState.values)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_values();
+}
+inline const ::google::api::expr::v1alpha1::ExprValue& EvalState::values(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.EvalState.values)
+    return _internal_values().Get(index);
+}
+inline ::google::api::expr::v1alpha1::ExprValue* EvalState::add_values() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::ExprValue* _add = _internal_mutable_values()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.EvalState.values)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::ExprValue >&
+EvalState::values() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.EvalState.values)
+  return _internal_values();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::ExprValue>&
+EvalState::_internal_values() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.values_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::ExprValue>*
+EvalState::_internal_mutable_values() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.values_;
+}
+
+// repeated .google.api.expr.v1alpha1.EvalState.Result results = 3 [json_name = "results"];
+inline int EvalState::_internal_results_size() const {
+  return _internal_results().size();
+}
+inline int EvalState::results_size() const {
+  return _internal_results_size();
+}
+inline void EvalState::clear_results() {
+  _internal_mutable_results()->Clear();
+}
+inline ::google::api::expr::v1alpha1::EvalState_Result* EvalState::mutable_results(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.EvalState.results)
+  return _internal_mutable_results()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::EvalState_Result >*
+EvalState::mutable_results() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.EvalState.results)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_results();
+}
+inline const ::google::api::expr::v1alpha1::EvalState_Result& EvalState::results(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.EvalState.results)
+    return _internal_results().Get(index);
+}
+inline ::google::api::expr::v1alpha1::EvalState_Result* EvalState::add_results() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::EvalState_Result* _add = _internal_mutable_results()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.EvalState.results)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::EvalState_Result >&
+EvalState::results() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.EvalState.results)
+  return _internal_results();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::EvalState_Result>&
+EvalState::_internal_results() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.results_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::EvalState_Result>*
+EvalState::_internal_mutable_results() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.results_;
+}
+
+// -------------------------------------------------------------------
+
+// ExprValue
+
+// .google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];
+inline bool ExprValue::has_value() const {
+  return kind_case() == kValue;
+}
+inline bool ExprValue::_internal_has_value() const {
+  return kind_case() == kValue;
+}
+inline void ExprValue::set_has_value() {
+  _impl_._oneof_case_[0] = kValue;
+}
+inline ::google::api::expr::v1alpha1::Value* ExprValue::release_value() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.ExprValue.value)
+  if (kind_case() == kValue) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::Value* temp = _impl_.kind_.value_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.kind_.value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Value& ExprValue::_internal_value() const {
+  return kind_case() == kValue
+      ? *_impl_.kind_.value_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Value&>(::google::api::expr::v1alpha1::_Value_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Value& ExprValue::value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.ExprValue.value)
+  return _internal_value();
+}
+inline ::google::api::expr::v1alpha1::Value* ExprValue::unsafe_arena_release_value() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.ExprValue.value)
+  if (kind_case() == kValue) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::Value* temp = _impl_.kind_.value_;
+    _impl_.kind_.value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void ExprValue::unsafe_arena_set_allocated_value(::google::api::expr::v1alpha1::Value* value) {
+  clear_kind();
+  if (value) {
+    set_has_value();
+    _impl_.kind_.value_ = value;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.ExprValue.value)
+}
+inline ::google::api::expr::v1alpha1::Value* ExprValue::_internal_mutable_value() {
+  if (kind_case() != kValue) {
+    clear_kind();
+    set_has_value();
+    _impl_.kind_.value_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Value >(GetArenaForAllocation());
+  }
+  return _impl_.kind_.value_;
+}
+inline ::google::api::expr::v1alpha1::Value* ExprValue::mutable_value() {
+  ::google::api::expr::v1alpha1::Value* _msg = _internal_mutable_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.ExprValue.value)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];
+inline bool ExprValue::has_error() const {
+  return kind_case() == kError;
+}
+inline bool ExprValue::_internal_has_error() const {
+  return kind_case() == kError;
+}
+inline void ExprValue::set_has_error() {
+  _impl_._oneof_case_[0] = kError;
+}
+inline void ExprValue::clear_error() {
+  if (kind_case() == kError) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.kind_.error_;
+    }
+    clear_has_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::ErrorSet* ExprValue::release_error() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.ExprValue.error)
+  if (kind_case() == kError) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::ErrorSet* temp = _impl_.kind_.error_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.kind_.error_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::ErrorSet& ExprValue::_internal_error() const {
+  return kind_case() == kError
+      ? *_impl_.kind_.error_
+      : reinterpret_cast<::google::api::expr::v1alpha1::ErrorSet&>(::google::api::expr::v1alpha1::_ErrorSet_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::ErrorSet& ExprValue::error() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.ExprValue.error)
+  return _internal_error();
+}
+inline ::google::api::expr::v1alpha1::ErrorSet* ExprValue::unsafe_arena_release_error() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.ExprValue.error)
+  if (kind_case() == kError) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::ErrorSet* temp = _impl_.kind_.error_;
+    _impl_.kind_.error_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void ExprValue::unsafe_arena_set_allocated_error(::google::api::expr::v1alpha1::ErrorSet* error) {
+  clear_kind();
+  if (error) {
+    set_has_error();
+    _impl_.kind_.error_ = error;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.ExprValue.error)
+}
+inline ::google::api::expr::v1alpha1::ErrorSet* ExprValue::_internal_mutable_error() {
+  if (kind_case() != kError) {
+    clear_kind();
+    set_has_error();
+    _impl_.kind_.error_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::ErrorSet >(GetArenaForAllocation());
+  }
+  return _impl_.kind_.error_;
+}
+inline ::google::api::expr::v1alpha1::ErrorSet* ExprValue::mutable_error() {
+  ::google::api::expr::v1alpha1::ErrorSet* _msg = _internal_mutable_error();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.ExprValue.error)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];
+inline bool ExprValue::has_unknown() const {
+  return kind_case() == kUnknown;
+}
+inline bool ExprValue::_internal_has_unknown() const {
+  return kind_case() == kUnknown;
+}
+inline void ExprValue::set_has_unknown() {
+  _impl_._oneof_case_[0] = kUnknown;
+}
+inline void ExprValue::clear_unknown() {
+  if (kind_case() == kUnknown) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.kind_.unknown_;
+    }
+    clear_has_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::UnknownSet* ExprValue::release_unknown() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.ExprValue.unknown)
+  if (kind_case() == kUnknown) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::UnknownSet* temp = _impl_.kind_.unknown_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.kind_.unknown_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::UnknownSet& ExprValue::_internal_unknown() const {
+  return kind_case() == kUnknown
+      ? *_impl_.kind_.unknown_
+      : reinterpret_cast<::google::api::expr::v1alpha1::UnknownSet&>(::google::api::expr::v1alpha1::_UnknownSet_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::UnknownSet& ExprValue::unknown() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.ExprValue.unknown)
+  return _internal_unknown();
+}
+inline ::google::api::expr::v1alpha1::UnknownSet* ExprValue::unsafe_arena_release_unknown() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.ExprValue.unknown)
+  if (kind_case() == kUnknown) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::UnknownSet* temp = _impl_.kind_.unknown_;
+    _impl_.kind_.unknown_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void ExprValue::unsafe_arena_set_allocated_unknown(::google::api::expr::v1alpha1::UnknownSet* unknown) {
+  clear_kind();
+  if (unknown) {
+    set_has_unknown();
+    _impl_.kind_.unknown_ = unknown;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.ExprValue.unknown)
+}
+inline ::google::api::expr::v1alpha1::UnknownSet* ExprValue::_internal_mutable_unknown() {
+  if (kind_case() != kUnknown) {
+    clear_kind();
+    set_has_unknown();
+    _impl_.kind_.unknown_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::UnknownSet >(GetArenaForAllocation());
+  }
+  return _impl_.kind_.unknown_;
+}
+inline ::google::api::expr::v1alpha1::UnknownSet* ExprValue::mutable_unknown() {
+  ::google::api::expr::v1alpha1::UnknownSet* _msg = _internal_mutable_unknown();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.ExprValue.unknown)
+  return _msg;
+}
+
+inline bool ExprValue::has_kind() const {
+  return kind_case() != KIND_NOT_SET;
+}
+inline void ExprValue::clear_has_kind() {
+  _impl_._oneof_case_[0] = KIND_NOT_SET;
+}
+inline ExprValue::KindCase ExprValue::kind_case() const {
+  return ExprValue::KindCase(_impl_._oneof_case_[0]);
+}
+// -------------------------------------------------------------------
+
+// ErrorSet
+
+// repeated .google.rpc.Status errors = 1 [json_name = "errors"];
+inline int ErrorSet::_internal_errors_size() const {
+  return _internal_errors().size();
+}
+inline int ErrorSet::errors_size() const {
+  return _internal_errors_size();
+}
+inline ::google::rpc::Status* ErrorSet::mutable_errors(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.ErrorSet.errors)
+  return _internal_mutable_errors()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >*
+ErrorSet::mutable_errors() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.ErrorSet.errors)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_errors();
+}
+inline const ::google::rpc::Status& ErrorSet::errors(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.ErrorSet.errors)
+    return _internal_errors().Get(index);
+}
+inline ::google::rpc::Status* ErrorSet::add_errors() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::rpc::Status* _add = _internal_mutable_errors()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.ErrorSet.errors)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >&
+ErrorSet::errors() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.ErrorSet.errors)
+  return _internal_errors();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::rpc::Status>&
+ErrorSet::_internal_errors() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.errors_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::rpc::Status>*
+ErrorSet::_internal_mutable_errors() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.errors_;
+}
+
+// -------------------------------------------------------------------
+
+// UnknownSet
+
+// repeated int64 exprs = 1 [json_name = "exprs"];
+inline int UnknownSet::_internal_exprs_size() const {
+  return _internal_exprs().size();
+}
+inline int UnknownSet::exprs_size() const {
+  return _internal_exprs_size();
+}
+inline void UnknownSet::clear_exprs() {
+  _internal_mutable_exprs()->Clear();
+}
+inline ::int64_t UnknownSet::exprs(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.UnknownSet.exprs)
+  return _internal_exprs().Get(index);
+}
+inline void UnknownSet::set_exprs(int index, ::int64_t value) {
+  _internal_mutable_exprs()->Set(index, value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.UnknownSet.exprs)
+}
+inline void UnknownSet::add_exprs(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_exprs()->Add(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.UnknownSet.exprs)
+}
+inline const ::google::protobuf::RepeatedField<::int64_t>& UnknownSet::exprs() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.UnknownSet.exprs)
+  return _internal_exprs();
+}
+inline ::google::protobuf::RepeatedField<::int64_t>* UnknownSet::mutable_exprs() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.UnknownSet.exprs)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_exprs();
+}
+
+inline const ::google::protobuf::RepeatedField<::int64_t>& UnknownSet::_internal_exprs() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.exprs_;
+}
+inline ::google::protobuf::RepeatedField<::int64_t>* UnknownSet::_internal_mutable_exprs() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.exprs_;
+}
+
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif  // __GNUC__
+
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+
+
+// @@protoc_insertion_point(global_scope)
+
+#include "google/protobuf/port_undef.inc"
+
+#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2feval_2eproto_2epb_2eh
diff --git a/gen/google/api/expr/v1alpha1/explain.pb.cc b/gen/google/api/expr/v1alpha1/explain.pb.cc
new file mode 100644
index 0000000..ea6fd6b
--- /dev/null
+++ b/gen/google/api/expr/v1alpha1/explain.pb.cc
@@ -0,0 +1,573 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/api/expr/v1alpha1/explain.proto
+
+#include "google/api/expr/v1alpha1/explain.pb.h"
+
+#include <algorithm>
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/extension_set.h"
+#include "google/protobuf/wire_format_lite.h"
+#include "google/protobuf/descriptor.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/reflection_ops.h"
+#include "google/protobuf/wire_format.h"
+#include "google/protobuf/generated_message_tctable_impl.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+PROTOBUF_PRAGMA_INIT_SEG
+namespace _pb = ::google::protobuf;
+namespace _pbi = ::google::protobuf::internal;
+namespace _fl = ::google::protobuf::internal::field_layout;
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+        template <typename>
+PROTOBUF_CONSTEXPR Explain_ExprStep::Explain_ExprStep(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.id_)*/ ::int64_t{0},
+      /*decltype(_impl_.value_index_)*/ 0,
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct Explain_ExprStepDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Explain_ExprStepDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Explain_ExprStepDefaultTypeInternal() {}
+  union {
+    Explain_ExprStep _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Explain_ExprStepDefaultTypeInternal _Explain_ExprStep_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Explain::Explain(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.values_)*/ {},
+      /*decltype(_impl_.expr_steps_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct ExplainDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ExplainDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ExplainDefaultTypeInternal() {}
+  union {
+    Explain _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExplainDefaultTypeInternal _Explain_default_instance_;
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+static ::_pb::Metadata file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto[2];
+static constexpr const ::_pb::EnumDescriptor**
+    file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto = nullptr;
+static constexpr const ::_pb::ServiceDescriptor**
+    file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto = nullptr;
+const ::uint32_t TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
+    protodesc_cold) = {
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Explain_ExprStep, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Explain_ExprStep, _impl_.id_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Explain_ExprStep, _impl_.value_index_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Explain, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Explain, _impl_.values_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Explain, _impl_.expr_steps_),
+};
+
+static const ::_pbi::MigrationSchema
+    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+        {0, -1, -1, sizeof(::google::api::expr::v1alpha1::Explain_ExprStep)},
+        {10, -1, -1, sizeof(::google::api::expr::v1alpha1::Explain)},
+};
+
+static const ::_pb::Message* const file_default_instances[] = {
+    &::google::api::expr::v1alpha1::_Explain_ExprStep_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Explain_default_instance_._instance,
+};
+const char descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+    "\n&google/api/expr/v1alpha1/explain.proto"
+    "\022\030google.api.expr.v1alpha1\032$google/api/e"
+    "xpr/v1alpha1/value.proto\"\316\001\n\007Explain\0227\n\006"
+    "values\030\001 \003(\0132\037.google.api.expr.v1alpha1."
+    "ValueR\006values\022I\n\nexpr_steps\030\002 \003(\0132*.goog"
+    "le.api.expr.v1alpha1.Explain.ExprStepR\te"
+    "xprSteps\032;\n\010ExprStep\022\016\n\002id\030\001 \001(\003R\002id\022\037\n\013"
+    "value_index\030\002 \001(\005R\nvalueIndex:\002\030\001B\360\001\n\034co"
+    "m.google.api.expr.v1alpha1B\014ExplainProto"
+    "P\001Z<google.golang.org/genproto/googleapi"
+    "s/api/expr/v1alpha1;expr\370\001\001\242\002\003GAE\252\002\030Goog"
+    "le.Api.Expr.V1alpha1\312\002\030Google\\Api\\Expr\\V"
+    "1alpha1\342\002$Google\\Api\\Expr\\V1alpha1\\GPBMe"
+    "tadata\352\002\033Google::Api::Expr::V1alpha1b\006pr"
+    "oto3"
+};
+static const ::_pbi::DescriptorTable* const descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_deps[1] =
+    {
+        &::descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto,
+};
+static ::absl::once_flag descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_once;
+const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto = {
+    false,
+    false,
+    564,
+    descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto,
+    "google/api/expr/v1alpha1/explain.proto",
+    &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_once,
+    descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_deps,
+    1,
+    2,
+    schemas,
+    file_default_instances,
+    TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto::offsets,
+    file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto,
+    file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto,
+    file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto,
+};
+
+// This function exists to be marked as weak.
+// It can significantly speed up compilation by breaking up LLVM's SCC
+// in the .pb.cc translation units. Large translation units see a
+// reduction of more than 35% of walltime for optimized builds. Without
+// the weak attribute all the messages in the file, including all the
+// vtables and everything they use become part of the same SCC through
+// a cycle like:
+// GetMetadata -> descriptor table -> default instances ->
+//   vtables -> GetMetadata
+// By adding a weak function here we break the connection from the
+// individual vtables back into the descriptor table.
+PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_getter() {
+  return &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto;
+}
+// Force running AddDescriptors() at dynamic initialization time.
+PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
+static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto);
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+// ===================================================================
+
+class Explain_ExprStep::_Internal {
+ public:
+};
+
+Explain_ExprStep::Explain_ExprStep(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Explain.ExprStep)
+}
+Explain_ExprStep::Explain_ExprStep(const Explain_ExprStep& from)
+    : ::google::protobuf::Message(), _impl_(from._impl_) {
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Explain.ExprStep)
+}
+inline void Explain_ExprStep::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.id_){::int64_t{0}},
+      decltype(_impl_.value_index_){0},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+Explain_ExprStep::~Explain_ExprStep() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Explain.ExprStep)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Explain_ExprStep::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+}
+void Explain_ExprStep::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Explain_ExprStep::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Explain.ExprStep)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
+      reinterpret_cast<char*>(&_impl_.value_index_) -
+      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.value_index_));
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Explain_ExprStep::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Explain_ExprStep::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_Explain_ExprStep_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // int32 value_index = 2 [json_name = "valueIndex"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Explain_ExprStep, _impl_.value_index_), 63>(),
+     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Explain_ExprStep, _impl_.value_index_)}},
+    // int64 id = 1 [json_name = "id"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Explain_ExprStep, _impl_.id_), 63>(),
+     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Explain_ExprStep, _impl_.id_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // int64 id = 1 [json_name = "id"];
+    {PROTOBUF_FIELD_OFFSET(Explain_ExprStep, _impl_.id_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
+    // int32 value_index = 2 [json_name = "valueIndex"];
+    {PROTOBUF_FIELD_OFFSET(Explain_ExprStep, _impl_.value_index_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
+  }},
+  // no aux_entries
+  {{
+  }},
+};
+
+::uint8_t* Explain_ExprStep::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Explain.ExprStep)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // int64 id = 1 [json_name = "id"];
+  if (this->_internal_id() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt64ToArrayWithField<1>(
+            stream, this->_internal_id(), target);
+  }
+
+  // int32 value_index = 2 [json_name = "valueIndex"];
+  if (this->_internal_value_index() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt32ToArrayWithField<2>(
+            stream, this->_internal_value_index(), target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Explain.ExprStep)
+  return target;
+}
+
+::size_t Explain_ExprStep::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Explain.ExprStep)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // int64 id = 1 [json_name = "id"];
+  if (this->_internal_id() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+        this->_internal_id());
+  }
+
+  // int32 value_index = 2 [json_name = "valueIndex"];
+  if (this->_internal_value_index() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
+        this->_internal_value_index());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Explain_ExprStep::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Explain_ExprStep::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Explain_ExprStep::GetClassData() const { return &_class_data_; }
+
+
+void Explain_ExprStep::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Explain_ExprStep*>(&to_msg);
+  auto& from = static_cast<const Explain_ExprStep&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Explain.ExprStep)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (from._internal_id() != 0) {
+    _this->_internal_set_id(from._internal_id());
+  }
+  if (from._internal_value_index() != 0) {
+    _this->_internal_set_value_index(from._internal_value_index());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Explain_ExprStep::CopyFrom(const Explain_ExprStep& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Explain.ExprStep)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Explain_ExprStep::IsInitialized() const {
+  return true;
+}
+
+void Explain_ExprStep::InternalSwap(Explain_ExprStep* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(Explain_ExprStep, _impl_.value_index_)
+      + sizeof(Explain_ExprStep::_impl_.value_index_)
+      - PROTOBUF_FIELD_OFFSET(Explain_ExprStep, _impl_.id_)>(
+          reinterpret_cast<char*>(&_impl_.id_),
+          reinterpret_cast<char*>(&other->_impl_.id_));
+}
+
+::google::protobuf::Metadata Explain_ExprStep::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto[0]);
+}
+// ===================================================================
+
+class Explain::_Internal {
+ public:
+};
+
+void Explain::clear_values() {
+  _internal_mutable_values()->Clear();
+}
+Explain::Explain(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Explain)
+}
+Explain::Explain(const Explain& from) : ::google::protobuf::Message() {
+  Explain* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.values_){from._impl_.values_},
+      decltype(_impl_.expr_steps_){from._impl_.expr_steps_},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Explain)
+}
+inline void Explain::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.values_){arena},
+      decltype(_impl_.expr_steps_){arena},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+Explain::~Explain() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Explain)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Explain::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.values_.~RepeatedPtrField();
+  _impl_.expr_steps_.~RepeatedPtrField();
+}
+void Explain::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Explain::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Explain)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_values()->Clear();
+  _internal_mutable_expr_steps()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Explain::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Explain::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Explain_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.api.expr.v1alpha1.Explain.ExprStep expr_steps = 2 [json_name = "exprSteps"];
+    {::_pbi::TcParser::FastMtR1,
+     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Explain, _impl_.expr_steps_)}},
+    // repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+    {::_pbi::TcParser::FastMtR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Explain, _impl_.values_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+    {PROTOBUF_FIELD_OFFSET(Explain, _impl_.values_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+    // repeated .google.api.expr.v1alpha1.Explain.ExprStep expr_steps = 2 [json_name = "exprSteps"];
+    {PROTOBUF_FIELD_OFFSET(Explain, _impl_.expr_steps_), 0, 1,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Value>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Explain_ExprStep>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* Explain::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Explain)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
+    const auto& repfield = this->_internal_values().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  // repeated .google.api.expr.v1alpha1.Explain.ExprStep expr_steps = 2 [json_name = "exprSteps"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_expr_steps_size()); i < n; i++) {
+    const auto& repfield = this->_internal_expr_steps().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Explain)
+  return target;
+}
+
+::size_t Explain::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Explain)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+  total_size += 1UL * this->_internal_values_size();
+  for (const auto& msg : this->_internal_values()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  // repeated .google.api.expr.v1alpha1.Explain.ExprStep expr_steps = 2 [json_name = "exprSteps"];
+  total_size += 1UL * this->_internal_expr_steps_size();
+  for (const auto& msg : this->_internal_expr_steps()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Explain::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Explain::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Explain::GetClassData() const { return &_class_data_; }
+
+
+void Explain::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Explain*>(&to_msg);
+  auto& from = static_cast<const Explain&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Explain)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
+  _this->_internal_mutable_expr_steps()->MergeFrom(from._internal_expr_steps());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Explain::CopyFrom(const Explain& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Explain)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Explain::IsInitialized() const {
+  return true;
+}
+
+void Explain::InternalSwap(Explain* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.values_.InternalSwap(&other->_impl_.values_);
+  _impl_.expr_steps_.InternalSwap(&other->_impl_.expr_steps_);
+}
+
+::google::protobuf::Metadata Explain::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto[1]);
+}
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+// @@protoc_insertion_point(global_scope)
+#include "google/protobuf/port_undef.inc"
diff --git a/gen/google/api/expr/v1alpha1/explain.pb.h b/gen/google/api/expr/v1alpha1/explain.pb.h
new file mode 100644
index 0000000..70cb892
--- /dev/null
+++ b/gen/google/api/expr/v1alpha1/explain.pb.h
@@ -0,0 +1,610 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/api/expr/v1alpha1/explain.proto
+
+#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_2epb_2eh
+#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_2epb_2eh
+
+#include <limits>
+#include <string>
+#include <type_traits>
+
+#include "google/protobuf/port_def.inc"
+#if PROTOBUF_VERSION < 4024000
+#error "This file was generated by a newer version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please update"
+#error "your headers."
+#endif  // PROTOBUF_VERSION
+
+#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
+#error "This file was generated by an older version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please"
+#error "regenerate this file with a newer version of protoc."
+#endif  // PROTOBUF_MIN_PROTOC_VERSION
+#include "google/protobuf/port_undef.inc"
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/arena.h"
+#include "google/protobuf/arenastring.h"
+#include "google/protobuf/generated_message_tctable_decl.h"
+#include "google/protobuf/generated_message_util.h"
+#include "google/protobuf/metadata_lite.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/message.h"
+#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
+#include "google/protobuf/extension_set.h"  // IWYU pragma: export
+#include "google/protobuf/unknown_field_set.h"
+#include "google/api/expr/v1alpha1/value.pb.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+
+#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto
+
+namespace google {
+namespace protobuf {
+namespace internal {
+class AnyMetadata;
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+// Internal implementation detail -- do not use these members.
+struct TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto {
+  static const ::uint32_t offsets[];
+};
+extern const ::google::protobuf::internal::DescriptorTable
+    descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto;
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+class Explain;
+struct ExplainDefaultTypeInternal;
+extern ExplainDefaultTypeInternal _Explain_default_instance_;
+class Explain_ExprStep;
+struct Explain_ExprStepDefaultTypeInternal;
+extern Explain_ExprStepDefaultTypeInternal _Explain_ExprStep_default_instance_;
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+
+// ===================================================================
+
+
+// -------------------------------------------------------------------
+
+class Explain_ExprStep final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Explain.ExprStep) */ {
+ public:
+  inline Explain_ExprStep() : Explain_ExprStep(nullptr) {}
+  ~Explain_ExprStep() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Explain_ExprStep(::google::protobuf::internal::ConstantInitialized);
+
+  Explain_ExprStep(const Explain_ExprStep& from);
+  Explain_ExprStep(Explain_ExprStep&& from) noexcept
+    : Explain_ExprStep() {
+    *this = ::std::move(from);
+  }
+
+  inline Explain_ExprStep& operator=(const Explain_ExprStep& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Explain_ExprStep& operator=(Explain_ExprStep&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Explain_ExprStep& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Explain_ExprStep* internal_default_instance() {
+    return reinterpret_cast<const Explain_ExprStep*>(
+               &_Explain_ExprStep_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    0;
+
+  friend void swap(Explain_ExprStep& a, Explain_ExprStep& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Explain_ExprStep* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Explain_ExprStep* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Explain_ExprStep* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Explain_ExprStep>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Explain_ExprStep& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Explain_ExprStep& from) {
+    Explain_ExprStep::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Explain_ExprStep* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Explain.ExprStep";
+  }
+  protected:
+  explicit Explain_ExprStep(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kIdFieldNumber = 1,
+    kValueIndexFieldNumber = 2,
+  };
+  // int64 id = 1 [json_name = "id"];
+  void clear_id() ;
+  ::int64_t id() const;
+  void set_id(::int64_t value);
+
+  private:
+  ::int64_t _internal_id() const;
+  void _internal_set_id(::int64_t value);
+
+  public:
+  // int32 value_index = 2 [json_name = "valueIndex"];
+  void clear_value_index() ;
+  ::int32_t value_index() const;
+  void set_value_index(::int32_t value);
+
+  private:
+  ::int32_t _internal_value_index() const;
+  void _internal_set_value_index(::int32_t value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Explain.ExprStep)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::int64_t id_;
+    ::int32_t value_index_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto;
+};// -------------------------------------------------------------------
+
+class Explain final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Explain) */ {
+ public:
+  inline Explain() : Explain(nullptr) {}
+  ~Explain() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Explain(::google::protobuf::internal::ConstantInitialized);
+
+  Explain(const Explain& from);
+  Explain(Explain&& from) noexcept
+    : Explain() {
+    *this = ::std::move(from);
+  }
+
+  inline Explain& operator=(const Explain& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Explain& operator=(Explain&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Explain& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Explain* internal_default_instance() {
+    return reinterpret_cast<const Explain*>(
+               &_Explain_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    1;
+
+  friend void swap(Explain& a, Explain& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Explain* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Explain* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Explain* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Explain>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Explain& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Explain& from) {
+    Explain::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Explain* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Explain";
+  }
+  protected:
+  explicit Explain(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef Explain_ExprStep ExprStep;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kValuesFieldNumber = 1,
+    kExprStepsFieldNumber = 2,
+  };
+  // repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+  int values_size() const;
+  private:
+  int _internal_values_size() const;
+
+  public:
+  void clear_values() ;
+  ::google::api::expr::v1alpha1::Value* mutable_values(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >*
+      mutable_values();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Value>& _internal_values() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Value>* _internal_mutable_values();
+  public:
+  const ::google::api::expr::v1alpha1::Value& values(int index) const;
+  ::google::api::expr::v1alpha1::Value* add_values();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >&
+      values() const;
+  // repeated .google.api.expr.v1alpha1.Explain.ExprStep expr_steps = 2 [json_name = "exprSteps"];
+  int expr_steps_size() const;
+  private:
+  int _internal_expr_steps_size() const;
+
+  public:
+  void clear_expr_steps() ;
+  ::google::api::expr::v1alpha1::Explain_ExprStep* mutable_expr_steps(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Explain_ExprStep >*
+      mutable_expr_steps();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Explain_ExprStep>& _internal_expr_steps() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Explain_ExprStep>* _internal_mutable_expr_steps();
+  public:
+  const ::google::api::expr::v1alpha1::Explain_ExprStep& expr_steps(int index) const;
+  ::google::api::expr::v1alpha1::Explain_ExprStep* add_expr_steps();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Explain_ExprStep >&
+      expr_steps() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Explain)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Value > values_;
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Explain_ExprStep > expr_steps_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto;
+};
+
+// ===================================================================
+
+
+
+
+// ===================================================================
+
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif  // __GNUC__
+// -------------------------------------------------------------------
+
+// Explain_ExprStep
+
+// int64 id = 1 [json_name = "id"];
+inline void Explain_ExprStep::clear_id() {
+  _impl_.id_ = ::int64_t{0};
+}
+inline ::int64_t Explain_ExprStep::id() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Explain.ExprStep.id)
+  return _internal_id();
+}
+inline void Explain_ExprStep::set_id(::int64_t value) {
+  _internal_set_id(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Explain.ExprStep.id)
+}
+inline ::int64_t Explain_ExprStep::_internal_id() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.id_;
+}
+inline void Explain_ExprStep::_internal_set_id(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.id_ = value;
+}
+
+// int32 value_index = 2 [json_name = "valueIndex"];
+inline void Explain_ExprStep::clear_value_index() {
+  _impl_.value_index_ = 0;
+}
+inline ::int32_t Explain_ExprStep::value_index() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Explain.ExprStep.value_index)
+  return _internal_value_index();
+}
+inline void Explain_ExprStep::set_value_index(::int32_t value) {
+  _internal_set_value_index(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Explain.ExprStep.value_index)
+}
+inline ::int32_t Explain_ExprStep::_internal_value_index() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.value_index_;
+}
+inline void Explain_ExprStep::_internal_set_value_index(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.value_index_ = value;
+}
+
+// -------------------------------------------------------------------
+
+// Explain
+
+// repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+inline int Explain::_internal_values_size() const {
+  return _internal_values().size();
+}
+inline int Explain::values_size() const {
+  return _internal_values_size();
+}
+inline ::google::api::expr::v1alpha1::Value* Explain::mutable_values(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Explain.values)
+  return _internal_mutable_values()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >*
+Explain::mutable_values() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Explain.values)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_values();
+}
+inline const ::google::api::expr::v1alpha1::Value& Explain::values(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Explain.values)
+    return _internal_values().Get(index);
+}
+inline ::google::api::expr::v1alpha1::Value* Explain::add_values() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::Value* _add = _internal_mutable_values()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Explain.values)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >&
+Explain::values() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Explain.values)
+  return _internal_values();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Value>&
+Explain::_internal_values() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.values_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Value>*
+Explain::_internal_mutable_values() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.values_;
+}
+
+// repeated .google.api.expr.v1alpha1.Explain.ExprStep expr_steps = 2 [json_name = "exprSteps"];
+inline int Explain::_internal_expr_steps_size() const {
+  return _internal_expr_steps().size();
+}
+inline int Explain::expr_steps_size() const {
+  return _internal_expr_steps_size();
+}
+inline void Explain::clear_expr_steps() {
+  _internal_mutable_expr_steps()->Clear();
+}
+inline ::google::api::expr::v1alpha1::Explain_ExprStep* Explain::mutable_expr_steps(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Explain.expr_steps)
+  return _internal_mutable_expr_steps()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Explain_ExprStep >*
+Explain::mutable_expr_steps() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Explain.expr_steps)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_expr_steps();
+}
+inline const ::google::api::expr::v1alpha1::Explain_ExprStep& Explain::expr_steps(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Explain.expr_steps)
+    return _internal_expr_steps().Get(index);
+}
+inline ::google::api::expr::v1alpha1::Explain_ExprStep* Explain::add_expr_steps() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::Explain_ExprStep* _add = _internal_mutable_expr_steps()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Explain.expr_steps)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Explain_ExprStep >&
+Explain::expr_steps() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Explain.expr_steps)
+  return _internal_expr_steps();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Explain_ExprStep>&
+Explain::_internal_expr_steps() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.expr_steps_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Explain_ExprStep>*
+Explain::_internal_mutable_expr_steps() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.expr_steps_;
+}
+
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif  // __GNUC__
+
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+
+
+// @@protoc_insertion_point(global_scope)
+
+#include "google/protobuf/port_undef.inc"
+
+#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fexplain_2eproto_2epb_2eh
diff --git a/gen/google/api/expr/v1alpha1/syntax.pb.cc b/gen/google/api/expr/v1alpha1/syntax.pb.cc
new file mode 100644
index 0000000..5dda6ab
--- /dev/null
+++ b/gen/google/api/expr/v1alpha1/syntax.pb.cc
@@ -0,0 +1,4673 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/api/expr/v1alpha1/syntax.proto
+
+#include "google/api/expr/v1alpha1/syntax.pb.h"
+
+#include <algorithm>
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/extension_set.h"
+#include "google/protobuf/wire_format_lite.h"
+#include "google/protobuf/descriptor.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/reflection_ops.h"
+#include "google/protobuf/wire_format.h"
+#include "google/protobuf/generated_message_tctable_impl.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+PROTOBUF_PRAGMA_INIT_SEG
+namespace _pb = ::google::protobuf;
+namespace _pbi = ::google::protobuf::internal;
+namespace _fl = ::google::protobuf::internal::field_layout;
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+        template <typename>
+PROTOBUF_CONSTEXPR ParsedExpr::ParsedExpr(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.expr_)*/ nullptr,
+      /*decltype(_impl_.source_info_)*/ nullptr,
+    } {}
+struct ParsedExprDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ParsedExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ParsedExprDefaultTypeInternal() {}
+  union {
+    ParsedExpr _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParsedExprDefaultTypeInternal _ParsedExpr_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Expr_Ident::Expr_Ident(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.name_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct Expr_IdentDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Expr_IdentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Expr_IdentDefaultTypeInternal() {}
+  union {
+    Expr_Ident _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expr_IdentDefaultTypeInternal _Expr_Ident_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Expr_Select::Expr_Select(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.field_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.operand_)*/ nullptr,
+      /*decltype(_impl_.test_only_)*/ false,
+    } {}
+struct Expr_SelectDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Expr_SelectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Expr_SelectDefaultTypeInternal() {}
+  union {
+    Expr_Select _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expr_SelectDefaultTypeInternal _Expr_Select_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Expr_Call::Expr_Call(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.args_)*/ {},
+      /*decltype(_impl_.function_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.target_)*/ nullptr,
+    } {}
+struct Expr_CallDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Expr_CallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Expr_CallDefaultTypeInternal() {}
+  union {
+    Expr_Call _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expr_CallDefaultTypeInternal _Expr_Call_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Expr_CreateList::Expr_CreateList(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.elements_)*/ {},
+      /*decltype(_impl_.optional_indices_)*/ {},
+      /* _impl_._optional_indices_cached_byte_size_ = */ {0},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct Expr_CreateListDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Expr_CreateListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Expr_CreateListDefaultTypeInternal() {}
+  union {
+    Expr_CreateList _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expr_CreateListDefaultTypeInternal _Expr_CreateList_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Expr_CreateStruct_Entry::Expr_CreateStruct_Entry(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.value_)*/ nullptr,
+      /*decltype(_impl_.id_)*/ ::int64_t{0},
+      /*decltype(_impl_.optional_entry_)*/ false,
+      /*decltype(_impl_.key_kind_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+    } {}
+struct Expr_CreateStruct_EntryDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Expr_CreateStruct_EntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Expr_CreateStruct_EntryDefaultTypeInternal() {}
+  union {
+    Expr_CreateStruct_Entry _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expr_CreateStruct_EntryDefaultTypeInternal _Expr_CreateStruct_Entry_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Expr_CreateStruct::Expr_CreateStruct(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.entries_)*/ {},
+      /*decltype(_impl_.message_name_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct Expr_CreateStructDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Expr_CreateStructDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Expr_CreateStructDefaultTypeInternal() {}
+  union {
+    Expr_CreateStruct _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expr_CreateStructDefaultTypeInternal _Expr_CreateStruct_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Expr_Comprehension::Expr_Comprehension(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.iter_var_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.accu_var_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.iter_range_)*/ nullptr,
+      /*decltype(_impl_.accu_init_)*/ nullptr,
+      /*decltype(_impl_.loop_condition_)*/ nullptr,
+      /*decltype(_impl_.loop_step_)*/ nullptr,
+      /*decltype(_impl_.result_)*/ nullptr,
+    } {}
+struct Expr_ComprehensionDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Expr_ComprehensionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Expr_ComprehensionDefaultTypeInternal() {}
+  union {
+    Expr_Comprehension _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expr_ComprehensionDefaultTypeInternal _Expr_Comprehension_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Expr::Expr(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.id_)*/ ::int64_t{0},
+      /*decltype(_impl_.expr_kind_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+    } {}
+struct ExprDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ExprDefaultTypeInternal() {}
+  union {
+    Expr _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExprDefaultTypeInternal _Expr_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Constant::Constant(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.constant_kind_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+    } {}
+struct ConstantDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ConstantDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ConstantDefaultTypeInternal() {}
+  union {
+    Constant _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConstantDefaultTypeInternal _Constant_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR SourceInfo_PositionsEntry_DoNotUse::SourceInfo_PositionsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct SourceInfo_PositionsEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR SourceInfo_PositionsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~SourceInfo_PositionsEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    SourceInfo_PositionsEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceInfo_PositionsEntry_DoNotUseDefaultTypeInternal _SourceInfo_PositionsEntry_DoNotUse_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR SourceInfo_MacroCallsEntry_DoNotUse::SourceInfo_MacroCallsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct SourceInfo_MacroCallsEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR SourceInfo_MacroCallsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~SourceInfo_MacroCallsEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    SourceInfo_MacroCallsEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceInfo_MacroCallsEntry_DoNotUseDefaultTypeInternal _SourceInfo_MacroCallsEntry_DoNotUse_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR SourceInfo::SourceInfo(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.line_offsets_)*/ {},
+      /* _impl_._line_offsets_cached_byte_size_ = */ {0},
+      /* decltype(_impl_.positions_) */ {},
+      /* decltype(_impl_.macro_calls_) */ {},
+      /*decltype(_impl_.syntax_version_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.location_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct SourceInfoDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR SourceInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~SourceInfoDefaultTypeInternal() {}
+  union {
+    SourceInfo _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceInfoDefaultTypeInternal _SourceInfo_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR SourcePosition::SourcePosition(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.location_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.offset_)*/ 0,
+      /*decltype(_impl_.line_)*/ 0,
+      /*decltype(_impl_.column_)*/ 0,
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct SourcePositionDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR SourcePositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~SourcePositionDefaultTypeInternal() {}
+  union {
+    SourcePosition _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourcePositionDefaultTypeInternal _SourcePosition_default_instance_;
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+static ::_pb::Metadata file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[14];
+static constexpr const ::_pb::EnumDescriptor**
+    file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto = nullptr;
+static constexpr const ::_pb::ServiceDescriptor**
+    file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto = nullptr;
+const ::uint32_t TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
+    protodesc_cold) = {
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ParsedExpr, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ParsedExpr, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ParsedExpr, _impl_.expr_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ParsedExpr, _impl_.source_info_),
+    0,
+    1,
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Ident, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Ident, _impl_.name_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Select, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Select, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Select, _impl_.operand_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Select, _impl_.field_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Select, _impl_.test_only_),
+    0,
+    ~0u,
+    ~0u,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Call, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Call, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Call, _impl_.target_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Call, _impl_.function_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Call, _impl_.args_),
+    0,
+    ~0u,
+    ~0u,
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateList, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateList, _impl_.elements_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateList, _impl_.optional_indices_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateStruct_Entry, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateStruct_Entry, _internal_metadata_),
+    ~0u,  // no _extensions_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateStruct_Entry, _impl_._oneof_case_[0]),
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateStruct_Entry, _impl_.id_),
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateStruct_Entry, _impl_.value_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateStruct_Entry, _impl_.optional_entry_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateStruct_Entry, _impl_.key_kind_),
+    ~0u,
+    ~0u,
+    ~0u,
+    0,
+    ~0u,
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateStruct, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateStruct, _impl_.message_name_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateStruct, _impl_.entries_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Comprehension, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Comprehension, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Comprehension, _impl_.iter_var_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Comprehension, _impl_.iter_range_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Comprehension, _impl_.accu_var_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Comprehension, _impl_.accu_init_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Comprehension, _impl_.loop_condition_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Comprehension, _impl_.loop_step_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_Comprehension, _impl_.result_),
+    ~0u,
+    0,
+    ~0u,
+    1,
+    2,
+    3,
+    4,
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr, _internal_metadata_),
+    ~0u,  // no _extensions_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr, _impl_._oneof_case_[0]),
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr, _impl_.id_),
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr, _impl_.expr_kind_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Constant, _internal_metadata_),
+    ~0u,  // no _extensions_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Constant, _impl_._oneof_case_[0]),
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Constant, _impl_.constant_kind_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo_PositionsEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo_PositionsEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo_PositionsEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo_PositionsEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo_MacroCallsEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo_MacroCallsEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo_MacroCallsEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo_MacroCallsEntry_DoNotUse, value_),
+    0,
+    1,
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo, _impl_.syntax_version_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo, _impl_.location_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo, _impl_.line_offsets_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo, _impl_.positions_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourceInfo, _impl_.macro_calls_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourcePosition, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourcePosition, _impl_.location_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourcePosition, _impl_.offset_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourcePosition, _impl_.line_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::SourcePosition, _impl_.column_),
+};
+
+static const ::_pbi::MigrationSchema
+    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+        {0, 10, -1, sizeof(::google::api::expr::v1alpha1::ParsedExpr)},
+        {12, -1, -1, sizeof(::google::api::expr::v1alpha1::Expr_Ident)},
+        {21, 32, -1, sizeof(::google::api::expr::v1alpha1::Expr_Select)},
+        {35, 46, -1, sizeof(::google::api::expr::v1alpha1::Expr_Call)},
+        {49, -1, -1, sizeof(::google::api::expr::v1alpha1::Expr_CreateList)},
+        {59, 73, -1, sizeof(::google::api::expr::v1alpha1::Expr_CreateStruct_Entry)},
+        {78, -1, -1, sizeof(::google::api::expr::v1alpha1::Expr_CreateStruct)},
+        {88, 103, -1, sizeof(::google::api::expr::v1alpha1::Expr_Comprehension)},
+        {110, -1, -1, sizeof(::google::api::expr::v1alpha1::Expr)},
+        {127, -1, -1, sizeof(::google::api::expr::v1alpha1::Constant)},
+        {145, 155, -1, sizeof(::google::api::expr::v1alpha1::SourceInfo_PositionsEntry_DoNotUse)},
+        {157, 167, -1, sizeof(::google::api::expr::v1alpha1::SourceInfo_MacroCallsEntry_DoNotUse)},
+        {169, -1, -1, sizeof(::google::api::expr::v1alpha1::SourceInfo)},
+        {182, -1, -1, sizeof(::google::api::expr::v1alpha1::SourcePosition)},
+};
+
+static const ::_pb::Message* const file_default_instances[] = {
+    &::google::api::expr::v1alpha1::_ParsedExpr_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Expr_Ident_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Expr_Select_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Expr_Call_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Expr_CreateList_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Expr_CreateStruct_Entry_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Expr_CreateStruct_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Expr_Comprehension_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Expr_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_Constant_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_SourceInfo_PositionsEntry_DoNotUse_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_SourceInfo_MacroCallsEntry_DoNotUse_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_SourceInfo_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_SourcePosition_default_instance_._instance,
+};
+const char descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+    "\n%google/api/expr/v1alpha1/syntax.proto\022"
+    "\030google.api.expr.v1alpha1\032\036google/protob"
+    "uf/duration.proto\032\034google/protobuf/struc"
+    "t.proto\032\037google/protobuf/timestamp.proto"
+    "\"\207\001\n\nParsedExpr\0222\n\004expr\030\002 \001(\0132\036.google.a"
+    "pi.expr.v1alpha1.ExprR\004expr\022E\n\013source_in"
+    "fo\030\003 \001(\0132$.google.api.expr.v1alpha1.Sour"
+    "ceInfoR\nsourceInfo\"\256\r\n\004Expr\022\016\n\002id\030\002 \001(\003R"
+    "\002id\022C\n\nconst_expr\030\003 \001(\0132\".google.api.exp"
+    "r.v1alpha1.ConstantH\000R\tconstExpr\022E\n\niden"
+    "t_expr\030\004 \001(\0132$.google.api.expr.v1alpha1."
+    "Expr.IdentH\000R\tidentExpr\022H\n\013select_expr\030\005"
+    " \001(\0132%.google.api.expr.v1alpha1.Expr.Sel"
+    "ectH\000R\nselectExpr\022B\n\tcall_expr\030\006 \001(\0132#.g"
+    "oogle.api.expr.v1alpha1.Expr.CallH\000R\010cal"
+    "lExpr\022H\n\tlist_expr\030\007 \001(\0132).google.api.ex"
+    "pr.v1alpha1.Expr.CreateListH\000R\010listExpr\022"
+    "N\n\013struct_expr\030\010 \001(\0132+.google.api.expr.v"
+    "1alpha1.Expr.CreateStructH\000R\nstructExpr\022"
+    "]\n\022comprehension_expr\030\t \001(\0132,.google.api"
+    ".expr.v1alpha1.Expr.ComprehensionH\000R\021com"
+    "prehensionExpr\032\033\n\005Ident\022\022\n\004name\030\001 \001(\tR\004n"
+    "ame\032u\n\006Select\0228\n\007operand\030\001 \001(\0132\036.google."
+    "api.expr.v1alpha1.ExprR\007operand\022\024\n\005field"
+    "\030\002 \001(\tR\005field\022\033\n\ttest_only\030\003 \001(\010R\010testOn"
+    "ly\032\216\001\n\004Call\0226\n\006target\030\001 \001(\0132\036.google.api"
+    ".expr.v1alpha1.ExprR\006target\022\032\n\010function\030"
+    "\002 \001(\tR\010function\0222\n\004args\030\003 \003(\0132\036.google.a"
+    "pi.expr.v1alpha1.ExprR\004args\032s\n\nCreateLis"
+    "t\022:\n\010elements\030\001 \003(\0132\036.google.api.expr.v1"
+    "alpha1.ExprR\010elements\022)\n\020optional_indice"
+    "s\030\002 \003(\005R\017optionalIndices\032\333\002\n\014CreateStruc"
+    "t\022!\n\014message_name\030\001 \001(\tR\013messageName\022K\n\007"
+    "entries\030\002 \003(\01321.google.api.expr.v1alpha1"
+    ".Expr.CreateStruct.EntryR\007entries\032\332\001\n\005En"
+    "try\022\016\n\002id\030\001 \001(\003R\002id\022\035\n\tfield_key\030\002 \001(\tH\000"
+    "R\010fieldKey\0229\n\007map_key\030\003 \001(\0132\036.google.api"
+    ".expr.v1alpha1.ExprH\000R\006mapKey\0224\n\005value\030\004"
+    " \001(\0132\036.google.api.expr.v1alpha1.ExprR\005va"
+    "lue\022%\n\016optional_entry\030\005 \001(\010R\roptionalEnt"
+    "ryB\n\n\010key_kind\032\375\002\n\rComprehension\022\031\n\010iter"
+    "_var\030\001 \001(\tR\007iterVar\022=\n\niter_range\030\002 \001(\0132"
+    "\036.google.api.expr.v1alpha1.ExprR\titerRan"
+    "ge\022\031\n\010accu_var\030\003 \001(\tR\007accuVar\022;\n\taccu_in"
+    "it\030\004 \001(\0132\036.google.api.expr.v1alpha1.Expr"
+    "R\010accuInit\022E\n\016loop_condition\030\005 \001(\0132\036.goo"
+    "gle.api.expr.v1alpha1.ExprR\rloopConditio"
+    "n\022;\n\tloop_step\030\006 \001(\0132\036.google.api.expr.v"
+    "1alpha1.ExprR\010loopStep\0226\n\006result\030\007 \001(\0132\036"
+    ".google.api.expr.v1alpha1.ExprR\006resultB\013"
+    "\n\texpr_kind\"\301\003\n\010Constant\022;\n\nnull_value\030\001"
+    " \001(\0162\032.google.protobuf.NullValueH\000R\tnull"
+    "Value\022\037\n\nbool_value\030\002 \001(\010H\000R\tboolValue\022!"
+    "\n\013int64_value\030\003 \001(\003H\000R\nint64Value\022#\n\014uin"
+    "t64_value\030\004 \001(\004H\000R\013uint64Value\022#\n\014double"
+    "_value\030\005 \001(\001H\000R\013doubleValue\022#\n\014string_va"
+    "lue\030\006 \001(\tH\000R\013stringValue\022!\n\013bytes_value\030"
+    "\007 \001(\014H\000R\nbytesValue\022F\n\016duration_value\030\010 "
+    "\001(\0132\031.google.protobuf.DurationB\002\030\001H\000R\rdu"
+    "rationValue\022I\n\017timestamp_value\030\t \001(\0132\032.g"
+    "oogle.protobuf.TimestampB\002\030\001H\000R\016timestam"
+    "pValueB\017\n\rconstant_kind\"\271\003\n\nSourceInfo\022%"
+    "\n\016syntax_version\030\001 \001(\tR\rsyntaxVersion\022\032\n"
+    "\010location\030\002 \001(\tR\010location\022!\n\014line_offset"
+    "s\030\003 \003(\005R\013lineOffsets\022Q\n\tpositions\030\004 \003(\0132"
+    "3.google.api.expr.v1alpha1.SourceInfo.Po"
+    "sitionsEntryR\tpositions\022U\n\013macro_calls\030\005"
+    " \003(\01324.google.api.expr.v1alpha1.SourceIn"
+    "fo.MacroCallsEntryR\nmacroCalls\032<\n\016Positi"
+    "onsEntry\022\020\n\003key\030\001 \001(\003R\003key\022\024\n\005value\030\002 \001("
+    "\005R\005value:\0028\001\032]\n\017MacroCallsEntry\022\020\n\003key\030\001"
+    " \001(\003R\003key\0224\n\005value\030\002 \001(\0132\036.google.api.ex"
+    "pr.v1alpha1.ExprR\005value:\0028\001\"p\n\016SourcePos"
+    "ition\022\032\n\010location\030\001 \001(\tR\010location\022\026\n\006off"
+    "set\030\002 \001(\005R\006offset\022\022\n\004line\030\003 \001(\005R\004line\022\026\n"
+    "\006column\030\004 \001(\005R\006columnB\357\001\n\034com.google.api"
+    ".expr.v1alpha1B\013SyntaxProtoP\001Z<google.go"
+    "lang.org/genproto/googleapis/api/expr/v1"
+    "alpha1;expr\370\001\001\242\002\003GAE\252\002\030Google.Api.Expr.V"
+    "1alpha1\312\002\030Google\\Api\\Expr\\V1alpha1\342\002$Goo"
+    "gle\\Api\\Expr\\V1alpha1\\GPBMetadata\352\002\033Goog"
+    "le::Api::Expr::V1alpha1b\006proto3"
+};
+static const ::_pbi::DescriptorTable* const descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_deps[3] =
+    {
+        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
+        &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
+        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
+};
+static ::absl::once_flag descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once;
+const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto = {
+    false,
+    false,
+    3271,
+    descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto,
+    "google/api/expr/v1alpha1/syntax.proto",
+    &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+    descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_deps,
+    3,
+    14,
+    schemas,
+    file_default_instances,
+    TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto::offsets,
+    file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto,
+    file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto,
+    file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto,
+};
+
+// This function exists to be marked as weak.
+// It can significantly speed up compilation by breaking up LLVM's SCC
+// in the .pb.cc translation units. Large translation units see a
+// reduction of more than 35% of walltime for optimized builds. Without
+// the weak attribute all the messages in the file, including all the
+// vtables and everything they use become part of the same SCC through
+// a cycle like:
+// GetMetadata -> descriptor table -> default instances ->
+//   vtables -> GetMetadata
+// By adding a weak function here we break the connection from the
+// individual vtables back into the descriptor table.
+PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter() {
+  return &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+}
+// Force running AddDescriptors() at dynamic initialization time.
+PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
+static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto);
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+// ===================================================================
+
+class ParsedExpr::_Internal {
+ public:
+  using HasBits = decltype(std::declval<ParsedExpr>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(ParsedExpr, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::Expr& expr(const ParsedExpr* msg);
+  static void set_has_expr(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+  static const ::google::api::expr::v1alpha1::SourceInfo& source_info(const ParsedExpr* msg);
+  static void set_has_source_info(HasBits* has_bits) {
+    (*has_bits)[0] |= 2u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Expr& ParsedExpr::_Internal::expr(const ParsedExpr* msg) {
+  return *msg->_impl_.expr_;
+}
+const ::google::api::expr::v1alpha1::SourceInfo& ParsedExpr::_Internal::source_info(const ParsedExpr* msg) {
+  return *msg->_impl_.source_info_;
+}
+ParsedExpr::ParsedExpr(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.ParsedExpr)
+}
+ParsedExpr::ParsedExpr(const ParsedExpr& from) : ::google::protobuf::Message() {
+  ParsedExpr* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.expr_){nullptr},
+      decltype(_impl_.source_info_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.expr_ = new ::google::api::expr::v1alpha1::Expr(*from._impl_.expr_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
+    _this->_impl_.source_info_ = new ::google::api::expr::v1alpha1::SourceInfo(*from._impl_.source_info_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.ParsedExpr)
+}
+inline void ParsedExpr::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.expr_){nullptr},
+      decltype(_impl_.source_info_){nullptr},
+  };
+}
+ParsedExpr::~ParsedExpr() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.ParsedExpr)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void ParsedExpr::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  if (this != internal_default_instance()) delete _impl_.expr_;
+  if (this != internal_default_instance()) delete _impl_.source_info_;
+}
+void ParsedExpr::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void ParsedExpr::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.ParsedExpr)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      ABSL_DCHECK(_impl_.expr_ != nullptr);
+      _impl_.expr_->Clear();
+    }
+    if (cached_has_bits & 0x00000002u) {
+      ABSL_DCHECK(_impl_.source_info_ != nullptr);
+      _impl_.source_info_->Clear();
+    }
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* ParsedExpr::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 2, 0, 2> ParsedExpr::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(ParsedExpr, _impl_._has_bits_),
+    0, // no _extensions_
+    3, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967289,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_ParsedExpr_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // .google.api.expr.v1alpha1.Expr expr = 2 [json_name = "expr"];
+    {::_pbi::TcParser::FastMtS1,
+     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ParsedExpr, _impl_.expr_)}},
+    // .google.api.expr.v1alpha1.SourceInfo source_info = 3 [json_name = "sourceInfo"];
+    {::_pbi::TcParser::FastMtS1,
+     {26, 1, 1, PROTOBUF_FIELD_OFFSET(ParsedExpr, _impl_.source_info_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.api.expr.v1alpha1.Expr expr = 2 [json_name = "expr"];
+    {PROTOBUF_FIELD_OFFSET(ParsedExpr, _impl_.expr_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.SourceInfo source_info = 3 [json_name = "sourceInfo"];
+    {PROTOBUF_FIELD_OFFSET(ParsedExpr, _impl_.source_info_), _Internal::kHasBitsOffset + 1, 1,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::SourceInfo>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* ParsedExpr::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.ParsedExpr)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Expr expr = 2 [json_name = "expr"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(2, _Internal::expr(this),
+        _Internal::expr(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.api.expr.v1alpha1.SourceInfo source_info = 3 [json_name = "sourceInfo"];
+  if (cached_has_bits & 0x00000002u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(3, _Internal::source_info(this),
+        _Internal::source_info(this).GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.ParsedExpr)
+  return target;
+}
+
+::size_t ParsedExpr::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.ParsedExpr)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    // .google.api.expr.v1alpha1.Expr expr = 2 [json_name = "expr"];
+    if (cached_has_bits & 0x00000001u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.expr_);
+    }
+
+    // .google.api.expr.v1alpha1.SourceInfo source_info = 3 [json_name = "sourceInfo"];
+    if (cached_has_bits & 0x00000002u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.source_info_);
+    }
+
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData ParsedExpr::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    ParsedExpr::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*ParsedExpr::GetClassData() const { return &_class_data_; }
+
+
+void ParsedExpr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<ParsedExpr*>(&to_msg);
+  auto& from = static_cast<const ParsedExpr&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.ParsedExpr)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  cached_has_bits = from._impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      _this->_internal_mutable_expr()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+          from._internal_expr());
+    }
+    if (cached_has_bits & 0x00000002u) {
+      _this->_internal_mutable_source_info()->::google::api::expr::v1alpha1::SourceInfo::MergeFrom(
+          from._internal_source_info());
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void ParsedExpr::CopyFrom(const ParsedExpr& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.ParsedExpr)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool ParsedExpr::IsInitialized() const {
+  return true;
+}
+
+void ParsedExpr::InternalSwap(ParsedExpr* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(ParsedExpr, _impl_.source_info_)
+      + sizeof(ParsedExpr::_impl_.source_info_)
+      - PROTOBUF_FIELD_OFFSET(ParsedExpr, _impl_.expr_)>(
+          reinterpret_cast<char*>(&_impl_.expr_),
+          reinterpret_cast<char*>(&other->_impl_.expr_));
+}
+
+::google::protobuf::Metadata ParsedExpr::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[0]);
+}
+// ===================================================================
+
+class Expr_Ident::_Internal {
+ public:
+};
+
+Expr_Ident::Expr_Ident(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Expr.Ident)
+}
+Expr_Ident::Expr_Ident(const Expr_Ident& from) : ::google::protobuf::Message() {
+  Expr_Ident* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.name_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_name().empty()) {
+    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Expr.Ident)
+}
+inline void Expr_Ident::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.name_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+Expr_Ident::~Expr_Ident() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Expr.Ident)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Expr_Ident::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.name_.Destroy();
+}
+void Expr_Ident::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Expr_Ident::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Expr.Ident)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.name_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Expr_Ident::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 0, 48, 2> Expr_Ident::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_Expr_Ident_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string name = 1 [json_name = "name"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_Ident, _impl_.name_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string name = 1 [json_name = "name"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Ident, _impl_.name_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }},
+  // no aux_entries
+  {{
+    "\43\4\0\0\0\0\0\0"
+    "google.api.expr.v1alpha1.Expr.Ident"
+    "name"
+  }},
+};
+
+::uint8_t* Expr_Ident::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Expr.Ident)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string name = 1 [json_name = "name"];
+  if (!this->_internal_name().empty()) {
+    const std::string& _s = this->_internal_name();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Expr.Ident.name");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Expr.Ident)
+  return target;
+}
+
+::size_t Expr_Ident::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Expr.Ident)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string name = 1 [json_name = "name"];
+  if (!this->_internal_name().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_name());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Expr_Ident::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Expr_Ident::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Expr_Ident::GetClassData() const { return &_class_data_; }
+
+
+void Expr_Ident::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Expr_Ident*>(&to_msg);
+  auto& from = static_cast<const Expr_Ident&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Expr.Ident)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_name().empty()) {
+    _this->_internal_set_name(from._internal_name());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Expr_Ident::CopyFrom(const Expr_Ident& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Expr.Ident)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Expr_Ident::IsInitialized() const {
+  return true;
+}
+
+void Expr_Ident::InternalSwap(Expr_Ident* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
+                                       &other->_impl_.name_, rhs_arena);
+}
+
+::google::protobuf::Metadata Expr_Ident::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[1]);
+}
+// ===================================================================
+
+class Expr_Select::_Internal {
+ public:
+  using HasBits = decltype(std::declval<Expr_Select>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(Expr_Select, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::Expr& operand(const Expr_Select* msg);
+  static void set_has_operand(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Expr& Expr_Select::_Internal::operand(const Expr_Select* msg) {
+  return *msg->_impl_.operand_;
+}
+Expr_Select::Expr_Select(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Expr.Select)
+}
+Expr_Select::Expr_Select(const Expr_Select& from) : ::google::protobuf::Message() {
+  Expr_Select* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.field_){},
+      decltype(_impl_.operand_){nullptr},
+      decltype(_impl_.test_only_){},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.field_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.field_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_field().empty()) {
+    _this->_impl_.field_.Set(from._internal_field(), _this->GetArenaForAllocation());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.operand_ = new ::google::api::expr::v1alpha1::Expr(*from._impl_.operand_);
+  }
+  _this->_impl_.test_only_ = from._impl_.test_only_;
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Expr.Select)
+}
+inline void Expr_Select::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.field_){},
+      decltype(_impl_.operand_){nullptr},
+      decltype(_impl_.test_only_){false},
+  };
+  _impl_.field_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.field_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+Expr_Select::~Expr_Select() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Expr.Select)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Expr_Select::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.field_.Destroy();
+  if (this != internal_default_instance()) delete _impl_.operand_;
+}
+void Expr_Select::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Expr_Select::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Expr.Select)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.field_.ClearToEmpty();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    ABSL_DCHECK(_impl_.operand_ != nullptr);
+    _impl_.operand_->Clear();
+  }
+  _impl_.test_only_ = false;
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Expr_Select::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 3, 1, 50, 2> Expr_Select::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(Expr_Select, _impl_._has_bits_),
+    0, // no _extensions_
+    3, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967288,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    3,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Expr_Select_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // .google.api.expr.v1alpha1.Expr operand = 1 [json_name = "operand"];
+    {::_pbi::TcParser::FastMtS1,
+     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Expr_Select, _impl_.operand_)}},
+    // string field = 2 [json_name = "field"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_Select, _impl_.field_)}},
+    // bool test_only = 3 [json_name = "testOnly"];
+    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Expr_Select, _impl_.test_only_), 63>(),
+     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_Select, _impl_.test_only_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.api.expr.v1alpha1.Expr operand = 1 [json_name = "operand"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Select, _impl_.operand_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // string field = 2 [json_name = "field"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Select, _impl_.field_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // bool test_only = 3 [json_name = "testOnly"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Select, _impl_.test_only_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+  }}, {{
+    "\44\0\5\0\0\0\0\0"
+    "google.api.expr.v1alpha1.Expr.Select"
+    "field"
+  }},
+};
+
+::uint8_t* Expr_Select::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Expr.Select)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Expr operand = 1 [json_name = "operand"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(1, _Internal::operand(this),
+        _Internal::operand(this).GetCachedSize(), target, stream);
+  }
+
+  // string field = 2 [json_name = "field"];
+  if (!this->_internal_field().empty()) {
+    const std::string& _s = this->_internal_field();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Expr.Select.field");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  // bool test_only = 3 [json_name = "testOnly"];
+  if (this->_internal_test_only() != 0) {
+    target = stream->EnsureSpace(target);
+    target = ::_pbi::WireFormatLite::WriteBoolToArray(
+        3, this->_internal_test_only(), target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Expr.Select)
+  return target;
+}
+
+::size_t Expr_Select::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Expr.Select)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string field = 2 [json_name = "field"];
+  if (!this->_internal_field().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_field());
+  }
+
+  // .google.api.expr.v1alpha1.Expr operand = 1 [json_name = "operand"];
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    total_size += 1 +
+      ::google::protobuf::internal::WireFormatLite::MessageSize(
+        *_impl_.operand_);
+  }
+
+  // bool test_only = 3 [json_name = "testOnly"];
+  if (this->_internal_test_only() != 0) {
+    total_size += 2;
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Expr_Select::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Expr_Select::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Expr_Select::GetClassData() const { return &_class_data_; }
+
+
+void Expr_Select::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Expr_Select*>(&to_msg);
+  auto& from = static_cast<const Expr_Select&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Expr.Select)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_field().empty()) {
+    _this->_internal_set_field(from._internal_field());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_internal_mutable_operand()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+        from._internal_operand());
+  }
+  if (from._internal_test_only() != 0) {
+    _this->_internal_set_test_only(from._internal_test_only());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Expr_Select::CopyFrom(const Expr_Select& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Expr.Select)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Expr_Select::IsInitialized() const {
+  return true;
+}
+
+void Expr_Select::InternalSwap(Expr_Select* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.field_, lhs_arena,
+                                       &other->_impl_.field_, rhs_arena);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(Expr_Select, _impl_.test_only_)
+      + sizeof(Expr_Select::_impl_.test_only_)
+      - PROTOBUF_FIELD_OFFSET(Expr_Select, _impl_.operand_)>(
+          reinterpret_cast<char*>(&_impl_.operand_),
+          reinterpret_cast<char*>(&other->_impl_.operand_));
+}
+
+::google::protobuf::Metadata Expr_Select::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[2]);
+}
+// ===================================================================
+
+class Expr_Call::_Internal {
+ public:
+  using HasBits = decltype(std::declval<Expr_Call>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(Expr_Call, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::Expr& target(const Expr_Call* msg);
+  static void set_has_target(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Expr& Expr_Call::_Internal::target(const Expr_Call* msg) {
+  return *msg->_impl_.target_;
+}
+Expr_Call::Expr_Call(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Expr.Call)
+}
+Expr_Call::Expr_Call(const Expr_Call& from) : ::google::protobuf::Message() {
+  Expr_Call* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.args_){from._impl_.args_},
+      decltype(_impl_.function_){},
+      decltype(_impl_.target_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.function_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.function_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_function().empty()) {
+    _this->_impl_.function_.Set(from._internal_function(), _this->GetArenaForAllocation());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.target_ = new ::google::api::expr::v1alpha1::Expr(*from._impl_.target_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Expr.Call)
+}
+inline void Expr_Call::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.args_){arena},
+      decltype(_impl_.function_){},
+      decltype(_impl_.target_){nullptr},
+  };
+  _impl_.function_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.function_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+Expr_Call::~Expr_Call() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Expr.Call)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Expr_Call::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.args_.~RepeatedPtrField();
+  _impl_.function_.Destroy();
+  if (this != internal_default_instance()) delete _impl_.target_;
+}
+void Expr_Call::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Expr_Call::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Expr.Call)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_args()->Clear();
+  _impl_.function_.ClearToEmpty();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    ABSL_DCHECK(_impl_.target_ != nullptr);
+    _impl_.target_->Clear();
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Expr_Call::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 3, 2, 51, 2> Expr_Call::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(Expr_Call, _impl_._has_bits_),
+    0, // no _extensions_
+    3, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967288,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    3,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Expr_Call_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // .google.api.expr.v1alpha1.Expr target = 1 [json_name = "target"];
+    {::_pbi::TcParser::FastMtS1,
+     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Expr_Call, _impl_.target_)}},
+    // string function = 2 [json_name = "function"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_Call, _impl_.function_)}},
+    // repeated .google.api.expr.v1alpha1.Expr args = 3 [json_name = "args"];
+    {::_pbi::TcParser::FastMtR1,
+     {26, 63, 1, PROTOBUF_FIELD_OFFSET(Expr_Call, _impl_.args_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.api.expr.v1alpha1.Expr target = 1 [json_name = "target"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Call, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // string function = 2 [json_name = "function"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Call, _impl_.function_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // repeated .google.api.expr.v1alpha1.Expr args = 3 [json_name = "args"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Call, _impl_.args_), -1, 1,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+  }}, {{
+    "\42\0\10\0\0\0\0\0"
+    "google.api.expr.v1alpha1.Expr.Call"
+    "function"
+  }},
+};
+
+::uint8_t* Expr_Call::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Expr.Call)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Expr target = 1 [json_name = "target"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(1, _Internal::target(this),
+        _Internal::target(this).GetCachedSize(), target, stream);
+  }
+
+  // string function = 2 [json_name = "function"];
+  if (!this->_internal_function().empty()) {
+    const std::string& _s = this->_internal_function();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Expr.Call.function");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  // repeated .google.api.expr.v1alpha1.Expr args = 3 [json_name = "args"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_args_size()); i < n; i++) {
+    const auto& repfield = this->_internal_args().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Expr.Call)
+  return target;
+}
+
+::size_t Expr_Call::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Expr.Call)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Expr args = 3 [json_name = "args"];
+  total_size += 1UL * this->_internal_args_size();
+  for (const auto& msg : this->_internal_args()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  // string function = 2 [json_name = "function"];
+  if (!this->_internal_function().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_function());
+  }
+
+  // .google.api.expr.v1alpha1.Expr target = 1 [json_name = "target"];
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    total_size += 1 +
+      ::google::protobuf::internal::WireFormatLite::MessageSize(
+        *_impl_.target_);
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Expr_Call::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Expr_Call::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Expr_Call::GetClassData() const { return &_class_data_; }
+
+
+void Expr_Call::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Expr_Call*>(&to_msg);
+  auto& from = static_cast<const Expr_Call&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Expr.Call)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_args()->MergeFrom(from._internal_args());
+  if (!from._internal_function().empty()) {
+    _this->_internal_set_function(from._internal_function());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_internal_mutable_target()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+        from._internal_target());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Expr_Call::CopyFrom(const Expr_Call& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Expr.Call)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Expr_Call::IsInitialized() const {
+  return true;
+}
+
+void Expr_Call::InternalSwap(Expr_Call* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  _impl_.args_.InternalSwap(&other->_impl_.args_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.function_, lhs_arena,
+                                       &other->_impl_.function_, rhs_arena);
+  swap(_impl_.target_, other->_impl_.target_);
+}
+
+::google::protobuf::Metadata Expr_Call::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[3]);
+}
+// ===================================================================
+
+class Expr_CreateList::_Internal {
+ public:
+};
+
+Expr_CreateList::Expr_CreateList(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Expr.CreateList)
+}
+Expr_CreateList::Expr_CreateList(const Expr_CreateList& from) : ::google::protobuf::Message() {
+  Expr_CreateList* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.elements_){from._impl_.elements_},
+      decltype(_impl_.optional_indices_){from._impl_.optional_indices_},
+      /* _impl_._optional_indices_cached_byte_size_ = */ {0},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Expr.CreateList)
+}
+inline void Expr_CreateList::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.elements_){arena},
+      decltype(_impl_.optional_indices_){arena},
+      /* _impl_._optional_indices_cached_byte_size_ = */ {0},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+Expr_CreateList::~Expr_CreateList() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Expr.CreateList)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Expr_CreateList::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.elements_.~RepeatedPtrField();
+  _impl_.optional_indices_.~RepeatedField();
+}
+void Expr_CreateList::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Expr_CreateList::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Expr.CreateList)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_elements()->Clear();
+  _internal_mutable_optional_indices()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Expr_CreateList::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Expr_CreateList::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Expr_CreateList_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated int32 optional_indices = 2 [json_name = "optionalIndices"];
+    {::_pbi::TcParser::FastV32P1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_CreateList, _impl_.optional_indices_)}},
+    // repeated .google.api.expr.v1alpha1.Expr elements = 1 [json_name = "elements"];
+    {::_pbi::TcParser::FastMtR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_CreateList, _impl_.elements_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated .google.api.expr.v1alpha1.Expr elements = 1 [json_name = "elements"];
+    {PROTOBUF_FIELD_OFFSET(Expr_CreateList, _impl_.elements_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+    // repeated int32 optional_indices = 2 [json_name = "optionalIndices"];
+    {PROTOBUF_FIELD_OFFSET(Expr_CreateList, _impl_.optional_indices_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* Expr_CreateList::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Expr.CreateList)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Expr elements = 1 [json_name = "elements"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_elements_size()); i < n; i++) {
+    const auto& repfield = this->_internal_elements().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  // repeated int32 optional_indices = 2 [json_name = "optionalIndices"];
+  {
+    int byte_size = _impl_._optional_indices_cached_byte_size_.Get();
+    if (byte_size > 0) {
+      target = stream->WriteInt32Packed(2, _internal_optional_indices(),
+                                                 byte_size, target);
+    }
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Expr.CreateList)
+  return target;
+}
+
+::size_t Expr_CreateList::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Expr.CreateList)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Expr elements = 1 [json_name = "elements"];
+  total_size += 1UL * this->_internal_elements_size();
+  for (const auto& msg : this->_internal_elements()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  // repeated int32 optional_indices = 2 [json_name = "optionalIndices"];
+  {
+    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
+        this->_internal_optional_indices())
+    ;
+    _impl_._optional_indices_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
+    std::size_t tag_size = data_size == 0
+        ? 0
+        : 1 + ::_pbi::WireFormatLite::Int32Size(
+                            static_cast<int32_t>(data_size))
+    ;
+    total_size += tag_size + data_size;
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Expr_CreateList::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Expr_CreateList::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Expr_CreateList::GetClassData() const { return &_class_data_; }
+
+
+void Expr_CreateList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Expr_CreateList*>(&to_msg);
+  auto& from = static_cast<const Expr_CreateList&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Expr.CreateList)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_elements()->MergeFrom(from._internal_elements());
+  _this->_internal_mutable_optional_indices()->MergeFrom(from._internal_optional_indices());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Expr_CreateList::CopyFrom(const Expr_CreateList& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Expr.CreateList)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Expr_CreateList::IsInitialized() const {
+  return true;
+}
+
+void Expr_CreateList::InternalSwap(Expr_CreateList* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.elements_.InternalSwap(&other->_impl_.elements_);
+  _impl_.optional_indices_.InternalSwap(&other->_impl_.optional_indices_);
+}
+
+::google::protobuf::Metadata Expr_CreateList::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[4]);
+}
+// ===================================================================
+
+class Expr_CreateStruct_Entry::_Internal {
+ public:
+  using HasBits = decltype(std::declval<Expr_CreateStruct_Entry>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_._has_bits_);
+  static constexpr ::int32_t kOneofCaseOffset =
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr_CreateStruct_Entry, _impl_._oneof_case_);
+  static const ::google::api::expr::v1alpha1::Expr& map_key(const Expr_CreateStruct_Entry* msg);
+  static const ::google::api::expr::v1alpha1::Expr& value(const Expr_CreateStruct_Entry* msg);
+  static void set_has_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Expr& Expr_CreateStruct_Entry::_Internal::map_key(const Expr_CreateStruct_Entry* msg) {
+  return *msg->_impl_.key_kind_.map_key_;
+}
+const ::google::api::expr::v1alpha1::Expr& Expr_CreateStruct_Entry::_Internal::value(const Expr_CreateStruct_Entry* msg) {
+  return *msg->_impl_.value_;
+}
+void Expr_CreateStruct_Entry::set_allocated_map_key(::google::api::expr::v1alpha1::Expr* map_key) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_key_kind();
+  if (map_key) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(map_key);
+    if (message_arena != submessage_arena) {
+      map_key = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, map_key, submessage_arena);
+    }
+    set_has_map_key();
+    _impl_.key_kind_.map_key_ = map_key;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.map_key)
+}
+Expr_CreateStruct_Entry::Expr_CreateStruct_Entry(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
+}
+Expr_CreateStruct_Entry::Expr_CreateStruct_Entry(const Expr_CreateStruct_Entry& from) : ::google::protobuf::Message() {
+  Expr_CreateStruct_Entry* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.value_){nullptr},
+      decltype(_impl_.id_){},
+      decltype(_impl_.optional_entry_){},
+      decltype(_impl_.key_kind_){},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.value_ = new ::google::api::expr::v1alpha1::Expr(*from._impl_.value_);
+  }
+  ::memcpy(&_impl_.id_, &from._impl_.id_,
+    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.optional_entry_) -
+    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.optional_entry_));
+  clear_has_key_kind();
+  switch (from.key_kind_case()) {
+    case kFieldKey: {
+      _this->_internal_set_field_key(from._internal_field_key());
+      break;
+    }
+    case kMapKey: {
+      _this->_internal_mutable_map_key()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+          from._internal_map_key());
+      break;
+    }
+    case KEY_KIND_NOT_SET: {
+      break;
+    }
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
+}
+inline void Expr_CreateStruct_Entry::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.value_){nullptr},
+      decltype(_impl_.id_){::int64_t{0}},
+      decltype(_impl_.optional_entry_){false},
+      decltype(_impl_.key_kind_){},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  clear_has_key_kind();
+}
+Expr_CreateStruct_Entry::~Expr_CreateStruct_Entry() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Expr_CreateStruct_Entry::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  if (this != internal_default_instance()) delete _impl_.value_;
+  if (has_key_kind()) {
+    clear_key_kind();
+  }
+}
+void Expr_CreateStruct_Entry::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+void Expr_CreateStruct_Entry::clear_key_kind() {
+// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
+  switch (key_kind_case()) {
+    case kFieldKey: {
+      _impl_.key_kind_.field_key_.Destroy();
+      break;
+    }
+    case kMapKey: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.key_kind_.map_key_;
+      }
+      break;
+    }
+    case KEY_KIND_NOT_SET: {
+      break;
+    }
+  }
+  _impl_._oneof_case_[0] = KEY_KIND_NOT_SET;
+}
+
+
+PROTOBUF_NOINLINE void Expr_CreateStruct_Entry::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    ABSL_DCHECK(_impl_.value_ != nullptr);
+    _impl_.value_->Clear();
+  }
+  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
+      reinterpret_cast<char*>(&_impl_.optional_entry_) -
+      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.optional_entry_));
+  clear_key_kind();
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Expr_CreateStruct_Entry::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<3, 5, 2, 66, 2> Expr_CreateStruct_Entry::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_._has_bits_),
+    0, // no _extensions_
+    5, 56,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967264,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    5,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Expr_CreateStruct_Entry_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // int64 id = 1 [json_name = "id"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Expr_CreateStruct_Entry, _impl_.id_), 63>(),
+     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_.id_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    {::_pbi::TcParser::MiniParse, {}},
+    // .google.api.expr.v1alpha1.Expr value = 4 [json_name = "value"];
+    {::_pbi::TcParser::FastMtS1,
+     {34, 0, 1, PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_.value_)}},
+    // bool optional_entry = 5 [json_name = "optionalEntry"];
+    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Expr_CreateStruct_Entry, _impl_.optional_entry_), 63>(),
+     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_.optional_entry_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    {::_pbi::TcParser::MiniParse, {}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // int64 id = 1 [json_name = "id"];
+    {PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_.id_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
+    // string field_key = 2 [json_name = "fieldKey"];
+    {PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_.key_kind_.field_key_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // .google.api.expr.v1alpha1.Expr map_key = 3 [json_name = "mapKey"];
+    {PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_.key_kind_.map_key_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Expr value = 4 [json_name = "value"];
+    {PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_.value_), _Internal::kHasBitsOffset + 0, 1,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // bool optional_entry = 5 [json_name = "optionalEntry"];
+    {PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_.optional_entry_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+  }}, {{
+    "\60\0\11\0\0\0\0\0"
+    "google.api.expr.v1alpha1.Expr.CreateStruct.Entry"
+    "field_key"
+  }},
+};
+
+::uint8_t* Expr_CreateStruct_Entry::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // int64 id = 1 [json_name = "id"];
+  if (this->_internal_id() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt64ToArrayWithField<1>(
+            stream, this->_internal_id(), target);
+  }
+
+  switch (key_kind_case()) {
+    case kFieldKey: {
+      const std::string& _s = this->_internal_field_key();
+      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Expr.CreateStruct.Entry.field_key");
+      target = stream->WriteStringMaybeAliased(2, _s, target);
+      break;
+    }
+    case kMapKey: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(3, _Internal::map_key(this),
+          _Internal::map_key(this).GetCachedSize(), target, stream);
+      break;
+    }
+    default:
+      break;
+  }
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Expr value = 4 [json_name = "value"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(4, _Internal::value(this),
+        _Internal::value(this).GetCachedSize(), target, stream);
+  }
+
+  // bool optional_entry = 5 [json_name = "optionalEntry"];
+  if (this->_internal_optional_entry() != 0) {
+    target = stream->EnsureSpace(target);
+    target = ::_pbi::WireFormatLite::WriteBoolToArray(
+        5, this->_internal_optional_entry(), target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
+  return target;
+}
+
+::size_t Expr_CreateStruct_Entry::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // .google.api.expr.v1alpha1.Expr value = 4 [json_name = "value"];
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    total_size += 1 +
+      ::google::protobuf::internal::WireFormatLite::MessageSize(
+        *_impl_.value_);
+  }
+
+  // int64 id = 1 [json_name = "id"];
+  if (this->_internal_id() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+        this->_internal_id());
+  }
+
+  // bool optional_entry = 5 [json_name = "optionalEntry"];
+  if (this->_internal_optional_entry() != 0) {
+    total_size += 2;
+  }
+
+  switch (key_kind_case()) {
+    // string field_key = 2 [json_name = "fieldKey"];
+    case kFieldKey: {
+      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                      this->_internal_field_key());
+      break;
+    }
+    // .google.api.expr.v1alpha1.Expr map_key = 3 [json_name = "mapKey"];
+    case kMapKey: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.key_kind_.map_key_);
+      break;
+    }
+    case KEY_KIND_NOT_SET: {
+      break;
+    }
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Expr_CreateStruct_Entry::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Expr_CreateStruct_Entry::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Expr_CreateStruct_Entry::GetClassData() const { return &_class_data_; }
+
+
+void Expr_CreateStruct_Entry::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Expr_CreateStruct_Entry*>(&to_msg);
+  auto& from = static_cast<const Expr_CreateStruct_Entry&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_internal_mutable_value()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+        from._internal_value());
+  }
+  if (from._internal_id() != 0) {
+    _this->_internal_set_id(from._internal_id());
+  }
+  if (from._internal_optional_entry() != 0) {
+    _this->_internal_set_optional_entry(from._internal_optional_entry());
+  }
+  switch (from.key_kind_case()) {
+    case kFieldKey: {
+      _this->_internal_set_field_key(from._internal_field_key());
+      break;
+    }
+    case kMapKey: {
+      _this->_internal_mutable_map_key()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+          from._internal_map_key());
+      break;
+    }
+    case KEY_KIND_NOT_SET: {
+      break;
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Expr_CreateStruct_Entry::CopyFrom(const Expr_CreateStruct_Entry& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Expr_CreateStruct_Entry::IsInitialized() const {
+  return true;
+}
+
+void Expr_CreateStruct_Entry::InternalSwap(Expr_CreateStruct_Entry* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_.optional_entry_)
+      + sizeof(Expr_CreateStruct_Entry::_impl_.optional_entry_)
+      - PROTOBUF_FIELD_OFFSET(Expr_CreateStruct_Entry, _impl_.value_)>(
+          reinterpret_cast<char*>(&_impl_.value_),
+          reinterpret_cast<char*>(&other->_impl_.value_));
+  swap(_impl_.key_kind_, other->_impl_.key_kind_);
+  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
+}
+
+::google::protobuf::Metadata Expr_CreateStruct_Entry::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[5]);
+}
+// ===================================================================
+
+class Expr_CreateStruct::_Internal {
+ public:
+};
+
+Expr_CreateStruct::Expr_CreateStruct(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Expr.CreateStruct)
+}
+Expr_CreateStruct::Expr_CreateStruct(const Expr_CreateStruct& from) : ::google::protobuf::Message() {
+  Expr_CreateStruct* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.entries_){from._impl_.entries_},
+      decltype(_impl_.message_name_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.message_name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.message_name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_message_name().empty()) {
+    _this->_impl_.message_name_.Set(from._internal_message_name(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Expr.CreateStruct)
+}
+inline void Expr_CreateStruct::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.entries_){arena},
+      decltype(_impl_.message_name_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.message_name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.message_name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+Expr_CreateStruct::~Expr_CreateStruct() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Expr.CreateStruct)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Expr_CreateStruct::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.entries_.~RepeatedPtrField();
+  _impl_.message_name_.Destroy();
+}
+void Expr_CreateStruct::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Expr_CreateStruct::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Expr.CreateStruct)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_entries()->Clear();
+  _impl_.message_name_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Expr_CreateStruct::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 1, 63, 2> Expr_CreateStruct::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Expr_CreateStruct_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.api.expr.v1alpha1.Expr.CreateStruct.Entry entries = 2 [json_name = "entries"];
+    {::_pbi::TcParser::FastMtR1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_CreateStruct, _impl_.entries_)}},
+    // string message_name = 1 [json_name = "messageName"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_CreateStruct, _impl_.message_name_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string message_name = 1 [json_name = "messageName"];
+    {PROTOBUF_FIELD_OFFSET(Expr_CreateStruct, _impl_.message_name_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // repeated .google.api.expr.v1alpha1.Expr.CreateStruct.Entry entries = 2 [json_name = "entries"];
+    {PROTOBUF_FIELD_OFFSET(Expr_CreateStruct, _impl_.entries_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr_CreateStruct_Entry>()},
+  }}, {{
+    "\52\14\0\0\0\0\0\0"
+    "google.api.expr.v1alpha1.Expr.CreateStruct"
+    "message_name"
+  }},
+};
+
+::uint8_t* Expr_CreateStruct::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Expr.CreateStruct)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string message_name = 1 [json_name = "messageName"];
+  if (!this->_internal_message_name().empty()) {
+    const std::string& _s = this->_internal_message_name();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Expr.CreateStruct.message_name");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // repeated .google.api.expr.v1alpha1.Expr.CreateStruct.Entry entries = 2 [json_name = "entries"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
+    const auto& repfield = this->_internal_entries().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Expr.CreateStruct)
+  return target;
+}
+
+::size_t Expr_CreateStruct::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Expr.CreateStruct)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Expr.CreateStruct.Entry entries = 2 [json_name = "entries"];
+  total_size += 1UL * this->_internal_entries_size();
+  for (const auto& msg : this->_internal_entries()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  // string message_name = 1 [json_name = "messageName"];
+  if (!this->_internal_message_name().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_message_name());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Expr_CreateStruct::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Expr_CreateStruct::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Expr_CreateStruct::GetClassData() const { return &_class_data_; }
+
+
+void Expr_CreateStruct::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Expr_CreateStruct*>(&to_msg);
+  auto& from = static_cast<const Expr_CreateStruct&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Expr.CreateStruct)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_entries()->MergeFrom(from._internal_entries());
+  if (!from._internal_message_name().empty()) {
+    _this->_internal_set_message_name(from._internal_message_name());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Expr_CreateStruct::CopyFrom(const Expr_CreateStruct& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Expr.CreateStruct)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Expr_CreateStruct::IsInitialized() const {
+  return true;
+}
+
+void Expr_CreateStruct::InternalSwap(Expr_CreateStruct* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_name_, lhs_arena,
+                                       &other->_impl_.message_name_, rhs_arena);
+}
+
+::google::protobuf::Metadata Expr_CreateStruct::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[6]);
+}
+// ===================================================================
+
+class Expr_Comprehension::_Internal {
+ public:
+  using HasBits = decltype(std::declval<Expr_Comprehension>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::Expr& iter_range(const Expr_Comprehension* msg);
+  static void set_has_iter_range(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+  static const ::google::api::expr::v1alpha1::Expr& accu_init(const Expr_Comprehension* msg);
+  static void set_has_accu_init(HasBits* has_bits) {
+    (*has_bits)[0] |= 2u;
+  }
+  static const ::google::api::expr::v1alpha1::Expr& loop_condition(const Expr_Comprehension* msg);
+  static void set_has_loop_condition(HasBits* has_bits) {
+    (*has_bits)[0] |= 4u;
+  }
+  static const ::google::api::expr::v1alpha1::Expr& loop_step(const Expr_Comprehension* msg);
+  static void set_has_loop_step(HasBits* has_bits) {
+    (*has_bits)[0] |= 8u;
+  }
+  static const ::google::api::expr::v1alpha1::Expr& result(const Expr_Comprehension* msg);
+  static void set_has_result(HasBits* has_bits) {
+    (*has_bits)[0] |= 16u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_Internal::iter_range(const Expr_Comprehension* msg) {
+  return *msg->_impl_.iter_range_;
+}
+const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_Internal::accu_init(const Expr_Comprehension* msg) {
+  return *msg->_impl_.accu_init_;
+}
+const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_Internal::loop_condition(const Expr_Comprehension* msg) {
+  return *msg->_impl_.loop_condition_;
+}
+const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_Internal::loop_step(const Expr_Comprehension* msg) {
+  return *msg->_impl_.loop_step_;
+}
+const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_Internal::result(const Expr_Comprehension* msg) {
+  return *msg->_impl_.result_;
+}
+Expr_Comprehension::Expr_Comprehension(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Expr.Comprehension)
+}
+Expr_Comprehension::Expr_Comprehension(const Expr_Comprehension& from) : ::google::protobuf::Message() {
+  Expr_Comprehension* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.iter_var_){},
+      decltype(_impl_.accu_var_){},
+      decltype(_impl_.iter_range_){nullptr},
+      decltype(_impl_.accu_init_){nullptr},
+      decltype(_impl_.loop_condition_){nullptr},
+      decltype(_impl_.loop_step_){nullptr},
+      decltype(_impl_.result_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.iter_var_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.iter_var_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_iter_var().empty()) {
+    _this->_impl_.iter_var_.Set(from._internal_iter_var(), _this->GetArenaForAllocation());
+  }
+  _impl_.accu_var_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.accu_var_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_accu_var().empty()) {
+    _this->_impl_.accu_var_.Set(from._internal_accu_var(), _this->GetArenaForAllocation());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.iter_range_ = new ::google::api::expr::v1alpha1::Expr(*from._impl_.iter_range_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
+    _this->_impl_.accu_init_ = new ::google::api::expr::v1alpha1::Expr(*from._impl_.accu_init_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
+    _this->_impl_.loop_condition_ = new ::google::api::expr::v1alpha1::Expr(*from._impl_.loop_condition_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
+    _this->_impl_.loop_step_ = new ::google::api::expr::v1alpha1::Expr(*from._impl_.loop_step_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
+    _this->_impl_.result_ = new ::google::api::expr::v1alpha1::Expr(*from._impl_.result_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Expr.Comprehension)
+}
+inline void Expr_Comprehension::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.iter_var_){},
+      decltype(_impl_.accu_var_){},
+      decltype(_impl_.iter_range_){nullptr},
+      decltype(_impl_.accu_init_){nullptr},
+      decltype(_impl_.loop_condition_){nullptr},
+      decltype(_impl_.loop_step_){nullptr},
+      decltype(_impl_.result_){nullptr},
+  };
+  _impl_.iter_var_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.iter_var_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.accu_var_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.accu_var_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+Expr_Comprehension::~Expr_Comprehension() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Expr.Comprehension)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Expr_Comprehension::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.iter_var_.Destroy();
+  _impl_.accu_var_.Destroy();
+  if (this != internal_default_instance()) delete _impl_.iter_range_;
+  if (this != internal_default_instance()) delete _impl_.accu_init_;
+  if (this != internal_default_instance()) delete _impl_.loop_condition_;
+  if (this != internal_default_instance()) delete _impl_.loop_step_;
+  if (this != internal_default_instance()) delete _impl_.result_;
+}
+void Expr_Comprehension::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Expr_Comprehension::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Expr.Comprehension)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.iter_var_.ClearToEmpty();
+  _impl_.accu_var_.ClearToEmpty();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x0000001fu) {
+    if (cached_has_bits & 0x00000001u) {
+      ABSL_DCHECK(_impl_.iter_range_ != nullptr);
+      _impl_.iter_range_->Clear();
+    }
+    if (cached_has_bits & 0x00000002u) {
+      ABSL_DCHECK(_impl_.accu_init_ != nullptr);
+      _impl_.accu_init_->Clear();
+    }
+    if (cached_has_bits & 0x00000004u) {
+      ABSL_DCHECK(_impl_.loop_condition_ != nullptr);
+      _impl_.loop_condition_->Clear();
+    }
+    if (cached_has_bits & 0x00000008u) {
+      ABSL_DCHECK(_impl_.loop_step_ != nullptr);
+      _impl_.loop_step_->Clear();
+    }
+    if (cached_has_bits & 0x00000010u) {
+      ABSL_DCHECK(_impl_.result_ != nullptr);
+      _impl_.result_->Clear();
+    }
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Expr_Comprehension::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<3, 7, 5, 68, 2> Expr_Comprehension::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_._has_bits_),
+    0, // no _extensions_
+    7, 56,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967168,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    7,  // num_field_entries
+    5,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Expr_Comprehension_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // string iter_var = 1 [json_name = "iterVar"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.iter_var_)}},
+    // .google.api.expr.v1alpha1.Expr iter_range = 2 [json_name = "iterRange"];
+    {::_pbi::TcParser::FastMtS1,
+     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.iter_range_)}},
+    // string accu_var = 3 [json_name = "accuVar"];
+    {::_pbi::TcParser::FastUS1,
+     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.accu_var_)}},
+    // .google.api.expr.v1alpha1.Expr accu_init = 4 [json_name = "accuInit"];
+    {::_pbi::TcParser::FastMtS1,
+     {34, 1, 1, PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.accu_init_)}},
+    // .google.api.expr.v1alpha1.Expr loop_condition = 5 [json_name = "loopCondition"];
+    {::_pbi::TcParser::FastMtS1,
+     {42, 2, 2, PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.loop_condition_)}},
+    // .google.api.expr.v1alpha1.Expr loop_step = 6 [json_name = "loopStep"];
+    {::_pbi::TcParser::FastMtS1,
+     {50, 3, 3, PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.loop_step_)}},
+    // .google.api.expr.v1alpha1.Expr result = 7 [json_name = "result"];
+    {::_pbi::TcParser::FastMtS1,
+     {58, 4, 4, PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.result_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string iter_var = 1 [json_name = "iterVar"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.iter_var_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // .google.api.expr.v1alpha1.Expr iter_range = 2 [json_name = "iterRange"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.iter_range_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // string accu_var = 3 [json_name = "accuVar"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.accu_var_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // .google.api.expr.v1alpha1.Expr accu_init = 4 [json_name = "accuInit"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.accu_init_), _Internal::kHasBitsOffset + 1, 1,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Expr loop_condition = 5 [json_name = "loopCondition"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.loop_condition_), _Internal::kHasBitsOffset + 2, 2,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Expr loop_step = 6 [json_name = "loopStep"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.loop_step_), _Internal::kHasBitsOffset + 3, 3,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Expr result = 7 [json_name = "result"];
+    {PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.result_), _Internal::kHasBitsOffset + 4, 4,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr>()},
+  }}, {{
+    "\53\10\0\10\0\0\0\0"
+    "google.api.expr.v1alpha1.Expr.Comprehension"
+    "iter_var"
+    "accu_var"
+  }},
+};
+
+::uint8_t* Expr_Comprehension::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Expr.Comprehension)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string iter_var = 1 [json_name = "iterVar"];
+  if (!this->_internal_iter_var().empty()) {
+    const std::string& _s = this->_internal_iter_var();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Expr.Comprehension.iter_var");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Expr iter_range = 2 [json_name = "iterRange"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(2, _Internal::iter_range(this),
+        _Internal::iter_range(this).GetCachedSize(), target, stream);
+  }
+
+  // string accu_var = 3 [json_name = "accuVar"];
+  if (!this->_internal_accu_var().empty()) {
+    const std::string& _s = this->_internal_accu_var();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Expr.Comprehension.accu_var");
+    target = stream->WriteStringMaybeAliased(3, _s, target);
+  }
+
+  // .google.api.expr.v1alpha1.Expr accu_init = 4 [json_name = "accuInit"];
+  if (cached_has_bits & 0x00000002u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(4, _Internal::accu_init(this),
+        _Internal::accu_init(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.api.expr.v1alpha1.Expr loop_condition = 5 [json_name = "loopCondition"];
+  if (cached_has_bits & 0x00000004u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(5, _Internal::loop_condition(this),
+        _Internal::loop_condition(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.api.expr.v1alpha1.Expr loop_step = 6 [json_name = "loopStep"];
+  if (cached_has_bits & 0x00000008u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(6, _Internal::loop_step(this),
+        _Internal::loop_step(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.api.expr.v1alpha1.Expr result = 7 [json_name = "result"];
+  if (cached_has_bits & 0x00000010u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(7, _Internal::result(this),
+        _Internal::result(this).GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Expr.Comprehension)
+  return target;
+}
+
+::size_t Expr_Comprehension::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Expr.Comprehension)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string iter_var = 1 [json_name = "iterVar"];
+  if (!this->_internal_iter_var().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_iter_var());
+  }
+
+  // string accu_var = 3 [json_name = "accuVar"];
+  if (!this->_internal_accu_var().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_accu_var());
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x0000001fu) {
+    // .google.api.expr.v1alpha1.Expr iter_range = 2 [json_name = "iterRange"];
+    if (cached_has_bits & 0x00000001u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.iter_range_);
+    }
+
+    // .google.api.expr.v1alpha1.Expr accu_init = 4 [json_name = "accuInit"];
+    if (cached_has_bits & 0x00000002u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.accu_init_);
+    }
+
+    // .google.api.expr.v1alpha1.Expr loop_condition = 5 [json_name = "loopCondition"];
+    if (cached_has_bits & 0x00000004u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.loop_condition_);
+    }
+
+    // .google.api.expr.v1alpha1.Expr loop_step = 6 [json_name = "loopStep"];
+    if (cached_has_bits & 0x00000008u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.loop_step_);
+    }
+
+    // .google.api.expr.v1alpha1.Expr result = 7 [json_name = "result"];
+    if (cached_has_bits & 0x00000010u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.result_);
+    }
+
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Expr_Comprehension::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Expr_Comprehension::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Expr_Comprehension::GetClassData() const { return &_class_data_; }
+
+
+void Expr_Comprehension::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Expr_Comprehension*>(&to_msg);
+  auto& from = static_cast<const Expr_Comprehension&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Expr.Comprehension)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_iter_var().empty()) {
+    _this->_internal_set_iter_var(from._internal_iter_var());
+  }
+  if (!from._internal_accu_var().empty()) {
+    _this->_internal_set_accu_var(from._internal_accu_var());
+  }
+  cached_has_bits = from._impl_._has_bits_[0];
+  if (cached_has_bits & 0x0000001fu) {
+    if (cached_has_bits & 0x00000001u) {
+      _this->_internal_mutable_iter_range()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+          from._internal_iter_range());
+    }
+    if (cached_has_bits & 0x00000002u) {
+      _this->_internal_mutable_accu_init()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+          from._internal_accu_init());
+    }
+    if (cached_has_bits & 0x00000004u) {
+      _this->_internal_mutable_loop_condition()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+          from._internal_loop_condition());
+    }
+    if (cached_has_bits & 0x00000008u) {
+      _this->_internal_mutable_loop_step()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+          from._internal_loop_step());
+    }
+    if (cached_has_bits & 0x00000010u) {
+      _this->_internal_mutable_result()->::google::api::expr::v1alpha1::Expr::MergeFrom(
+          from._internal_result());
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Expr_Comprehension::CopyFrom(const Expr_Comprehension& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Expr.Comprehension)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Expr_Comprehension::IsInitialized() const {
+  return true;
+}
+
+void Expr_Comprehension::InternalSwap(Expr_Comprehension* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.iter_var_, lhs_arena,
+                                       &other->_impl_.iter_var_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.accu_var_, lhs_arena,
+                                       &other->_impl_.accu_var_, rhs_arena);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.result_)
+      + sizeof(Expr_Comprehension::_impl_.result_)
+      - PROTOBUF_FIELD_OFFSET(Expr_Comprehension, _impl_.iter_range_)>(
+          reinterpret_cast<char*>(&_impl_.iter_range_),
+          reinterpret_cast<char*>(&other->_impl_.iter_range_));
+}
+
+::google::protobuf::Metadata Expr_Comprehension::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[7]);
+}
+// ===================================================================
+
+class Expr::_Internal {
+ public:
+  static constexpr ::int32_t kOneofCaseOffset =
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Expr, _impl_._oneof_case_);
+  static const ::google::api::expr::v1alpha1::Constant& const_expr(const Expr* msg);
+  static const ::google::api::expr::v1alpha1::Expr_Ident& ident_expr(const Expr* msg);
+  static const ::google::api::expr::v1alpha1::Expr_Select& select_expr(const Expr* msg);
+  static const ::google::api::expr::v1alpha1::Expr_Call& call_expr(const Expr* msg);
+  static const ::google::api::expr::v1alpha1::Expr_CreateList& list_expr(const Expr* msg);
+  static const ::google::api::expr::v1alpha1::Expr_CreateStruct& struct_expr(const Expr* msg);
+  static const ::google::api::expr::v1alpha1::Expr_Comprehension& comprehension_expr(const Expr* msg);
+};
+
+const ::google::api::expr::v1alpha1::Constant& Expr::_Internal::const_expr(const Expr* msg) {
+  return *msg->_impl_.expr_kind_.const_expr_;
+}
+const ::google::api::expr::v1alpha1::Expr_Ident& Expr::_Internal::ident_expr(const Expr* msg) {
+  return *msg->_impl_.expr_kind_.ident_expr_;
+}
+const ::google::api::expr::v1alpha1::Expr_Select& Expr::_Internal::select_expr(const Expr* msg) {
+  return *msg->_impl_.expr_kind_.select_expr_;
+}
+const ::google::api::expr::v1alpha1::Expr_Call& Expr::_Internal::call_expr(const Expr* msg) {
+  return *msg->_impl_.expr_kind_.call_expr_;
+}
+const ::google::api::expr::v1alpha1::Expr_CreateList& Expr::_Internal::list_expr(const Expr* msg) {
+  return *msg->_impl_.expr_kind_.list_expr_;
+}
+const ::google::api::expr::v1alpha1::Expr_CreateStruct& Expr::_Internal::struct_expr(const Expr* msg) {
+  return *msg->_impl_.expr_kind_.struct_expr_;
+}
+const ::google::api::expr::v1alpha1::Expr_Comprehension& Expr::_Internal::comprehension_expr(const Expr* msg) {
+  return *msg->_impl_.expr_kind_.comprehension_expr_;
+}
+void Expr::set_allocated_const_expr(::google::api::expr::v1alpha1::Constant* const_expr) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_expr_kind();
+  if (const_expr) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(const_expr);
+    if (message_arena != submessage_arena) {
+      const_expr = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, const_expr, submessage_arena);
+    }
+    set_has_const_expr();
+    _impl_.expr_kind_.const_expr_ = const_expr;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.const_expr)
+}
+void Expr::set_allocated_ident_expr(::google::api::expr::v1alpha1::Expr_Ident* ident_expr) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_expr_kind();
+  if (ident_expr) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(ident_expr);
+    if (message_arena != submessage_arena) {
+      ident_expr = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, ident_expr, submessage_arena);
+    }
+    set_has_ident_expr();
+    _impl_.expr_kind_.ident_expr_ = ident_expr;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.ident_expr)
+}
+void Expr::set_allocated_select_expr(::google::api::expr::v1alpha1::Expr_Select* select_expr) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_expr_kind();
+  if (select_expr) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(select_expr);
+    if (message_arena != submessage_arena) {
+      select_expr = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, select_expr, submessage_arena);
+    }
+    set_has_select_expr();
+    _impl_.expr_kind_.select_expr_ = select_expr;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.select_expr)
+}
+void Expr::set_allocated_call_expr(::google::api::expr::v1alpha1::Expr_Call* call_expr) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_expr_kind();
+  if (call_expr) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(call_expr);
+    if (message_arena != submessage_arena) {
+      call_expr = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, call_expr, submessage_arena);
+    }
+    set_has_call_expr();
+    _impl_.expr_kind_.call_expr_ = call_expr;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.call_expr)
+}
+void Expr::set_allocated_list_expr(::google::api::expr::v1alpha1::Expr_CreateList* list_expr) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_expr_kind();
+  if (list_expr) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(list_expr);
+    if (message_arena != submessage_arena) {
+      list_expr = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, list_expr, submessage_arena);
+    }
+    set_has_list_expr();
+    _impl_.expr_kind_.list_expr_ = list_expr;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.list_expr)
+}
+void Expr::set_allocated_struct_expr(::google::api::expr::v1alpha1::Expr_CreateStruct* struct_expr) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_expr_kind();
+  if (struct_expr) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(struct_expr);
+    if (message_arena != submessage_arena) {
+      struct_expr = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, struct_expr, submessage_arena);
+    }
+    set_has_struct_expr();
+    _impl_.expr_kind_.struct_expr_ = struct_expr;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.struct_expr)
+}
+void Expr::set_allocated_comprehension_expr(::google::api::expr::v1alpha1::Expr_Comprehension* comprehension_expr) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_expr_kind();
+  if (comprehension_expr) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(comprehension_expr);
+    if (message_arena != submessage_arena) {
+      comprehension_expr = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, comprehension_expr, submessage_arena);
+    }
+    set_has_comprehension_expr();
+    _impl_.expr_kind_.comprehension_expr_ = comprehension_expr;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.comprehension_expr)
+}
+Expr::Expr(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Expr)
+}
+Expr::Expr(const Expr& from) : ::google::protobuf::Message() {
+  Expr* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.id_){},
+      decltype(_impl_.expr_kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _this->_impl_.id_ = from._impl_.id_;
+  clear_has_expr_kind();
+  switch (from.expr_kind_case()) {
+    case kConstExpr: {
+      _this->_internal_mutable_const_expr()->::google::api::expr::v1alpha1::Constant::MergeFrom(
+          from._internal_const_expr());
+      break;
+    }
+    case kIdentExpr: {
+      _this->_internal_mutable_ident_expr()->::google::api::expr::v1alpha1::Expr_Ident::MergeFrom(
+          from._internal_ident_expr());
+      break;
+    }
+    case kSelectExpr: {
+      _this->_internal_mutable_select_expr()->::google::api::expr::v1alpha1::Expr_Select::MergeFrom(
+          from._internal_select_expr());
+      break;
+    }
+    case kCallExpr: {
+      _this->_internal_mutable_call_expr()->::google::api::expr::v1alpha1::Expr_Call::MergeFrom(
+          from._internal_call_expr());
+      break;
+    }
+    case kListExpr: {
+      _this->_internal_mutable_list_expr()->::google::api::expr::v1alpha1::Expr_CreateList::MergeFrom(
+          from._internal_list_expr());
+      break;
+    }
+    case kStructExpr: {
+      _this->_internal_mutable_struct_expr()->::google::api::expr::v1alpha1::Expr_CreateStruct::MergeFrom(
+          from._internal_struct_expr());
+      break;
+    }
+    case kComprehensionExpr: {
+      _this->_internal_mutable_comprehension_expr()->::google::api::expr::v1alpha1::Expr_Comprehension::MergeFrom(
+          from._internal_comprehension_expr());
+      break;
+    }
+    case EXPR_KIND_NOT_SET: {
+      break;
+    }
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Expr)
+}
+inline void Expr::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.id_){::int64_t{0}},
+      decltype(_impl_.expr_kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  clear_has_expr_kind();
+}
+Expr::~Expr() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Expr)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Expr::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  if (has_expr_kind()) {
+    clear_expr_kind();
+  }
+}
+void Expr::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+void Expr::clear_expr_kind() {
+// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1alpha1.Expr)
+  switch (expr_kind_case()) {
+    case kConstExpr: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.expr_kind_.const_expr_;
+      }
+      break;
+    }
+    case kIdentExpr: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.expr_kind_.ident_expr_;
+      }
+      break;
+    }
+    case kSelectExpr: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.expr_kind_.select_expr_;
+      }
+      break;
+    }
+    case kCallExpr: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.expr_kind_.call_expr_;
+      }
+      break;
+    }
+    case kListExpr: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.expr_kind_.list_expr_;
+      }
+      break;
+    }
+    case kStructExpr: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.expr_kind_.struct_expr_;
+      }
+      break;
+    }
+    case kComprehensionExpr: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.expr_kind_.comprehension_expr_;
+      }
+      break;
+    }
+    case EXPR_KIND_NOT_SET: {
+      break;
+    }
+  }
+  _impl_._oneof_case_[0] = EXPR_KIND_NOT_SET;
+}
+
+
+PROTOBUF_NOINLINE void Expr::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Expr)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.id_ = ::int64_t{0};
+  clear_expr_kind();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Expr::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 8, 7, 0, 2> Expr::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    9, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294966785,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    8,  // num_field_entries
+    7,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Expr_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // int64 id = 2 [json_name = "id"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Expr, _impl_.id_), 63>(),
+     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Expr, _impl_.id_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // int64 id = 2 [json_name = "id"];
+    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.id_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
+    // .google.api.expr.v1alpha1.Constant const_expr = 3 [json_name = "constExpr"];
+    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_kind_.const_expr_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Expr.Ident ident_expr = 4 [json_name = "identExpr"];
+    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_kind_.ident_expr_), _Internal::kOneofCaseOffset + 0, 1,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Expr.Select select_expr = 5 [json_name = "selectExpr"];
+    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_kind_.select_expr_), _Internal::kOneofCaseOffset + 0, 2,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Expr.Call call_expr = 6 [json_name = "callExpr"];
+    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_kind_.call_expr_), _Internal::kOneofCaseOffset + 0, 3,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Expr.CreateList list_expr = 7 [json_name = "listExpr"];
+    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_kind_.list_expr_), _Internal::kOneofCaseOffset + 0, 4,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Expr.CreateStruct struct_expr = 8 [json_name = "structExpr"];
+    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_kind_.struct_expr_), _Internal::kOneofCaseOffset + 0, 5,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Expr.Comprehension comprehension_expr = 9 [json_name = "comprehensionExpr"];
+    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_kind_.comprehension_expr_), _Internal::kOneofCaseOffset + 0, 6,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Constant>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr_Ident>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr_Select>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr_Call>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr_CreateList>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr_CreateStruct>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Expr_Comprehension>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* Expr::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Expr)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // int64 id = 2 [json_name = "id"];
+  if (this->_internal_id() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt64ToArrayWithField<2>(
+            stream, this->_internal_id(), target);
+  }
+
+  switch (expr_kind_case()) {
+    case kConstExpr: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(3, _Internal::const_expr(this),
+          _Internal::const_expr(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kIdentExpr: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(4, _Internal::ident_expr(this),
+          _Internal::ident_expr(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kSelectExpr: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(5, _Internal::select_expr(this),
+          _Internal::select_expr(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kCallExpr: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(6, _Internal::call_expr(this),
+          _Internal::call_expr(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kListExpr: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(7, _Internal::list_expr(this),
+          _Internal::list_expr(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kStructExpr: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(8, _Internal::struct_expr(this),
+          _Internal::struct_expr(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kComprehensionExpr: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(9, _Internal::comprehension_expr(this),
+          _Internal::comprehension_expr(this).GetCachedSize(), target, stream);
+      break;
+    }
+    default:
+      break;
+  }
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Expr)
+  return target;
+}
+
+::size_t Expr::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Expr)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // int64 id = 2 [json_name = "id"];
+  if (this->_internal_id() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+        this->_internal_id());
+  }
+
+  switch (expr_kind_case()) {
+    // .google.api.expr.v1alpha1.Constant const_expr = 3 [json_name = "constExpr"];
+    case kConstExpr: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.expr_kind_.const_expr_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.Expr.Ident ident_expr = 4 [json_name = "identExpr"];
+    case kIdentExpr: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.expr_kind_.ident_expr_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.Expr.Select select_expr = 5 [json_name = "selectExpr"];
+    case kSelectExpr: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.expr_kind_.select_expr_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.Expr.Call call_expr = 6 [json_name = "callExpr"];
+    case kCallExpr: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.expr_kind_.call_expr_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.Expr.CreateList list_expr = 7 [json_name = "listExpr"];
+    case kListExpr: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.expr_kind_.list_expr_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.Expr.CreateStruct struct_expr = 8 [json_name = "structExpr"];
+    case kStructExpr: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.expr_kind_.struct_expr_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.Expr.Comprehension comprehension_expr = 9 [json_name = "comprehensionExpr"];
+    case kComprehensionExpr: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.expr_kind_.comprehension_expr_);
+      break;
+    }
+    case EXPR_KIND_NOT_SET: {
+      break;
+    }
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Expr::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Expr::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Expr::GetClassData() const { return &_class_data_; }
+
+
+void Expr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Expr*>(&to_msg);
+  auto& from = static_cast<const Expr&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Expr)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (from._internal_id() != 0) {
+    _this->_internal_set_id(from._internal_id());
+  }
+  switch (from.expr_kind_case()) {
+    case kConstExpr: {
+      _this->_internal_mutable_const_expr()->::google::api::expr::v1alpha1::Constant::MergeFrom(
+          from._internal_const_expr());
+      break;
+    }
+    case kIdentExpr: {
+      _this->_internal_mutable_ident_expr()->::google::api::expr::v1alpha1::Expr_Ident::MergeFrom(
+          from._internal_ident_expr());
+      break;
+    }
+    case kSelectExpr: {
+      _this->_internal_mutable_select_expr()->::google::api::expr::v1alpha1::Expr_Select::MergeFrom(
+          from._internal_select_expr());
+      break;
+    }
+    case kCallExpr: {
+      _this->_internal_mutable_call_expr()->::google::api::expr::v1alpha1::Expr_Call::MergeFrom(
+          from._internal_call_expr());
+      break;
+    }
+    case kListExpr: {
+      _this->_internal_mutable_list_expr()->::google::api::expr::v1alpha1::Expr_CreateList::MergeFrom(
+          from._internal_list_expr());
+      break;
+    }
+    case kStructExpr: {
+      _this->_internal_mutable_struct_expr()->::google::api::expr::v1alpha1::Expr_CreateStruct::MergeFrom(
+          from._internal_struct_expr());
+      break;
+    }
+    case kComprehensionExpr: {
+      _this->_internal_mutable_comprehension_expr()->::google::api::expr::v1alpha1::Expr_Comprehension::MergeFrom(
+          from._internal_comprehension_expr());
+      break;
+    }
+    case EXPR_KIND_NOT_SET: {
+      break;
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Expr::CopyFrom(const Expr& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Expr)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Expr::IsInitialized() const {
+  return true;
+}
+
+void Expr::InternalSwap(Expr* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+        swap(_impl_.id_, other->_impl_.id_);
+  swap(_impl_.expr_kind_, other->_impl_.expr_kind_);
+  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
+}
+
+::google::protobuf::Metadata Expr::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[8]);
+}
+// ===================================================================
+
+class Constant::_Internal {
+ public:
+  static constexpr ::int32_t kOneofCaseOffset =
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Constant, _impl_._oneof_case_);
+  static const ::google::protobuf::Duration& duration_value(const Constant* msg);
+  static const ::google::protobuf::Timestamp& timestamp_value(const Constant* msg);
+};
+
+const ::google::protobuf::Duration& Constant::_Internal::duration_value(const Constant* msg) {
+  return *msg->_impl_.constant_kind_.duration_value_;
+}
+const ::google::protobuf::Timestamp& Constant::_Internal::timestamp_value(const Constant* msg) {
+  return *msg->_impl_.constant_kind_.timestamp_value_;
+}
+void Constant::set_allocated_duration_value(::google::protobuf::Duration* duration_value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_constant_kind();
+  if (duration_value) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(
+                reinterpret_cast<::google::protobuf::MessageLite*>(duration_value));
+    if (message_arena != submessage_arena) {
+      duration_value = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, duration_value, submessage_arena);
+    }
+    set_has_duration_value();
+    _impl_.constant_kind_.duration_value_ = duration_value;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Constant.duration_value)
+}
+void Constant::clear_duration_value() {
+  if (constant_kind_case() == kDurationValue) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.constant_kind_.duration_value_;
+    }
+    clear_has_constant_kind();
+  }
+}
+void Constant::set_allocated_timestamp_value(::google::protobuf::Timestamp* timestamp_value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_constant_kind();
+  if (timestamp_value) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(
+                reinterpret_cast<::google::protobuf::MessageLite*>(timestamp_value));
+    if (message_arena != submessage_arena) {
+      timestamp_value = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, timestamp_value, submessage_arena);
+    }
+    set_has_timestamp_value();
+    _impl_.constant_kind_.timestamp_value_ = timestamp_value;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Constant.timestamp_value)
+}
+void Constant::clear_timestamp_value() {
+  if (constant_kind_case() == kTimestampValue) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.constant_kind_.timestamp_value_;
+    }
+    clear_has_constant_kind();
+  }
+}
+Constant::Constant(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Constant)
+}
+Constant::Constant(const Constant& from) : ::google::protobuf::Message() {
+  Constant* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.constant_kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  clear_has_constant_kind();
+  switch (from.constant_kind_case()) {
+    case kNullValue: {
+      _this->_internal_set_null_value(from._internal_null_value());
+      break;
+    }
+    case kBoolValue: {
+      _this->_internal_set_bool_value(from._internal_bool_value());
+      break;
+    }
+    case kInt64Value: {
+      _this->_internal_set_int64_value(from._internal_int64_value());
+      break;
+    }
+    case kUint64Value: {
+      _this->_internal_set_uint64_value(from._internal_uint64_value());
+      break;
+    }
+    case kDoubleValue: {
+      _this->_internal_set_double_value(from._internal_double_value());
+      break;
+    }
+    case kStringValue: {
+      _this->_internal_set_string_value(from._internal_string_value());
+      break;
+    }
+    case kBytesValue: {
+      _this->_internal_set_bytes_value(from._internal_bytes_value());
+      break;
+    }
+    case kDurationValue: {
+      _this->_internal_mutable_duration_value()->::google::protobuf::Duration::MergeFrom(
+          from._internal_duration_value());
+      break;
+    }
+    case kTimestampValue: {
+      _this->_internal_mutable_timestamp_value()->::google::protobuf::Timestamp::MergeFrom(
+          from._internal_timestamp_value());
+      break;
+    }
+    case CONSTANT_KIND_NOT_SET: {
+      break;
+    }
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Constant)
+}
+inline void Constant::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.constant_kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  clear_has_constant_kind();
+}
+Constant::~Constant() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Constant)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Constant::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  if (has_constant_kind()) {
+    clear_constant_kind();
+  }
+}
+void Constant::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+void Constant::clear_constant_kind() {
+// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1alpha1.Constant)
+  switch (constant_kind_case()) {
+    case kNullValue: {
+      // No need to clear
+      break;
+    }
+    case kBoolValue: {
+      // No need to clear
+      break;
+    }
+    case kInt64Value: {
+      // No need to clear
+      break;
+    }
+    case kUint64Value: {
+      // No need to clear
+      break;
+    }
+    case kDoubleValue: {
+      // No need to clear
+      break;
+    }
+    case kStringValue: {
+      _impl_.constant_kind_.string_value_.Destroy();
+      break;
+    }
+    case kBytesValue: {
+      _impl_.constant_kind_.bytes_value_.Destroy();
+      break;
+    }
+    case kDurationValue: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.constant_kind_.duration_value_;
+      }
+      break;
+    }
+    case kTimestampValue: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.constant_kind_.timestamp_value_;
+      }
+      break;
+    }
+    case CONSTANT_KIND_NOT_SET: {
+      break;
+    }
+  }
+  _impl_._oneof_case_[0] = CONSTANT_KIND_NOT_SET;
+}
+
+
+PROTOBUF_NOINLINE void Constant::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Constant)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  clear_constant_kind();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Constant::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 9, 2, 62, 2> Constant::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    9, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294966784,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    9,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Constant_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
+    {PROTOBUF_FIELD_OFFSET(Constant, _impl_.constant_kind_.null_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
+    // bool bool_value = 2 [json_name = "boolValue"];
+    {PROTOBUF_FIELD_OFFSET(Constant, _impl_.constant_kind_.bool_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
+    // int64 int64_value = 3 [json_name = "int64Value"];
+    {PROTOBUF_FIELD_OFFSET(Constant, _impl_.constant_kind_.int64_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
+    // uint64 uint64_value = 4 [json_name = "uint64Value"];
+    {PROTOBUF_FIELD_OFFSET(Constant, _impl_.constant_kind_.uint64_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kUInt64)},
+    // double double_value = 5 [json_name = "doubleValue"];
+    {PROTOBUF_FIELD_OFFSET(Constant, _impl_.constant_kind_.double_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
+    // string string_value = 6 [json_name = "stringValue"];
+    {PROTOBUF_FIELD_OFFSET(Constant, _impl_.constant_kind_.string_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // bytes bytes_value = 7 [json_name = "bytesValue"];
+    {PROTOBUF_FIELD_OFFSET(Constant, _impl_.constant_kind_.bytes_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
+    // .google.protobuf.Duration duration_value = 8 [json_name = "durationValue", deprecated = true];
+    {PROTOBUF_FIELD_OFFSET(Constant, _impl_.constant_kind_.duration_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Timestamp timestamp_value = 9 [json_name = "timestampValue", deprecated = true];
+    {PROTOBUF_FIELD_OFFSET(Constant, _impl_.constant_kind_.timestamp_value_), _Internal::kOneofCaseOffset + 0, 1,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
+  }}, {{
+    "\41\0\0\0\0\0\14\0\0\0\0\0\0\0\0\0"
+    "google.api.expr.v1alpha1.Constant"
+    "string_value"
+  }},
+};
+
+::uint8_t* Constant::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Constant)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  switch (constant_kind_case()) {
+    case kNullValue: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteEnumToArray(
+          1, this->_internal_null_value(), target);
+      break;
+    }
+    case kBoolValue: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteBoolToArray(
+          2, this->_internal_bool_value(), target);
+      break;
+    }
+    case kInt64Value: {
+      target = ::google::protobuf::internal::WireFormatLite::
+          WriteInt64ToArrayWithField<3>(
+              stream, this->_internal_int64_value(), target);
+      break;
+    }
+    case kUint64Value: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
+          4, this->_internal_uint64_value(), target);
+      break;
+    }
+    case kDoubleValue: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
+          5, this->_internal_double_value(), target);
+      break;
+    }
+    case kStringValue: {
+      const std::string& _s = this->_internal_string_value();
+      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Constant.string_value");
+      target = stream->WriteStringMaybeAliased(6, _s, target);
+      break;
+    }
+    case kBytesValue: {
+      const std::string& _s = this->_internal_bytes_value();
+      target = stream->WriteBytesMaybeAliased(7, _s, target);
+      break;
+    }
+    case kDurationValue: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(8, _Internal::duration_value(this),
+          _Internal::duration_value(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kTimestampValue: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(9, _Internal::timestamp_value(this),
+          _Internal::timestamp_value(this).GetCachedSize(), target, stream);
+      break;
+    }
+    default:
+      break;
+  }
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Constant)
+  return target;
+}
+
+::size_t Constant::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Constant)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  switch (constant_kind_case()) {
+    // .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
+    case kNullValue: {
+      total_size += 1 +
+                    ::_pbi::WireFormatLite::EnumSize(this->_internal_null_value());
+      break;
+    }
+    // bool bool_value = 2 [json_name = "boolValue"];
+    case kBoolValue: {
+      total_size += 2;
+      break;
+    }
+    // int64 int64_value = 3 [json_name = "int64Value"];
+    case kInt64Value: {
+      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+          this->_internal_int64_value());
+      break;
+    }
+    // uint64 uint64_value = 4 [json_name = "uint64Value"];
+    case kUint64Value: {
+      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
+          this->_internal_uint64_value());
+      break;
+    }
+    // double double_value = 5 [json_name = "doubleValue"];
+    case kDoubleValue: {
+      total_size += 9;
+      break;
+    }
+    // string string_value = 6 [json_name = "stringValue"];
+    case kStringValue: {
+      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                      this->_internal_string_value());
+      break;
+    }
+    // bytes bytes_value = 7 [json_name = "bytesValue"];
+    case kBytesValue: {
+      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
+                                      this->_internal_bytes_value());
+      break;
+    }
+    // .google.protobuf.Duration duration_value = 8 [json_name = "durationValue", deprecated = true];
+    case kDurationValue: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.constant_kind_.duration_value_);
+      break;
+    }
+    // .google.protobuf.Timestamp timestamp_value = 9 [json_name = "timestampValue", deprecated = true];
+    case kTimestampValue: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.constant_kind_.timestamp_value_);
+      break;
+    }
+    case CONSTANT_KIND_NOT_SET: {
+      break;
+    }
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Constant::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Constant::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Constant::GetClassData() const { return &_class_data_; }
+
+
+void Constant::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Constant*>(&to_msg);
+  auto& from = static_cast<const Constant&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Constant)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  switch (from.constant_kind_case()) {
+    case kNullValue: {
+      _this->_internal_set_null_value(from._internal_null_value());
+      break;
+    }
+    case kBoolValue: {
+      _this->_internal_set_bool_value(from._internal_bool_value());
+      break;
+    }
+    case kInt64Value: {
+      _this->_internal_set_int64_value(from._internal_int64_value());
+      break;
+    }
+    case kUint64Value: {
+      _this->_internal_set_uint64_value(from._internal_uint64_value());
+      break;
+    }
+    case kDoubleValue: {
+      _this->_internal_set_double_value(from._internal_double_value());
+      break;
+    }
+    case kStringValue: {
+      _this->_internal_set_string_value(from._internal_string_value());
+      break;
+    }
+    case kBytesValue: {
+      _this->_internal_set_bytes_value(from._internal_bytes_value());
+      break;
+    }
+    case kDurationValue: {
+      _this->_internal_mutable_duration_value()->::google::protobuf::Duration::MergeFrom(
+          from._internal_duration_value());
+      break;
+    }
+    case kTimestampValue: {
+      _this->_internal_mutable_timestamp_value()->::google::protobuf::Timestamp::MergeFrom(
+          from._internal_timestamp_value());
+      break;
+    }
+    case CONSTANT_KIND_NOT_SET: {
+      break;
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Constant::CopyFrom(const Constant& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Constant)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Constant::IsInitialized() const {
+  return true;
+}
+
+void Constant::InternalSwap(Constant* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_.constant_kind_, other->_impl_.constant_kind_);
+  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
+}
+
+::google::protobuf::Metadata Constant::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[9]);
+}
+// ===================================================================
+
+SourceInfo_PositionsEntry_DoNotUse::SourceInfo_PositionsEntry_DoNotUse() {}
+SourceInfo_PositionsEntry_DoNotUse::SourceInfo_PositionsEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void SourceInfo_PositionsEntry_DoNotUse::MergeFrom(const SourceInfo_PositionsEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata SourceInfo_PositionsEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[10]);
+}
+// ===================================================================
+
+SourceInfo_MacroCallsEntry_DoNotUse::SourceInfo_MacroCallsEntry_DoNotUse() {}
+SourceInfo_MacroCallsEntry_DoNotUse::SourceInfo_MacroCallsEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void SourceInfo_MacroCallsEntry_DoNotUse::MergeFrom(const SourceInfo_MacroCallsEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata SourceInfo_MacroCallsEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[11]);
+}
+// ===================================================================
+
+class SourceInfo::_Internal {
+ public:
+};
+
+SourceInfo::SourceInfo(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.SourceInfo)
+}
+SourceInfo::SourceInfo(const SourceInfo& from) : ::google::protobuf::Message() {
+  SourceInfo* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.line_offsets_){from._impl_.line_offsets_},
+      /* _impl_._line_offsets_cached_byte_size_ = */ {0},
+      /* decltype(_impl_.positions_) */ {},
+      /* decltype(_impl_.macro_calls_) */ {},
+      decltype(_impl_.syntax_version_){},
+      decltype(_impl_.location_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _this->_impl_.positions_.MergeFrom(from._impl_.positions_);
+  _this->_impl_.macro_calls_.MergeFrom(from._impl_.macro_calls_);
+  _impl_.syntax_version_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.syntax_version_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_syntax_version().empty()) {
+    _this->_impl_.syntax_version_.Set(from._internal_syntax_version(), _this->GetArenaForAllocation());
+  }
+  _impl_.location_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.location_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_location().empty()) {
+    _this->_impl_.location_.Set(from._internal_location(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.SourceInfo)
+}
+inline void SourceInfo::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.line_offsets_){arena},
+      /* _impl_._line_offsets_cached_byte_size_ = */ {0},
+      /* decltype(_impl_.positions_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      /* decltype(_impl_.macro_calls_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      decltype(_impl_.syntax_version_){},
+      decltype(_impl_.location_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.syntax_version_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.syntax_version_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.location_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.location_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+SourceInfo::~SourceInfo() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.SourceInfo)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void SourceInfo::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.line_offsets_.~RepeatedField();
+  _impl_.positions_.~MapField();
+  _impl_.macro_calls_.~MapField();
+  _impl_.syntax_version_.Destroy();
+  _impl_.location_.Destroy();
+}
+void SourceInfo::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void SourceInfo::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.SourceInfo)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_line_offsets()->Clear();
+  _impl_.positions_.Clear();
+  _impl_.macro_calls_.Clear();
+  _impl_.syntax_version_.ClearToEmpty();
+  _impl_.location_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* SourceInfo::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 5, 3, 66, 2> SourceInfo::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    5, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967264,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    5,  // num_field_entries
+    3,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_SourceInfo_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // string syntax_version = 1 [json_name = "syntaxVersion"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SourceInfo, _impl_.syntax_version_)}},
+    // string location = 2 [json_name = "location"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SourceInfo, _impl_.location_)}},
+    // repeated int32 line_offsets = 3 [json_name = "lineOffsets"];
+    {::_pbi::TcParser::FastV32P1,
+     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SourceInfo, _impl_.line_offsets_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string syntax_version = 1 [json_name = "syntaxVersion"];
+    {PROTOBUF_FIELD_OFFSET(SourceInfo, _impl_.syntax_version_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string location = 2 [json_name = "location"];
+    {PROTOBUF_FIELD_OFFSET(SourceInfo, _impl_.location_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // repeated int32 line_offsets = 3 [json_name = "lineOffsets"];
+    {PROTOBUF_FIELD_OFFSET(SourceInfo, _impl_.line_offsets_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
+    // map<int64, int32> positions = 4 [json_name = "positions"];
+    {PROTOBUF_FIELD_OFFSET(SourceInfo, _impl_.positions_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // map<int64, .google.api.expr.v1alpha1.Expr> macro_calls = 5 [json_name = "macroCalls"];
+    {PROTOBUF_FIELD_OFFSET(SourceInfo, _impl_.macro_calls_), 0, 1,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+  }}, {{
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(SourceInfo()._impl_.positions_)>(1, 0, 0)},
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(SourceInfo()._impl_.macro_calls_)>(1, 0, 0)},
+    {::_pbi::TcParser::CreateInArenaStorageCb<::google::api::expr::v1alpha1::Expr>},
+  }}, {{
+    "\43\16\10\0\0\0\0\0"
+    "google.api.expr.v1alpha1.SourceInfo"
+    "syntax_version"
+    "location"
+  }},
+};
+
+::uint8_t* SourceInfo::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.SourceInfo)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string syntax_version = 1 [json_name = "syntaxVersion"];
+  if (!this->_internal_syntax_version().empty()) {
+    const std::string& _s = this->_internal_syntax_version();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.SourceInfo.syntax_version");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string location = 2 [json_name = "location"];
+  if (!this->_internal_location().empty()) {
+    const std::string& _s = this->_internal_location();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.SourceInfo.location");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  // repeated int32 line_offsets = 3 [json_name = "lineOffsets"];
+  {
+    int byte_size = _impl_._line_offsets_cached_byte_size_.Get();
+    if (byte_size > 0) {
+      target = stream->WriteInt32Packed(3, _internal_line_offsets(),
+                                                 byte_size, target);
+    }
+  }
+
+  // map<int64, int32> positions = 4 [json_name = "positions"];
+  if (!_internal_positions().empty()) {
+    using MapType = ::google::protobuf::Map<::int64_t, ::int32_t>;
+    using WireHelper = SourceInfo_PositionsEntry_DoNotUse::Funcs;
+    const auto& field = _internal_positions();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            4, entry.first, entry.second, target, stream);
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            4, entry.first, entry.second, target, stream);
+      }
+    }
+  }
+
+  // map<int64, .google.api.expr.v1alpha1.Expr> macro_calls = 5 [json_name = "macroCalls"];
+  if (!_internal_macro_calls().empty()) {
+    using MapType = ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Expr>;
+    using WireHelper = SourceInfo_MacroCallsEntry_DoNotUse::Funcs;
+    const auto& field = _internal_macro_calls();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            5, entry.first, entry.second, target, stream);
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            5, entry.first, entry.second, target, stream);
+      }
+    }
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.SourceInfo)
+  return target;
+}
+
+::size_t SourceInfo::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.SourceInfo)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated int32 line_offsets = 3 [json_name = "lineOffsets"];
+  {
+    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
+        this->_internal_line_offsets())
+    ;
+    _impl_._line_offsets_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
+    std::size_t tag_size = data_size == 0
+        ? 0
+        : 1 + ::_pbi::WireFormatLite::Int32Size(
+                            static_cast<int32_t>(data_size))
+    ;
+    total_size += tag_size + data_size;
+  }
+  // map<int64, int32> positions = 4 [json_name = "positions"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_positions_size());
+  for (const auto& entry : _internal_positions()) {
+    total_size += SourceInfo_PositionsEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // map<int64, .google.api.expr.v1alpha1.Expr> macro_calls = 5 [json_name = "macroCalls"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_macro_calls_size());
+  for (const auto& entry : _internal_macro_calls()) {
+    total_size += SourceInfo_MacroCallsEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // string syntax_version = 1 [json_name = "syntaxVersion"];
+  if (!this->_internal_syntax_version().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_syntax_version());
+  }
+
+  // string location = 2 [json_name = "location"];
+  if (!this->_internal_location().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_location());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData SourceInfo::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    SourceInfo::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*SourceInfo::GetClassData() const { return &_class_data_; }
+
+
+void SourceInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<SourceInfo*>(&to_msg);
+  auto& from = static_cast<const SourceInfo&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.SourceInfo)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_line_offsets()->MergeFrom(from._internal_line_offsets());
+  _this->_impl_.positions_.MergeFrom(from._impl_.positions_);
+  _this->_impl_.macro_calls_.MergeFrom(from._impl_.macro_calls_);
+  if (!from._internal_syntax_version().empty()) {
+    _this->_internal_set_syntax_version(from._internal_syntax_version());
+  }
+  if (!from._internal_location().empty()) {
+    _this->_internal_set_location(from._internal_location());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void SourceInfo::CopyFrom(const SourceInfo& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.SourceInfo)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool SourceInfo::IsInitialized() const {
+  return true;
+}
+
+void SourceInfo::InternalSwap(SourceInfo* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.line_offsets_.InternalSwap(&other->_impl_.line_offsets_);
+  _impl_.positions_.InternalSwap(&other->_impl_.positions_);
+  _impl_.macro_calls_.InternalSwap(&other->_impl_.macro_calls_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.syntax_version_, lhs_arena,
+                                       &other->_impl_.syntax_version_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.location_, lhs_arena,
+                                       &other->_impl_.location_, rhs_arena);
+}
+
+::google::protobuf::Metadata SourceInfo::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[12]);
+}
+// ===================================================================
+
+class SourcePosition::_Internal {
+ public:
+};
+
+SourcePosition::SourcePosition(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.SourcePosition)
+}
+SourcePosition::SourcePosition(const SourcePosition& from) : ::google::protobuf::Message() {
+  SourcePosition* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.location_){},
+      decltype(_impl_.offset_){},
+      decltype(_impl_.line_){},
+      decltype(_impl_.column_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.location_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.location_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_location().empty()) {
+    _this->_impl_.location_.Set(from._internal_location(), _this->GetArenaForAllocation());
+  }
+  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
+    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.column_) -
+    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.column_));
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.SourcePosition)
+}
+inline void SourcePosition::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.location_){},
+      decltype(_impl_.offset_){0},
+      decltype(_impl_.line_){0},
+      decltype(_impl_.column_){0},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.location_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.location_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+SourcePosition::~SourcePosition() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.SourcePosition)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void SourcePosition::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.location_.Destroy();
+}
+void SourcePosition::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void SourcePosition::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.SourcePosition)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.location_.ClearToEmpty();
+  ::memset(&_impl_.offset_, 0, static_cast<::size_t>(
+      reinterpret_cast<char*>(&_impl_.column_) -
+      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.column_));
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* SourcePosition::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 4, 0, 56, 2> SourcePosition::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    4, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967280,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    4,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_SourcePosition_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // int32 column = 4 [json_name = "column"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SourcePosition, _impl_.column_), 63>(),
+     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.column_)}},
+    // string location = 1 [json_name = "location"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.location_)}},
+    // int32 offset = 2 [json_name = "offset"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SourcePosition, _impl_.offset_), 63>(),
+     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.offset_)}},
+    // int32 line = 3 [json_name = "line"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SourcePosition, _impl_.line_), 63>(),
+     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.line_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string location = 1 [json_name = "location"];
+    {PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.location_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // int32 offset = 2 [json_name = "offset"];
+    {PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.offset_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
+    // int32 line = 3 [json_name = "line"];
+    {PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.line_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
+    // int32 column = 4 [json_name = "column"];
+    {PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.column_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
+  }},
+  // no aux_entries
+  {{
+    "\47\10\0\0\0\0\0\0"
+    "google.api.expr.v1alpha1.SourcePosition"
+    "location"
+  }},
+};
+
+::uint8_t* SourcePosition::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.SourcePosition)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string location = 1 [json_name = "location"];
+  if (!this->_internal_location().empty()) {
+    const std::string& _s = this->_internal_location();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.SourcePosition.location");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // int32 offset = 2 [json_name = "offset"];
+  if (this->_internal_offset() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt32ToArrayWithField<2>(
+            stream, this->_internal_offset(), target);
+  }
+
+  // int32 line = 3 [json_name = "line"];
+  if (this->_internal_line() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt32ToArrayWithField<3>(
+            stream, this->_internal_line(), target);
+  }
+
+  // int32 column = 4 [json_name = "column"];
+  if (this->_internal_column() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt32ToArrayWithField<4>(
+            stream, this->_internal_column(), target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.SourcePosition)
+  return target;
+}
+
+::size_t SourcePosition::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.SourcePosition)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string location = 1 [json_name = "location"];
+  if (!this->_internal_location().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_location());
+  }
+
+  // int32 offset = 2 [json_name = "offset"];
+  if (this->_internal_offset() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
+        this->_internal_offset());
+  }
+
+  // int32 line = 3 [json_name = "line"];
+  if (this->_internal_line() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
+        this->_internal_line());
+  }
+
+  // int32 column = 4 [json_name = "column"];
+  if (this->_internal_column() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
+        this->_internal_column());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData SourcePosition::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    SourcePosition::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*SourcePosition::GetClassData() const { return &_class_data_; }
+
+
+void SourcePosition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<SourcePosition*>(&to_msg);
+  auto& from = static_cast<const SourcePosition&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.SourcePosition)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_location().empty()) {
+    _this->_internal_set_location(from._internal_location());
+  }
+  if (from._internal_offset() != 0) {
+    _this->_internal_set_offset(from._internal_offset());
+  }
+  if (from._internal_line() != 0) {
+    _this->_internal_set_line(from._internal_line());
+  }
+  if (from._internal_column() != 0) {
+    _this->_internal_set_column(from._internal_column());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void SourcePosition::CopyFrom(const SourcePosition& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.SourcePosition)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool SourcePosition::IsInitialized() const {
+  return true;
+}
+
+void SourcePosition::InternalSwap(SourcePosition* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.location_, lhs_arena,
+                                       &other->_impl_.location_, rhs_arena);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.column_)
+      + sizeof(SourcePosition::_impl_.column_)
+      - PROTOBUF_FIELD_OFFSET(SourcePosition, _impl_.offset_)>(
+          reinterpret_cast<char*>(&_impl_.offset_),
+          reinterpret_cast<char*>(&other->_impl_.offset_));
+}
+
+::google::protobuf::Metadata SourcePosition::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto[13]);
+}
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+// @@protoc_insertion_point(global_scope)
+#include "google/protobuf/port_undef.inc"
diff --git a/gen/google/api/expr/v1alpha1/syntax.pb.h b/gen/google/api/expr/v1alpha1/syntax.pb.h
new file mode 100644
index 0000000..5a0dcc2
--- /dev/null
+++ b/gen/google/api/expr/v1alpha1/syntax.pb.h
@@ -0,0 +1,6014 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/api/expr/v1alpha1/syntax.proto
+
+#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_2epb_2eh
+#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_2epb_2eh
+
+#include <limits>
+#include <string>
+#include <type_traits>
+
+#include "google/protobuf/port_def.inc"
+#if PROTOBUF_VERSION < 4024000
+#error "This file was generated by a newer version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please update"
+#error "your headers."
+#endif  // PROTOBUF_VERSION
+
+#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
+#error "This file was generated by an older version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please"
+#error "regenerate this file with a newer version of protoc."
+#endif  // PROTOBUF_MIN_PROTOC_VERSION
+#include "google/protobuf/port_undef.inc"
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/arena.h"
+#include "google/protobuf/arenastring.h"
+#include "google/protobuf/generated_message_tctable_decl.h"
+#include "google/protobuf/generated_message_util.h"
+#include "google/protobuf/metadata_lite.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/message.h"
+#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
+#include "google/protobuf/extension_set.h"  // IWYU pragma: export
+#include "google/protobuf/map.h"  // IWYU pragma: export
+#include "google/protobuf/map_entry.h"
+#include "google/protobuf/map_field_inl.h"
+#include "google/protobuf/unknown_field_set.h"
+#include "google/protobuf/duration.pb.h"
+#include "google/protobuf/struct.pb.h"
+#include "google/protobuf/timestamp.pb.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+
+#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto
+
+namespace google {
+namespace protobuf {
+namespace internal {
+class AnyMetadata;
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+// Internal implementation detail -- do not use these members.
+struct TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto {
+  static const ::uint32_t offsets[];
+};
+extern const ::google::protobuf::internal::DescriptorTable
+    descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+class Constant;
+struct ConstantDefaultTypeInternal;
+extern ConstantDefaultTypeInternal _Constant_default_instance_;
+class Expr;
+struct ExprDefaultTypeInternal;
+extern ExprDefaultTypeInternal _Expr_default_instance_;
+class Expr_Call;
+struct Expr_CallDefaultTypeInternal;
+extern Expr_CallDefaultTypeInternal _Expr_Call_default_instance_;
+class Expr_Comprehension;
+struct Expr_ComprehensionDefaultTypeInternal;
+extern Expr_ComprehensionDefaultTypeInternal _Expr_Comprehension_default_instance_;
+class Expr_CreateList;
+struct Expr_CreateListDefaultTypeInternal;
+extern Expr_CreateListDefaultTypeInternal _Expr_CreateList_default_instance_;
+class Expr_CreateStruct;
+struct Expr_CreateStructDefaultTypeInternal;
+extern Expr_CreateStructDefaultTypeInternal _Expr_CreateStruct_default_instance_;
+class Expr_CreateStruct_Entry;
+struct Expr_CreateStruct_EntryDefaultTypeInternal;
+extern Expr_CreateStruct_EntryDefaultTypeInternal _Expr_CreateStruct_Entry_default_instance_;
+class Expr_Ident;
+struct Expr_IdentDefaultTypeInternal;
+extern Expr_IdentDefaultTypeInternal _Expr_Ident_default_instance_;
+class Expr_Select;
+struct Expr_SelectDefaultTypeInternal;
+extern Expr_SelectDefaultTypeInternal _Expr_Select_default_instance_;
+class ParsedExpr;
+struct ParsedExprDefaultTypeInternal;
+extern ParsedExprDefaultTypeInternal _ParsedExpr_default_instance_;
+class SourceInfo;
+struct SourceInfoDefaultTypeInternal;
+extern SourceInfoDefaultTypeInternal _SourceInfo_default_instance_;
+class SourceInfo_MacroCallsEntry_DoNotUse;
+struct SourceInfo_MacroCallsEntry_DoNotUseDefaultTypeInternal;
+extern SourceInfo_MacroCallsEntry_DoNotUseDefaultTypeInternal _SourceInfo_MacroCallsEntry_DoNotUse_default_instance_;
+class SourceInfo_PositionsEntry_DoNotUse;
+struct SourceInfo_PositionsEntry_DoNotUseDefaultTypeInternal;
+extern SourceInfo_PositionsEntry_DoNotUseDefaultTypeInternal _SourceInfo_PositionsEntry_DoNotUse_default_instance_;
+class SourcePosition;
+struct SourcePositionDefaultTypeInternal;
+extern SourcePositionDefaultTypeInternal _SourcePosition_default_instance_;
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+
+// ===================================================================
+
+
+// -------------------------------------------------------------------
+
+class ParsedExpr final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.ParsedExpr) */ {
+ public:
+  inline ParsedExpr() : ParsedExpr(nullptr) {}
+  ~ParsedExpr() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR ParsedExpr(::google::protobuf::internal::ConstantInitialized);
+
+  ParsedExpr(const ParsedExpr& from);
+  ParsedExpr(ParsedExpr&& from) noexcept
+    : ParsedExpr() {
+    *this = ::std::move(from);
+  }
+
+  inline ParsedExpr& operator=(const ParsedExpr& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline ParsedExpr& operator=(ParsedExpr&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const ParsedExpr& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const ParsedExpr* internal_default_instance() {
+    return reinterpret_cast<const ParsedExpr*>(
+               &_ParsedExpr_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    0;
+
+  friend void swap(ParsedExpr& a, ParsedExpr& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(ParsedExpr* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(ParsedExpr* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  ParsedExpr* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<ParsedExpr>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const ParsedExpr& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const ParsedExpr& from) {
+    ParsedExpr::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(ParsedExpr* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.ParsedExpr";
+  }
+  protected:
+  explicit ParsedExpr(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kExprFieldNumber = 2,
+    kSourceInfoFieldNumber = 3,
+  };
+  // .google.api.expr.v1alpha1.Expr expr = 2 [json_name = "expr"];
+  bool has_expr() const;
+  void clear_expr() ;
+  const ::google::api::expr::v1alpha1::Expr& expr() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_expr();
+  ::google::api::expr::v1alpha1::Expr* mutable_expr();
+  void set_allocated_expr(::google::api::expr::v1alpha1::Expr* value);
+  void unsafe_arena_set_allocated_expr(::google::api::expr::v1alpha1::Expr* value);
+  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_expr();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr& _internal_expr() const;
+  ::google::api::expr::v1alpha1::Expr* _internal_mutable_expr();
+
+  public:
+  // .google.api.expr.v1alpha1.SourceInfo source_info = 3 [json_name = "sourceInfo"];
+  bool has_source_info() const;
+  void clear_source_info() ;
+  const ::google::api::expr::v1alpha1::SourceInfo& source_info() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::SourceInfo* release_source_info();
+  ::google::api::expr::v1alpha1::SourceInfo* mutable_source_info();
+  void set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* value);
+  void unsafe_arena_set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* value);
+  ::google::api::expr::v1alpha1::SourceInfo* unsafe_arena_release_source_info();
+
+  private:
+  const ::google::api::expr::v1alpha1::SourceInfo& _internal_source_info() const;
+  ::google::api::expr::v1alpha1::SourceInfo* _internal_mutable_source_info();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.ParsedExpr)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::api::expr::v1alpha1::Expr* expr_;
+    ::google::api::expr::v1alpha1::SourceInfo* source_info_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};// -------------------------------------------------------------------
+
+class Expr_Ident final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.Ident) */ {
+ public:
+  inline Expr_Ident() : Expr_Ident(nullptr) {}
+  ~Expr_Ident() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Expr_Ident(::google::protobuf::internal::ConstantInitialized);
+
+  Expr_Ident(const Expr_Ident& from);
+  Expr_Ident(Expr_Ident&& from) noexcept
+    : Expr_Ident() {
+    *this = ::std::move(from);
+  }
+
+  inline Expr_Ident& operator=(const Expr_Ident& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Expr_Ident& operator=(Expr_Ident&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Expr_Ident& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Expr_Ident* internal_default_instance() {
+    return reinterpret_cast<const Expr_Ident*>(
+               &_Expr_Ident_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    1;
+
+  friend void swap(Expr_Ident& a, Expr_Ident& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Expr_Ident* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Expr_Ident* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Expr_Ident* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Expr_Ident>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Expr_Ident& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Expr_Ident& from) {
+    Expr_Ident::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Expr_Ident* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Expr.Ident";
+  }
+  protected:
+  explicit Expr_Ident(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kNameFieldNumber = 1,
+  };
+  // string name = 1 [json_name = "name"];
+  void clear_name() ;
+  const std::string& name() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_name(Arg_&& arg, Args_... args);
+  std::string* mutable_name();
+  PROTOBUF_NODISCARD std::string* release_name();
+  void set_allocated_name(std::string* ptr);
+
+  private:
+  const std::string& _internal_name() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
+      const std::string& value);
+  std::string* _internal_mutable_name();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.Ident)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 48, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr name_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};// -------------------------------------------------------------------
+
+class Expr_Select final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.Select) */ {
+ public:
+  inline Expr_Select() : Expr_Select(nullptr) {}
+  ~Expr_Select() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Expr_Select(::google::protobuf::internal::ConstantInitialized);
+
+  Expr_Select(const Expr_Select& from);
+  Expr_Select(Expr_Select&& from) noexcept
+    : Expr_Select() {
+    *this = ::std::move(from);
+  }
+
+  inline Expr_Select& operator=(const Expr_Select& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Expr_Select& operator=(Expr_Select&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Expr_Select& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Expr_Select* internal_default_instance() {
+    return reinterpret_cast<const Expr_Select*>(
+               &_Expr_Select_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    2;
+
+  friend void swap(Expr_Select& a, Expr_Select& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Expr_Select* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Expr_Select* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Expr_Select* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Expr_Select>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Expr_Select& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Expr_Select& from) {
+    Expr_Select::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Expr_Select* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Expr.Select";
+  }
+  protected:
+  explicit Expr_Select(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kFieldFieldNumber = 2,
+    kOperandFieldNumber = 1,
+    kTestOnlyFieldNumber = 3,
+  };
+  // string field = 2 [json_name = "field"];
+  void clear_field() ;
+  const std::string& field() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_field(Arg_&& arg, Args_... args);
+  std::string* mutable_field();
+  PROTOBUF_NODISCARD std::string* release_field();
+  void set_allocated_field(std::string* ptr);
+
+  private:
+  const std::string& _internal_field() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field(
+      const std::string& value);
+  std::string* _internal_mutable_field();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr operand = 1 [json_name = "operand"];
+  bool has_operand() const;
+  void clear_operand() ;
+  const ::google::api::expr::v1alpha1::Expr& operand() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_operand();
+  ::google::api::expr::v1alpha1::Expr* mutable_operand();
+  void set_allocated_operand(::google::api::expr::v1alpha1::Expr* value);
+  void unsafe_arena_set_allocated_operand(::google::api::expr::v1alpha1::Expr* value);
+  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_operand();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr& _internal_operand() const;
+  ::google::api::expr::v1alpha1::Expr* _internal_mutable_operand();
+
+  public:
+  // bool test_only = 3 [json_name = "testOnly"];
+  void clear_test_only() ;
+  bool test_only() const;
+  void set_test_only(bool value);
+
+  private:
+  bool _internal_test_only() const;
+  void _internal_set_test_only(bool value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.Select)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 50, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::internal::ArenaStringPtr field_;
+    ::google::api::expr::v1alpha1::Expr* operand_;
+    bool test_only_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};// -------------------------------------------------------------------
+
+class Expr_Call final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.Call) */ {
+ public:
+  inline Expr_Call() : Expr_Call(nullptr) {}
+  ~Expr_Call() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Expr_Call(::google::protobuf::internal::ConstantInitialized);
+
+  Expr_Call(const Expr_Call& from);
+  Expr_Call(Expr_Call&& from) noexcept
+    : Expr_Call() {
+    *this = ::std::move(from);
+  }
+
+  inline Expr_Call& operator=(const Expr_Call& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Expr_Call& operator=(Expr_Call&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Expr_Call& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Expr_Call* internal_default_instance() {
+    return reinterpret_cast<const Expr_Call*>(
+               &_Expr_Call_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    3;
+
+  friend void swap(Expr_Call& a, Expr_Call& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Expr_Call* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Expr_Call* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Expr_Call* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Expr_Call>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Expr_Call& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Expr_Call& from) {
+    Expr_Call::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Expr_Call* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Expr.Call";
+  }
+  protected:
+  explicit Expr_Call(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kArgsFieldNumber = 3,
+    kFunctionFieldNumber = 2,
+    kTargetFieldNumber = 1,
+  };
+  // repeated .google.api.expr.v1alpha1.Expr args = 3 [json_name = "args"];
+  int args_size() const;
+  private:
+  int _internal_args_size() const;
+
+  public:
+  void clear_args() ;
+  ::google::api::expr::v1alpha1::Expr* mutable_args(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >*
+      mutable_args();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr>& _internal_args() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr>* _internal_mutable_args();
+  public:
+  const ::google::api::expr::v1alpha1::Expr& args(int index) const;
+  ::google::api::expr::v1alpha1::Expr* add_args();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >&
+      args() const;
+  // string function = 2 [json_name = "function"];
+  void clear_function() ;
+  const std::string& function() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_function(Arg_&& arg, Args_... args);
+  std::string* mutable_function();
+  PROTOBUF_NODISCARD std::string* release_function();
+  void set_allocated_function(std::string* ptr);
+
+  private:
+  const std::string& _internal_function() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(
+      const std::string& value);
+  std::string* _internal_mutable_function();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr target = 1 [json_name = "target"];
+  bool has_target() const;
+  void clear_target() ;
+  const ::google::api::expr::v1alpha1::Expr& target() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_target();
+  ::google::api::expr::v1alpha1::Expr* mutable_target();
+  void set_allocated_target(::google::api::expr::v1alpha1::Expr* value);
+  void unsafe_arena_set_allocated_target(::google::api::expr::v1alpha1::Expr* value);
+  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_target();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr& _internal_target() const;
+  ::google::api::expr::v1alpha1::Expr* _internal_mutable_target();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.Call)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 3, 2, 51, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr > args_;
+    ::google::protobuf::internal::ArenaStringPtr function_;
+    ::google::api::expr::v1alpha1::Expr* target_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};// -------------------------------------------------------------------
+
+class Expr_CreateList final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.CreateList) */ {
+ public:
+  inline Expr_CreateList() : Expr_CreateList(nullptr) {}
+  ~Expr_CreateList() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Expr_CreateList(::google::protobuf::internal::ConstantInitialized);
+
+  Expr_CreateList(const Expr_CreateList& from);
+  Expr_CreateList(Expr_CreateList&& from) noexcept
+    : Expr_CreateList() {
+    *this = ::std::move(from);
+  }
+
+  inline Expr_CreateList& operator=(const Expr_CreateList& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Expr_CreateList& operator=(Expr_CreateList&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Expr_CreateList& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Expr_CreateList* internal_default_instance() {
+    return reinterpret_cast<const Expr_CreateList*>(
+               &_Expr_CreateList_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    4;
+
+  friend void swap(Expr_CreateList& a, Expr_CreateList& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Expr_CreateList* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Expr_CreateList* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Expr_CreateList* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Expr_CreateList>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Expr_CreateList& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Expr_CreateList& from) {
+    Expr_CreateList::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Expr_CreateList* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Expr.CreateList";
+  }
+  protected:
+  explicit Expr_CreateList(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kElementsFieldNumber = 1,
+    kOptionalIndicesFieldNumber = 2,
+  };
+  // repeated .google.api.expr.v1alpha1.Expr elements = 1 [json_name = "elements"];
+  int elements_size() const;
+  private:
+  int _internal_elements_size() const;
+
+  public:
+  void clear_elements() ;
+  ::google::api::expr::v1alpha1::Expr* mutable_elements(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >*
+      mutable_elements();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr>& _internal_elements() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr>* _internal_mutable_elements();
+  public:
+  const ::google::api::expr::v1alpha1::Expr& elements(int index) const;
+  ::google::api::expr::v1alpha1::Expr* add_elements();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >&
+      elements() const;
+  // repeated int32 optional_indices = 2 [json_name = "optionalIndices"];
+  int optional_indices_size() const;
+  private:
+  int _internal_optional_indices_size() const;
+
+  public:
+  void clear_optional_indices() ;
+  ::int32_t optional_indices(int index) const;
+  void set_optional_indices(int index, ::int32_t value);
+  void add_optional_indices(::int32_t value);
+  const ::google::protobuf::RepeatedField<::int32_t>& optional_indices() const;
+  ::google::protobuf::RepeatedField<::int32_t>* mutable_optional_indices();
+
+  private:
+  const ::google::protobuf::RepeatedField<::int32_t>& _internal_optional_indices() const;
+  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_optional_indices();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.CreateList)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr > elements_;
+    ::google::protobuf::RepeatedField<::int32_t> optional_indices_;
+    mutable ::google::protobuf::internal::CachedSize _optional_indices_cached_byte_size_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};// -------------------------------------------------------------------
+
+class Expr_CreateStruct_Entry final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.CreateStruct.Entry) */ {
+ public:
+  inline Expr_CreateStruct_Entry() : Expr_CreateStruct_Entry(nullptr) {}
+  ~Expr_CreateStruct_Entry() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Expr_CreateStruct_Entry(::google::protobuf::internal::ConstantInitialized);
+
+  Expr_CreateStruct_Entry(const Expr_CreateStruct_Entry& from);
+  Expr_CreateStruct_Entry(Expr_CreateStruct_Entry&& from) noexcept
+    : Expr_CreateStruct_Entry() {
+    *this = ::std::move(from);
+  }
+
+  inline Expr_CreateStruct_Entry& operator=(const Expr_CreateStruct_Entry& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Expr_CreateStruct_Entry& operator=(Expr_CreateStruct_Entry&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Expr_CreateStruct_Entry& default_instance() {
+    return *internal_default_instance();
+  }
+  enum KeyKindCase {
+    kFieldKey = 2,
+    kMapKey = 3,
+    KEY_KIND_NOT_SET = 0,
+  };
+
+  static inline const Expr_CreateStruct_Entry* internal_default_instance() {
+    return reinterpret_cast<const Expr_CreateStruct_Entry*>(
+               &_Expr_CreateStruct_Entry_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    5;
+
+  friend void swap(Expr_CreateStruct_Entry& a, Expr_CreateStruct_Entry& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Expr_CreateStruct_Entry* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Expr_CreateStruct_Entry* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Expr_CreateStruct_Entry* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Expr_CreateStruct_Entry>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Expr_CreateStruct_Entry& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Expr_CreateStruct_Entry& from) {
+    Expr_CreateStruct_Entry::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Expr_CreateStruct_Entry* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Expr.CreateStruct.Entry";
+  }
+  protected:
+  explicit Expr_CreateStruct_Entry(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kValueFieldNumber = 4,
+    kIdFieldNumber = 1,
+    kOptionalEntryFieldNumber = 5,
+    kFieldKeyFieldNumber = 2,
+    kMapKeyFieldNumber = 3,
+  };
+  // .google.api.expr.v1alpha1.Expr value = 4 [json_name = "value"];
+  bool has_value() const;
+  void clear_value() ;
+  const ::google::api::expr::v1alpha1::Expr& value() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_value();
+  ::google::api::expr::v1alpha1::Expr* mutable_value();
+  void set_allocated_value(::google::api::expr::v1alpha1::Expr* value);
+  void unsafe_arena_set_allocated_value(::google::api::expr::v1alpha1::Expr* value);
+  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_value();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr& _internal_value() const;
+  ::google::api::expr::v1alpha1::Expr* _internal_mutable_value();
+
+  public:
+  // int64 id = 1 [json_name = "id"];
+  void clear_id() ;
+  ::int64_t id() const;
+  void set_id(::int64_t value);
+
+  private:
+  ::int64_t _internal_id() const;
+  void _internal_set_id(::int64_t value);
+
+  public:
+  // bool optional_entry = 5 [json_name = "optionalEntry"];
+  void clear_optional_entry() ;
+  bool optional_entry() const;
+  void set_optional_entry(bool value);
+
+  private:
+  bool _internal_optional_entry() const;
+  void _internal_set_optional_entry(bool value);
+
+  public:
+  // string field_key = 2 [json_name = "fieldKey"];
+  bool has_field_key() const;
+  void clear_field_key() ;
+  const std::string& field_key() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_field_key(Arg_&& arg, Args_... args);
+  std::string* mutable_field_key();
+  PROTOBUF_NODISCARD std::string* release_field_key();
+  void set_allocated_field_key(std::string* ptr);
+
+  private:
+  const std::string& _internal_field_key() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_key(
+      const std::string& value);
+  std::string* _internal_mutable_field_key();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr map_key = 3 [json_name = "mapKey"];
+  bool has_map_key() const;
+  private:
+  bool _internal_has_map_key() const;
+
+  public:
+  void clear_map_key() ;
+  const ::google::api::expr::v1alpha1::Expr& map_key() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_map_key();
+  ::google::api::expr::v1alpha1::Expr* mutable_map_key();
+  void set_allocated_map_key(::google::api::expr::v1alpha1::Expr* value);
+  void unsafe_arena_set_allocated_map_key(::google::api::expr::v1alpha1::Expr* value);
+  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_map_key();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr& _internal_map_key() const;
+  ::google::api::expr::v1alpha1::Expr* _internal_mutable_map_key();
+
+  public:
+  void clear_key_kind();
+  KeyKindCase key_kind_case() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
+ private:
+  class _Internal;
+  void set_has_field_key();
+  void set_has_map_key();
+
+  inline bool has_key_kind() const;
+  inline void clear_has_key_kind();
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<3, 5, 2, 66, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::api::expr::v1alpha1::Expr* value_;
+    ::int64_t id_;
+    bool optional_entry_;
+    union KeyKindUnion {
+      constexpr KeyKindUnion() : _constinit_{} {}
+        ::google::protobuf::internal::ConstantInitialized _constinit_;
+      ::google::protobuf::internal::ArenaStringPtr field_key_;
+      ::google::api::expr::v1alpha1::Expr* map_key_;
+    } key_kind_;
+    ::uint32_t _oneof_case_[1];
+
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};// -------------------------------------------------------------------
+
+class Expr_CreateStruct final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.CreateStruct) */ {
+ public:
+  inline Expr_CreateStruct() : Expr_CreateStruct(nullptr) {}
+  ~Expr_CreateStruct() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Expr_CreateStruct(::google::protobuf::internal::ConstantInitialized);
+
+  Expr_CreateStruct(const Expr_CreateStruct& from);
+  Expr_CreateStruct(Expr_CreateStruct&& from) noexcept
+    : Expr_CreateStruct() {
+    *this = ::std::move(from);
+  }
+
+  inline Expr_CreateStruct& operator=(const Expr_CreateStruct& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Expr_CreateStruct& operator=(Expr_CreateStruct&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Expr_CreateStruct& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Expr_CreateStruct* internal_default_instance() {
+    return reinterpret_cast<const Expr_CreateStruct*>(
+               &_Expr_CreateStruct_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    6;
+
+  friend void swap(Expr_CreateStruct& a, Expr_CreateStruct& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Expr_CreateStruct* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Expr_CreateStruct* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Expr_CreateStruct* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Expr_CreateStruct>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Expr_CreateStruct& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Expr_CreateStruct& from) {
+    Expr_CreateStruct::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Expr_CreateStruct* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Expr.CreateStruct";
+  }
+  protected:
+  explicit Expr_CreateStruct(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef Expr_CreateStruct_Entry Entry;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kEntriesFieldNumber = 2,
+    kMessageNameFieldNumber = 1,
+  };
+  // repeated .google.api.expr.v1alpha1.Expr.CreateStruct.Entry entries = 2 [json_name = "entries"];
+  int entries_size() const;
+  private:
+  int _internal_entries_size() const;
+
+  public:
+  void clear_entries() ;
+  ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* mutable_entries(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry >*
+      mutable_entries();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr_CreateStruct_Entry>& _internal_entries() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr_CreateStruct_Entry>* _internal_mutable_entries();
+  public:
+  const ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry& entries(int index) const;
+  ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* add_entries();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry >&
+      entries() const;
+  // string message_name = 1 [json_name = "messageName"];
+  void clear_message_name() ;
+  const std::string& message_name() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_message_name(Arg_&& arg, Args_... args);
+  std::string* mutable_message_name();
+  PROTOBUF_NODISCARD std::string* release_message_name();
+  void set_allocated_message_name(std::string* ptr);
+
+  private:
+  const std::string& _internal_message_name() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_name(
+      const std::string& value);
+  std::string* _internal_mutable_message_name();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.CreateStruct)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 63, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry > entries_;
+    ::google::protobuf::internal::ArenaStringPtr message_name_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};// -------------------------------------------------------------------
+
+class Expr_Comprehension final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.Comprehension) */ {
+ public:
+  inline Expr_Comprehension() : Expr_Comprehension(nullptr) {}
+  ~Expr_Comprehension() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Expr_Comprehension(::google::protobuf::internal::ConstantInitialized);
+
+  Expr_Comprehension(const Expr_Comprehension& from);
+  Expr_Comprehension(Expr_Comprehension&& from) noexcept
+    : Expr_Comprehension() {
+    *this = ::std::move(from);
+  }
+
+  inline Expr_Comprehension& operator=(const Expr_Comprehension& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Expr_Comprehension& operator=(Expr_Comprehension&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Expr_Comprehension& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Expr_Comprehension* internal_default_instance() {
+    return reinterpret_cast<const Expr_Comprehension*>(
+               &_Expr_Comprehension_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    7;
+
+  friend void swap(Expr_Comprehension& a, Expr_Comprehension& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Expr_Comprehension* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Expr_Comprehension* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Expr_Comprehension* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Expr_Comprehension>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Expr_Comprehension& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Expr_Comprehension& from) {
+    Expr_Comprehension::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Expr_Comprehension* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Expr.Comprehension";
+  }
+  protected:
+  explicit Expr_Comprehension(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kIterVarFieldNumber = 1,
+    kAccuVarFieldNumber = 3,
+    kIterRangeFieldNumber = 2,
+    kAccuInitFieldNumber = 4,
+    kLoopConditionFieldNumber = 5,
+    kLoopStepFieldNumber = 6,
+    kResultFieldNumber = 7,
+  };
+  // string iter_var = 1 [json_name = "iterVar"];
+  void clear_iter_var() ;
+  const std::string& iter_var() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_iter_var(Arg_&& arg, Args_... args);
+  std::string* mutable_iter_var();
+  PROTOBUF_NODISCARD std::string* release_iter_var();
+  void set_allocated_iter_var(std::string* ptr);
+
+  private:
+  const std::string& _internal_iter_var() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iter_var(
+      const std::string& value);
+  std::string* _internal_mutable_iter_var();
+
+  public:
+  // string accu_var = 3 [json_name = "accuVar"];
+  void clear_accu_var() ;
+  const std::string& accu_var() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_accu_var(Arg_&& arg, Args_... args);
+  std::string* mutable_accu_var();
+  PROTOBUF_NODISCARD std::string* release_accu_var();
+  void set_allocated_accu_var(std::string* ptr);
+
+  private:
+  const std::string& _internal_accu_var() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accu_var(
+      const std::string& value);
+  std::string* _internal_mutable_accu_var();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr iter_range = 2 [json_name = "iterRange"];
+  bool has_iter_range() const;
+  void clear_iter_range() ;
+  const ::google::api::expr::v1alpha1::Expr& iter_range() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_iter_range();
+  ::google::api::expr::v1alpha1::Expr* mutable_iter_range();
+  void set_allocated_iter_range(::google::api::expr::v1alpha1::Expr* value);
+  void unsafe_arena_set_allocated_iter_range(::google::api::expr::v1alpha1::Expr* value);
+  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_iter_range();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr& _internal_iter_range() const;
+  ::google::api::expr::v1alpha1::Expr* _internal_mutable_iter_range();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr accu_init = 4 [json_name = "accuInit"];
+  bool has_accu_init() const;
+  void clear_accu_init() ;
+  const ::google::api::expr::v1alpha1::Expr& accu_init() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_accu_init();
+  ::google::api::expr::v1alpha1::Expr* mutable_accu_init();
+  void set_allocated_accu_init(::google::api::expr::v1alpha1::Expr* value);
+  void unsafe_arena_set_allocated_accu_init(::google::api::expr::v1alpha1::Expr* value);
+  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_accu_init();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr& _internal_accu_init() const;
+  ::google::api::expr::v1alpha1::Expr* _internal_mutable_accu_init();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr loop_condition = 5 [json_name = "loopCondition"];
+  bool has_loop_condition() const;
+  void clear_loop_condition() ;
+  const ::google::api::expr::v1alpha1::Expr& loop_condition() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_loop_condition();
+  ::google::api::expr::v1alpha1::Expr* mutable_loop_condition();
+  void set_allocated_loop_condition(::google::api::expr::v1alpha1::Expr* value);
+  void unsafe_arena_set_allocated_loop_condition(::google::api::expr::v1alpha1::Expr* value);
+  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_loop_condition();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr& _internal_loop_condition() const;
+  ::google::api::expr::v1alpha1::Expr* _internal_mutable_loop_condition();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr loop_step = 6 [json_name = "loopStep"];
+  bool has_loop_step() const;
+  void clear_loop_step() ;
+  const ::google::api::expr::v1alpha1::Expr& loop_step() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_loop_step();
+  ::google::api::expr::v1alpha1::Expr* mutable_loop_step();
+  void set_allocated_loop_step(::google::api::expr::v1alpha1::Expr* value);
+  void unsafe_arena_set_allocated_loop_step(::google::api::expr::v1alpha1::Expr* value);
+  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_loop_step();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr& _internal_loop_step() const;
+  ::google::api::expr::v1alpha1::Expr* _internal_mutable_loop_step();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr result = 7 [json_name = "result"];
+  bool has_result() const;
+  void clear_result() ;
+  const ::google::api::expr::v1alpha1::Expr& result() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_result();
+  ::google::api::expr::v1alpha1::Expr* mutable_result();
+  void set_allocated_result(::google::api::expr::v1alpha1::Expr* value);
+  void unsafe_arena_set_allocated_result(::google::api::expr::v1alpha1::Expr* value);
+  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_result();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr& _internal_result() const;
+  ::google::api::expr::v1alpha1::Expr* _internal_mutable_result();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.Comprehension)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<3, 7, 5, 68, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::internal::ArenaStringPtr iter_var_;
+    ::google::protobuf::internal::ArenaStringPtr accu_var_;
+    ::google::api::expr::v1alpha1::Expr* iter_range_;
+    ::google::api::expr::v1alpha1::Expr* accu_init_;
+    ::google::api::expr::v1alpha1::Expr* loop_condition_;
+    ::google::api::expr::v1alpha1::Expr* loop_step_;
+    ::google::api::expr::v1alpha1::Expr* result_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};// -------------------------------------------------------------------
+
+class Expr final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr) */ {
+ public:
+  inline Expr() : Expr(nullptr) {}
+  ~Expr() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Expr(::google::protobuf::internal::ConstantInitialized);
+
+  Expr(const Expr& from);
+  Expr(Expr&& from) noexcept
+    : Expr() {
+    *this = ::std::move(from);
+  }
+
+  inline Expr& operator=(const Expr& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Expr& operator=(Expr&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Expr& default_instance() {
+    return *internal_default_instance();
+  }
+  enum ExprKindCase {
+    kConstExpr = 3,
+    kIdentExpr = 4,
+    kSelectExpr = 5,
+    kCallExpr = 6,
+    kListExpr = 7,
+    kStructExpr = 8,
+    kComprehensionExpr = 9,
+    EXPR_KIND_NOT_SET = 0,
+  };
+
+  static inline const Expr* internal_default_instance() {
+    return reinterpret_cast<const Expr*>(
+               &_Expr_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    8;
+
+  friend void swap(Expr& a, Expr& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Expr* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Expr* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Expr* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Expr>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Expr& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Expr& from) {
+    Expr::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Expr* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Expr";
+  }
+  protected:
+  explicit Expr(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef Expr_Ident Ident;
+  typedef Expr_Select Select;
+  typedef Expr_Call Call;
+  typedef Expr_CreateList CreateList;
+  typedef Expr_CreateStruct CreateStruct;
+  typedef Expr_Comprehension Comprehension;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kIdFieldNumber = 2,
+    kConstExprFieldNumber = 3,
+    kIdentExprFieldNumber = 4,
+    kSelectExprFieldNumber = 5,
+    kCallExprFieldNumber = 6,
+    kListExprFieldNumber = 7,
+    kStructExprFieldNumber = 8,
+    kComprehensionExprFieldNumber = 9,
+  };
+  // int64 id = 2 [json_name = "id"];
+  void clear_id() ;
+  ::int64_t id() const;
+  void set_id(::int64_t value);
+
+  private:
+  ::int64_t _internal_id() const;
+  void _internal_set_id(::int64_t value);
+
+  public:
+  // .google.api.expr.v1alpha1.Constant const_expr = 3 [json_name = "constExpr"];
+  bool has_const_expr() const;
+  private:
+  bool _internal_has_const_expr() const;
+
+  public:
+  void clear_const_expr() ;
+  const ::google::api::expr::v1alpha1::Constant& const_expr() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Constant* release_const_expr();
+  ::google::api::expr::v1alpha1::Constant* mutable_const_expr();
+  void set_allocated_const_expr(::google::api::expr::v1alpha1::Constant* value);
+  void unsafe_arena_set_allocated_const_expr(::google::api::expr::v1alpha1::Constant* value);
+  ::google::api::expr::v1alpha1::Constant* unsafe_arena_release_const_expr();
+
+  private:
+  const ::google::api::expr::v1alpha1::Constant& _internal_const_expr() const;
+  ::google::api::expr::v1alpha1::Constant* _internal_mutable_const_expr();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr.Ident ident_expr = 4 [json_name = "identExpr"];
+  bool has_ident_expr() const;
+  private:
+  bool _internal_has_ident_expr() const;
+
+  public:
+  void clear_ident_expr() ;
+  const ::google::api::expr::v1alpha1::Expr_Ident& ident_expr() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_Ident* release_ident_expr();
+  ::google::api::expr::v1alpha1::Expr_Ident* mutable_ident_expr();
+  void set_allocated_ident_expr(::google::api::expr::v1alpha1::Expr_Ident* value);
+  void unsafe_arena_set_allocated_ident_expr(::google::api::expr::v1alpha1::Expr_Ident* value);
+  ::google::api::expr::v1alpha1::Expr_Ident* unsafe_arena_release_ident_expr();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr_Ident& _internal_ident_expr() const;
+  ::google::api::expr::v1alpha1::Expr_Ident* _internal_mutable_ident_expr();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr.Select select_expr = 5 [json_name = "selectExpr"];
+  bool has_select_expr() const;
+  private:
+  bool _internal_has_select_expr() const;
+
+  public:
+  void clear_select_expr() ;
+  const ::google::api::expr::v1alpha1::Expr_Select& select_expr() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_Select* release_select_expr();
+  ::google::api::expr::v1alpha1::Expr_Select* mutable_select_expr();
+  void set_allocated_select_expr(::google::api::expr::v1alpha1::Expr_Select* value);
+  void unsafe_arena_set_allocated_select_expr(::google::api::expr::v1alpha1::Expr_Select* value);
+  ::google::api::expr::v1alpha1::Expr_Select* unsafe_arena_release_select_expr();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr_Select& _internal_select_expr() const;
+  ::google::api::expr::v1alpha1::Expr_Select* _internal_mutable_select_expr();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr.Call call_expr = 6 [json_name = "callExpr"];
+  bool has_call_expr() const;
+  private:
+  bool _internal_has_call_expr() const;
+
+  public:
+  void clear_call_expr() ;
+  const ::google::api::expr::v1alpha1::Expr_Call& call_expr() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_Call* release_call_expr();
+  ::google::api::expr::v1alpha1::Expr_Call* mutable_call_expr();
+  void set_allocated_call_expr(::google::api::expr::v1alpha1::Expr_Call* value);
+  void unsafe_arena_set_allocated_call_expr(::google::api::expr::v1alpha1::Expr_Call* value);
+  ::google::api::expr::v1alpha1::Expr_Call* unsafe_arena_release_call_expr();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr_Call& _internal_call_expr() const;
+  ::google::api::expr::v1alpha1::Expr_Call* _internal_mutable_call_expr();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr.CreateList list_expr = 7 [json_name = "listExpr"];
+  bool has_list_expr() const;
+  private:
+  bool _internal_has_list_expr() const;
+
+  public:
+  void clear_list_expr() ;
+  const ::google::api::expr::v1alpha1::Expr_CreateList& list_expr() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_CreateList* release_list_expr();
+  ::google::api::expr::v1alpha1::Expr_CreateList* mutable_list_expr();
+  void set_allocated_list_expr(::google::api::expr::v1alpha1::Expr_CreateList* value);
+  void unsafe_arena_set_allocated_list_expr(::google::api::expr::v1alpha1::Expr_CreateList* value);
+  ::google::api::expr::v1alpha1::Expr_CreateList* unsafe_arena_release_list_expr();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr_CreateList& _internal_list_expr() const;
+  ::google::api::expr::v1alpha1::Expr_CreateList* _internal_mutable_list_expr();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr.CreateStruct struct_expr = 8 [json_name = "structExpr"];
+  bool has_struct_expr() const;
+  private:
+  bool _internal_has_struct_expr() const;
+
+  public:
+  void clear_struct_expr() ;
+  const ::google::api::expr::v1alpha1::Expr_CreateStruct& struct_expr() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_CreateStruct* release_struct_expr();
+  ::google::api::expr::v1alpha1::Expr_CreateStruct* mutable_struct_expr();
+  void set_allocated_struct_expr(::google::api::expr::v1alpha1::Expr_CreateStruct* value);
+  void unsafe_arena_set_allocated_struct_expr(::google::api::expr::v1alpha1::Expr_CreateStruct* value);
+  ::google::api::expr::v1alpha1::Expr_CreateStruct* unsafe_arena_release_struct_expr();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr_CreateStruct& _internal_struct_expr() const;
+  ::google::api::expr::v1alpha1::Expr_CreateStruct* _internal_mutable_struct_expr();
+
+  public:
+  // .google.api.expr.v1alpha1.Expr.Comprehension comprehension_expr = 9 [json_name = "comprehensionExpr"];
+  bool has_comprehension_expr() const;
+  private:
+  bool _internal_has_comprehension_expr() const;
+
+  public:
+  void clear_comprehension_expr() ;
+  const ::google::api::expr::v1alpha1::Expr_Comprehension& comprehension_expr() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_Comprehension* release_comprehension_expr();
+  ::google::api::expr::v1alpha1::Expr_Comprehension* mutable_comprehension_expr();
+  void set_allocated_comprehension_expr(::google::api::expr::v1alpha1::Expr_Comprehension* value);
+  void unsafe_arena_set_allocated_comprehension_expr(::google::api::expr::v1alpha1::Expr_Comprehension* value);
+  ::google::api::expr::v1alpha1::Expr_Comprehension* unsafe_arena_release_comprehension_expr();
+
+  private:
+  const ::google::api::expr::v1alpha1::Expr_Comprehension& _internal_comprehension_expr() const;
+  ::google::api::expr::v1alpha1::Expr_Comprehension* _internal_mutable_comprehension_expr();
+
+  public:
+  void clear_expr_kind();
+  ExprKindCase expr_kind_case() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr)
+ private:
+  class _Internal;
+  void set_has_const_expr();
+  void set_has_ident_expr();
+  void set_has_select_expr();
+  void set_has_call_expr();
+  void set_has_list_expr();
+  void set_has_struct_expr();
+  void set_has_comprehension_expr();
+
+  inline bool has_expr_kind() const;
+  inline void clear_has_expr_kind();
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 8, 7, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::int64_t id_;
+    union ExprKindUnion {
+      constexpr ExprKindUnion() : _constinit_{} {}
+        ::google::protobuf::internal::ConstantInitialized _constinit_;
+      ::google::api::expr::v1alpha1::Constant* const_expr_;
+      ::google::api::expr::v1alpha1::Expr_Ident* ident_expr_;
+      ::google::api::expr::v1alpha1::Expr_Select* select_expr_;
+      ::google::api::expr::v1alpha1::Expr_Call* call_expr_;
+      ::google::api::expr::v1alpha1::Expr_CreateList* list_expr_;
+      ::google::api::expr::v1alpha1::Expr_CreateStruct* struct_expr_;
+      ::google::api::expr::v1alpha1::Expr_Comprehension* comprehension_expr_;
+    } expr_kind_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::uint32_t _oneof_case_[1];
+
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};// -------------------------------------------------------------------
+
+class Constant final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Constant) */ {
+ public:
+  inline Constant() : Constant(nullptr) {}
+  ~Constant() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Constant(::google::protobuf::internal::ConstantInitialized);
+
+  Constant(const Constant& from);
+  Constant(Constant&& from) noexcept
+    : Constant() {
+    *this = ::std::move(from);
+  }
+
+  inline Constant& operator=(const Constant& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Constant& operator=(Constant&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Constant& default_instance() {
+    return *internal_default_instance();
+  }
+  enum ConstantKindCase {
+    kNullValue = 1,
+    kBoolValue = 2,
+    kInt64Value = 3,
+    kUint64Value = 4,
+    kDoubleValue = 5,
+    kStringValue = 6,
+    kBytesValue = 7,
+    kDurationValue = 8,
+    kTimestampValue = 9,
+    CONSTANT_KIND_NOT_SET = 0,
+  };
+
+  static inline const Constant* internal_default_instance() {
+    return reinterpret_cast<const Constant*>(
+               &_Constant_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    9;
+
+  friend void swap(Constant& a, Constant& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Constant* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Constant* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Constant* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Constant>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Constant& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Constant& from) {
+    Constant::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Constant* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Constant";
+  }
+  protected:
+  explicit Constant(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kNullValueFieldNumber = 1,
+    kBoolValueFieldNumber = 2,
+    kInt64ValueFieldNumber = 3,
+    kUint64ValueFieldNumber = 4,
+    kDoubleValueFieldNumber = 5,
+    kStringValueFieldNumber = 6,
+    kBytesValueFieldNumber = 7,
+    kDurationValueFieldNumber = 8,
+    kTimestampValueFieldNumber = 9,
+  };
+  // .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
+  bool has_null_value() const;
+  void clear_null_value() ;
+  ::google::protobuf::NullValue null_value() const;
+  void set_null_value(::google::protobuf::NullValue value);
+
+  private:
+  ::google::protobuf::NullValue _internal_null_value() const;
+  void _internal_set_null_value(::google::protobuf::NullValue value);
+
+  public:
+  // bool bool_value = 2 [json_name = "boolValue"];
+  bool has_bool_value() const;
+  void clear_bool_value() ;
+  bool bool_value() const;
+  void set_bool_value(bool value);
+
+  private:
+  bool _internal_bool_value() const;
+  void _internal_set_bool_value(bool value);
+
+  public:
+  // int64 int64_value = 3 [json_name = "int64Value"];
+  bool has_int64_value() const;
+  void clear_int64_value() ;
+  ::int64_t int64_value() const;
+  void set_int64_value(::int64_t value);
+
+  private:
+  ::int64_t _internal_int64_value() const;
+  void _internal_set_int64_value(::int64_t value);
+
+  public:
+  // uint64 uint64_value = 4 [json_name = "uint64Value"];
+  bool has_uint64_value() const;
+  void clear_uint64_value() ;
+  ::uint64_t uint64_value() const;
+  void set_uint64_value(::uint64_t value);
+
+  private:
+  ::uint64_t _internal_uint64_value() const;
+  void _internal_set_uint64_value(::uint64_t value);
+
+  public:
+  // double double_value = 5 [json_name = "doubleValue"];
+  bool has_double_value() const;
+  void clear_double_value() ;
+  double double_value() const;
+  void set_double_value(double value);
+
+  private:
+  double _internal_double_value() const;
+  void _internal_set_double_value(double value);
+
+  public:
+  // string string_value = 6 [json_name = "stringValue"];
+  bool has_string_value() const;
+  void clear_string_value() ;
+  const std::string& string_value() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_string_value(Arg_&& arg, Args_... args);
+  std::string* mutable_string_value();
+  PROTOBUF_NODISCARD std::string* release_string_value();
+  void set_allocated_string_value(std::string* ptr);
+
+  private:
+  const std::string& _internal_string_value() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
+      const std::string& value);
+  std::string* _internal_mutable_string_value();
+
+  public:
+  // bytes bytes_value = 7 [json_name = "bytesValue"];
+  bool has_bytes_value() const;
+  void clear_bytes_value() ;
+  const std::string& bytes_value() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_bytes_value(Arg_&& arg, Args_... args);
+  std::string* mutable_bytes_value();
+  PROTOBUF_NODISCARD std::string* release_bytes_value();
+  void set_allocated_bytes_value(std::string* ptr);
+
+  private:
+  const std::string& _internal_bytes_value() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(
+      const std::string& value);
+  std::string* _internal_mutable_bytes_value();
+
+  public:
+  // .google.protobuf.Duration duration_value = 8 [json_name = "durationValue", deprecated = true];
+  [[deprecated]]  bool has_duration_value() const;
+  private:
+  bool _internal_has_duration_value() const;
+
+  public:
+  [[deprecated]]  void clear_duration_value() ;
+  [[deprecated]] const ::google::protobuf::Duration& duration_value() const;
+  [[deprecated]] PROTOBUF_NODISCARD ::google::protobuf::Duration* release_duration_value();
+  [[deprecated]] ::google::protobuf::Duration* mutable_duration_value();
+  [[deprecated]] void set_allocated_duration_value(::google::protobuf::Duration* value);
+  [[deprecated]] void unsafe_arena_set_allocated_duration_value(::google::protobuf::Duration* value);
+  [[deprecated]] ::google::protobuf::Duration* unsafe_arena_release_duration_value();
+
+  private:
+  const ::google::protobuf::Duration& _internal_duration_value() const;
+  ::google::protobuf::Duration* _internal_mutable_duration_value();
+
+  public:
+  // .google.protobuf.Timestamp timestamp_value = 9 [json_name = "timestampValue", deprecated = true];
+  [[deprecated]]  bool has_timestamp_value() const;
+  private:
+  bool _internal_has_timestamp_value() const;
+
+  public:
+  [[deprecated]]  void clear_timestamp_value() ;
+  [[deprecated]] const ::google::protobuf::Timestamp& timestamp_value() const;
+  [[deprecated]] PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp_value();
+  [[deprecated]] ::google::protobuf::Timestamp* mutable_timestamp_value();
+  [[deprecated]] void set_allocated_timestamp_value(::google::protobuf::Timestamp* value);
+  [[deprecated]] void unsafe_arena_set_allocated_timestamp_value(::google::protobuf::Timestamp* value);
+  [[deprecated]] ::google::protobuf::Timestamp* unsafe_arena_release_timestamp_value();
+
+  private:
+  const ::google::protobuf::Timestamp& _internal_timestamp_value() const;
+  ::google::protobuf::Timestamp* _internal_mutable_timestamp_value();
+
+  public:
+  void clear_constant_kind();
+  ConstantKindCase constant_kind_case() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Constant)
+ private:
+  class _Internal;
+  void set_has_null_value();
+  void set_has_bool_value();
+  void set_has_int64_value();
+  void set_has_uint64_value();
+  void set_has_double_value();
+  void set_has_string_value();
+  void set_has_bytes_value();
+  void set_has_duration_value();
+  void set_has_timestamp_value();
+
+  inline bool has_constant_kind() const;
+  inline void clear_has_constant_kind();
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 9, 2, 62, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    union ConstantKindUnion {
+      constexpr ConstantKindUnion() : _constinit_{} {}
+        ::google::protobuf::internal::ConstantInitialized _constinit_;
+      int null_value_;
+      bool bool_value_;
+      ::int64_t int64_value_;
+      ::uint64_t uint64_value_;
+      double double_value_;
+      ::google::protobuf::internal::ArenaStringPtr string_value_;
+      ::google::protobuf::internal::ArenaStringPtr bytes_value_;
+      ::google::protobuf::Duration* duration_value_;
+      ::google::protobuf::Timestamp* timestamp_value_;
+    } constant_kind_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::uint32_t _oneof_case_[1];
+
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};// -------------------------------------------------------------------
+
+class SourceInfo_PositionsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<SourceInfo_PositionsEntry_DoNotUse, 
+    ::int64_t, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<SourceInfo_PositionsEntry_DoNotUse, 
+    ::int64_t, ::int32_t,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT32> SuperType;
+  SourceInfo_PositionsEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR SourceInfo_PositionsEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit SourceInfo_PositionsEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const SourceInfo_PositionsEntry_DoNotUse& other);
+  static const SourceInfo_PositionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SourceInfo_PositionsEntry_DoNotUse*>(&_SourceInfo_PositionsEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(void*) { return true; }
+  static bool ValidateValue(void*) { return true; }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};
+// -------------------------------------------------------------------
+
+class SourceInfo_MacroCallsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<SourceInfo_MacroCallsEntry_DoNotUse, 
+    ::int64_t, ::google::api::expr::v1alpha1::Expr,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<SourceInfo_MacroCallsEntry_DoNotUse, 
+    ::int64_t, ::google::api::expr::v1alpha1::Expr,
+    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
+  SourceInfo_MacroCallsEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR SourceInfo_MacroCallsEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit SourceInfo_MacroCallsEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const SourceInfo_MacroCallsEntry_DoNotUse& other);
+  static const SourceInfo_MacroCallsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SourceInfo_MacroCallsEntry_DoNotUse*>(&_SourceInfo_MacroCallsEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(void*) { return true; }
+  static bool ValidateValue(void*) { return true; }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};
+// -------------------------------------------------------------------
+
+class SourceInfo final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.SourceInfo) */ {
+ public:
+  inline SourceInfo() : SourceInfo(nullptr) {}
+  ~SourceInfo() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR SourceInfo(::google::protobuf::internal::ConstantInitialized);
+
+  SourceInfo(const SourceInfo& from);
+  SourceInfo(SourceInfo&& from) noexcept
+    : SourceInfo() {
+    *this = ::std::move(from);
+  }
+
+  inline SourceInfo& operator=(const SourceInfo& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline SourceInfo& operator=(SourceInfo&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const SourceInfo& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const SourceInfo* internal_default_instance() {
+    return reinterpret_cast<const SourceInfo*>(
+               &_SourceInfo_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    12;
+
+  friend void swap(SourceInfo& a, SourceInfo& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(SourceInfo* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(SourceInfo* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  SourceInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<SourceInfo>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const SourceInfo& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const SourceInfo& from) {
+    SourceInfo::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(SourceInfo* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.SourceInfo";
+  }
+  protected:
+  explicit SourceInfo(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kLineOffsetsFieldNumber = 3,
+    kPositionsFieldNumber = 4,
+    kMacroCallsFieldNumber = 5,
+    kSyntaxVersionFieldNumber = 1,
+    kLocationFieldNumber = 2,
+  };
+  // repeated int32 line_offsets = 3 [json_name = "lineOffsets"];
+  int line_offsets_size() const;
+  private:
+  int _internal_line_offsets_size() const;
+
+  public:
+  void clear_line_offsets() ;
+  ::int32_t line_offsets(int index) const;
+  void set_line_offsets(int index, ::int32_t value);
+  void add_line_offsets(::int32_t value);
+  const ::google::protobuf::RepeatedField<::int32_t>& line_offsets() const;
+  ::google::protobuf::RepeatedField<::int32_t>* mutable_line_offsets();
+
+  private:
+  const ::google::protobuf::RepeatedField<::int32_t>& _internal_line_offsets() const;
+  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_line_offsets();
+
+  public:
+  // map<int64, int32> positions = 4 [json_name = "positions"];
+  int positions_size() const;
+  private:
+  int _internal_positions_size() const;
+
+  public:
+  void clear_positions() ;
+  const ::google::protobuf::Map<::int64_t, ::int32_t>& positions() const;
+  ::google::protobuf::Map<::int64_t, ::int32_t>* mutable_positions();
+
+  private:
+  const ::google::protobuf::Map<::int64_t, ::int32_t>& _internal_positions() const;
+  ::google::protobuf::Map<::int64_t, ::int32_t>* _internal_mutable_positions();
+
+  public:
+  // map<int64, .google.api.expr.v1alpha1.Expr> macro_calls = 5 [json_name = "macroCalls"];
+  int macro_calls_size() const;
+  private:
+  int _internal_macro_calls_size() const;
+
+  public:
+  void clear_macro_calls() ;
+  const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Expr>& macro_calls() const;
+  ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Expr>* mutable_macro_calls();
+
+  private:
+  const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Expr>& _internal_macro_calls() const;
+  ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Expr>* _internal_mutable_macro_calls();
+
+  public:
+  // string syntax_version = 1 [json_name = "syntaxVersion"];
+  void clear_syntax_version() ;
+  const std::string& syntax_version() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_syntax_version(Arg_&& arg, Args_... args);
+  std::string* mutable_syntax_version();
+  PROTOBUF_NODISCARD std::string* release_syntax_version();
+  void set_allocated_syntax_version(std::string* ptr);
+
+  private:
+  const std::string& _internal_syntax_version() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_syntax_version(
+      const std::string& value);
+  std::string* _internal_mutable_syntax_version();
+
+  public:
+  // string location = 2 [json_name = "location"];
+  void clear_location() ;
+  const std::string& location() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_location(Arg_&& arg, Args_... args);
+  std::string* mutable_location();
+  PROTOBUF_NODISCARD std::string* release_location();
+  void set_allocated_location(std::string* ptr);
+
+  private:
+  const std::string& _internal_location() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
+      const std::string& value);
+  std::string* _internal_mutable_location();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.SourceInfo)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 5, 3, 66, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedField<::int32_t> line_offsets_;
+    mutable ::google::protobuf::internal::CachedSize _line_offsets_cached_byte_size_;
+    ::google::protobuf::internal::MapField<SourceInfo_PositionsEntry_DoNotUse, ::int64_t, ::int32_t,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
+        positions_;
+    ::google::protobuf::internal::MapField<SourceInfo_MacroCallsEntry_DoNotUse, ::int64_t, ::google::api::expr::v1alpha1::Expr,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
+        macro_calls_;
+    ::google::protobuf::internal::ArenaStringPtr syntax_version_;
+    ::google::protobuf::internal::ArenaStringPtr location_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};// -------------------------------------------------------------------
+
+class SourcePosition final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.SourcePosition) */ {
+ public:
+  inline SourcePosition() : SourcePosition(nullptr) {}
+  ~SourcePosition() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR SourcePosition(::google::protobuf::internal::ConstantInitialized);
+
+  SourcePosition(const SourcePosition& from);
+  SourcePosition(SourcePosition&& from) noexcept
+    : SourcePosition() {
+    *this = ::std::move(from);
+  }
+
+  inline SourcePosition& operator=(const SourcePosition& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline SourcePosition& operator=(SourcePosition&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const SourcePosition& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const SourcePosition* internal_default_instance() {
+    return reinterpret_cast<const SourcePosition*>(
+               &_SourcePosition_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    13;
+
+  friend void swap(SourcePosition& a, SourcePosition& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(SourcePosition* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(SourcePosition* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  SourcePosition* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<SourcePosition>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const SourcePosition& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const SourcePosition& from) {
+    SourcePosition::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(SourcePosition* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.SourcePosition";
+  }
+  protected:
+  explicit SourcePosition(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kLocationFieldNumber = 1,
+    kOffsetFieldNumber = 2,
+    kLineFieldNumber = 3,
+    kColumnFieldNumber = 4,
+  };
+  // string location = 1 [json_name = "location"];
+  void clear_location() ;
+  const std::string& location() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_location(Arg_&& arg, Args_... args);
+  std::string* mutable_location();
+  PROTOBUF_NODISCARD std::string* release_location();
+  void set_allocated_location(std::string* ptr);
+
+  private:
+  const std::string& _internal_location() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
+      const std::string& value);
+  std::string* _internal_mutable_location();
+
+  public:
+  // int32 offset = 2 [json_name = "offset"];
+  void clear_offset() ;
+  ::int32_t offset() const;
+  void set_offset(::int32_t value);
+
+  private:
+  ::int32_t _internal_offset() const;
+  void _internal_set_offset(::int32_t value);
+
+  public:
+  // int32 line = 3 [json_name = "line"];
+  void clear_line() ;
+  ::int32_t line() const;
+  void set_line(::int32_t value);
+
+  private:
+  ::int32_t _internal_line() const;
+  void _internal_set_line(::int32_t value);
+
+  public:
+  // int32 column = 4 [json_name = "column"];
+  void clear_column() ;
+  ::int32_t column() const;
+  void set_column(::int32_t value);
+
+  private:
+  ::int32_t _internal_column() const;
+  void _internal_set_column(::int32_t value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.SourcePosition)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 56, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr location_;
+    ::int32_t offset_;
+    ::int32_t line_;
+    ::int32_t column_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
+};
+
+// ===================================================================
+
+
+
+
+// ===================================================================
+
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif  // __GNUC__
+// -------------------------------------------------------------------
+
+// ParsedExpr
+
+// .google.api.expr.v1alpha1.Expr expr = 2 [json_name = "expr"];
+inline bool ParsedExpr::has_expr() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.expr_ != nullptr);
+  return value;
+}
+inline void ParsedExpr::clear_expr() {
+  if (_impl_.expr_ != nullptr) _impl_.expr_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::v1alpha1::Expr& ParsedExpr::_internal_expr() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Expr* p = _impl_.expr_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr& ParsedExpr::expr() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.ParsedExpr.expr)
+  return _internal_expr();
+}
+inline void ParsedExpr::unsafe_arena_set_allocated_expr(::google::api::expr::v1alpha1::Expr* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expr_);
+  }
+  _impl_.expr_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.ParsedExpr.expr)
+}
+inline ::google::api::expr::v1alpha1::Expr* ParsedExpr::release_expr() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* released = _impl_.expr_;
+  _impl_.expr_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Expr* ParsedExpr::unsafe_arena_release_expr() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.ParsedExpr.expr)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* temp = _impl_.expr_;
+  _impl_.expr_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Expr* ParsedExpr::_internal_mutable_expr() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.expr_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
+    _impl_.expr_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(p);
+  }
+  return _impl_.expr_;
+}
+inline ::google::api::expr::v1alpha1::Expr* ParsedExpr::mutable_expr() {
+  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_expr();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.ParsedExpr.expr)
+  return _msg;
+}
+inline void ParsedExpr::set_allocated_expr(::google::api::expr::v1alpha1::Expr* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(_impl_.expr_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.expr_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.ParsedExpr.expr)
+}
+
+// .google.api.expr.v1alpha1.SourceInfo source_info = 3 [json_name = "sourceInfo"];
+inline bool ParsedExpr::has_source_info() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.source_info_ != nullptr);
+  return value;
+}
+inline void ParsedExpr::clear_source_info() {
+  if (_impl_.source_info_ != nullptr) _impl_.source_info_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000002u;
+}
+inline const ::google::api::expr::v1alpha1::SourceInfo& ParsedExpr::_internal_source_info() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::SourceInfo* p = _impl_.source_info_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::SourceInfo&>(::google::api::expr::v1alpha1::_SourceInfo_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::SourceInfo& ParsedExpr::source_info() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.ParsedExpr.source_info)
+  return _internal_source_info();
+}
+inline void ParsedExpr::unsafe_arena_set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_info_);
+  }
+  _impl_.source_info_ = reinterpret_cast<::google::api::expr::v1alpha1::SourceInfo*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.ParsedExpr.source_info)
+}
+inline ::google::api::expr::v1alpha1::SourceInfo* ParsedExpr::release_source_info() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::SourceInfo* released = _impl_.source_info_;
+  _impl_.source_info_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::SourceInfo* ParsedExpr::unsafe_arena_release_source_info() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.ParsedExpr.source_info)
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::SourceInfo* temp = _impl_.source_info_;
+  _impl_.source_info_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::SourceInfo* ParsedExpr::_internal_mutable_source_info() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000002u;
+  if (_impl_.source_info_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::SourceInfo>(GetArenaForAllocation());
+    _impl_.source_info_ = reinterpret_cast<::google::api::expr::v1alpha1::SourceInfo*>(p);
+  }
+  return _impl_.source_info_;
+}
+inline ::google::api::expr::v1alpha1::SourceInfo* ParsedExpr::mutable_source_info() {
+  ::google::api::expr::v1alpha1::SourceInfo* _msg = _internal_mutable_source_info();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.ParsedExpr.source_info)
+  return _msg;
+}
+inline void ParsedExpr::set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::SourceInfo*>(_impl_.source_info_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::SourceInfo*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+
+  _impl_.source_info_ = reinterpret_cast<::google::api::expr::v1alpha1::SourceInfo*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.ParsedExpr.source_info)
+}
+
+// -------------------------------------------------------------------
+
+// Expr_Ident
+
+// string name = 1 [json_name = "name"];
+inline void Expr_Ident::clear_name() {
+  _impl_.name_.ClearToEmpty();
+}
+inline const std::string& Expr_Ident::name() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Ident.name)
+  return _internal_name();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Expr_Ident::set_name(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Ident.name)
+}
+inline std::string* Expr_Ident::mutable_name() {
+  std::string* _s = _internal_mutable_name();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Ident.name)
+  return _s;
+}
+inline const std::string& Expr_Ident::_internal_name() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.name_.Get();
+}
+inline void Expr_Ident::_internal_set_name(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.name_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Expr_Ident::_internal_mutable_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.name_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Expr_Ident::release_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Ident.name)
+  return _impl_.name_.Release();
+}
+inline void Expr_Ident::set_allocated_name(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.name_.IsDefault()) {
+          _impl_.name_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Ident.name)
+}
+
+// -------------------------------------------------------------------
+
+// Expr_Select
+
+// .google.api.expr.v1alpha1.Expr operand = 1 [json_name = "operand"];
+inline bool Expr_Select::has_operand() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.operand_ != nullptr);
+  return value;
+}
+inline void Expr_Select::clear_operand() {
+  if (_impl_.operand_ != nullptr) _impl_.operand_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Select::_internal_operand() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Expr* p = _impl_.operand_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Select::operand() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Select.operand)
+  return _internal_operand();
+}
+inline void Expr_Select::unsafe_arena_set_allocated_operand(::google::api::expr::v1alpha1::Expr* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.operand_);
+  }
+  _impl_.operand_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Select.operand)
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Select::release_operand() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* released = _impl_.operand_;
+  _impl_.operand_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Select::unsafe_arena_release_operand() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Select.operand)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* temp = _impl_.operand_;
+  _impl_.operand_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Select::_internal_mutable_operand() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.operand_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
+    _impl_.operand_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(p);
+  }
+  return _impl_.operand_;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Select::mutable_operand() {
+  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_operand();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Select.operand)
+  return _msg;
+}
+inline void Expr_Select::set_allocated_operand(::google::api::expr::v1alpha1::Expr* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(_impl_.operand_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.operand_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Select.operand)
+}
+
+// string field = 2 [json_name = "field"];
+inline void Expr_Select::clear_field() {
+  _impl_.field_.ClearToEmpty();
+}
+inline const std::string& Expr_Select::field() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Select.field)
+  return _internal_field();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Expr_Select::set_field(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.field_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Select.field)
+}
+inline std::string* Expr_Select::mutable_field() {
+  std::string* _s = _internal_mutable_field();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Select.field)
+  return _s;
+}
+inline const std::string& Expr_Select::_internal_field() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.field_.Get();
+}
+inline void Expr_Select::_internal_set_field(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.field_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Expr_Select::_internal_mutable_field() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.field_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Expr_Select::release_field() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Select.field)
+  return _impl_.field_.Release();
+}
+inline void Expr_Select::set_allocated_field(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.field_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.field_.IsDefault()) {
+          _impl_.field_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Select.field)
+}
+
+// bool test_only = 3 [json_name = "testOnly"];
+inline void Expr_Select::clear_test_only() {
+  _impl_.test_only_ = false;
+}
+inline bool Expr_Select::test_only() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Select.test_only)
+  return _internal_test_only();
+}
+inline void Expr_Select::set_test_only(bool value) {
+  _internal_set_test_only(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Select.test_only)
+}
+inline bool Expr_Select::_internal_test_only() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.test_only_;
+}
+inline void Expr_Select::_internal_set_test_only(bool value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.test_only_ = value;
+}
+
+// -------------------------------------------------------------------
+
+// Expr_Call
+
+// .google.api.expr.v1alpha1.Expr target = 1 [json_name = "target"];
+inline bool Expr_Call::has_target() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
+  return value;
+}
+inline void Expr_Call::clear_target() {
+  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Call::_internal_target() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Expr* p = _impl_.target_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Call::target() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Call.target)
+  return _internal_target();
+}
+inline void Expr_Call::unsafe_arena_set_allocated_target(::google::api::expr::v1alpha1::Expr* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_);
+  }
+  _impl_.target_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Call.target)
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Call::release_target() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* released = _impl_.target_;
+  _impl_.target_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Call::unsafe_arena_release_target() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Call.target)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* temp = _impl_.target_;
+  _impl_.target_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Call::_internal_mutable_target() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.target_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
+    _impl_.target_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(p);
+  }
+  return _impl_.target_;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Call::mutable_target() {
+  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_target();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Call.target)
+  return _msg;
+}
+inline void Expr_Call::set_allocated_target(::google::api::expr::v1alpha1::Expr* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(_impl_.target_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.target_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Call.target)
+}
+
+// string function = 2 [json_name = "function"];
+inline void Expr_Call::clear_function() {
+  _impl_.function_.ClearToEmpty();
+}
+inline const std::string& Expr_Call::function() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Call.function)
+  return _internal_function();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Expr_Call::set_function(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.function_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Call.function)
+}
+inline std::string* Expr_Call::mutable_function() {
+  std::string* _s = _internal_mutable_function();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Call.function)
+  return _s;
+}
+inline const std::string& Expr_Call::_internal_function() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.function_.Get();
+}
+inline void Expr_Call::_internal_set_function(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.function_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Expr_Call::_internal_mutable_function() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.function_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Expr_Call::release_function() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Call.function)
+  return _impl_.function_.Release();
+}
+inline void Expr_Call::set_allocated_function(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.function_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.function_.IsDefault()) {
+          _impl_.function_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Call.function)
+}
+
+// repeated .google.api.expr.v1alpha1.Expr args = 3 [json_name = "args"];
+inline int Expr_Call::_internal_args_size() const {
+  return _internal_args().size();
+}
+inline int Expr_Call::args_size() const {
+  return _internal_args_size();
+}
+inline void Expr_Call::clear_args() {
+  _internal_mutable_args()->Clear();
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Call::mutable_args(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Call.args)
+  return _internal_mutable_args()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >*
+Expr_Call::mutable_args() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Expr.Call.args)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_args();
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Call::args(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Call.args)
+    return _internal_args().Get(index);
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Call::add_args() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::Expr* _add = _internal_mutable_args()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Expr.Call.args)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >&
+Expr_Call::args() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Expr.Call.args)
+  return _internal_args();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr>&
+Expr_Call::_internal_args() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.args_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr>*
+Expr_Call::_internal_mutable_args() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.args_;
+}
+
+// -------------------------------------------------------------------
+
+// Expr_CreateList
+
+// repeated .google.api.expr.v1alpha1.Expr elements = 1 [json_name = "elements"];
+inline int Expr_CreateList::_internal_elements_size() const {
+  return _internal_elements().size();
+}
+inline int Expr_CreateList::elements_size() const {
+  return _internal_elements_size();
+}
+inline void Expr_CreateList::clear_elements() {
+  _internal_mutable_elements()->Clear();
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_CreateList::mutable_elements(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateList.elements)
+  return _internal_mutable_elements()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >*
+Expr_CreateList::mutable_elements() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Expr.CreateList.elements)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_elements();
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_CreateList::elements(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateList.elements)
+    return _internal_elements().Get(index);
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_CreateList::add_elements() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::Expr* _add = _internal_mutable_elements()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Expr.CreateList.elements)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >&
+Expr_CreateList::elements() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Expr.CreateList.elements)
+  return _internal_elements();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr>&
+Expr_CreateList::_internal_elements() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.elements_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr>*
+Expr_CreateList::_internal_mutable_elements() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.elements_;
+}
+
+// repeated int32 optional_indices = 2 [json_name = "optionalIndices"];
+inline int Expr_CreateList::_internal_optional_indices_size() const {
+  return _internal_optional_indices().size();
+}
+inline int Expr_CreateList::optional_indices_size() const {
+  return _internal_optional_indices_size();
+}
+inline void Expr_CreateList::clear_optional_indices() {
+  _internal_mutable_optional_indices()->Clear();
+}
+inline ::int32_t Expr_CreateList::optional_indices(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateList.optional_indices)
+  return _internal_optional_indices().Get(index);
+}
+inline void Expr_CreateList::set_optional_indices(int index, ::int32_t value) {
+  _internal_mutable_optional_indices()->Set(index, value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.CreateList.optional_indices)
+}
+inline void Expr_CreateList::add_optional_indices(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_optional_indices()->Add(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Expr.CreateList.optional_indices)
+}
+inline const ::google::protobuf::RepeatedField<::int32_t>& Expr_CreateList::optional_indices() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Expr.CreateList.optional_indices)
+  return _internal_optional_indices();
+}
+inline ::google::protobuf::RepeatedField<::int32_t>* Expr_CreateList::mutable_optional_indices() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Expr.CreateList.optional_indices)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_optional_indices();
+}
+
+inline const ::google::protobuf::RepeatedField<::int32_t>& Expr_CreateList::_internal_optional_indices() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.optional_indices_;
+}
+inline ::google::protobuf::RepeatedField<::int32_t>* Expr_CreateList::_internal_mutable_optional_indices() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.optional_indices_;
+}
+
+// -------------------------------------------------------------------
+
+// Expr_CreateStruct_Entry
+
+// int64 id = 1 [json_name = "id"];
+inline void Expr_CreateStruct_Entry::clear_id() {
+  _impl_.id_ = ::int64_t{0};
+}
+inline ::int64_t Expr_CreateStruct_Entry::id() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.id)
+  return _internal_id();
+}
+inline void Expr_CreateStruct_Entry::set_id(::int64_t value) {
+  _internal_set_id(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.id)
+}
+inline ::int64_t Expr_CreateStruct_Entry::_internal_id() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.id_;
+}
+inline void Expr_CreateStruct_Entry::_internal_set_id(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.id_ = value;
+}
+
+// string field_key = 2 [json_name = "fieldKey"];
+inline bool Expr_CreateStruct_Entry::has_field_key() const {
+  return key_kind_case() == kFieldKey;
+}
+inline void Expr_CreateStruct_Entry::set_has_field_key() {
+  _impl_._oneof_case_[0] = kFieldKey;
+}
+inline void Expr_CreateStruct_Entry::clear_field_key() {
+  if (key_kind_case() == kFieldKey) {
+    _impl_.key_kind_.field_key_.Destroy();
+    clear_has_key_kind();
+  }
+}
+inline const std::string& Expr_CreateStruct_Entry::field_key() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.field_key)
+  return _internal_field_key();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Expr_CreateStruct_Entry::set_field_key(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (key_kind_case() != kFieldKey) {
+    clear_key_kind();
+
+    set_has_field_key();
+    _impl_.key_kind_.field_key_.InitDefault();
+  }
+  _impl_.key_kind_.field_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.field_key)
+}
+inline std::string* Expr_CreateStruct_Entry::mutable_field_key() {
+  std::string* _s = _internal_mutable_field_key();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.field_key)
+  return _s;
+}
+inline const std::string& Expr_CreateStruct_Entry::_internal_field_key() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  if (key_kind_case() != kFieldKey) {
+    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
+  }
+  return _impl_.key_kind_.field_key_.Get();
+}
+inline void Expr_CreateStruct_Entry::_internal_set_field_key(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (key_kind_case() != kFieldKey) {
+    clear_key_kind();
+
+    set_has_field_key();
+    _impl_.key_kind_.field_key_.InitDefault();
+  }
+  _impl_.key_kind_.field_key_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Expr_CreateStruct_Entry::_internal_mutable_field_key() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (key_kind_case() != kFieldKey) {
+    clear_key_kind();
+
+    set_has_field_key();
+    _impl_.key_kind_.field_key_.InitDefault();
+  }
+  return _impl_.key_kind_.field_key_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Expr_CreateStruct_Entry::release_field_key() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.field_key)
+  if (key_kind_case() != kFieldKey) {
+    return nullptr;
+  }
+  clear_has_key_kind();
+  return _impl_.key_kind_.field_key_.Release();
+}
+inline void Expr_CreateStruct_Entry::set_allocated_field_key(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (has_key_kind()) {
+    clear_key_kind();
+  }
+  if (value != nullptr) {
+    set_has_field_key();
+    _impl_.key_kind_.field_key_.InitAllocated(value, GetArenaForAllocation());
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.field_key)
+}
+
+// .google.api.expr.v1alpha1.Expr map_key = 3 [json_name = "mapKey"];
+inline bool Expr_CreateStruct_Entry::has_map_key() const {
+  return key_kind_case() == kMapKey;
+}
+inline bool Expr_CreateStruct_Entry::_internal_has_map_key() const {
+  return key_kind_case() == kMapKey;
+}
+inline void Expr_CreateStruct_Entry::set_has_map_key() {
+  _impl_._oneof_case_[0] = kMapKey;
+}
+inline void Expr_CreateStruct_Entry::clear_map_key() {
+  if (key_kind_case() == kMapKey) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.key_kind_.map_key_;
+    }
+    clear_has_key_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::release_map_key() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.map_key)
+  if (key_kind_case() == kMapKey) {
+    clear_has_key_kind();
+    ::google::api::expr::v1alpha1::Expr* temp = _impl_.key_kind_.map_key_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.key_kind_.map_key_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_CreateStruct_Entry::_internal_map_key() const {
+  return key_kind_case() == kMapKey
+      ? *_impl_.key_kind_.map_key_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_CreateStruct_Entry::map_key() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.map_key)
+  return _internal_map_key();
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::unsafe_arena_release_map_key() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.map_key)
+  if (key_kind_case() == kMapKey) {
+    clear_has_key_kind();
+    ::google::api::expr::v1alpha1::Expr* temp = _impl_.key_kind_.map_key_;
+    _impl_.key_kind_.map_key_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Expr_CreateStruct_Entry::unsafe_arena_set_allocated_map_key(::google::api::expr::v1alpha1::Expr* map_key) {
+  clear_key_kind();
+  if (map_key) {
+    set_has_map_key();
+    _impl_.key_kind_.map_key_ = map_key;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.map_key)
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::_internal_mutable_map_key() {
+  if (key_kind_case() != kMapKey) {
+    clear_key_kind();
+    set_has_map_key();
+    _impl_.key_kind_.map_key_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr >(GetArenaForAllocation());
+  }
+  return _impl_.key_kind_.map_key_;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::mutable_map_key() {
+  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_map_key();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.map_key)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.Expr value = 4 [json_name = "value"];
+inline bool Expr_CreateStruct_Entry::has_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
+  return value;
+}
+inline void Expr_CreateStruct_Entry::clear_value() {
+  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_CreateStruct_Entry::_internal_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Expr* p = _impl_.value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_CreateStruct_Entry::value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.value)
+  return _internal_value();
+}
+inline void Expr_CreateStruct_Entry::unsafe_arena_set_allocated_value(::google::api::expr::v1alpha1::Expr* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
+  }
+  _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.value)
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::release_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* released = _impl_.value_;
+  _impl_.value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::unsafe_arena_release_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.value)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* temp = _impl_.value_;
+  _impl_.value_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::_internal_mutable_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
+    _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(p);
+  }
+  return _impl_.value_;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::mutable_value() {
+  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.value)
+  return _msg;
+}
+inline void Expr_CreateStruct_Entry::set_allocated_value(::google::api::expr::v1alpha1::Expr* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(_impl_.value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.value)
+}
+
+// bool optional_entry = 5 [json_name = "optionalEntry"];
+inline void Expr_CreateStruct_Entry::clear_optional_entry() {
+  _impl_.optional_entry_ = false;
+}
+inline bool Expr_CreateStruct_Entry::optional_entry() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.optional_entry)
+  return _internal_optional_entry();
+}
+inline void Expr_CreateStruct_Entry::set_optional_entry(bool value) {
+  _internal_set_optional_entry(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.optional_entry)
+}
+inline bool Expr_CreateStruct_Entry::_internal_optional_entry() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.optional_entry_;
+}
+inline void Expr_CreateStruct_Entry::_internal_set_optional_entry(bool value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.optional_entry_ = value;
+}
+
+inline bool Expr_CreateStruct_Entry::has_key_kind() const {
+  return key_kind_case() != KEY_KIND_NOT_SET;
+}
+inline void Expr_CreateStruct_Entry::clear_has_key_kind() {
+  _impl_._oneof_case_[0] = KEY_KIND_NOT_SET;
+}
+inline Expr_CreateStruct_Entry::KeyKindCase Expr_CreateStruct_Entry::key_kind_case() const {
+  return Expr_CreateStruct_Entry::KeyKindCase(_impl_._oneof_case_[0]);
+}
+// -------------------------------------------------------------------
+
+// Expr_CreateStruct
+
+// string message_name = 1 [json_name = "messageName"];
+inline void Expr_CreateStruct::clear_message_name() {
+  _impl_.message_name_.ClearToEmpty();
+}
+inline const std::string& Expr_CreateStruct::message_name() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.message_name)
+  return _internal_message_name();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Expr_CreateStruct::set_message_name(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.message_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.CreateStruct.message_name)
+}
+inline std::string* Expr_CreateStruct::mutable_message_name() {
+  std::string* _s = _internal_mutable_message_name();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateStruct.message_name)
+  return _s;
+}
+inline const std::string& Expr_CreateStruct::_internal_message_name() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.message_name_.Get();
+}
+inline void Expr_CreateStruct::_internal_set_message_name(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.message_name_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Expr_CreateStruct::_internal_mutable_message_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.message_name_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Expr_CreateStruct::release_message_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.CreateStruct.message_name)
+  return _impl_.message_name_.Release();
+}
+inline void Expr_CreateStruct::set_allocated_message_name(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.message_name_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.message_name_.IsDefault()) {
+          _impl_.message_name_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.CreateStruct.message_name)
+}
+
+// repeated .google.api.expr.v1alpha1.Expr.CreateStruct.Entry entries = 2 [json_name = "entries"];
+inline int Expr_CreateStruct::_internal_entries_size() const {
+  return _internal_entries().size();
+}
+inline int Expr_CreateStruct::entries_size() const {
+  return _internal_entries_size();
+}
+inline void Expr_CreateStruct::clear_entries() {
+  _internal_mutable_entries()->Clear();
+}
+inline ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* Expr_CreateStruct::mutable_entries(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateStruct.entries)
+  return _internal_mutable_entries()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry >*
+Expr_CreateStruct::mutable_entries() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Expr.CreateStruct.entries)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_entries();
+}
+inline const ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry& Expr_CreateStruct::entries(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.entries)
+    return _internal_entries().Get(index);
+}
+inline ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* Expr_CreateStruct::add_entries() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* _add = _internal_mutable_entries()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Expr.CreateStruct.entries)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry >&
+Expr_CreateStruct::entries() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Expr.CreateStruct.entries)
+  return _internal_entries();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr_CreateStruct_Entry>&
+Expr_CreateStruct::_internal_entries() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.entries_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Expr_CreateStruct_Entry>*
+Expr_CreateStruct::_internal_mutable_entries() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.entries_;
+}
+
+// -------------------------------------------------------------------
+
+// Expr_Comprehension
+
+// string iter_var = 1 [json_name = "iterVar"];
+inline void Expr_Comprehension::clear_iter_var() {
+  _impl_.iter_var_.ClearToEmpty();
+}
+inline const std::string& Expr_Comprehension::iter_var() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.iter_var)
+  return _internal_iter_var();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Expr_Comprehension::set_iter_var(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.iter_var_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Comprehension.iter_var)
+}
+inline std::string* Expr_Comprehension::mutable_iter_var() {
+  std::string* _s = _internal_mutable_iter_var();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.iter_var)
+  return _s;
+}
+inline const std::string& Expr_Comprehension::_internal_iter_var() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.iter_var_.Get();
+}
+inline void Expr_Comprehension::_internal_set_iter_var(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.iter_var_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Expr_Comprehension::_internal_mutable_iter_var() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.iter_var_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Expr_Comprehension::release_iter_var() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.iter_var)
+  return _impl_.iter_var_.Release();
+}
+inline void Expr_Comprehension::set_allocated_iter_var(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.iter_var_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.iter_var_.IsDefault()) {
+          _impl_.iter_var_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.iter_var)
+}
+
+// .google.api.expr.v1alpha1.Expr iter_range = 2 [json_name = "iterRange"];
+inline bool Expr_Comprehension::has_iter_range() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.iter_range_ != nullptr);
+  return value;
+}
+inline void Expr_Comprehension::clear_iter_range() {
+  if (_impl_.iter_range_ != nullptr) _impl_.iter_range_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_internal_iter_range() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Expr* p = _impl_.iter_range_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::iter_range() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.iter_range)
+  return _internal_iter_range();
+}
+inline void Expr_Comprehension::unsafe_arena_set_allocated_iter_range(::google::api::expr::v1alpha1::Expr* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.iter_range_);
+  }
+  _impl_.iter_range_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.iter_range)
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::release_iter_range() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* released = _impl_.iter_range_;
+  _impl_.iter_range_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::unsafe_arena_release_iter_range() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.iter_range)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Expr* temp = _impl_.iter_range_;
+  _impl_.iter_range_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::_internal_mutable_iter_range() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.iter_range_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
+    _impl_.iter_range_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(p);
+  }
+  return _impl_.iter_range_;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::mutable_iter_range() {
+  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_iter_range();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.iter_range)
+  return _msg;
+}
+inline void Expr_Comprehension::set_allocated_iter_range(::google::api::expr::v1alpha1::Expr* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(_impl_.iter_range_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.iter_range_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.iter_range)
+}
+
+// string accu_var = 3 [json_name = "accuVar"];
+inline void Expr_Comprehension::clear_accu_var() {
+  _impl_.accu_var_.ClearToEmpty();
+}
+inline const std::string& Expr_Comprehension::accu_var() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.accu_var)
+  return _internal_accu_var();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Expr_Comprehension::set_accu_var(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.accu_var_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Comprehension.accu_var)
+}
+inline std::string* Expr_Comprehension::mutable_accu_var() {
+  std::string* _s = _internal_mutable_accu_var();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.accu_var)
+  return _s;
+}
+inline const std::string& Expr_Comprehension::_internal_accu_var() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.accu_var_.Get();
+}
+inline void Expr_Comprehension::_internal_set_accu_var(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.accu_var_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Expr_Comprehension::_internal_mutable_accu_var() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.accu_var_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Expr_Comprehension::release_accu_var() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.accu_var)
+  return _impl_.accu_var_.Release();
+}
+inline void Expr_Comprehension::set_allocated_accu_var(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.accu_var_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.accu_var_.IsDefault()) {
+          _impl_.accu_var_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.accu_var)
+}
+
+// .google.api.expr.v1alpha1.Expr accu_init = 4 [json_name = "accuInit"];
+inline bool Expr_Comprehension::has_accu_init() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.accu_init_ != nullptr);
+  return value;
+}
+inline void Expr_Comprehension::clear_accu_init() {
+  if (_impl_.accu_init_ != nullptr) _impl_.accu_init_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000002u;
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_internal_accu_init() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Expr* p = _impl_.accu_init_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::accu_init() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.accu_init)
+  return _internal_accu_init();
+}
+inline void Expr_Comprehension::unsafe_arena_set_allocated_accu_init(::google::api::expr::v1alpha1::Expr* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accu_init_);
+  }
+  _impl_.accu_init_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.accu_init)
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::release_accu_init() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::Expr* released = _impl_.accu_init_;
+  _impl_.accu_init_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::unsafe_arena_release_accu_init() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.accu_init)
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::Expr* temp = _impl_.accu_init_;
+  _impl_.accu_init_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::_internal_mutable_accu_init() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000002u;
+  if (_impl_.accu_init_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
+    _impl_.accu_init_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(p);
+  }
+  return _impl_.accu_init_;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::mutable_accu_init() {
+  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_accu_init();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.accu_init)
+  return _msg;
+}
+inline void Expr_Comprehension::set_allocated_accu_init(::google::api::expr::v1alpha1::Expr* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(_impl_.accu_init_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+
+  _impl_.accu_init_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.accu_init)
+}
+
+// .google.api.expr.v1alpha1.Expr loop_condition = 5 [json_name = "loopCondition"];
+inline bool Expr_Comprehension::has_loop_condition() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.loop_condition_ != nullptr);
+  return value;
+}
+inline void Expr_Comprehension::clear_loop_condition() {
+  if (_impl_.loop_condition_ != nullptr) _impl_.loop_condition_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000004u;
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_internal_loop_condition() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Expr* p = _impl_.loop_condition_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::loop_condition() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.loop_condition)
+  return _internal_loop_condition();
+}
+inline void Expr_Comprehension::unsafe_arena_set_allocated_loop_condition(::google::api::expr::v1alpha1::Expr* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.loop_condition_);
+  }
+  _impl_.loop_condition_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000004u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000004u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.loop_condition)
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::release_loop_condition() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000004u;
+  ::google::api::expr::v1alpha1::Expr* released = _impl_.loop_condition_;
+  _impl_.loop_condition_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::unsafe_arena_release_loop_condition() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.loop_condition)
+
+  _impl_._has_bits_[0] &= ~0x00000004u;
+  ::google::api::expr::v1alpha1::Expr* temp = _impl_.loop_condition_;
+  _impl_.loop_condition_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::_internal_mutable_loop_condition() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000004u;
+  if (_impl_.loop_condition_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
+    _impl_.loop_condition_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(p);
+  }
+  return _impl_.loop_condition_;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::mutable_loop_condition() {
+  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_loop_condition();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.loop_condition)
+  return _msg;
+}
+inline void Expr_Comprehension::set_allocated_loop_condition(::google::api::expr::v1alpha1::Expr* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(_impl_.loop_condition_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000004u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000004u;
+  }
+
+  _impl_.loop_condition_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.loop_condition)
+}
+
+// .google.api.expr.v1alpha1.Expr loop_step = 6 [json_name = "loopStep"];
+inline bool Expr_Comprehension::has_loop_step() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.loop_step_ != nullptr);
+  return value;
+}
+inline void Expr_Comprehension::clear_loop_step() {
+  if (_impl_.loop_step_ != nullptr) _impl_.loop_step_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000008u;
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_internal_loop_step() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Expr* p = _impl_.loop_step_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::loop_step() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.loop_step)
+  return _internal_loop_step();
+}
+inline void Expr_Comprehension::unsafe_arena_set_allocated_loop_step(::google::api::expr::v1alpha1::Expr* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.loop_step_);
+  }
+  _impl_.loop_step_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000008u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000008u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.loop_step)
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::release_loop_step() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000008u;
+  ::google::api::expr::v1alpha1::Expr* released = _impl_.loop_step_;
+  _impl_.loop_step_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::unsafe_arena_release_loop_step() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.loop_step)
+
+  _impl_._has_bits_[0] &= ~0x00000008u;
+  ::google::api::expr::v1alpha1::Expr* temp = _impl_.loop_step_;
+  _impl_.loop_step_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::_internal_mutable_loop_step() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000008u;
+  if (_impl_.loop_step_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
+    _impl_.loop_step_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(p);
+  }
+  return _impl_.loop_step_;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::mutable_loop_step() {
+  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_loop_step();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.loop_step)
+  return _msg;
+}
+inline void Expr_Comprehension::set_allocated_loop_step(::google::api::expr::v1alpha1::Expr* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(_impl_.loop_step_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000008u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000008u;
+  }
+
+  _impl_.loop_step_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.loop_step)
+}
+
+// .google.api.expr.v1alpha1.Expr result = 7 [json_name = "result"];
+inline bool Expr_Comprehension::has_result() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
+  return value;
+}
+inline void Expr_Comprehension::clear_result() {
+  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000010u;
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_internal_result() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Expr* p = _impl_.result_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::result() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.result)
+  return _internal_result();
+}
+inline void Expr_Comprehension::unsafe_arena_set_allocated_result(::google::api::expr::v1alpha1::Expr* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
+  }
+  _impl_.result_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000010u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000010u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.result)
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::release_result() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000010u;
+  ::google::api::expr::v1alpha1::Expr* released = _impl_.result_;
+  _impl_.result_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::unsafe_arena_release_result() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.result)
+
+  _impl_._has_bits_[0] &= ~0x00000010u;
+  ::google::api::expr::v1alpha1::Expr* temp = _impl_.result_;
+  _impl_.result_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::_internal_mutable_result() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000010u;
+  if (_impl_.result_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
+    _impl_.result_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(p);
+  }
+  return _impl_.result_;
+}
+inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::mutable_result() {
+  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_result();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.result)
+  return _msg;
+}
+inline void Expr_Comprehension::set_allocated_result(::google::api::expr::v1alpha1::Expr* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(_impl_.result_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000010u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000010u;
+  }
+
+  _impl_.result_ = reinterpret_cast<::google::api::expr::v1alpha1::Expr*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.result)
+}
+
+// -------------------------------------------------------------------
+
+// Expr
+
+// int64 id = 2 [json_name = "id"];
+inline void Expr::clear_id() {
+  _impl_.id_ = ::int64_t{0};
+}
+inline ::int64_t Expr::id() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.id)
+  return _internal_id();
+}
+inline void Expr::set_id(::int64_t value) {
+  _internal_set_id(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.id)
+}
+inline ::int64_t Expr::_internal_id() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.id_;
+}
+inline void Expr::_internal_set_id(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.id_ = value;
+}
+
+// .google.api.expr.v1alpha1.Constant const_expr = 3 [json_name = "constExpr"];
+inline bool Expr::has_const_expr() const {
+  return expr_kind_case() == kConstExpr;
+}
+inline bool Expr::_internal_has_const_expr() const {
+  return expr_kind_case() == kConstExpr;
+}
+inline void Expr::set_has_const_expr() {
+  _impl_._oneof_case_[0] = kConstExpr;
+}
+inline void Expr::clear_const_expr() {
+  if (expr_kind_case() == kConstExpr) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.expr_kind_.const_expr_;
+    }
+    clear_has_expr_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Constant* Expr::release_const_expr() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.const_expr)
+  if (expr_kind_case() == kConstExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Constant* temp = _impl_.expr_kind_.const_expr_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.expr_kind_.const_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Constant& Expr::_internal_const_expr() const {
+  return expr_kind_case() == kConstExpr
+      ? *_impl_.expr_kind_.const_expr_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Constant&>(::google::api::expr::v1alpha1::_Constant_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Constant& Expr::const_expr() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.const_expr)
+  return _internal_const_expr();
+}
+inline ::google::api::expr::v1alpha1::Constant* Expr::unsafe_arena_release_const_expr() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.const_expr)
+  if (expr_kind_case() == kConstExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Constant* temp = _impl_.expr_kind_.const_expr_;
+    _impl_.expr_kind_.const_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Expr::unsafe_arena_set_allocated_const_expr(::google::api::expr::v1alpha1::Constant* const_expr) {
+  clear_expr_kind();
+  if (const_expr) {
+    set_has_const_expr();
+    _impl_.expr_kind_.const_expr_ = const_expr;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.const_expr)
+}
+inline ::google::api::expr::v1alpha1::Constant* Expr::_internal_mutable_const_expr() {
+  if (expr_kind_case() != kConstExpr) {
+    clear_expr_kind();
+    set_has_const_expr();
+    _impl_.expr_kind_.const_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Constant >(GetArenaForAllocation());
+  }
+  return _impl_.expr_kind_.const_expr_;
+}
+inline ::google::api::expr::v1alpha1::Constant* Expr::mutable_const_expr() {
+  ::google::api::expr::v1alpha1::Constant* _msg = _internal_mutable_const_expr();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.const_expr)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.Expr.Ident ident_expr = 4 [json_name = "identExpr"];
+inline bool Expr::has_ident_expr() const {
+  return expr_kind_case() == kIdentExpr;
+}
+inline bool Expr::_internal_has_ident_expr() const {
+  return expr_kind_case() == kIdentExpr;
+}
+inline void Expr::set_has_ident_expr() {
+  _impl_._oneof_case_[0] = kIdentExpr;
+}
+inline void Expr::clear_ident_expr() {
+  if (expr_kind_case() == kIdentExpr) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.expr_kind_.ident_expr_;
+    }
+    clear_has_expr_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Expr_Ident* Expr::release_ident_expr() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.ident_expr)
+  if (expr_kind_case() == kIdentExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_Ident* temp = _impl_.expr_kind_.ident_expr_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.expr_kind_.ident_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Expr_Ident& Expr::_internal_ident_expr() const {
+  return expr_kind_case() == kIdentExpr
+      ? *_impl_.expr_kind_.ident_expr_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Expr_Ident&>(::google::api::expr::v1alpha1::_Expr_Ident_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr_Ident& Expr::ident_expr() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.ident_expr)
+  return _internal_ident_expr();
+}
+inline ::google::api::expr::v1alpha1::Expr_Ident* Expr::unsafe_arena_release_ident_expr() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.ident_expr)
+  if (expr_kind_case() == kIdentExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_Ident* temp = _impl_.expr_kind_.ident_expr_;
+    _impl_.expr_kind_.ident_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Expr::unsafe_arena_set_allocated_ident_expr(::google::api::expr::v1alpha1::Expr_Ident* ident_expr) {
+  clear_expr_kind();
+  if (ident_expr) {
+    set_has_ident_expr();
+    _impl_.expr_kind_.ident_expr_ = ident_expr;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.ident_expr)
+}
+inline ::google::api::expr::v1alpha1::Expr_Ident* Expr::_internal_mutable_ident_expr() {
+  if (expr_kind_case() != kIdentExpr) {
+    clear_expr_kind();
+    set_has_ident_expr();
+    _impl_.expr_kind_.ident_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_Ident >(GetArenaForAllocation());
+  }
+  return _impl_.expr_kind_.ident_expr_;
+}
+inline ::google::api::expr::v1alpha1::Expr_Ident* Expr::mutable_ident_expr() {
+  ::google::api::expr::v1alpha1::Expr_Ident* _msg = _internal_mutable_ident_expr();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.ident_expr)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.Expr.Select select_expr = 5 [json_name = "selectExpr"];
+inline bool Expr::has_select_expr() const {
+  return expr_kind_case() == kSelectExpr;
+}
+inline bool Expr::_internal_has_select_expr() const {
+  return expr_kind_case() == kSelectExpr;
+}
+inline void Expr::set_has_select_expr() {
+  _impl_._oneof_case_[0] = kSelectExpr;
+}
+inline void Expr::clear_select_expr() {
+  if (expr_kind_case() == kSelectExpr) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.expr_kind_.select_expr_;
+    }
+    clear_has_expr_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Expr_Select* Expr::release_select_expr() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.select_expr)
+  if (expr_kind_case() == kSelectExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_Select* temp = _impl_.expr_kind_.select_expr_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.expr_kind_.select_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Expr_Select& Expr::_internal_select_expr() const {
+  return expr_kind_case() == kSelectExpr
+      ? *_impl_.expr_kind_.select_expr_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Expr_Select&>(::google::api::expr::v1alpha1::_Expr_Select_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr_Select& Expr::select_expr() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.select_expr)
+  return _internal_select_expr();
+}
+inline ::google::api::expr::v1alpha1::Expr_Select* Expr::unsafe_arena_release_select_expr() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.select_expr)
+  if (expr_kind_case() == kSelectExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_Select* temp = _impl_.expr_kind_.select_expr_;
+    _impl_.expr_kind_.select_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Expr::unsafe_arena_set_allocated_select_expr(::google::api::expr::v1alpha1::Expr_Select* select_expr) {
+  clear_expr_kind();
+  if (select_expr) {
+    set_has_select_expr();
+    _impl_.expr_kind_.select_expr_ = select_expr;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.select_expr)
+}
+inline ::google::api::expr::v1alpha1::Expr_Select* Expr::_internal_mutable_select_expr() {
+  if (expr_kind_case() != kSelectExpr) {
+    clear_expr_kind();
+    set_has_select_expr();
+    _impl_.expr_kind_.select_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_Select >(GetArenaForAllocation());
+  }
+  return _impl_.expr_kind_.select_expr_;
+}
+inline ::google::api::expr::v1alpha1::Expr_Select* Expr::mutable_select_expr() {
+  ::google::api::expr::v1alpha1::Expr_Select* _msg = _internal_mutable_select_expr();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.select_expr)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.Expr.Call call_expr = 6 [json_name = "callExpr"];
+inline bool Expr::has_call_expr() const {
+  return expr_kind_case() == kCallExpr;
+}
+inline bool Expr::_internal_has_call_expr() const {
+  return expr_kind_case() == kCallExpr;
+}
+inline void Expr::set_has_call_expr() {
+  _impl_._oneof_case_[0] = kCallExpr;
+}
+inline void Expr::clear_call_expr() {
+  if (expr_kind_case() == kCallExpr) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.expr_kind_.call_expr_;
+    }
+    clear_has_expr_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Expr_Call* Expr::release_call_expr() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.call_expr)
+  if (expr_kind_case() == kCallExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_Call* temp = _impl_.expr_kind_.call_expr_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.expr_kind_.call_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Expr_Call& Expr::_internal_call_expr() const {
+  return expr_kind_case() == kCallExpr
+      ? *_impl_.expr_kind_.call_expr_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Expr_Call&>(::google::api::expr::v1alpha1::_Expr_Call_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr_Call& Expr::call_expr() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.call_expr)
+  return _internal_call_expr();
+}
+inline ::google::api::expr::v1alpha1::Expr_Call* Expr::unsafe_arena_release_call_expr() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.call_expr)
+  if (expr_kind_case() == kCallExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_Call* temp = _impl_.expr_kind_.call_expr_;
+    _impl_.expr_kind_.call_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Expr::unsafe_arena_set_allocated_call_expr(::google::api::expr::v1alpha1::Expr_Call* call_expr) {
+  clear_expr_kind();
+  if (call_expr) {
+    set_has_call_expr();
+    _impl_.expr_kind_.call_expr_ = call_expr;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.call_expr)
+}
+inline ::google::api::expr::v1alpha1::Expr_Call* Expr::_internal_mutable_call_expr() {
+  if (expr_kind_case() != kCallExpr) {
+    clear_expr_kind();
+    set_has_call_expr();
+    _impl_.expr_kind_.call_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_Call >(GetArenaForAllocation());
+  }
+  return _impl_.expr_kind_.call_expr_;
+}
+inline ::google::api::expr::v1alpha1::Expr_Call* Expr::mutable_call_expr() {
+  ::google::api::expr::v1alpha1::Expr_Call* _msg = _internal_mutable_call_expr();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.call_expr)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.Expr.CreateList list_expr = 7 [json_name = "listExpr"];
+inline bool Expr::has_list_expr() const {
+  return expr_kind_case() == kListExpr;
+}
+inline bool Expr::_internal_has_list_expr() const {
+  return expr_kind_case() == kListExpr;
+}
+inline void Expr::set_has_list_expr() {
+  _impl_._oneof_case_[0] = kListExpr;
+}
+inline void Expr::clear_list_expr() {
+  if (expr_kind_case() == kListExpr) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.expr_kind_.list_expr_;
+    }
+    clear_has_expr_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Expr_CreateList* Expr::release_list_expr() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.list_expr)
+  if (expr_kind_case() == kListExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_CreateList* temp = _impl_.expr_kind_.list_expr_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.expr_kind_.list_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Expr_CreateList& Expr::_internal_list_expr() const {
+  return expr_kind_case() == kListExpr
+      ? *_impl_.expr_kind_.list_expr_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Expr_CreateList&>(::google::api::expr::v1alpha1::_Expr_CreateList_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr_CreateList& Expr::list_expr() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.list_expr)
+  return _internal_list_expr();
+}
+inline ::google::api::expr::v1alpha1::Expr_CreateList* Expr::unsafe_arena_release_list_expr() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.list_expr)
+  if (expr_kind_case() == kListExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_CreateList* temp = _impl_.expr_kind_.list_expr_;
+    _impl_.expr_kind_.list_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Expr::unsafe_arena_set_allocated_list_expr(::google::api::expr::v1alpha1::Expr_CreateList* list_expr) {
+  clear_expr_kind();
+  if (list_expr) {
+    set_has_list_expr();
+    _impl_.expr_kind_.list_expr_ = list_expr;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.list_expr)
+}
+inline ::google::api::expr::v1alpha1::Expr_CreateList* Expr::_internal_mutable_list_expr() {
+  if (expr_kind_case() != kListExpr) {
+    clear_expr_kind();
+    set_has_list_expr();
+    _impl_.expr_kind_.list_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_CreateList >(GetArenaForAllocation());
+  }
+  return _impl_.expr_kind_.list_expr_;
+}
+inline ::google::api::expr::v1alpha1::Expr_CreateList* Expr::mutable_list_expr() {
+  ::google::api::expr::v1alpha1::Expr_CreateList* _msg = _internal_mutable_list_expr();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.list_expr)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.Expr.CreateStruct struct_expr = 8 [json_name = "structExpr"];
+inline bool Expr::has_struct_expr() const {
+  return expr_kind_case() == kStructExpr;
+}
+inline bool Expr::_internal_has_struct_expr() const {
+  return expr_kind_case() == kStructExpr;
+}
+inline void Expr::set_has_struct_expr() {
+  _impl_._oneof_case_[0] = kStructExpr;
+}
+inline void Expr::clear_struct_expr() {
+  if (expr_kind_case() == kStructExpr) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.expr_kind_.struct_expr_;
+    }
+    clear_has_expr_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Expr_CreateStruct* Expr::release_struct_expr() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.struct_expr)
+  if (expr_kind_case() == kStructExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_CreateStruct* temp = _impl_.expr_kind_.struct_expr_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.expr_kind_.struct_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Expr_CreateStruct& Expr::_internal_struct_expr() const {
+  return expr_kind_case() == kStructExpr
+      ? *_impl_.expr_kind_.struct_expr_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Expr_CreateStruct&>(::google::api::expr::v1alpha1::_Expr_CreateStruct_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr_CreateStruct& Expr::struct_expr() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.struct_expr)
+  return _internal_struct_expr();
+}
+inline ::google::api::expr::v1alpha1::Expr_CreateStruct* Expr::unsafe_arena_release_struct_expr() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.struct_expr)
+  if (expr_kind_case() == kStructExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_CreateStruct* temp = _impl_.expr_kind_.struct_expr_;
+    _impl_.expr_kind_.struct_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Expr::unsafe_arena_set_allocated_struct_expr(::google::api::expr::v1alpha1::Expr_CreateStruct* struct_expr) {
+  clear_expr_kind();
+  if (struct_expr) {
+    set_has_struct_expr();
+    _impl_.expr_kind_.struct_expr_ = struct_expr;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.struct_expr)
+}
+inline ::google::api::expr::v1alpha1::Expr_CreateStruct* Expr::_internal_mutable_struct_expr() {
+  if (expr_kind_case() != kStructExpr) {
+    clear_expr_kind();
+    set_has_struct_expr();
+    _impl_.expr_kind_.struct_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_CreateStruct >(GetArenaForAllocation());
+  }
+  return _impl_.expr_kind_.struct_expr_;
+}
+inline ::google::api::expr::v1alpha1::Expr_CreateStruct* Expr::mutable_struct_expr() {
+  ::google::api::expr::v1alpha1::Expr_CreateStruct* _msg = _internal_mutable_struct_expr();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.struct_expr)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.Expr.Comprehension comprehension_expr = 9 [json_name = "comprehensionExpr"];
+inline bool Expr::has_comprehension_expr() const {
+  return expr_kind_case() == kComprehensionExpr;
+}
+inline bool Expr::_internal_has_comprehension_expr() const {
+  return expr_kind_case() == kComprehensionExpr;
+}
+inline void Expr::set_has_comprehension_expr() {
+  _impl_._oneof_case_[0] = kComprehensionExpr;
+}
+inline void Expr::clear_comprehension_expr() {
+  if (expr_kind_case() == kComprehensionExpr) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.expr_kind_.comprehension_expr_;
+    }
+    clear_has_expr_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::Expr_Comprehension* Expr::release_comprehension_expr() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.comprehension_expr)
+  if (expr_kind_case() == kComprehensionExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_Comprehension* temp = _impl_.expr_kind_.comprehension_expr_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.expr_kind_.comprehension_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::Expr_Comprehension& Expr::_internal_comprehension_expr() const {
+  return expr_kind_case() == kComprehensionExpr
+      ? *_impl_.expr_kind_.comprehension_expr_
+      : reinterpret_cast<::google::api::expr::v1alpha1::Expr_Comprehension&>(::google::api::expr::v1alpha1::_Expr_Comprehension_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Expr_Comprehension& Expr::comprehension_expr() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.comprehension_expr)
+  return _internal_comprehension_expr();
+}
+inline ::google::api::expr::v1alpha1::Expr_Comprehension* Expr::unsafe_arena_release_comprehension_expr() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.comprehension_expr)
+  if (expr_kind_case() == kComprehensionExpr) {
+    clear_has_expr_kind();
+    ::google::api::expr::v1alpha1::Expr_Comprehension* temp = _impl_.expr_kind_.comprehension_expr_;
+    _impl_.expr_kind_.comprehension_expr_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Expr::unsafe_arena_set_allocated_comprehension_expr(::google::api::expr::v1alpha1::Expr_Comprehension* comprehension_expr) {
+  clear_expr_kind();
+  if (comprehension_expr) {
+    set_has_comprehension_expr();
+    _impl_.expr_kind_.comprehension_expr_ = comprehension_expr;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.comprehension_expr)
+}
+inline ::google::api::expr::v1alpha1::Expr_Comprehension* Expr::_internal_mutable_comprehension_expr() {
+  if (expr_kind_case() != kComprehensionExpr) {
+    clear_expr_kind();
+    set_has_comprehension_expr();
+    _impl_.expr_kind_.comprehension_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_Comprehension >(GetArenaForAllocation());
+  }
+  return _impl_.expr_kind_.comprehension_expr_;
+}
+inline ::google::api::expr::v1alpha1::Expr_Comprehension* Expr::mutable_comprehension_expr() {
+  ::google::api::expr::v1alpha1::Expr_Comprehension* _msg = _internal_mutable_comprehension_expr();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.comprehension_expr)
+  return _msg;
+}
+
+inline bool Expr::has_expr_kind() const {
+  return expr_kind_case() != EXPR_KIND_NOT_SET;
+}
+inline void Expr::clear_has_expr_kind() {
+  _impl_._oneof_case_[0] = EXPR_KIND_NOT_SET;
+}
+inline Expr::ExprKindCase Expr::expr_kind_case() const {
+  return Expr::ExprKindCase(_impl_._oneof_case_[0]);
+}
+// -------------------------------------------------------------------
+
+// Constant
+
+// .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
+inline bool Constant::has_null_value() const {
+  return constant_kind_case() == kNullValue;
+}
+inline void Constant::set_has_null_value() {
+  _impl_._oneof_case_[0] = kNullValue;
+}
+inline void Constant::clear_null_value() {
+  if (constant_kind_case() == kNullValue) {
+    _impl_.constant_kind_.null_value_ = 0;
+    clear_has_constant_kind();
+  }
+}
+inline ::google::protobuf::NullValue Constant::null_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.null_value)
+  return _internal_null_value();
+}
+inline void Constant::set_null_value(::google::protobuf::NullValue value) {
+  _internal_set_null_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.null_value)
+}
+inline ::google::protobuf::NullValue Constant::_internal_null_value() const {
+  if (constant_kind_case() == kNullValue) {
+    return static_cast<::google::protobuf::NullValue>(_impl_.constant_kind_.null_value_);
+  }
+  return static_cast<::google::protobuf::NullValue>(0);
+}
+inline void Constant::_internal_set_null_value(::google::protobuf::NullValue value) {
+  if (constant_kind_case() != kNullValue) {
+    clear_constant_kind();
+    set_has_null_value();
+  }
+  _impl_.constant_kind_.null_value_ = value;
+}
+
+// bool bool_value = 2 [json_name = "boolValue"];
+inline bool Constant::has_bool_value() const {
+  return constant_kind_case() == kBoolValue;
+}
+inline void Constant::set_has_bool_value() {
+  _impl_._oneof_case_[0] = kBoolValue;
+}
+inline void Constant::clear_bool_value() {
+  if (constant_kind_case() == kBoolValue) {
+    _impl_.constant_kind_.bool_value_ = false;
+    clear_has_constant_kind();
+  }
+}
+inline bool Constant::bool_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.bool_value)
+  return _internal_bool_value();
+}
+inline void Constant::set_bool_value(bool value) {
+  _internal_set_bool_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.bool_value)
+}
+inline bool Constant::_internal_bool_value() const {
+  if (constant_kind_case() == kBoolValue) {
+    return _impl_.constant_kind_.bool_value_;
+  }
+  return false;
+}
+inline void Constant::_internal_set_bool_value(bool value) {
+  if (constant_kind_case() != kBoolValue) {
+    clear_constant_kind();
+    set_has_bool_value();
+  }
+  _impl_.constant_kind_.bool_value_ = value;
+}
+
+// int64 int64_value = 3 [json_name = "int64Value"];
+inline bool Constant::has_int64_value() const {
+  return constant_kind_case() == kInt64Value;
+}
+inline void Constant::set_has_int64_value() {
+  _impl_._oneof_case_[0] = kInt64Value;
+}
+inline void Constant::clear_int64_value() {
+  if (constant_kind_case() == kInt64Value) {
+    _impl_.constant_kind_.int64_value_ = ::int64_t{0};
+    clear_has_constant_kind();
+  }
+}
+inline ::int64_t Constant::int64_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.int64_value)
+  return _internal_int64_value();
+}
+inline void Constant::set_int64_value(::int64_t value) {
+  _internal_set_int64_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.int64_value)
+}
+inline ::int64_t Constant::_internal_int64_value() const {
+  if (constant_kind_case() == kInt64Value) {
+    return _impl_.constant_kind_.int64_value_;
+  }
+  return ::int64_t{0};
+}
+inline void Constant::_internal_set_int64_value(::int64_t value) {
+  if (constant_kind_case() != kInt64Value) {
+    clear_constant_kind();
+    set_has_int64_value();
+  }
+  _impl_.constant_kind_.int64_value_ = value;
+}
+
+// uint64 uint64_value = 4 [json_name = "uint64Value"];
+inline bool Constant::has_uint64_value() const {
+  return constant_kind_case() == kUint64Value;
+}
+inline void Constant::set_has_uint64_value() {
+  _impl_._oneof_case_[0] = kUint64Value;
+}
+inline void Constant::clear_uint64_value() {
+  if (constant_kind_case() == kUint64Value) {
+    _impl_.constant_kind_.uint64_value_ = ::uint64_t{0u};
+    clear_has_constant_kind();
+  }
+}
+inline ::uint64_t Constant::uint64_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.uint64_value)
+  return _internal_uint64_value();
+}
+inline void Constant::set_uint64_value(::uint64_t value) {
+  _internal_set_uint64_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.uint64_value)
+}
+inline ::uint64_t Constant::_internal_uint64_value() const {
+  if (constant_kind_case() == kUint64Value) {
+    return _impl_.constant_kind_.uint64_value_;
+  }
+  return ::uint64_t{0u};
+}
+inline void Constant::_internal_set_uint64_value(::uint64_t value) {
+  if (constant_kind_case() != kUint64Value) {
+    clear_constant_kind();
+    set_has_uint64_value();
+  }
+  _impl_.constant_kind_.uint64_value_ = value;
+}
+
+// double double_value = 5 [json_name = "doubleValue"];
+inline bool Constant::has_double_value() const {
+  return constant_kind_case() == kDoubleValue;
+}
+inline void Constant::set_has_double_value() {
+  _impl_._oneof_case_[0] = kDoubleValue;
+}
+inline void Constant::clear_double_value() {
+  if (constant_kind_case() == kDoubleValue) {
+    _impl_.constant_kind_.double_value_ = 0;
+    clear_has_constant_kind();
+  }
+}
+inline double Constant::double_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.double_value)
+  return _internal_double_value();
+}
+inline void Constant::set_double_value(double value) {
+  _internal_set_double_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.double_value)
+}
+inline double Constant::_internal_double_value() const {
+  if (constant_kind_case() == kDoubleValue) {
+    return _impl_.constant_kind_.double_value_;
+  }
+  return 0;
+}
+inline void Constant::_internal_set_double_value(double value) {
+  if (constant_kind_case() != kDoubleValue) {
+    clear_constant_kind();
+    set_has_double_value();
+  }
+  _impl_.constant_kind_.double_value_ = value;
+}
+
+// string string_value = 6 [json_name = "stringValue"];
+inline bool Constant::has_string_value() const {
+  return constant_kind_case() == kStringValue;
+}
+inline void Constant::set_has_string_value() {
+  _impl_._oneof_case_[0] = kStringValue;
+}
+inline void Constant::clear_string_value() {
+  if (constant_kind_case() == kStringValue) {
+    _impl_.constant_kind_.string_value_.Destroy();
+    clear_has_constant_kind();
+  }
+}
+inline const std::string& Constant::string_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.string_value)
+  return _internal_string_value();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Constant::set_string_value(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (constant_kind_case() != kStringValue) {
+    clear_constant_kind();
+
+    set_has_string_value();
+    _impl_.constant_kind_.string_value_.InitDefault();
+  }
+  _impl_.constant_kind_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.string_value)
+}
+inline std::string* Constant::mutable_string_value() {
+  std::string* _s = _internal_mutable_string_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Constant.string_value)
+  return _s;
+}
+inline const std::string& Constant::_internal_string_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  if (constant_kind_case() != kStringValue) {
+    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
+  }
+  return _impl_.constant_kind_.string_value_.Get();
+}
+inline void Constant::_internal_set_string_value(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (constant_kind_case() != kStringValue) {
+    clear_constant_kind();
+
+    set_has_string_value();
+    _impl_.constant_kind_.string_value_.InitDefault();
+  }
+  _impl_.constant_kind_.string_value_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Constant::_internal_mutable_string_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (constant_kind_case() != kStringValue) {
+    clear_constant_kind();
+
+    set_has_string_value();
+    _impl_.constant_kind_.string_value_.InitDefault();
+  }
+  return _impl_.constant_kind_.string_value_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Constant::release_string_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Constant.string_value)
+  if (constant_kind_case() != kStringValue) {
+    return nullptr;
+  }
+  clear_has_constant_kind();
+  return _impl_.constant_kind_.string_value_.Release();
+}
+inline void Constant::set_allocated_string_value(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (has_constant_kind()) {
+    clear_constant_kind();
+  }
+  if (value != nullptr) {
+    set_has_string_value();
+    _impl_.constant_kind_.string_value_.InitAllocated(value, GetArenaForAllocation());
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Constant.string_value)
+}
+
+// bytes bytes_value = 7 [json_name = "bytesValue"];
+inline bool Constant::has_bytes_value() const {
+  return constant_kind_case() == kBytesValue;
+}
+inline void Constant::set_has_bytes_value() {
+  _impl_._oneof_case_[0] = kBytesValue;
+}
+inline void Constant::clear_bytes_value() {
+  if (constant_kind_case() == kBytesValue) {
+    _impl_.constant_kind_.bytes_value_.Destroy();
+    clear_has_constant_kind();
+  }
+}
+inline const std::string& Constant::bytes_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.bytes_value)
+  return _internal_bytes_value();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Constant::set_bytes_value(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (constant_kind_case() != kBytesValue) {
+    clear_constant_kind();
+
+    set_has_bytes_value();
+    _impl_.constant_kind_.bytes_value_.InitDefault();
+  }
+  _impl_.constant_kind_.bytes_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.bytes_value)
+}
+inline std::string* Constant::mutable_bytes_value() {
+  std::string* _s = _internal_mutable_bytes_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Constant.bytes_value)
+  return _s;
+}
+inline const std::string& Constant::_internal_bytes_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  if (constant_kind_case() != kBytesValue) {
+    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
+  }
+  return _impl_.constant_kind_.bytes_value_.Get();
+}
+inline void Constant::_internal_set_bytes_value(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (constant_kind_case() != kBytesValue) {
+    clear_constant_kind();
+
+    set_has_bytes_value();
+    _impl_.constant_kind_.bytes_value_.InitDefault();
+  }
+  _impl_.constant_kind_.bytes_value_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Constant::_internal_mutable_bytes_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (constant_kind_case() != kBytesValue) {
+    clear_constant_kind();
+
+    set_has_bytes_value();
+    _impl_.constant_kind_.bytes_value_.InitDefault();
+  }
+  return _impl_.constant_kind_.bytes_value_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Constant::release_bytes_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Constant.bytes_value)
+  if (constant_kind_case() != kBytesValue) {
+    return nullptr;
+  }
+  clear_has_constant_kind();
+  return _impl_.constant_kind_.bytes_value_.Release();
+}
+inline void Constant::set_allocated_bytes_value(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (has_constant_kind()) {
+    clear_constant_kind();
+  }
+  if (value != nullptr) {
+    set_has_bytes_value();
+    _impl_.constant_kind_.bytes_value_.InitAllocated(value, GetArenaForAllocation());
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Constant.bytes_value)
+}
+
+// .google.protobuf.Duration duration_value = 8 [json_name = "durationValue", deprecated = true];
+inline bool Constant::has_duration_value() const {
+  return constant_kind_case() == kDurationValue;
+}
+inline bool Constant::_internal_has_duration_value() const {
+  return constant_kind_case() == kDurationValue;
+}
+inline void Constant::set_has_duration_value() {
+  _impl_._oneof_case_[0] = kDurationValue;
+}
+inline ::google::protobuf::Duration* Constant::release_duration_value() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Constant.duration_value)
+  if (constant_kind_case() == kDurationValue) {
+    clear_has_constant_kind();
+    ::google::protobuf::Duration* temp = _impl_.constant_kind_.duration_value_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.constant_kind_.duration_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::protobuf::Duration& Constant::_internal_duration_value() const {
+  return constant_kind_case() == kDurationValue
+      ? *_impl_.constant_kind_.duration_value_
+      : reinterpret_cast<::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
+}
+inline const ::google::protobuf::Duration& Constant::duration_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.duration_value)
+  return _internal_duration_value();
+}
+inline ::google::protobuf::Duration* Constant::unsafe_arena_release_duration_value() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Constant.duration_value)
+  if (constant_kind_case() == kDurationValue) {
+    clear_has_constant_kind();
+    ::google::protobuf::Duration* temp = _impl_.constant_kind_.duration_value_;
+    _impl_.constant_kind_.duration_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Constant::unsafe_arena_set_allocated_duration_value(::google::protobuf::Duration* duration_value) {
+  clear_constant_kind();
+  if (duration_value) {
+    set_has_duration_value();
+    _impl_.constant_kind_.duration_value_ = duration_value;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Constant.duration_value)
+}
+inline ::google::protobuf::Duration* Constant::_internal_mutable_duration_value() {
+  if (constant_kind_case() != kDurationValue) {
+    clear_constant_kind();
+    set_has_duration_value();
+    _impl_.constant_kind_.duration_value_ = CreateMaybeMessage< ::google::protobuf::Duration >(GetArenaForAllocation());
+  }
+  return _impl_.constant_kind_.duration_value_;
+}
+inline ::google::protobuf::Duration* Constant::mutable_duration_value() {
+  ::google::protobuf::Duration* _msg = _internal_mutable_duration_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Constant.duration_value)
+  return _msg;
+}
+
+// .google.protobuf.Timestamp timestamp_value = 9 [json_name = "timestampValue", deprecated = true];
+inline bool Constant::has_timestamp_value() const {
+  return constant_kind_case() == kTimestampValue;
+}
+inline bool Constant::_internal_has_timestamp_value() const {
+  return constant_kind_case() == kTimestampValue;
+}
+inline void Constant::set_has_timestamp_value() {
+  _impl_._oneof_case_[0] = kTimestampValue;
+}
+inline ::google::protobuf::Timestamp* Constant::release_timestamp_value() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Constant.timestamp_value)
+  if (constant_kind_case() == kTimestampValue) {
+    clear_has_constant_kind();
+    ::google::protobuf::Timestamp* temp = _impl_.constant_kind_.timestamp_value_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.constant_kind_.timestamp_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::protobuf::Timestamp& Constant::_internal_timestamp_value() const {
+  return constant_kind_case() == kTimestampValue
+      ? *_impl_.constant_kind_.timestamp_value_
+      : reinterpret_cast<::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
+}
+inline const ::google::protobuf::Timestamp& Constant::timestamp_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.timestamp_value)
+  return _internal_timestamp_value();
+}
+inline ::google::protobuf::Timestamp* Constant::unsafe_arena_release_timestamp_value() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Constant.timestamp_value)
+  if (constant_kind_case() == kTimestampValue) {
+    clear_has_constant_kind();
+    ::google::protobuf::Timestamp* temp = _impl_.constant_kind_.timestamp_value_;
+    _impl_.constant_kind_.timestamp_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Constant::unsafe_arena_set_allocated_timestamp_value(::google::protobuf::Timestamp* timestamp_value) {
+  clear_constant_kind();
+  if (timestamp_value) {
+    set_has_timestamp_value();
+    _impl_.constant_kind_.timestamp_value_ = timestamp_value;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Constant.timestamp_value)
+}
+inline ::google::protobuf::Timestamp* Constant::_internal_mutable_timestamp_value() {
+  if (constant_kind_case() != kTimestampValue) {
+    clear_constant_kind();
+    set_has_timestamp_value();
+    _impl_.constant_kind_.timestamp_value_ = CreateMaybeMessage< ::google::protobuf::Timestamp >(GetArenaForAllocation());
+  }
+  return _impl_.constant_kind_.timestamp_value_;
+}
+inline ::google::protobuf::Timestamp* Constant::mutable_timestamp_value() {
+  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Constant.timestamp_value)
+  return _msg;
+}
+
+inline bool Constant::has_constant_kind() const {
+  return constant_kind_case() != CONSTANT_KIND_NOT_SET;
+}
+inline void Constant::clear_has_constant_kind() {
+  _impl_._oneof_case_[0] = CONSTANT_KIND_NOT_SET;
+}
+inline Constant::ConstantKindCase Constant::constant_kind_case() const {
+  return Constant::ConstantKindCase(_impl_._oneof_case_[0]);
+}
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// SourceInfo
+
+// string syntax_version = 1 [json_name = "syntaxVersion"];
+inline void SourceInfo::clear_syntax_version() {
+  _impl_.syntax_version_.ClearToEmpty();
+}
+inline const std::string& SourceInfo::syntax_version() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourceInfo.syntax_version)
+  return _internal_syntax_version();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void SourceInfo::set_syntax_version(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.syntax_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourceInfo.syntax_version)
+}
+inline std::string* SourceInfo::mutable_syntax_version() {
+  std::string* _s = _internal_mutable_syntax_version();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.SourceInfo.syntax_version)
+  return _s;
+}
+inline const std::string& SourceInfo::_internal_syntax_version() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.syntax_version_.Get();
+}
+inline void SourceInfo::_internal_set_syntax_version(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.syntax_version_.Set(value, GetArenaForAllocation());
+}
+inline std::string* SourceInfo::_internal_mutable_syntax_version() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.syntax_version_.Mutable( GetArenaForAllocation());
+}
+inline std::string* SourceInfo::release_syntax_version() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.SourceInfo.syntax_version)
+  return _impl_.syntax_version_.Release();
+}
+inline void SourceInfo::set_allocated_syntax_version(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.syntax_version_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.syntax_version_.IsDefault()) {
+          _impl_.syntax_version_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.SourceInfo.syntax_version)
+}
+
+// string location = 2 [json_name = "location"];
+inline void SourceInfo::clear_location() {
+  _impl_.location_.ClearToEmpty();
+}
+inline const std::string& SourceInfo::location() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourceInfo.location)
+  return _internal_location();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void SourceInfo::set_location(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourceInfo.location)
+}
+inline std::string* SourceInfo::mutable_location() {
+  std::string* _s = _internal_mutable_location();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.SourceInfo.location)
+  return _s;
+}
+inline const std::string& SourceInfo::_internal_location() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.location_.Get();
+}
+inline void SourceInfo::_internal_set_location(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.location_.Set(value, GetArenaForAllocation());
+}
+inline std::string* SourceInfo::_internal_mutable_location() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.location_.Mutable( GetArenaForAllocation());
+}
+inline std::string* SourceInfo::release_location() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.SourceInfo.location)
+  return _impl_.location_.Release();
+}
+inline void SourceInfo::set_allocated_location(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.location_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.location_.IsDefault()) {
+          _impl_.location_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.SourceInfo.location)
+}
+
+// repeated int32 line_offsets = 3 [json_name = "lineOffsets"];
+inline int SourceInfo::_internal_line_offsets_size() const {
+  return _internal_line_offsets().size();
+}
+inline int SourceInfo::line_offsets_size() const {
+  return _internal_line_offsets_size();
+}
+inline void SourceInfo::clear_line_offsets() {
+  _internal_mutable_line_offsets()->Clear();
+}
+inline ::int32_t SourceInfo::line_offsets(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourceInfo.line_offsets)
+  return _internal_line_offsets().Get(index);
+}
+inline void SourceInfo::set_line_offsets(int index, ::int32_t value) {
+  _internal_mutable_line_offsets()->Set(index, value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourceInfo.line_offsets)
+}
+inline void SourceInfo::add_line_offsets(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_line_offsets()->Add(value);
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.SourceInfo.line_offsets)
+}
+inline const ::google::protobuf::RepeatedField<::int32_t>& SourceInfo::line_offsets() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.SourceInfo.line_offsets)
+  return _internal_line_offsets();
+}
+inline ::google::protobuf::RepeatedField<::int32_t>* SourceInfo::mutable_line_offsets() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.SourceInfo.line_offsets)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_line_offsets();
+}
+
+inline const ::google::protobuf::RepeatedField<::int32_t>& SourceInfo::_internal_line_offsets() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.line_offsets_;
+}
+inline ::google::protobuf::RepeatedField<::int32_t>* SourceInfo::_internal_mutable_line_offsets() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.line_offsets_;
+}
+
+// map<int64, int32> positions = 4 [json_name = "positions"];
+inline int SourceInfo::_internal_positions_size() const {
+  return _internal_positions().size();
+}
+inline int SourceInfo::positions_size() const {
+  return _internal_positions_size();
+}
+inline void SourceInfo::clear_positions() {
+  _impl_.positions_.Clear();
+}
+inline const ::google::protobuf::Map<::int64_t, ::int32_t>& SourceInfo::_internal_positions() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.positions_.GetMap();
+}
+inline const ::google::protobuf::Map<::int64_t, ::int32_t>& SourceInfo::positions() const {
+  // @@protoc_insertion_point(field_map:google.api.expr.v1alpha1.SourceInfo.positions)
+  return _internal_positions();
+}
+inline ::google::protobuf::Map<::int64_t, ::int32_t>* SourceInfo::_internal_mutable_positions() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.positions_.MutableMap();
+}
+inline ::google::protobuf::Map<::int64_t, ::int32_t>* SourceInfo::mutable_positions() {
+  // @@protoc_insertion_point(field_mutable_map:google.api.expr.v1alpha1.SourceInfo.positions)
+  return _internal_mutable_positions();
+}
+
+// map<int64, .google.api.expr.v1alpha1.Expr> macro_calls = 5 [json_name = "macroCalls"];
+inline int SourceInfo::_internal_macro_calls_size() const {
+  return _internal_macro_calls().size();
+}
+inline int SourceInfo::macro_calls_size() const {
+  return _internal_macro_calls_size();
+}
+inline void SourceInfo::clear_macro_calls() {
+  _impl_.macro_calls_.Clear();
+}
+inline const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Expr>& SourceInfo::_internal_macro_calls() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.macro_calls_.GetMap();
+}
+inline const ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Expr>& SourceInfo::macro_calls() const {
+  // @@protoc_insertion_point(field_map:google.api.expr.v1alpha1.SourceInfo.macro_calls)
+  return _internal_macro_calls();
+}
+inline ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Expr>* SourceInfo::_internal_mutable_macro_calls() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.macro_calls_.MutableMap();
+}
+inline ::google::protobuf::Map<::int64_t, ::google::api::expr::v1alpha1::Expr>* SourceInfo::mutable_macro_calls() {
+  // @@protoc_insertion_point(field_mutable_map:google.api.expr.v1alpha1.SourceInfo.macro_calls)
+  return _internal_mutable_macro_calls();
+}
+
+// -------------------------------------------------------------------
+
+// SourcePosition
+
+// string location = 1 [json_name = "location"];
+inline void SourcePosition::clear_location() {
+  _impl_.location_.ClearToEmpty();
+}
+inline const std::string& SourcePosition::location() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourcePosition.location)
+  return _internal_location();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void SourcePosition::set_location(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourcePosition.location)
+}
+inline std::string* SourcePosition::mutable_location() {
+  std::string* _s = _internal_mutable_location();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.SourcePosition.location)
+  return _s;
+}
+inline const std::string& SourcePosition::_internal_location() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.location_.Get();
+}
+inline void SourcePosition::_internal_set_location(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.location_.Set(value, GetArenaForAllocation());
+}
+inline std::string* SourcePosition::_internal_mutable_location() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.location_.Mutable( GetArenaForAllocation());
+}
+inline std::string* SourcePosition::release_location() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.SourcePosition.location)
+  return _impl_.location_.Release();
+}
+inline void SourcePosition::set_allocated_location(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.location_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.location_.IsDefault()) {
+          _impl_.location_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.SourcePosition.location)
+}
+
+// int32 offset = 2 [json_name = "offset"];
+inline void SourcePosition::clear_offset() {
+  _impl_.offset_ = 0;
+}
+inline ::int32_t SourcePosition::offset() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourcePosition.offset)
+  return _internal_offset();
+}
+inline void SourcePosition::set_offset(::int32_t value) {
+  _internal_set_offset(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourcePosition.offset)
+}
+inline ::int32_t SourcePosition::_internal_offset() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.offset_;
+}
+inline void SourcePosition::_internal_set_offset(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.offset_ = value;
+}
+
+// int32 line = 3 [json_name = "line"];
+inline void SourcePosition::clear_line() {
+  _impl_.line_ = 0;
+}
+inline ::int32_t SourcePosition::line() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourcePosition.line)
+  return _internal_line();
+}
+inline void SourcePosition::set_line(::int32_t value) {
+  _internal_set_line(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourcePosition.line)
+}
+inline ::int32_t SourcePosition::_internal_line() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.line_;
+}
+inline void SourcePosition::_internal_set_line(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.line_ = value;
+}
+
+// int32 column = 4 [json_name = "column"];
+inline void SourcePosition::clear_column() {
+  _impl_.column_ = 0;
+}
+inline ::int32_t SourcePosition::column() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourcePosition.column)
+  return _internal_column();
+}
+inline void SourcePosition::set_column(::int32_t value) {
+  _internal_set_column(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourcePosition.column)
+}
+inline ::int32_t SourcePosition::_internal_column() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.column_;
+}
+inline void SourcePosition::_internal_set_column(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.column_ = value;
+}
+
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif  // __GNUC__
+
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+
+
+// @@protoc_insertion_point(global_scope)
+
+#include "google/protobuf/port_undef.inc"
+
+#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto_2epb_2eh
diff --git a/gen/google/api/expr/v1alpha1/value.pb.cc b/gen/google/api/expr/v1alpha1/value.pb.cc
new file mode 100644
index 0000000..cb07fb4
--- /dev/null
+++ b/gen/google/api/expr/v1alpha1/value.pb.cc
@@ -0,0 +1,1734 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/api/expr/v1alpha1/value.proto
+
+#include "google/api/expr/v1alpha1/value.pb.h"
+
+#include <algorithm>
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/extension_set.h"
+#include "google/protobuf/wire_format_lite.h"
+#include "google/protobuf/descriptor.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/reflection_ops.h"
+#include "google/protobuf/wire_format.h"
+#include "google/protobuf/generated_message_tctable_impl.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+PROTOBUF_PRAGMA_INIT_SEG
+namespace _pb = ::google::protobuf;
+namespace _pbi = ::google::protobuf::internal;
+namespace _fl = ::google::protobuf::internal::field_layout;
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+        template <typename>
+PROTOBUF_CONSTEXPR Value::Value(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.kind_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+    } {}
+struct ValueDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ValueDefaultTypeInternal() {}
+  union {
+    Value _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR EnumValue::EnumValue(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.type_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.value_)*/ 0,
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct EnumValueDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR EnumValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~EnumValueDefaultTypeInternal() {}
+  union {
+    EnumValue _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnumValueDefaultTypeInternal _EnumValue_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR ListValue::ListValue(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.values_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct ListValueDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ListValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ListValueDefaultTypeInternal() {}
+  union {
+    ListValue _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListValueDefaultTypeInternal _ListValue_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR MapValue_Entry::MapValue_Entry(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.key_)*/ nullptr,
+      /*decltype(_impl_.value_)*/ nullptr,
+    } {}
+struct MapValue_EntryDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR MapValue_EntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~MapValue_EntryDefaultTypeInternal() {}
+  union {
+    MapValue_Entry _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapValue_EntryDefaultTypeInternal _MapValue_Entry_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR MapValue::MapValue(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.entries_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct MapValueDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR MapValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~MapValueDefaultTypeInternal() {}
+  union {
+    MapValue _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapValueDefaultTypeInternal _MapValue_default_instance_;
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+static ::_pb::Metadata file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto[5];
+static constexpr const ::_pb::EnumDescriptor**
+    file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto = nullptr;
+static constexpr const ::_pb::ServiceDescriptor**
+    file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto = nullptr;
+const ::uint32_t TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
+    protodesc_cold) = {
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Value, _internal_metadata_),
+    ~0u,  // no _extensions_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Value, _impl_._oneof_case_[0]),
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    ::_pbi::kInvalidFieldOffsetTag,
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Value, _impl_.kind_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::EnumValue, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::EnumValue, _impl_.type_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::EnumValue, _impl_.value_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ListValue, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::ListValue, _impl_.values_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::MapValue_Entry, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::MapValue_Entry, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::MapValue_Entry, _impl_.key_),
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::MapValue_Entry, _impl_.value_),
+    0,
+    1,
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::MapValue, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::MapValue, _impl_.entries_),
+};
+
+static const ::_pbi::MigrationSchema
+    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+        {0, -1, -1, sizeof(::google::api::expr::v1alpha1::Value)},
+        {21, -1, -1, sizeof(::google::api::expr::v1alpha1::EnumValue)},
+        {31, -1, -1, sizeof(::google::api::expr::v1alpha1::ListValue)},
+        {40, 50, -1, sizeof(::google::api::expr::v1alpha1::MapValue_Entry)},
+        {52, -1, -1, sizeof(::google::api::expr::v1alpha1::MapValue)},
+};
+
+static const ::_pb::Message* const file_default_instances[] = {
+    &::google::api::expr::v1alpha1::_Value_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_EnumValue_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_ListValue_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_MapValue_Entry_default_instance_._instance,
+    &::google::api::expr::v1alpha1::_MapValue_default_instance_._instance,
+};
+const char descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+    "\n$google/api/expr/v1alpha1/value.proto\022\030"
+    "google.api.expr.v1alpha1\032\031google/protobu"
+    "f/any.proto\032\034google/protobuf/struct.prot"
+    "o\"\315\004\n\005Value\022;\n\nnull_value\030\001 \001(\0162\032.google"
+    ".protobuf.NullValueH\000R\tnullValue\022\037\n\nbool"
+    "_value\030\002 \001(\010H\000R\tboolValue\022!\n\013int64_value"
+    "\030\003 \001(\003H\000R\nint64Value\022#\n\014uint64_value\030\004 \001"
+    "(\004H\000R\013uint64Value\022#\n\014double_value\030\005 \001(\001H"
+    "\000R\013doubleValue\022#\n\014string_value\030\006 \001(\tH\000R\013"
+    "stringValue\022!\n\013bytes_value\030\007 \001(\014H\000R\nbyte"
+    "sValue\022D\n\nenum_value\030\t \001(\0132#.google.api."
+    "expr.v1alpha1.EnumValueH\000R\tenumValue\0229\n\014"
+    "object_value\030\n \001(\0132\024.google.protobuf.Any"
+    "H\000R\013objectValue\022A\n\tmap_value\030\013 \001(\0132\".goo"
+    "gle.api.expr.v1alpha1.MapValueH\000R\010mapVal"
+    "ue\022D\n\nlist_value\030\014 \001(\0132#.google.api.expr"
+    ".v1alpha1.ListValueH\000R\tlistValue\022\037\n\ntype"
+    "_value\030\017 \001(\tH\000R\ttypeValueB\006\n\004kind\"5\n\tEnu"
+    "mValue\022\022\n\004type\030\001 \001(\tR\004type\022\024\n\005value\030\002 \001("
+    "\005R\005value\"D\n\tListValue\0227\n\006values\030\001 \003(\0132\037."
+    "google.api.expr.v1alpha1.ValueR\006values\"\301"
+    "\001\n\010MapValue\022B\n\007entries\030\001 \003(\0132(.google.ap"
+    "i.expr.v1alpha1.MapValue.EntryR\007entries\032"
+    "q\n\005Entry\0221\n\003key\030\001 \001(\0132\037.google.api.expr."
+    "v1alpha1.ValueR\003key\0225\n\005value\030\002 \001(\0132\037.goo"
+    "gle.api.expr.v1alpha1.ValueR\005valueB\356\001\n\034c"
+    "om.google.api.expr.v1alpha1B\nValueProtoP"
+    "\001Z<google.golang.org/genproto/googleapis"
+    "/api/expr/v1alpha1;expr\370\001\001\242\002\003GAE\252\002\030Googl"
+    "e.Api.Expr.V1alpha1\312\002\030Google\\Api\\Expr\\V1"
+    "alpha1\342\002$Google\\Api\\Expr\\V1alpha1\\GPBMet"
+    "adata\352\002\033Google::Api::Expr::V1alpha1b\006pro"
+    "to3"
+};
+static const ::_pbi::DescriptorTable* const descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_deps[2] =
+    {
+        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
+        &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
+};
+static ::absl::once_flag descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_once;
+const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto = {
+    false,
+    false,
+    1283,
+    descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto,
+    "google/api/expr/v1alpha1/value.proto",
+    &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_once,
+    descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_deps,
+    2,
+    5,
+    schemas,
+    file_default_instances,
+    TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto::offsets,
+    file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto,
+    file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto,
+    file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto,
+};
+
+// This function exists to be marked as weak.
+// It can significantly speed up compilation by breaking up LLVM's SCC
+// in the .pb.cc translation units. Large translation units see a
+// reduction of more than 35% of walltime for optimized builds. Without
+// the weak attribute all the messages in the file, including all the
+// vtables and everything they use become part of the same SCC through
+// a cycle like:
+// GetMetadata -> descriptor table -> default instances ->
+//   vtables -> GetMetadata
+// By adding a weak function here we break the connection from the
+// individual vtables back into the descriptor table.
+PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_getter() {
+  return &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
+}
+// Force running AddDescriptors() at dynamic initialization time.
+PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
+static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto);
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+// ===================================================================
+
+class Value::_Internal {
+ public:
+  static constexpr ::int32_t kOneofCaseOffset =
+    PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Value, _impl_._oneof_case_);
+  static const ::google::api::expr::v1alpha1::EnumValue& enum_value(const Value* msg);
+  static const ::google::protobuf::Any& object_value(const Value* msg);
+  static const ::google::api::expr::v1alpha1::MapValue& map_value(const Value* msg);
+  static const ::google::api::expr::v1alpha1::ListValue& list_value(const Value* msg);
+};
+
+const ::google::api::expr::v1alpha1::EnumValue& Value::_Internal::enum_value(const Value* msg) {
+  return *msg->_impl_.kind_.enum_value_;
+}
+const ::google::protobuf::Any& Value::_Internal::object_value(const Value* msg) {
+  return *msg->_impl_.kind_.object_value_;
+}
+const ::google::api::expr::v1alpha1::MapValue& Value::_Internal::map_value(const Value* msg) {
+  return *msg->_impl_.kind_.map_value_;
+}
+const ::google::api::expr::v1alpha1::ListValue& Value::_Internal::list_value(const Value* msg) {
+  return *msg->_impl_.kind_.list_value_;
+}
+void Value::set_allocated_enum_value(::google::api::expr::v1alpha1::EnumValue* enum_value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_kind();
+  if (enum_value) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(enum_value);
+    if (message_arena != submessage_arena) {
+      enum_value = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, enum_value, submessage_arena);
+    }
+    set_has_enum_value();
+    _impl_.kind_.enum_value_ = enum_value;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Value.enum_value)
+}
+void Value::set_allocated_object_value(::google::protobuf::Any* object_value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_kind();
+  if (object_value) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(
+                reinterpret_cast<::google::protobuf::MessageLite*>(object_value));
+    if (message_arena != submessage_arena) {
+      object_value = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, object_value, submessage_arena);
+    }
+    set_has_object_value();
+    _impl_.kind_.object_value_ = object_value;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Value.object_value)
+}
+void Value::clear_object_value() {
+  if (kind_case() == kObjectValue) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.kind_.object_value_;
+    }
+    clear_has_kind();
+  }
+}
+void Value::set_allocated_map_value(::google::api::expr::v1alpha1::MapValue* map_value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_kind();
+  if (map_value) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(map_value);
+    if (message_arena != submessage_arena) {
+      map_value = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, map_value, submessage_arena);
+    }
+    set_has_map_value();
+    _impl_.kind_.map_value_ = map_value;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Value.map_value)
+}
+void Value::set_allocated_list_value(::google::api::expr::v1alpha1::ListValue* list_value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  clear_kind();
+  if (list_value) {
+    ::google::protobuf::Arena* submessage_arena =
+      ::google::protobuf::Arena::InternalGetOwningArena(list_value);
+    if (message_arena != submessage_arena) {
+      list_value = ::google::protobuf::internal::GetOwnedMessage(
+          message_arena, list_value, submessage_arena);
+    }
+    set_has_list_value();
+    _impl_.kind_.list_value_ = list_value;
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Value.list_value)
+}
+Value::Value(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Value)
+}
+Value::Value(const Value& from) : ::google::protobuf::Message() {
+  Value* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  clear_has_kind();
+  switch (from.kind_case()) {
+    case kNullValue: {
+      _this->_internal_set_null_value(from._internal_null_value());
+      break;
+    }
+    case kBoolValue: {
+      _this->_internal_set_bool_value(from._internal_bool_value());
+      break;
+    }
+    case kInt64Value: {
+      _this->_internal_set_int64_value(from._internal_int64_value());
+      break;
+    }
+    case kUint64Value: {
+      _this->_internal_set_uint64_value(from._internal_uint64_value());
+      break;
+    }
+    case kDoubleValue: {
+      _this->_internal_set_double_value(from._internal_double_value());
+      break;
+    }
+    case kStringValue: {
+      _this->_internal_set_string_value(from._internal_string_value());
+      break;
+    }
+    case kBytesValue: {
+      _this->_internal_set_bytes_value(from._internal_bytes_value());
+      break;
+    }
+    case kEnumValue: {
+      _this->_internal_mutable_enum_value()->::google::api::expr::v1alpha1::EnumValue::MergeFrom(
+          from._internal_enum_value());
+      break;
+    }
+    case kObjectValue: {
+      _this->_internal_mutable_object_value()->::google::protobuf::Any::MergeFrom(
+          from._internal_object_value());
+      break;
+    }
+    case kMapValue: {
+      _this->_internal_mutable_map_value()->::google::api::expr::v1alpha1::MapValue::MergeFrom(
+          from._internal_map_value());
+      break;
+    }
+    case kListValue: {
+      _this->_internal_mutable_list_value()->::google::api::expr::v1alpha1::ListValue::MergeFrom(
+          from._internal_list_value());
+      break;
+    }
+    case kTypeValue: {
+      _this->_internal_set_type_value(from._internal_type_value());
+      break;
+    }
+    case KIND_NOT_SET: {
+      break;
+    }
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Value)
+}
+inline void Value::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.kind_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_._oneof_case_)*/ {},
+  };
+  clear_has_kind();
+}
+Value::~Value() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Value)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Value::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  if (has_kind()) {
+    clear_kind();
+  }
+}
+void Value::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+void Value::clear_kind() {
+// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1alpha1.Value)
+  switch (kind_case()) {
+    case kNullValue: {
+      // No need to clear
+      break;
+    }
+    case kBoolValue: {
+      // No need to clear
+      break;
+    }
+    case kInt64Value: {
+      // No need to clear
+      break;
+    }
+    case kUint64Value: {
+      // No need to clear
+      break;
+    }
+    case kDoubleValue: {
+      // No need to clear
+      break;
+    }
+    case kStringValue: {
+      _impl_.kind_.string_value_.Destroy();
+      break;
+    }
+    case kBytesValue: {
+      _impl_.kind_.bytes_value_.Destroy();
+      break;
+    }
+    case kEnumValue: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.kind_.enum_value_;
+      }
+      break;
+    }
+    case kObjectValue: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.kind_.object_value_;
+      }
+      break;
+    }
+    case kMapValue: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.kind_.map_value_;
+      }
+      break;
+    }
+    case kListValue: {
+      if (GetArenaForAllocation() == nullptr) {
+        delete _impl_.kind_.list_value_;
+      }
+      break;
+    }
+    case kTypeValue: {
+      _impl_.kind_.type_value_.Destroy();
+      break;
+    }
+    case KIND_NOT_SET: {
+      break;
+    }
+  }
+  _impl_._oneof_case_[0] = KIND_NOT_SET;
+}
+
+
+PROTOBUF_NOINLINE void Value::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Value)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  clear_kind();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Value::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 12, 4, 69, 2> Value::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    15, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294946944,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    12,  // num_field_entries
+    4,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Value_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.null_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
+    // bool bool_value = 2 [json_name = "boolValue"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.bool_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
+    // int64 int64_value = 3 [json_name = "int64Value"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.int64_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
+    // uint64 uint64_value = 4 [json_name = "uint64Value"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.uint64_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kUInt64)},
+    // double double_value = 5 [json_name = "doubleValue"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.double_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
+    // string string_value = 6 [json_name = "stringValue"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.string_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // bytes bytes_value = 7 [json_name = "bytesValue"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.bytes_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
+    // .google.api.expr.v1alpha1.EnumValue enum_value = 9 [json_name = "enumValue"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.enum_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Any object_value = 10 [json_name = "objectValue"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.object_value_), _Internal::kOneofCaseOffset + 0, 1,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.MapValue map_value = 11 [json_name = "mapValue"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.map_value_), _Internal::kOneofCaseOffset + 0, 2,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.ListValue list_value = 12 [json_name = "listValue"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.list_value_), _Internal::kOneofCaseOffset + 0, 3,
+    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
+    // string type_value = 15 [json_name = "typeValue"];
+    {PROTOBUF_FIELD_OFFSET(Value, _impl_.kind_.type_value_), _Internal::kOneofCaseOffset + 0, 0,
+    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::EnumValue>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::MapValue>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::ListValue>()},
+  }}, {{
+    "\36\0\0\0\0\0\14\0\0\0\0\0\12\0\0\0"
+    "google.api.expr.v1alpha1.Value"
+    "string_value"
+    "type_value"
+  }},
+};
+
+::uint8_t* Value::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Value)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  switch (kind_case()) {
+    case kNullValue: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteEnumToArray(
+          1, this->_internal_null_value(), target);
+      break;
+    }
+    case kBoolValue: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteBoolToArray(
+          2, this->_internal_bool_value(), target);
+      break;
+    }
+    case kInt64Value: {
+      target = ::google::protobuf::internal::WireFormatLite::
+          WriteInt64ToArrayWithField<3>(
+              stream, this->_internal_int64_value(), target);
+      break;
+    }
+    case kUint64Value: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
+          4, this->_internal_uint64_value(), target);
+      break;
+    }
+    case kDoubleValue: {
+      target = stream->EnsureSpace(target);
+      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
+          5, this->_internal_double_value(), target);
+      break;
+    }
+    case kStringValue: {
+      const std::string& _s = this->_internal_string_value();
+      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Value.string_value");
+      target = stream->WriteStringMaybeAliased(6, _s, target);
+      break;
+    }
+    case kBytesValue: {
+      const std::string& _s = this->_internal_bytes_value();
+      target = stream->WriteBytesMaybeAliased(7, _s, target);
+      break;
+    }
+    case kEnumValue: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(9, _Internal::enum_value(this),
+          _Internal::enum_value(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kObjectValue: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(10, _Internal::object_value(this),
+          _Internal::object_value(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kMapValue: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(11, _Internal::map_value(this),
+          _Internal::map_value(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kListValue: {
+      target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(12, _Internal::list_value(this),
+          _Internal::list_value(this).GetCachedSize(), target, stream);
+      break;
+    }
+    case kTypeValue: {
+      const std::string& _s = this->_internal_type_value();
+      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.Value.type_value");
+      target = stream->WriteStringMaybeAliased(15, _s, target);
+      break;
+    }
+    default:
+      break;
+  }
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Value)
+  return target;
+}
+
+::size_t Value::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Value)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  switch (kind_case()) {
+    // .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
+    case kNullValue: {
+      total_size += 1 +
+                    ::_pbi::WireFormatLite::EnumSize(this->_internal_null_value());
+      break;
+    }
+    // bool bool_value = 2 [json_name = "boolValue"];
+    case kBoolValue: {
+      total_size += 2;
+      break;
+    }
+    // int64 int64_value = 3 [json_name = "int64Value"];
+    case kInt64Value: {
+      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+          this->_internal_int64_value());
+      break;
+    }
+    // uint64 uint64_value = 4 [json_name = "uint64Value"];
+    case kUint64Value: {
+      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
+          this->_internal_uint64_value());
+      break;
+    }
+    // double double_value = 5 [json_name = "doubleValue"];
+    case kDoubleValue: {
+      total_size += 9;
+      break;
+    }
+    // string string_value = 6 [json_name = "stringValue"];
+    case kStringValue: {
+      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                      this->_internal_string_value());
+      break;
+    }
+    // bytes bytes_value = 7 [json_name = "bytesValue"];
+    case kBytesValue: {
+      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
+                                      this->_internal_bytes_value());
+      break;
+    }
+    // .google.api.expr.v1alpha1.EnumValue enum_value = 9 [json_name = "enumValue"];
+    case kEnumValue: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.kind_.enum_value_);
+      break;
+    }
+    // .google.protobuf.Any object_value = 10 [json_name = "objectValue"];
+    case kObjectValue: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.kind_.object_value_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.MapValue map_value = 11 [json_name = "mapValue"];
+    case kMapValue: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.kind_.map_value_);
+      break;
+    }
+    // .google.api.expr.v1alpha1.ListValue list_value = 12 [json_name = "listValue"];
+    case kListValue: {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.kind_.list_value_);
+      break;
+    }
+    // string type_value = 15 [json_name = "typeValue"];
+    case kTypeValue: {
+      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                      this->_internal_type_value());
+      break;
+    }
+    case KIND_NOT_SET: {
+      break;
+    }
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Value::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Value::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Value::GetClassData() const { return &_class_data_; }
+
+
+void Value::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Value*>(&to_msg);
+  auto& from = static_cast<const Value&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Value)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  switch (from.kind_case()) {
+    case kNullValue: {
+      _this->_internal_set_null_value(from._internal_null_value());
+      break;
+    }
+    case kBoolValue: {
+      _this->_internal_set_bool_value(from._internal_bool_value());
+      break;
+    }
+    case kInt64Value: {
+      _this->_internal_set_int64_value(from._internal_int64_value());
+      break;
+    }
+    case kUint64Value: {
+      _this->_internal_set_uint64_value(from._internal_uint64_value());
+      break;
+    }
+    case kDoubleValue: {
+      _this->_internal_set_double_value(from._internal_double_value());
+      break;
+    }
+    case kStringValue: {
+      _this->_internal_set_string_value(from._internal_string_value());
+      break;
+    }
+    case kBytesValue: {
+      _this->_internal_set_bytes_value(from._internal_bytes_value());
+      break;
+    }
+    case kEnumValue: {
+      _this->_internal_mutable_enum_value()->::google::api::expr::v1alpha1::EnumValue::MergeFrom(
+          from._internal_enum_value());
+      break;
+    }
+    case kObjectValue: {
+      _this->_internal_mutable_object_value()->::google::protobuf::Any::MergeFrom(
+          from._internal_object_value());
+      break;
+    }
+    case kMapValue: {
+      _this->_internal_mutable_map_value()->::google::api::expr::v1alpha1::MapValue::MergeFrom(
+          from._internal_map_value());
+      break;
+    }
+    case kListValue: {
+      _this->_internal_mutable_list_value()->::google::api::expr::v1alpha1::ListValue::MergeFrom(
+          from._internal_list_value());
+      break;
+    }
+    case kTypeValue: {
+      _this->_internal_set_type_value(from._internal_type_value());
+      break;
+    }
+    case KIND_NOT_SET: {
+      break;
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Value::CopyFrom(const Value& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Value)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Value::IsInitialized() const {
+  return true;
+}
+
+void Value::InternalSwap(Value* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_.kind_, other->_impl_.kind_);
+  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
+}
+
+::google::protobuf::Metadata Value::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto[0]);
+}
+// ===================================================================
+
+class EnumValue::_Internal {
+ public:
+};
+
+EnumValue::EnumValue(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.EnumValue)
+}
+EnumValue::EnumValue(const EnumValue& from) : ::google::protobuf::Message() {
+  EnumValue* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.type_){},
+      decltype(_impl_.value_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.type_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.type_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_type().empty()) {
+    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
+  }
+  _this->_impl_.value_ = from._impl_.value_;
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.EnumValue)
+}
+inline void EnumValue::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.type_){},
+      decltype(_impl_.value_){0},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.type_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.type_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+EnumValue::~EnumValue() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.EnumValue)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void EnumValue::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.type_.Destroy();
+}
+void EnumValue::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void EnumValue::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.EnumValue)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.type_.ClearToEmpty();
+  _impl_.value_ = 0;
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* EnumValue::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 0, 47, 2> EnumValue::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_EnumValue_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // int32 value = 2 [json_name = "value"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EnumValue, _impl_.value_), 63>(),
+     {16, 63, 0, PROTOBUF_FIELD_OFFSET(EnumValue, _impl_.value_)}},
+    // string type = 1 [json_name = "type"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EnumValue, _impl_.type_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string type = 1 [json_name = "type"];
+    {PROTOBUF_FIELD_OFFSET(EnumValue, _impl_.type_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // int32 value = 2 [json_name = "value"];
+    {PROTOBUF_FIELD_OFFSET(EnumValue, _impl_.value_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
+  }},
+  // no aux_entries
+  {{
+    "\42\4\0\0\0\0\0\0"
+    "google.api.expr.v1alpha1.EnumValue"
+    "type"
+  }},
+};
+
+::uint8_t* EnumValue::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.EnumValue)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string type = 1 [json_name = "type"];
+  if (!this->_internal_type().empty()) {
+    const std::string& _s = this->_internal_type();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.api.expr.v1alpha1.EnumValue.type");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // int32 value = 2 [json_name = "value"];
+  if (this->_internal_value() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt32ToArrayWithField<2>(
+            stream, this->_internal_value(), target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.EnumValue)
+  return target;
+}
+
+::size_t EnumValue::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.EnumValue)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string type = 1 [json_name = "type"];
+  if (!this->_internal_type().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_type());
+  }
+
+  // int32 value = 2 [json_name = "value"];
+  if (this->_internal_value() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
+        this->_internal_value());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData EnumValue::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    EnumValue::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*EnumValue::GetClassData() const { return &_class_data_; }
+
+
+void EnumValue::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<EnumValue*>(&to_msg);
+  auto& from = static_cast<const EnumValue&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.EnumValue)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_type().empty()) {
+    _this->_internal_set_type(from._internal_type());
+  }
+  if (from._internal_value() != 0) {
+    _this->_internal_set_value(from._internal_value());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void EnumValue::CopyFrom(const EnumValue& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.EnumValue)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool EnumValue::IsInitialized() const {
+  return true;
+}
+
+void EnumValue::InternalSwap(EnumValue* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
+                                       &other->_impl_.type_, rhs_arena);
+        swap(_impl_.value_, other->_impl_.value_);
+}
+
+::google::protobuf::Metadata EnumValue::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto[1]);
+}
+// ===================================================================
+
+class ListValue::_Internal {
+ public:
+};
+
+ListValue::ListValue(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.ListValue)
+}
+ListValue::ListValue(const ListValue& from) : ::google::protobuf::Message() {
+  ListValue* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.values_){from._impl_.values_},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.ListValue)
+}
+inline void ListValue::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.values_){arena},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+ListValue::~ListValue() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.ListValue)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void ListValue::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.values_.~RepeatedPtrField();
+}
+void ListValue::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void ListValue::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.ListValue)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_values()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* ListValue::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ListValue::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_ListValue_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+    {::_pbi::TcParser::FastMtR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ListValue, _impl_.values_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+    {PROTOBUF_FIELD_OFFSET(ListValue, _impl_.values_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Value>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* ListValue::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.ListValue)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
+    const auto& repfield = this->_internal_values().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.ListValue)
+  return target;
+}
+
+::size_t ListValue::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.ListValue)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+  total_size += 1UL * this->_internal_values_size();
+  for (const auto& msg : this->_internal_values()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData ListValue::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    ListValue::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*ListValue::GetClassData() const { return &_class_data_; }
+
+
+void ListValue::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<ListValue*>(&to_msg);
+  auto& from = static_cast<const ListValue&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.ListValue)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void ListValue::CopyFrom(const ListValue& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.ListValue)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool ListValue::IsInitialized() const {
+  return true;
+}
+
+void ListValue::InternalSwap(ListValue* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.values_.InternalSwap(&other->_impl_.values_);
+}
+
+::google::protobuf::Metadata ListValue::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto[2]);
+}
+// ===================================================================
+
+class MapValue_Entry::_Internal {
+ public:
+  using HasBits = decltype(std::declval<MapValue_Entry>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(MapValue_Entry, _impl_._has_bits_);
+  static const ::google::api::expr::v1alpha1::Value& key(const MapValue_Entry* msg);
+  static void set_has_key(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+  static const ::google::api::expr::v1alpha1::Value& value(const MapValue_Entry* msg);
+  static void set_has_value(HasBits* has_bits) {
+    (*has_bits)[0] |= 2u;
+  }
+};
+
+const ::google::api::expr::v1alpha1::Value& MapValue_Entry::_Internal::key(const MapValue_Entry* msg) {
+  return *msg->_impl_.key_;
+}
+const ::google::api::expr::v1alpha1::Value& MapValue_Entry::_Internal::value(const MapValue_Entry* msg) {
+  return *msg->_impl_.value_;
+}
+MapValue_Entry::MapValue_Entry(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.MapValue.Entry)
+}
+MapValue_Entry::MapValue_Entry(const MapValue_Entry& from) : ::google::protobuf::Message() {
+  MapValue_Entry* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.key_){nullptr},
+      decltype(_impl_.value_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.key_ = new ::google::api::expr::v1alpha1::Value(*from._impl_.key_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
+    _this->_impl_.value_ = new ::google::api::expr::v1alpha1::Value(*from._impl_.value_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.MapValue.Entry)
+}
+inline void MapValue_Entry::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.key_){nullptr},
+      decltype(_impl_.value_){nullptr},
+  };
+}
+MapValue_Entry::~MapValue_Entry() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.MapValue.Entry)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void MapValue_Entry::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  if (this != internal_default_instance()) delete _impl_.key_;
+  if (this != internal_default_instance()) delete _impl_.value_;
+}
+void MapValue_Entry::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void MapValue_Entry::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.MapValue.Entry)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      ABSL_DCHECK(_impl_.key_ != nullptr);
+      _impl_.key_->Clear();
+    }
+    if (cached_has_bits & 0x00000002u) {
+      ABSL_DCHECK(_impl_.value_ != nullptr);
+      _impl_.value_->Clear();
+    }
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* MapValue_Entry::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 2, 0, 2> MapValue_Entry::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(MapValue_Entry, _impl_._has_bits_),
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    2,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_MapValue_Entry_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // .google.api.expr.v1alpha1.Value value = 2 [json_name = "value"];
+    {::_pbi::TcParser::FastMtS1,
+     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MapValue_Entry, _impl_.value_)}},
+    // .google.api.expr.v1alpha1.Value key = 1 [json_name = "key"];
+    {::_pbi::TcParser::FastMtS1,
+     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MapValue_Entry, _impl_.key_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.api.expr.v1alpha1.Value key = 1 [json_name = "key"];
+    {PROTOBUF_FIELD_OFFSET(MapValue_Entry, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.api.expr.v1alpha1.Value value = 2 [json_name = "value"];
+    {PROTOBUF_FIELD_OFFSET(MapValue_Entry, _impl_.value_), _Internal::kHasBitsOffset + 1, 1,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Value>()},
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::Value>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* MapValue_Entry::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.MapValue.Entry)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.api.expr.v1alpha1.Value key = 1 [json_name = "key"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(1, _Internal::key(this),
+        _Internal::key(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.api.expr.v1alpha1.Value value = 2 [json_name = "value"];
+  if (cached_has_bits & 0x00000002u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(2, _Internal::value(this),
+        _Internal::value(this).GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.MapValue.Entry)
+  return target;
+}
+
+::size_t MapValue_Entry::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.MapValue.Entry)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    // .google.api.expr.v1alpha1.Value key = 1 [json_name = "key"];
+    if (cached_has_bits & 0x00000001u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.key_);
+    }
+
+    // .google.api.expr.v1alpha1.Value value = 2 [json_name = "value"];
+    if (cached_has_bits & 0x00000002u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.value_);
+    }
+
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData MapValue_Entry::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    MapValue_Entry::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*MapValue_Entry::GetClassData() const { return &_class_data_; }
+
+
+void MapValue_Entry::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<MapValue_Entry*>(&to_msg);
+  auto& from = static_cast<const MapValue_Entry&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.MapValue.Entry)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  cached_has_bits = from._impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      _this->_internal_mutable_key()->::google::api::expr::v1alpha1::Value::MergeFrom(
+          from._internal_key());
+    }
+    if (cached_has_bits & 0x00000002u) {
+      _this->_internal_mutable_value()->::google::api::expr::v1alpha1::Value::MergeFrom(
+          from._internal_value());
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void MapValue_Entry::CopyFrom(const MapValue_Entry& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.MapValue.Entry)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool MapValue_Entry::IsInitialized() const {
+  return true;
+}
+
+void MapValue_Entry::InternalSwap(MapValue_Entry* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(MapValue_Entry, _impl_.value_)
+      + sizeof(MapValue_Entry::_impl_.value_)
+      - PROTOBUF_FIELD_OFFSET(MapValue_Entry, _impl_.key_)>(
+          reinterpret_cast<char*>(&_impl_.key_),
+          reinterpret_cast<char*>(&other->_impl_.key_));
+}
+
+::google::protobuf::Metadata MapValue_Entry::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto[3]);
+}
+// ===================================================================
+
+class MapValue::_Internal {
+ public:
+};
+
+MapValue::MapValue(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.MapValue)
+}
+MapValue::MapValue(const MapValue& from) : ::google::protobuf::Message() {
+  MapValue* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.entries_){from._impl_.entries_},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.MapValue)
+}
+inline void MapValue::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.entries_){arena},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+MapValue::~MapValue() {
+  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.MapValue)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void MapValue::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.entries_.~RepeatedPtrField();
+}
+void MapValue::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void MapValue::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.MapValue)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_entries()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* MapValue::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 1, 0, 2> MapValue::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_MapValue_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.api.expr.v1alpha1.MapValue.Entry entries = 1 [json_name = "entries"];
+    {::_pbi::TcParser::FastMtR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MapValue, _impl_.entries_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated .google.api.expr.v1alpha1.MapValue.Entry entries = 1 [json_name = "entries"];
+    {PROTOBUF_FIELD_OFFSET(MapValue, _impl_.entries_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::api::expr::v1alpha1::MapValue_Entry>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* MapValue::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.MapValue)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.MapValue.Entry entries = 1 [json_name = "entries"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
+    const auto& repfield = this->_internal_entries().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.MapValue)
+  return target;
+}
+
+::size_t MapValue::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.MapValue)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.api.expr.v1alpha1.MapValue.Entry entries = 1 [json_name = "entries"];
+  total_size += 1UL * this->_internal_entries_size();
+  for (const auto& msg : this->_internal_entries()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData MapValue::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    MapValue::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*MapValue::GetClassData() const { return &_class_data_; }
+
+
+void MapValue::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<MapValue*>(&to_msg);
+  auto& from = static_cast<const MapValue&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.MapValue)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_entries()->MergeFrom(from._internal_entries());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void MapValue::CopyFrom(const MapValue& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.MapValue)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool MapValue::IsInitialized() const {
+  return true;
+}
+
+void MapValue::InternalSwap(MapValue* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
+}
+
+::google::protobuf::Metadata MapValue::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_once,
+      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto[4]);
+}
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+// @@protoc_insertion_point(global_scope)
+#include "google/protobuf/port_undef.inc"
diff --git a/gen/google/api/expr/v1alpha1/value.pb.h b/gen/google/api/expr/v1alpha1/value.pb.h
new file mode 100644
index 0000000..1f6654d
--- /dev/null
+++ b/gen/google/api/expr/v1alpha1/value.pb.h
@@ -0,0 +1,2301 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/api/expr/v1alpha1/value.proto
+
+#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_2epb_2eh
+#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_2epb_2eh
+
+#include <limits>
+#include <string>
+#include <type_traits>
+
+#include "google/protobuf/port_def.inc"
+#if PROTOBUF_VERSION < 4024000
+#error "This file was generated by a newer version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please update"
+#error "your headers."
+#endif  // PROTOBUF_VERSION
+
+#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
+#error "This file was generated by an older version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please"
+#error "regenerate this file with a newer version of protoc."
+#endif  // PROTOBUF_MIN_PROTOC_VERSION
+#include "google/protobuf/port_undef.inc"
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/arena.h"
+#include "google/protobuf/arenastring.h"
+#include "google/protobuf/generated_message_tctable_decl.h"
+#include "google/protobuf/generated_message_util.h"
+#include "google/protobuf/metadata_lite.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/message.h"
+#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
+#include "google/protobuf/extension_set.h"  // IWYU pragma: export
+#include "google/protobuf/unknown_field_set.h"
+#include "google/protobuf/any.pb.h"
+#include "google/protobuf/struct.pb.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+
+#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto
+
+namespace google {
+namespace protobuf {
+namespace internal {
+class AnyMetadata;
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+// Internal implementation detail -- do not use these members.
+struct TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto {
+  static const ::uint32_t offsets[];
+};
+extern const ::google::protobuf::internal::DescriptorTable
+    descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+class EnumValue;
+struct EnumValueDefaultTypeInternal;
+extern EnumValueDefaultTypeInternal _EnumValue_default_instance_;
+class ListValue;
+struct ListValueDefaultTypeInternal;
+extern ListValueDefaultTypeInternal _ListValue_default_instance_;
+class MapValue;
+struct MapValueDefaultTypeInternal;
+extern MapValueDefaultTypeInternal _MapValue_default_instance_;
+class MapValue_Entry;
+struct MapValue_EntryDefaultTypeInternal;
+extern MapValue_EntryDefaultTypeInternal _MapValue_Entry_default_instance_;
+class Value;
+struct ValueDefaultTypeInternal;
+extern ValueDefaultTypeInternal _Value_default_instance_;
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+
+namespace google {
+namespace api {
+namespace expr {
+namespace v1alpha1 {
+
+// ===================================================================
+
+
+// -------------------------------------------------------------------
+
+class Value final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Value) */ {
+ public:
+  inline Value() : Value(nullptr) {}
+  ~Value() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Value(::google::protobuf::internal::ConstantInitialized);
+
+  Value(const Value& from);
+  Value(Value&& from) noexcept
+    : Value() {
+    *this = ::std::move(from);
+  }
+
+  inline Value& operator=(const Value& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Value& operator=(Value&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Value& default_instance() {
+    return *internal_default_instance();
+  }
+  enum KindCase {
+    kNullValue = 1,
+    kBoolValue = 2,
+    kInt64Value = 3,
+    kUint64Value = 4,
+    kDoubleValue = 5,
+    kStringValue = 6,
+    kBytesValue = 7,
+    kEnumValue = 9,
+    kObjectValue = 10,
+    kMapValue = 11,
+    kListValue = 12,
+    kTypeValue = 15,
+    KIND_NOT_SET = 0,
+  };
+
+  static inline const Value* internal_default_instance() {
+    return reinterpret_cast<const Value*>(
+               &_Value_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    0;
+
+  friend void swap(Value& a, Value& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Value* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Value* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Value* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Value>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Value& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Value& from) {
+    Value::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Value* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.Value";
+  }
+  protected:
+  explicit Value(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kNullValueFieldNumber = 1,
+    kBoolValueFieldNumber = 2,
+    kInt64ValueFieldNumber = 3,
+    kUint64ValueFieldNumber = 4,
+    kDoubleValueFieldNumber = 5,
+    kStringValueFieldNumber = 6,
+    kBytesValueFieldNumber = 7,
+    kEnumValueFieldNumber = 9,
+    kObjectValueFieldNumber = 10,
+    kMapValueFieldNumber = 11,
+    kListValueFieldNumber = 12,
+    kTypeValueFieldNumber = 15,
+  };
+  // .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
+  bool has_null_value() const;
+  void clear_null_value() ;
+  ::google::protobuf::NullValue null_value() const;
+  void set_null_value(::google::protobuf::NullValue value);
+
+  private:
+  ::google::protobuf::NullValue _internal_null_value() const;
+  void _internal_set_null_value(::google::protobuf::NullValue value);
+
+  public:
+  // bool bool_value = 2 [json_name = "boolValue"];
+  bool has_bool_value() const;
+  void clear_bool_value() ;
+  bool bool_value() const;
+  void set_bool_value(bool value);
+
+  private:
+  bool _internal_bool_value() const;
+  void _internal_set_bool_value(bool value);
+
+  public:
+  // int64 int64_value = 3 [json_name = "int64Value"];
+  bool has_int64_value() const;
+  void clear_int64_value() ;
+  ::int64_t int64_value() const;
+  void set_int64_value(::int64_t value);
+
+  private:
+  ::int64_t _internal_int64_value() const;
+  void _internal_set_int64_value(::int64_t value);
+
+  public:
+  // uint64 uint64_value = 4 [json_name = "uint64Value"];
+  bool has_uint64_value() const;
+  void clear_uint64_value() ;
+  ::uint64_t uint64_value() const;
+  void set_uint64_value(::uint64_t value);
+
+  private:
+  ::uint64_t _internal_uint64_value() const;
+  void _internal_set_uint64_value(::uint64_t value);
+
+  public:
+  // double double_value = 5 [json_name = "doubleValue"];
+  bool has_double_value() const;
+  void clear_double_value() ;
+  double double_value() const;
+  void set_double_value(double value);
+
+  private:
+  double _internal_double_value() const;
+  void _internal_set_double_value(double value);
+
+  public:
+  // string string_value = 6 [json_name = "stringValue"];
+  bool has_string_value() const;
+  void clear_string_value() ;
+  const std::string& string_value() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_string_value(Arg_&& arg, Args_... args);
+  std::string* mutable_string_value();
+  PROTOBUF_NODISCARD std::string* release_string_value();
+  void set_allocated_string_value(std::string* ptr);
+
+  private:
+  const std::string& _internal_string_value() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
+      const std::string& value);
+  std::string* _internal_mutable_string_value();
+
+  public:
+  // bytes bytes_value = 7 [json_name = "bytesValue"];
+  bool has_bytes_value() const;
+  void clear_bytes_value() ;
+  const std::string& bytes_value() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_bytes_value(Arg_&& arg, Args_... args);
+  std::string* mutable_bytes_value();
+  PROTOBUF_NODISCARD std::string* release_bytes_value();
+  void set_allocated_bytes_value(std::string* ptr);
+
+  private:
+  const std::string& _internal_bytes_value() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(
+      const std::string& value);
+  std::string* _internal_mutable_bytes_value();
+
+  public:
+  // .google.api.expr.v1alpha1.EnumValue enum_value = 9 [json_name = "enumValue"];
+  bool has_enum_value() const;
+  private:
+  bool _internal_has_enum_value() const;
+
+  public:
+  void clear_enum_value() ;
+  const ::google::api::expr::v1alpha1::EnumValue& enum_value() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::EnumValue* release_enum_value();
+  ::google::api::expr::v1alpha1::EnumValue* mutable_enum_value();
+  void set_allocated_enum_value(::google::api::expr::v1alpha1::EnumValue* value);
+  void unsafe_arena_set_allocated_enum_value(::google::api::expr::v1alpha1::EnumValue* value);
+  ::google::api::expr::v1alpha1::EnumValue* unsafe_arena_release_enum_value();
+
+  private:
+  const ::google::api::expr::v1alpha1::EnumValue& _internal_enum_value() const;
+  ::google::api::expr::v1alpha1::EnumValue* _internal_mutable_enum_value();
+
+  public:
+  // .google.protobuf.Any object_value = 10 [json_name = "objectValue"];
+  bool has_object_value() const;
+  private:
+  bool _internal_has_object_value() const;
+
+  public:
+  void clear_object_value() ;
+  const ::google::protobuf::Any& object_value() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Any* release_object_value();
+  ::google::protobuf::Any* mutable_object_value();
+  void set_allocated_object_value(::google::protobuf::Any* value);
+  void unsafe_arena_set_allocated_object_value(::google::protobuf::Any* value);
+  ::google::protobuf::Any* unsafe_arena_release_object_value();
+
+  private:
+  const ::google::protobuf::Any& _internal_object_value() const;
+  ::google::protobuf::Any* _internal_mutable_object_value();
+
+  public:
+  // .google.api.expr.v1alpha1.MapValue map_value = 11 [json_name = "mapValue"];
+  bool has_map_value() const;
+  private:
+  bool _internal_has_map_value() const;
+
+  public:
+  void clear_map_value() ;
+  const ::google::api::expr::v1alpha1::MapValue& map_value() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::MapValue* release_map_value();
+  ::google::api::expr::v1alpha1::MapValue* mutable_map_value();
+  void set_allocated_map_value(::google::api::expr::v1alpha1::MapValue* value);
+  void unsafe_arena_set_allocated_map_value(::google::api::expr::v1alpha1::MapValue* value);
+  ::google::api::expr::v1alpha1::MapValue* unsafe_arena_release_map_value();
+
+  private:
+  const ::google::api::expr::v1alpha1::MapValue& _internal_map_value() const;
+  ::google::api::expr::v1alpha1::MapValue* _internal_mutable_map_value();
+
+  public:
+  // .google.api.expr.v1alpha1.ListValue list_value = 12 [json_name = "listValue"];
+  bool has_list_value() const;
+  private:
+  bool _internal_has_list_value() const;
+
+  public:
+  void clear_list_value() ;
+  const ::google::api::expr::v1alpha1::ListValue& list_value() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::ListValue* release_list_value();
+  ::google::api::expr::v1alpha1::ListValue* mutable_list_value();
+  void set_allocated_list_value(::google::api::expr::v1alpha1::ListValue* value);
+  void unsafe_arena_set_allocated_list_value(::google::api::expr::v1alpha1::ListValue* value);
+  ::google::api::expr::v1alpha1::ListValue* unsafe_arena_release_list_value();
+
+  private:
+  const ::google::api::expr::v1alpha1::ListValue& _internal_list_value() const;
+  ::google::api::expr::v1alpha1::ListValue* _internal_mutable_list_value();
+
+  public:
+  // string type_value = 15 [json_name = "typeValue"];
+  bool has_type_value() const;
+  void clear_type_value() ;
+  const std::string& type_value() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_type_value(Arg_&& arg, Args_... args);
+  std::string* mutable_type_value();
+  PROTOBUF_NODISCARD std::string* release_type_value();
+  void set_allocated_type_value(std::string* ptr);
+
+  private:
+  const std::string& _internal_type_value() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_value(
+      const std::string& value);
+  std::string* _internal_mutable_type_value();
+
+  public:
+  void clear_kind();
+  KindCase kind_case() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Value)
+ private:
+  class _Internal;
+  void set_has_null_value();
+  void set_has_bool_value();
+  void set_has_int64_value();
+  void set_has_uint64_value();
+  void set_has_double_value();
+  void set_has_string_value();
+  void set_has_bytes_value();
+  void set_has_enum_value();
+  void set_has_object_value();
+  void set_has_map_value();
+  void set_has_list_value();
+  void set_has_type_value();
+
+  inline bool has_kind() const;
+  inline void clear_has_kind();
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 12, 4, 69, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    union KindUnion {
+      constexpr KindUnion() : _constinit_{} {}
+        ::google::protobuf::internal::ConstantInitialized _constinit_;
+      int null_value_;
+      bool bool_value_;
+      ::int64_t int64_value_;
+      ::uint64_t uint64_value_;
+      double double_value_;
+      ::google::protobuf::internal::ArenaStringPtr string_value_;
+      ::google::protobuf::internal::ArenaStringPtr bytes_value_;
+      ::google::api::expr::v1alpha1::EnumValue* enum_value_;
+      ::google::protobuf::Any* object_value_;
+      ::google::api::expr::v1alpha1::MapValue* map_value_;
+      ::google::api::expr::v1alpha1::ListValue* list_value_;
+      ::google::protobuf::internal::ArenaStringPtr type_value_;
+    } kind_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::uint32_t _oneof_case_[1];
+
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
+};// -------------------------------------------------------------------
+
+class EnumValue final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.EnumValue) */ {
+ public:
+  inline EnumValue() : EnumValue(nullptr) {}
+  ~EnumValue() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR EnumValue(::google::protobuf::internal::ConstantInitialized);
+
+  EnumValue(const EnumValue& from);
+  EnumValue(EnumValue&& from) noexcept
+    : EnumValue() {
+    *this = ::std::move(from);
+  }
+
+  inline EnumValue& operator=(const EnumValue& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline EnumValue& operator=(EnumValue&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const EnumValue& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const EnumValue* internal_default_instance() {
+    return reinterpret_cast<const EnumValue*>(
+               &_EnumValue_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    1;
+
+  friend void swap(EnumValue& a, EnumValue& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(EnumValue* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(EnumValue* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  EnumValue* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<EnumValue>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const EnumValue& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const EnumValue& from) {
+    EnumValue::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(EnumValue* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.EnumValue";
+  }
+  protected:
+  explicit EnumValue(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kTypeFieldNumber = 1,
+    kValueFieldNumber = 2,
+  };
+  // string type = 1 [json_name = "type"];
+  void clear_type() ;
+  const std::string& type() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_type(Arg_&& arg, Args_... args);
+  std::string* mutable_type();
+  PROTOBUF_NODISCARD std::string* release_type();
+  void set_allocated_type(std::string* ptr);
+
+  private:
+  const std::string& _internal_type() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
+      const std::string& value);
+  std::string* _internal_mutable_type();
+
+  public:
+  // int32 value = 2 [json_name = "value"];
+  void clear_value() ;
+  ::int32_t value() const;
+  void set_value(::int32_t value);
+
+  private:
+  ::int32_t _internal_value() const;
+  void _internal_set_value(::int32_t value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.EnumValue)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 47, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr type_;
+    ::int32_t value_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
+};// -------------------------------------------------------------------
+
+class ListValue final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.ListValue) */ {
+ public:
+  inline ListValue() : ListValue(nullptr) {}
+  ~ListValue() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR ListValue(::google::protobuf::internal::ConstantInitialized);
+
+  ListValue(const ListValue& from);
+  ListValue(ListValue&& from) noexcept
+    : ListValue() {
+    *this = ::std::move(from);
+  }
+
+  inline ListValue& operator=(const ListValue& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline ListValue& operator=(ListValue&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const ListValue& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const ListValue* internal_default_instance() {
+    return reinterpret_cast<const ListValue*>(
+               &_ListValue_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    2;
+
+  friend void swap(ListValue& a, ListValue& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(ListValue* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(ListValue* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  ListValue* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<ListValue>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const ListValue& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const ListValue& from) {
+    ListValue::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(ListValue* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.ListValue";
+  }
+  protected:
+  explicit ListValue(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kValuesFieldNumber = 1,
+  };
+  // repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+  int values_size() const;
+  private:
+  int _internal_values_size() const;
+
+  public:
+  void clear_values() ;
+  ::google::api::expr::v1alpha1::Value* mutable_values(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >*
+      mutable_values();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Value>& _internal_values() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Value>* _internal_mutable_values();
+  public:
+  const ::google::api::expr::v1alpha1::Value& values(int index) const;
+  ::google::api::expr::v1alpha1::Value* add_values();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >&
+      values() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.ListValue)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Value > values_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
+};// -------------------------------------------------------------------
+
+class MapValue_Entry final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.MapValue.Entry) */ {
+ public:
+  inline MapValue_Entry() : MapValue_Entry(nullptr) {}
+  ~MapValue_Entry() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR MapValue_Entry(::google::protobuf::internal::ConstantInitialized);
+
+  MapValue_Entry(const MapValue_Entry& from);
+  MapValue_Entry(MapValue_Entry&& from) noexcept
+    : MapValue_Entry() {
+    *this = ::std::move(from);
+  }
+
+  inline MapValue_Entry& operator=(const MapValue_Entry& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline MapValue_Entry& operator=(MapValue_Entry&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const MapValue_Entry& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const MapValue_Entry* internal_default_instance() {
+    return reinterpret_cast<const MapValue_Entry*>(
+               &_MapValue_Entry_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    3;
+
+  friend void swap(MapValue_Entry& a, MapValue_Entry& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(MapValue_Entry* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(MapValue_Entry* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  MapValue_Entry* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<MapValue_Entry>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const MapValue_Entry& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const MapValue_Entry& from) {
+    MapValue_Entry::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(MapValue_Entry* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.MapValue.Entry";
+  }
+  protected:
+  explicit MapValue_Entry(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kKeyFieldNumber = 1,
+    kValueFieldNumber = 2,
+  };
+  // .google.api.expr.v1alpha1.Value key = 1 [json_name = "key"];
+  bool has_key() const;
+  void clear_key() ;
+  const ::google::api::expr::v1alpha1::Value& key() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Value* release_key();
+  ::google::api::expr::v1alpha1::Value* mutable_key();
+  void set_allocated_key(::google::api::expr::v1alpha1::Value* value);
+  void unsafe_arena_set_allocated_key(::google::api::expr::v1alpha1::Value* value);
+  ::google::api::expr::v1alpha1::Value* unsafe_arena_release_key();
+
+  private:
+  const ::google::api::expr::v1alpha1::Value& _internal_key() const;
+  ::google::api::expr::v1alpha1::Value* _internal_mutable_key();
+
+  public:
+  // .google.api.expr.v1alpha1.Value value = 2 [json_name = "value"];
+  bool has_value() const;
+  void clear_value() ;
+  const ::google::api::expr::v1alpha1::Value& value() const;
+  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Value* release_value();
+  ::google::api::expr::v1alpha1::Value* mutable_value();
+  void set_allocated_value(::google::api::expr::v1alpha1::Value* value);
+  void unsafe_arena_set_allocated_value(::google::api::expr::v1alpha1::Value* value);
+  ::google::api::expr::v1alpha1::Value* unsafe_arena_release_value();
+
+  private:
+  const ::google::api::expr::v1alpha1::Value& _internal_value() const;
+  ::google::api::expr::v1alpha1::Value* _internal_mutable_value();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.MapValue.Entry)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::api::expr::v1alpha1::Value* key_;
+    ::google::api::expr::v1alpha1::Value* value_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
+};// -------------------------------------------------------------------
+
+class MapValue final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.MapValue) */ {
+ public:
+  inline MapValue() : MapValue(nullptr) {}
+  ~MapValue() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR MapValue(::google::protobuf::internal::ConstantInitialized);
+
+  MapValue(const MapValue& from);
+  MapValue(MapValue&& from) noexcept
+    : MapValue() {
+    *this = ::std::move(from);
+  }
+
+  inline MapValue& operator=(const MapValue& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline MapValue& operator=(MapValue&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const MapValue& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const MapValue* internal_default_instance() {
+    return reinterpret_cast<const MapValue*>(
+               &_MapValue_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    4;
+
+  friend void swap(MapValue& a, MapValue& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(MapValue* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(MapValue* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  MapValue* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<MapValue>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const MapValue& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const MapValue& from) {
+    MapValue::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(MapValue* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.api.expr.v1alpha1.MapValue";
+  }
+  protected:
+  explicit MapValue(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef MapValue_Entry Entry;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kEntriesFieldNumber = 1,
+  };
+  // repeated .google.api.expr.v1alpha1.MapValue.Entry entries = 1 [json_name = "entries"];
+  int entries_size() const;
+  private:
+  int _internal_entries_size() const;
+
+  public:
+  void clear_entries() ;
+  ::google::api::expr::v1alpha1::MapValue_Entry* mutable_entries(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::MapValue_Entry >*
+      mutable_entries();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::MapValue_Entry>& _internal_entries() const;
+  ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::MapValue_Entry>* _internal_mutable_entries();
+  public:
+  const ::google::api::expr::v1alpha1::MapValue_Entry& entries(int index) const;
+  ::google::api::expr::v1alpha1::MapValue_Entry* add_entries();
+  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::MapValue_Entry >&
+      entries() const;
+  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.MapValue)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::MapValue_Entry > entries_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
+};
+
+// ===================================================================
+
+
+
+
+// ===================================================================
+
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif  // __GNUC__
+// -------------------------------------------------------------------
+
+// Value
+
+// .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
+inline bool Value::has_null_value() const {
+  return kind_case() == kNullValue;
+}
+inline void Value::set_has_null_value() {
+  _impl_._oneof_case_[0] = kNullValue;
+}
+inline void Value::clear_null_value() {
+  if (kind_case() == kNullValue) {
+    _impl_.kind_.null_value_ = 0;
+    clear_has_kind();
+  }
+}
+inline ::google::protobuf::NullValue Value::null_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.null_value)
+  return _internal_null_value();
+}
+inline void Value::set_null_value(::google::protobuf::NullValue value) {
+  _internal_set_null_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.null_value)
+}
+inline ::google::protobuf::NullValue Value::_internal_null_value() const {
+  if (kind_case() == kNullValue) {
+    return static_cast<::google::protobuf::NullValue>(_impl_.kind_.null_value_);
+  }
+  return static_cast<::google::protobuf::NullValue>(0);
+}
+inline void Value::_internal_set_null_value(::google::protobuf::NullValue value) {
+  if (kind_case() != kNullValue) {
+    clear_kind();
+    set_has_null_value();
+  }
+  _impl_.kind_.null_value_ = value;
+}
+
+// bool bool_value = 2 [json_name = "boolValue"];
+inline bool Value::has_bool_value() const {
+  return kind_case() == kBoolValue;
+}
+inline void Value::set_has_bool_value() {
+  _impl_._oneof_case_[0] = kBoolValue;
+}
+inline void Value::clear_bool_value() {
+  if (kind_case() == kBoolValue) {
+    _impl_.kind_.bool_value_ = false;
+    clear_has_kind();
+  }
+}
+inline bool Value::bool_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.bool_value)
+  return _internal_bool_value();
+}
+inline void Value::set_bool_value(bool value) {
+  _internal_set_bool_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.bool_value)
+}
+inline bool Value::_internal_bool_value() const {
+  if (kind_case() == kBoolValue) {
+    return _impl_.kind_.bool_value_;
+  }
+  return false;
+}
+inline void Value::_internal_set_bool_value(bool value) {
+  if (kind_case() != kBoolValue) {
+    clear_kind();
+    set_has_bool_value();
+  }
+  _impl_.kind_.bool_value_ = value;
+}
+
+// int64 int64_value = 3 [json_name = "int64Value"];
+inline bool Value::has_int64_value() const {
+  return kind_case() == kInt64Value;
+}
+inline void Value::set_has_int64_value() {
+  _impl_._oneof_case_[0] = kInt64Value;
+}
+inline void Value::clear_int64_value() {
+  if (kind_case() == kInt64Value) {
+    _impl_.kind_.int64_value_ = ::int64_t{0};
+    clear_has_kind();
+  }
+}
+inline ::int64_t Value::int64_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.int64_value)
+  return _internal_int64_value();
+}
+inline void Value::set_int64_value(::int64_t value) {
+  _internal_set_int64_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.int64_value)
+}
+inline ::int64_t Value::_internal_int64_value() const {
+  if (kind_case() == kInt64Value) {
+    return _impl_.kind_.int64_value_;
+  }
+  return ::int64_t{0};
+}
+inline void Value::_internal_set_int64_value(::int64_t value) {
+  if (kind_case() != kInt64Value) {
+    clear_kind();
+    set_has_int64_value();
+  }
+  _impl_.kind_.int64_value_ = value;
+}
+
+// uint64 uint64_value = 4 [json_name = "uint64Value"];
+inline bool Value::has_uint64_value() const {
+  return kind_case() == kUint64Value;
+}
+inline void Value::set_has_uint64_value() {
+  _impl_._oneof_case_[0] = kUint64Value;
+}
+inline void Value::clear_uint64_value() {
+  if (kind_case() == kUint64Value) {
+    _impl_.kind_.uint64_value_ = ::uint64_t{0u};
+    clear_has_kind();
+  }
+}
+inline ::uint64_t Value::uint64_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.uint64_value)
+  return _internal_uint64_value();
+}
+inline void Value::set_uint64_value(::uint64_t value) {
+  _internal_set_uint64_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.uint64_value)
+}
+inline ::uint64_t Value::_internal_uint64_value() const {
+  if (kind_case() == kUint64Value) {
+    return _impl_.kind_.uint64_value_;
+  }
+  return ::uint64_t{0u};
+}
+inline void Value::_internal_set_uint64_value(::uint64_t value) {
+  if (kind_case() != kUint64Value) {
+    clear_kind();
+    set_has_uint64_value();
+  }
+  _impl_.kind_.uint64_value_ = value;
+}
+
+// double double_value = 5 [json_name = "doubleValue"];
+inline bool Value::has_double_value() const {
+  return kind_case() == kDoubleValue;
+}
+inline void Value::set_has_double_value() {
+  _impl_._oneof_case_[0] = kDoubleValue;
+}
+inline void Value::clear_double_value() {
+  if (kind_case() == kDoubleValue) {
+    _impl_.kind_.double_value_ = 0;
+    clear_has_kind();
+  }
+}
+inline double Value::double_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.double_value)
+  return _internal_double_value();
+}
+inline void Value::set_double_value(double value) {
+  _internal_set_double_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.double_value)
+}
+inline double Value::_internal_double_value() const {
+  if (kind_case() == kDoubleValue) {
+    return _impl_.kind_.double_value_;
+  }
+  return 0;
+}
+inline void Value::_internal_set_double_value(double value) {
+  if (kind_case() != kDoubleValue) {
+    clear_kind();
+    set_has_double_value();
+  }
+  _impl_.kind_.double_value_ = value;
+}
+
+// string string_value = 6 [json_name = "stringValue"];
+inline bool Value::has_string_value() const {
+  return kind_case() == kStringValue;
+}
+inline void Value::set_has_string_value() {
+  _impl_._oneof_case_[0] = kStringValue;
+}
+inline void Value::clear_string_value() {
+  if (kind_case() == kStringValue) {
+    _impl_.kind_.string_value_.Destroy();
+    clear_has_kind();
+  }
+}
+inline const std::string& Value::string_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.string_value)
+  return _internal_string_value();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Value::set_string_value(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (kind_case() != kStringValue) {
+    clear_kind();
+
+    set_has_string_value();
+    _impl_.kind_.string_value_.InitDefault();
+  }
+  _impl_.kind_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.string_value)
+}
+inline std::string* Value::mutable_string_value() {
+  std::string* _s = _internal_mutable_string_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.string_value)
+  return _s;
+}
+inline const std::string& Value::_internal_string_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  if (kind_case() != kStringValue) {
+    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
+  }
+  return _impl_.kind_.string_value_.Get();
+}
+inline void Value::_internal_set_string_value(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (kind_case() != kStringValue) {
+    clear_kind();
+
+    set_has_string_value();
+    _impl_.kind_.string_value_.InitDefault();
+  }
+  _impl_.kind_.string_value_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Value::_internal_mutable_string_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (kind_case() != kStringValue) {
+    clear_kind();
+
+    set_has_string_value();
+    _impl_.kind_.string_value_.InitDefault();
+  }
+  return _impl_.kind_.string_value_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Value::release_string_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.string_value)
+  if (kind_case() != kStringValue) {
+    return nullptr;
+  }
+  clear_has_kind();
+  return _impl_.kind_.string_value_.Release();
+}
+inline void Value::set_allocated_string_value(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (has_kind()) {
+    clear_kind();
+  }
+  if (value != nullptr) {
+    set_has_string_value();
+    _impl_.kind_.string_value_.InitAllocated(value, GetArenaForAllocation());
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Value.string_value)
+}
+
+// bytes bytes_value = 7 [json_name = "bytesValue"];
+inline bool Value::has_bytes_value() const {
+  return kind_case() == kBytesValue;
+}
+inline void Value::set_has_bytes_value() {
+  _impl_._oneof_case_[0] = kBytesValue;
+}
+inline void Value::clear_bytes_value() {
+  if (kind_case() == kBytesValue) {
+    _impl_.kind_.bytes_value_.Destroy();
+    clear_has_kind();
+  }
+}
+inline const std::string& Value::bytes_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.bytes_value)
+  return _internal_bytes_value();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Value::set_bytes_value(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (kind_case() != kBytesValue) {
+    clear_kind();
+
+    set_has_bytes_value();
+    _impl_.kind_.bytes_value_.InitDefault();
+  }
+  _impl_.kind_.bytes_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.bytes_value)
+}
+inline std::string* Value::mutable_bytes_value() {
+  std::string* _s = _internal_mutable_bytes_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.bytes_value)
+  return _s;
+}
+inline const std::string& Value::_internal_bytes_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  if (kind_case() != kBytesValue) {
+    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
+  }
+  return _impl_.kind_.bytes_value_.Get();
+}
+inline void Value::_internal_set_bytes_value(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (kind_case() != kBytesValue) {
+    clear_kind();
+
+    set_has_bytes_value();
+    _impl_.kind_.bytes_value_.InitDefault();
+  }
+  _impl_.kind_.bytes_value_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Value::_internal_mutable_bytes_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (kind_case() != kBytesValue) {
+    clear_kind();
+
+    set_has_bytes_value();
+    _impl_.kind_.bytes_value_.InitDefault();
+  }
+  return _impl_.kind_.bytes_value_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Value::release_bytes_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.bytes_value)
+  if (kind_case() != kBytesValue) {
+    return nullptr;
+  }
+  clear_has_kind();
+  return _impl_.kind_.bytes_value_.Release();
+}
+inline void Value::set_allocated_bytes_value(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (has_kind()) {
+    clear_kind();
+  }
+  if (value != nullptr) {
+    set_has_bytes_value();
+    _impl_.kind_.bytes_value_.InitAllocated(value, GetArenaForAllocation());
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Value.bytes_value)
+}
+
+// .google.api.expr.v1alpha1.EnumValue enum_value = 9 [json_name = "enumValue"];
+inline bool Value::has_enum_value() const {
+  return kind_case() == kEnumValue;
+}
+inline bool Value::_internal_has_enum_value() const {
+  return kind_case() == kEnumValue;
+}
+inline void Value::set_has_enum_value() {
+  _impl_._oneof_case_[0] = kEnumValue;
+}
+inline void Value::clear_enum_value() {
+  if (kind_case() == kEnumValue) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.kind_.enum_value_;
+    }
+    clear_has_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::EnumValue* Value::release_enum_value() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.enum_value)
+  if (kind_case() == kEnumValue) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::EnumValue* temp = _impl_.kind_.enum_value_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.kind_.enum_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::EnumValue& Value::_internal_enum_value() const {
+  return kind_case() == kEnumValue
+      ? *_impl_.kind_.enum_value_
+      : reinterpret_cast<::google::api::expr::v1alpha1::EnumValue&>(::google::api::expr::v1alpha1::_EnumValue_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::EnumValue& Value::enum_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.enum_value)
+  return _internal_enum_value();
+}
+inline ::google::api::expr::v1alpha1::EnumValue* Value::unsafe_arena_release_enum_value() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Value.enum_value)
+  if (kind_case() == kEnumValue) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::EnumValue* temp = _impl_.kind_.enum_value_;
+    _impl_.kind_.enum_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Value::unsafe_arena_set_allocated_enum_value(::google::api::expr::v1alpha1::EnumValue* enum_value) {
+  clear_kind();
+  if (enum_value) {
+    set_has_enum_value();
+    _impl_.kind_.enum_value_ = enum_value;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Value.enum_value)
+}
+inline ::google::api::expr::v1alpha1::EnumValue* Value::_internal_mutable_enum_value() {
+  if (kind_case() != kEnumValue) {
+    clear_kind();
+    set_has_enum_value();
+    _impl_.kind_.enum_value_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::EnumValue >(GetArenaForAllocation());
+  }
+  return _impl_.kind_.enum_value_;
+}
+inline ::google::api::expr::v1alpha1::EnumValue* Value::mutable_enum_value() {
+  ::google::api::expr::v1alpha1::EnumValue* _msg = _internal_mutable_enum_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.enum_value)
+  return _msg;
+}
+
+// .google.protobuf.Any object_value = 10 [json_name = "objectValue"];
+inline bool Value::has_object_value() const {
+  return kind_case() == kObjectValue;
+}
+inline bool Value::_internal_has_object_value() const {
+  return kind_case() == kObjectValue;
+}
+inline void Value::set_has_object_value() {
+  _impl_._oneof_case_[0] = kObjectValue;
+}
+inline ::google::protobuf::Any* Value::release_object_value() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.object_value)
+  if (kind_case() == kObjectValue) {
+    clear_has_kind();
+    ::google::protobuf::Any* temp = _impl_.kind_.object_value_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.kind_.object_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::protobuf::Any& Value::_internal_object_value() const {
+  return kind_case() == kObjectValue
+      ? *_impl_.kind_.object_value_
+      : reinterpret_cast<::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
+}
+inline const ::google::protobuf::Any& Value::object_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.object_value)
+  return _internal_object_value();
+}
+inline ::google::protobuf::Any* Value::unsafe_arena_release_object_value() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Value.object_value)
+  if (kind_case() == kObjectValue) {
+    clear_has_kind();
+    ::google::protobuf::Any* temp = _impl_.kind_.object_value_;
+    _impl_.kind_.object_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Value::unsafe_arena_set_allocated_object_value(::google::protobuf::Any* object_value) {
+  clear_kind();
+  if (object_value) {
+    set_has_object_value();
+    _impl_.kind_.object_value_ = object_value;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Value.object_value)
+}
+inline ::google::protobuf::Any* Value::_internal_mutable_object_value() {
+  if (kind_case() != kObjectValue) {
+    clear_kind();
+    set_has_object_value();
+    _impl_.kind_.object_value_ = CreateMaybeMessage< ::google::protobuf::Any >(GetArenaForAllocation());
+  }
+  return _impl_.kind_.object_value_;
+}
+inline ::google::protobuf::Any* Value::mutable_object_value() {
+  ::google::protobuf::Any* _msg = _internal_mutable_object_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.object_value)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.MapValue map_value = 11 [json_name = "mapValue"];
+inline bool Value::has_map_value() const {
+  return kind_case() == kMapValue;
+}
+inline bool Value::_internal_has_map_value() const {
+  return kind_case() == kMapValue;
+}
+inline void Value::set_has_map_value() {
+  _impl_._oneof_case_[0] = kMapValue;
+}
+inline void Value::clear_map_value() {
+  if (kind_case() == kMapValue) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.kind_.map_value_;
+    }
+    clear_has_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::MapValue* Value::release_map_value() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.map_value)
+  if (kind_case() == kMapValue) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::MapValue* temp = _impl_.kind_.map_value_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.kind_.map_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::MapValue& Value::_internal_map_value() const {
+  return kind_case() == kMapValue
+      ? *_impl_.kind_.map_value_
+      : reinterpret_cast<::google::api::expr::v1alpha1::MapValue&>(::google::api::expr::v1alpha1::_MapValue_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::MapValue& Value::map_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.map_value)
+  return _internal_map_value();
+}
+inline ::google::api::expr::v1alpha1::MapValue* Value::unsafe_arena_release_map_value() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Value.map_value)
+  if (kind_case() == kMapValue) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::MapValue* temp = _impl_.kind_.map_value_;
+    _impl_.kind_.map_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Value::unsafe_arena_set_allocated_map_value(::google::api::expr::v1alpha1::MapValue* map_value) {
+  clear_kind();
+  if (map_value) {
+    set_has_map_value();
+    _impl_.kind_.map_value_ = map_value;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Value.map_value)
+}
+inline ::google::api::expr::v1alpha1::MapValue* Value::_internal_mutable_map_value() {
+  if (kind_case() != kMapValue) {
+    clear_kind();
+    set_has_map_value();
+    _impl_.kind_.map_value_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::MapValue >(GetArenaForAllocation());
+  }
+  return _impl_.kind_.map_value_;
+}
+inline ::google::api::expr::v1alpha1::MapValue* Value::mutable_map_value() {
+  ::google::api::expr::v1alpha1::MapValue* _msg = _internal_mutable_map_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.map_value)
+  return _msg;
+}
+
+// .google.api.expr.v1alpha1.ListValue list_value = 12 [json_name = "listValue"];
+inline bool Value::has_list_value() const {
+  return kind_case() == kListValue;
+}
+inline bool Value::_internal_has_list_value() const {
+  return kind_case() == kListValue;
+}
+inline void Value::set_has_list_value() {
+  _impl_._oneof_case_[0] = kListValue;
+}
+inline void Value::clear_list_value() {
+  if (kind_case() == kListValue) {
+    if (GetArenaForAllocation() == nullptr) {
+      delete _impl_.kind_.list_value_;
+    }
+    clear_has_kind();
+  }
+}
+inline ::google::api::expr::v1alpha1::ListValue* Value::release_list_value() {
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.list_value)
+  if (kind_case() == kListValue) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::ListValue* temp = _impl_.kind_.list_value_;
+    if (GetArenaForAllocation() != nullptr) {
+      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
+    }
+    _impl_.kind_.list_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline const ::google::api::expr::v1alpha1::ListValue& Value::_internal_list_value() const {
+  return kind_case() == kListValue
+      ? *_impl_.kind_.list_value_
+      : reinterpret_cast<::google::api::expr::v1alpha1::ListValue&>(::google::api::expr::v1alpha1::_ListValue_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::ListValue& Value::list_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.list_value)
+  return _internal_list_value();
+}
+inline ::google::api::expr::v1alpha1::ListValue* Value::unsafe_arena_release_list_value() {
+  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Value.list_value)
+  if (kind_case() == kListValue) {
+    clear_has_kind();
+    ::google::api::expr::v1alpha1::ListValue* temp = _impl_.kind_.list_value_;
+    _impl_.kind_.list_value_ = nullptr;
+    return temp;
+  } else {
+    return nullptr;
+  }
+}
+inline void Value::unsafe_arena_set_allocated_list_value(::google::api::expr::v1alpha1::ListValue* list_value) {
+  clear_kind();
+  if (list_value) {
+    set_has_list_value();
+    _impl_.kind_.list_value_ = list_value;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Value.list_value)
+}
+inline ::google::api::expr::v1alpha1::ListValue* Value::_internal_mutable_list_value() {
+  if (kind_case() != kListValue) {
+    clear_kind();
+    set_has_list_value();
+    _impl_.kind_.list_value_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::ListValue >(GetArenaForAllocation());
+  }
+  return _impl_.kind_.list_value_;
+}
+inline ::google::api::expr::v1alpha1::ListValue* Value::mutable_list_value() {
+  ::google::api::expr::v1alpha1::ListValue* _msg = _internal_mutable_list_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.list_value)
+  return _msg;
+}
+
+// string type_value = 15 [json_name = "typeValue"];
+inline bool Value::has_type_value() const {
+  return kind_case() == kTypeValue;
+}
+inline void Value::set_has_type_value() {
+  _impl_._oneof_case_[0] = kTypeValue;
+}
+inline void Value::clear_type_value() {
+  if (kind_case() == kTypeValue) {
+    _impl_.kind_.type_value_.Destroy();
+    clear_has_kind();
+  }
+}
+inline const std::string& Value::type_value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.type_value)
+  return _internal_type_value();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Value::set_type_value(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (kind_case() != kTypeValue) {
+    clear_kind();
+
+    set_has_type_value();
+    _impl_.kind_.type_value_.InitDefault();
+  }
+  _impl_.kind_.type_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.type_value)
+}
+inline std::string* Value::mutable_type_value() {
+  std::string* _s = _internal_mutable_type_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.type_value)
+  return _s;
+}
+inline const std::string& Value::_internal_type_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  if (kind_case() != kTypeValue) {
+    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
+  }
+  return _impl_.kind_.type_value_.Get();
+}
+inline void Value::_internal_set_type_value(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (kind_case() != kTypeValue) {
+    clear_kind();
+
+    set_has_type_value();
+    _impl_.kind_.type_value_.InitDefault();
+  }
+  _impl_.kind_.type_value_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Value::_internal_mutable_type_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (kind_case() != kTypeValue) {
+    clear_kind();
+
+    set_has_type_value();
+    _impl_.kind_.type_value_.InitDefault();
+  }
+  return _impl_.kind_.type_value_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Value::release_type_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.type_value)
+  if (kind_case() != kTypeValue) {
+    return nullptr;
+  }
+  clear_has_kind();
+  return _impl_.kind_.type_value_.Release();
+}
+inline void Value::set_allocated_type_value(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (has_kind()) {
+    clear_kind();
+  }
+  if (value != nullptr) {
+    set_has_type_value();
+    _impl_.kind_.type_value_.InitAllocated(value, GetArenaForAllocation());
+  }
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Value.type_value)
+}
+
+inline bool Value::has_kind() const {
+  return kind_case() != KIND_NOT_SET;
+}
+inline void Value::clear_has_kind() {
+  _impl_._oneof_case_[0] = KIND_NOT_SET;
+}
+inline Value::KindCase Value::kind_case() const {
+  return Value::KindCase(_impl_._oneof_case_[0]);
+}
+// -------------------------------------------------------------------
+
+// EnumValue
+
+// string type = 1 [json_name = "type"];
+inline void EnumValue::clear_type() {
+  _impl_.type_.ClearToEmpty();
+}
+inline const std::string& EnumValue::type() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.EnumValue.type)
+  return _internal_type();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void EnumValue::set_type(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.EnumValue.type)
+}
+inline std::string* EnumValue::mutable_type() {
+  std::string* _s = _internal_mutable_type();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.EnumValue.type)
+  return _s;
+}
+inline const std::string& EnumValue::_internal_type() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.type_.Get();
+}
+inline void EnumValue::_internal_set_type(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.type_.Set(value, GetArenaForAllocation());
+}
+inline std::string* EnumValue::_internal_mutable_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.type_.Mutable( GetArenaForAllocation());
+}
+inline std::string* EnumValue::release_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.EnumValue.type)
+  return _impl_.type_.Release();
+}
+inline void EnumValue::set_allocated_type(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.type_.IsDefault()) {
+          _impl_.type_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.EnumValue.type)
+}
+
+// int32 value = 2 [json_name = "value"];
+inline void EnumValue::clear_value() {
+  _impl_.value_ = 0;
+}
+inline ::int32_t EnumValue::value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.EnumValue.value)
+  return _internal_value();
+}
+inline void EnumValue::set_value(::int32_t value) {
+  _internal_set_value(value);
+  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.EnumValue.value)
+}
+inline ::int32_t EnumValue::_internal_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.value_;
+}
+inline void EnumValue::_internal_set_value(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.value_ = value;
+}
+
+// -------------------------------------------------------------------
+
+// ListValue
+
+// repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
+inline int ListValue::_internal_values_size() const {
+  return _internal_values().size();
+}
+inline int ListValue::values_size() const {
+  return _internal_values_size();
+}
+inline void ListValue::clear_values() {
+  _internal_mutable_values()->Clear();
+}
+inline ::google::api::expr::v1alpha1::Value* ListValue::mutable_values(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.ListValue.values)
+  return _internal_mutable_values()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >*
+ListValue::mutable_values() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.ListValue.values)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_values();
+}
+inline const ::google::api::expr::v1alpha1::Value& ListValue::values(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.ListValue.values)
+    return _internal_values().Get(index);
+}
+inline ::google::api::expr::v1alpha1::Value* ListValue::add_values() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::Value* _add = _internal_mutable_values()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.ListValue.values)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >&
+ListValue::values() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.ListValue.values)
+  return _internal_values();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Value>&
+ListValue::_internal_values() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.values_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::Value>*
+ListValue::_internal_mutable_values() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.values_;
+}
+
+// -------------------------------------------------------------------
+
+// MapValue_Entry
+
+// .google.api.expr.v1alpha1.Value key = 1 [json_name = "key"];
+inline bool MapValue_Entry::has_key() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
+  return value;
+}
+inline void MapValue_Entry::clear_key() {
+  if (_impl_.key_ != nullptr) _impl_.key_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::api::expr::v1alpha1::Value& MapValue_Entry::_internal_key() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Value* p = _impl_.key_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Value&>(::google::api::expr::v1alpha1::_Value_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Value& MapValue_Entry::key() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.MapValue.Entry.key)
+  return _internal_key();
+}
+inline void MapValue_Entry::unsafe_arena_set_allocated_key(::google::api::expr::v1alpha1::Value* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.key_);
+  }
+  _impl_.key_ = reinterpret_cast<::google::api::expr::v1alpha1::Value*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.MapValue.Entry.key)
+}
+inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::release_key() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Value* released = _impl_.key_;
+  _impl_.key_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::unsafe_arena_release_key() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.MapValue.Entry.key)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::api::expr::v1alpha1::Value* temp = _impl_.key_;
+  _impl_.key_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::_internal_mutable_key() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.key_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Value>(GetArenaForAllocation());
+    _impl_.key_ = reinterpret_cast<::google::api::expr::v1alpha1::Value*>(p);
+  }
+  return _impl_.key_;
+}
+inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::mutable_key() {
+  ::google::api::expr::v1alpha1::Value* _msg = _internal_mutable_key();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.MapValue.Entry.key)
+  return _msg;
+}
+inline void MapValue_Entry::set_allocated_key(::google::api::expr::v1alpha1::Value* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Value*>(_impl_.key_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Value*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.key_ = reinterpret_cast<::google::api::expr::v1alpha1::Value*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.MapValue.Entry.key)
+}
+
+// .google.api.expr.v1alpha1.Value value = 2 [json_name = "value"];
+inline bool MapValue_Entry::has_value() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
+  return value;
+}
+inline void MapValue_Entry::clear_value() {
+  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000002u;
+}
+inline const ::google::api::expr::v1alpha1::Value& MapValue_Entry::_internal_value() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::api::expr::v1alpha1::Value* p = _impl_.value_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Value&>(::google::api::expr::v1alpha1::_Value_default_instance_);
+}
+inline const ::google::api::expr::v1alpha1::Value& MapValue_Entry::value() const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.MapValue.Entry.value)
+  return _internal_value();
+}
+inline void MapValue_Entry::unsafe_arena_set_allocated_value(::google::api::expr::v1alpha1::Value* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
+  }
+  _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Value*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.MapValue.Entry.value)
+}
+inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::release_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::Value* released = _impl_.value_;
+  _impl_.value_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::unsafe_arena_release_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.MapValue.Entry.value)
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::api::expr::v1alpha1::Value* temp = _impl_.value_;
+  _impl_.value_ = nullptr;
+  return temp;
+}
+inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::_internal_mutable_value() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000002u;
+  if (_impl_.value_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Value>(GetArenaForAllocation());
+    _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Value*>(p);
+  }
+  return _impl_.value_;
+}
+inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::mutable_value() {
+  ::google::api::expr::v1alpha1::Value* _msg = _internal_mutable_value();
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.MapValue.Entry.value)
+  return _msg;
+}
+inline void MapValue_Entry::set_allocated_value(::google::api::expr::v1alpha1::Value* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::api::expr::v1alpha1::Value*>(_impl_.value_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::api::expr::v1alpha1::Value*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+
+  _impl_.value_ = reinterpret_cast<::google::api::expr::v1alpha1::Value*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.MapValue.Entry.value)
+}
+
+// -------------------------------------------------------------------
+
+// MapValue
+
+// repeated .google.api.expr.v1alpha1.MapValue.Entry entries = 1 [json_name = "entries"];
+inline int MapValue::_internal_entries_size() const {
+  return _internal_entries().size();
+}
+inline int MapValue::entries_size() const {
+  return _internal_entries_size();
+}
+inline void MapValue::clear_entries() {
+  _internal_mutable_entries()->Clear();
+}
+inline ::google::api::expr::v1alpha1::MapValue_Entry* MapValue::mutable_entries(int index) {
+  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.MapValue.entries)
+  return _internal_mutable_entries()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::MapValue_Entry >*
+MapValue::mutable_entries() {
+  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.MapValue.entries)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_entries();
+}
+inline const ::google::api::expr::v1alpha1::MapValue_Entry& MapValue::entries(int index) const {
+  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.MapValue.entries)
+    return _internal_entries().Get(index);
+}
+inline ::google::api::expr::v1alpha1::MapValue_Entry* MapValue::add_entries() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::api::expr::v1alpha1::MapValue_Entry* _add = _internal_mutable_entries()->Add();
+  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.MapValue.entries)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::MapValue_Entry >&
+MapValue::entries() const {
+  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.MapValue.entries)
+  return _internal_entries();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::MapValue_Entry>&
+MapValue::_internal_entries() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.entries_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::api::expr::v1alpha1::MapValue_Entry>*
+MapValue::_internal_mutable_entries() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.entries_;
+}
+
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif  // __GNUC__
+
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace v1alpha1
+}  // namespace expr
+}  // namespace api
+}  // namespace google
+
+
+// @@protoc_insertion_point(global_scope)
+
+#include "google/protobuf/port_undef.inc"
+
+#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto_2epb_2eh
diff --git a/gen/google/rpc/code.pb.cc b/gen/google/rpc/code.pb.cc
new file mode 100644
index 0000000..edefa71
--- /dev/null
+++ b/gen/google/rpc/code.pb.cc
@@ -0,0 +1,122 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/rpc/code.proto
+
+#include "google/rpc/code.pb.h"
+
+#include <algorithm>
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/extension_set.h"
+#include "google/protobuf/wire_format_lite.h"
+#include "google/protobuf/descriptor.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/reflection_ops.h"
+#include "google/protobuf/wire_format.h"
+#include "google/protobuf/generated_message_tctable_impl.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+PROTOBUF_PRAGMA_INIT_SEG
+namespace _pb = ::google::protobuf;
+namespace _pbi = ::google::protobuf::internal;
+namespace _fl = ::google::protobuf::internal::field_layout;
+namespace google {
+namespace rpc {
+}  // namespace rpc
+}  // namespace google
+static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2frpc_2fcode_2eproto[1];
+static constexpr const ::_pb::ServiceDescriptor**
+    file_level_service_descriptors_google_2frpc_2fcode_2eproto = nullptr;
+const ::uint32_t TableStruct_google_2frpc_2fcode_2eproto::offsets[1] = {};
+static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
+static constexpr ::_pb::Message* const* file_default_instances = nullptr;
+const char descriptor_table_protodef_google_2frpc_2fcode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+    "\n\025google/rpc/code.proto\022\ngoogle.rpc*\267\002\n\004"
+    "Code\022\006\n\002OK\020\000\022\r\n\tCANCELLED\020\001\022\013\n\007UNKNOWN\020\002"
+    "\022\024\n\020INVALID_ARGUMENT\020\003\022\025\n\021DEADLINE_EXCEE"
+    "DED\020\004\022\r\n\tNOT_FOUND\020\005\022\022\n\016ALREADY_EXISTS\020\006"
+    "\022\025\n\021PERMISSION_DENIED\020\007\022\023\n\017UNAUTHENTICAT"
+    "ED\020\020\022\026\n\022RESOURCE_EXHAUSTED\020\010\022\027\n\023FAILED_P"
+    "RECONDITION\020\t\022\013\n\007ABORTED\020\n\022\020\n\014OUT_OF_RAN"
+    "GE\020\013\022\021\n\rUNIMPLEMENTED\020\014\022\014\n\010INTERNAL\020\r\022\017\n"
+    "\013UNAVAILABLE\020\016\022\r\n\tDATA_LOSS\020\017B\231\001\n\016com.go"
+    "ogle.rpcB\tCodeProtoP\001Z3google.golang.org"
+    "/genproto/googleapis/rpc/code;code\242\002\003GRX"
+    "\252\002\nGoogle.Rpc\312\002\nGoogle\\Rpc\342\002\026Google\\Rpc\\"
+    "GPBMetadata\352\002\013Google::Rpcb\006proto3"
+};
+static ::absl::once_flag descriptor_table_google_2frpc_2fcode_2eproto_once;
+const ::_pbi::DescriptorTable descriptor_table_google_2frpc_2fcode_2eproto = {
+    false,
+    false,
+    513,
+    descriptor_table_protodef_google_2frpc_2fcode_2eproto,
+    "google/rpc/code.proto",
+    &descriptor_table_google_2frpc_2fcode_2eproto_once,
+    nullptr,
+    0,
+    0,
+    schemas,
+    file_default_instances,
+    TableStruct_google_2frpc_2fcode_2eproto::offsets,
+    nullptr,
+    file_level_enum_descriptors_google_2frpc_2fcode_2eproto,
+    file_level_service_descriptors_google_2frpc_2fcode_2eproto,
+};
+
+// This function exists to be marked as weak.
+// It can significantly speed up compilation by breaking up LLVM's SCC
+// in the .pb.cc translation units. Large translation units see a
+// reduction of more than 35% of walltime for optimized builds. Without
+// the weak attribute all the messages in the file, including all the
+// vtables and everything they use become part of the same SCC through
+// a cycle like:
+// GetMetadata -> descriptor table -> default instances ->
+//   vtables -> GetMetadata
+// By adding a weak function here we break the connection from the
+// individual vtables back into the descriptor table.
+PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2frpc_2fcode_2eproto_getter() {
+  return &descriptor_table_google_2frpc_2fcode_2eproto;
+}
+// Force running AddDescriptors() at dynamic initialization time.
+PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
+static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2frpc_2fcode_2eproto(&descriptor_table_google_2frpc_2fcode_2eproto);
+namespace google {
+namespace rpc {
+const ::google::protobuf::EnumDescriptor* Code_descriptor() {
+  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_google_2frpc_2fcode_2eproto);
+  return file_level_enum_descriptors_google_2frpc_2fcode_2eproto[0];
+}
+bool Code_IsValid(int value) {
+  switch (value) {
+    case 0:
+    case 1:
+    case 2:
+    case 3:
+    case 4:
+    case 5:
+    case 6:
+    case 7:
+    case 8:
+    case 9:
+    case 10:
+    case 11:
+    case 12:
+    case 13:
+    case 14:
+    case 15:
+    case 16:
+      return true;
+    default:
+      return false;
+  }
+}
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace rpc
+}  // namespace google
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+// @@protoc_insertion_point(global_scope)
+#include "google/protobuf/port_undef.inc"
diff --git a/gen/google/rpc/code.pb.h b/gen/google/rpc/code.pb.h
new file mode 100644
index 0000000..1e58096
--- /dev/null
+++ b/gen/google/rpc/code.pb.h
@@ -0,0 +1,152 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/rpc/code.proto
+
+#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcode_2eproto_2epb_2eh
+#define GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcode_2eproto_2epb_2eh
+
+#include <limits>
+#include <string>
+#include <type_traits>
+
+#include "google/protobuf/port_def.inc"
+#if PROTOBUF_VERSION < 4024000
+#error "This file was generated by a newer version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please update"
+#error "your headers."
+#endif  // PROTOBUF_VERSION
+
+#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
+#error "This file was generated by an older version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please"
+#error "regenerate this file with a newer version of protoc."
+#endif  // PROTOBUF_MIN_PROTOC_VERSION
+#include "google/protobuf/port_undef.inc"
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/arena.h"
+#include "google/protobuf/arenastring.h"
+#include "google/protobuf/generated_message_tctable_decl.h"
+#include "google/protobuf/generated_message_util.h"
+#include "google/protobuf/metadata_lite.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
+#include "google/protobuf/extension_set.h"  // IWYU pragma: export
+#include "google/protobuf/generated_enum_reflection.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+
+#define PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fcode_2eproto
+
+namespace google {
+namespace protobuf {
+namespace internal {
+class AnyMetadata;
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+// Internal implementation detail -- do not use these members.
+struct TableStruct_google_2frpc_2fcode_2eproto {
+  static const ::uint32_t offsets[];
+};
+extern const ::google::protobuf::internal::DescriptorTable
+    descriptor_table_google_2frpc_2fcode_2eproto;
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+
+namespace google {
+namespace rpc {
+enum Code : int {
+  OK = 0,
+  CANCELLED = 1,
+  UNKNOWN = 2,
+  INVALID_ARGUMENT = 3,
+  DEADLINE_EXCEEDED = 4,
+  NOT_FOUND = 5,
+  ALREADY_EXISTS = 6,
+  PERMISSION_DENIED = 7,
+  UNAUTHENTICATED = 16,
+  RESOURCE_EXHAUSTED = 8,
+  FAILED_PRECONDITION = 9,
+  ABORTED = 10,
+  OUT_OF_RANGE = 11,
+  UNIMPLEMENTED = 12,
+  INTERNAL = 13,
+  UNAVAILABLE = 14,
+  DATA_LOSS = 15,
+  Code_INT_MIN_SENTINEL_DO_NOT_USE_ =
+      std::numeric_limits<::int32_t>::min(),
+  Code_INT_MAX_SENTINEL_DO_NOT_USE_ =
+      std::numeric_limits<::int32_t>::max(),
+};
+
+bool Code_IsValid(int value);
+constexpr Code Code_MIN = static_cast<Code>(0);
+constexpr Code Code_MAX = static_cast<Code>(16);
+constexpr int Code_ARRAYSIZE = 16 + 1;
+const ::google::protobuf::EnumDescriptor*
+Code_descriptor();
+template <typename T>
+const std::string& Code_Name(T value) {
+  static_assert(std::is_same<T, Code>::value ||
+                    std::is_integral<T>::value,
+                "Incorrect type passed to Code_Name().");
+  return Code_Name(static_cast<Code>(value));
+}
+template <>
+inline const std::string& Code_Name(Code value) {
+  return ::google::protobuf::internal::NameOfDenseEnum<Code_descriptor,
+                                                 0, 16>(
+      static_cast<int>(value));
+}
+inline bool Code_Parse(absl::string_view name, Code* value) {
+  return ::google::protobuf::internal::ParseNamedEnum<Code>(
+      Code_descriptor(), name, value);
+}
+
+// ===================================================================
+
+
+
+// ===================================================================
+
+
+
+
+// ===================================================================
+
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif  // __GNUC__
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif  // __GNUC__
+
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace rpc
+}  // namespace google
+
+
+namespace google {
+namespace protobuf {
+
+template <>
+struct is_proto_enum<::google::rpc::Code> : std::true_type {};
+template <>
+inline const EnumDescriptor* GetEnumDescriptor<::google::rpc::Code>() {
+  return ::google::rpc::Code_descriptor();
+}
+
+}  // namespace protobuf
+}  // namespace google
+
+// @@protoc_insertion_point(global_scope)
+
+#include "google/protobuf/port_undef.inc"
+
+#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcode_2eproto_2epb_2eh
diff --git a/gen/google/rpc/context/attribute_context.pb.cc b/gen/google/rpc/context/attribute_context.pb.cc
new file mode 100644
index 0000000..2e980de
--- /dev/null
+++ b/gen/google/rpc/context/attribute_context.pb.cc
@@ -0,0 +1,4000 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/rpc/context/attribute_context.proto
+
+#include "google/rpc/context/attribute_context.pb.h"
+
+#include <algorithm>
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/extension_set.h"
+#include "google/protobuf/wire_format_lite.h"
+#include "google/protobuf/descriptor.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/reflection_ops.h"
+#include "google/protobuf/wire_format.h"
+#include "google/protobuf/generated_message_tctable_impl.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+PROTOBUF_PRAGMA_INIT_SEG
+namespace _pb = ::google::protobuf;
+namespace _pbi = ::google::protobuf::internal;
+namespace _fl = ::google::protobuf::internal::field_layout;
+namespace google {
+namespace rpc {
+namespace context {
+      template <typename>
+PROTOBUF_CONSTEXPR AttributeContext_Peer_LabelsEntry_DoNotUse::AttributeContext_Peer_LabelsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    AttributeContext_Peer_LabelsEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Peer_LabelsEntry_DoNotUse_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR AttributeContext_Peer::AttributeContext_Peer(::_pbi::ConstantInitialized)
+    : _impl_{
+      /* decltype(_impl_.labels_) */ {},
+      /*decltype(_impl_.ip_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.principal_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.region_code_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.port_)*/ ::int64_t{0},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct AttributeContext_PeerDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContext_PeerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContext_PeerDefaultTypeInternal() {}
+  union {
+    AttributeContext_Peer _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_PeerDefaultTypeInternal _AttributeContext_Peer_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR AttributeContext_Api::AttributeContext_Api(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.service_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.operation_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.protocol_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.version_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct AttributeContext_ApiDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContext_ApiDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContext_ApiDefaultTypeInternal() {}
+  union {
+    AttributeContext_Api _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_ApiDefaultTypeInternal _AttributeContext_Api_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR AttributeContext_Auth::AttributeContext_Auth(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.audiences_)*/ {},
+      /*decltype(_impl_.access_levels_)*/ {},
+      /*decltype(_impl_.principal_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.presenter_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.claims_)*/ nullptr,
+    } {}
+struct AttributeContext_AuthDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContext_AuthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContext_AuthDefaultTypeInternal() {}
+  union {
+    AttributeContext_Auth _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_AuthDefaultTypeInternal _AttributeContext_Auth_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR AttributeContext_Request_HeadersEntry_DoNotUse::AttributeContext_Request_HeadersEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    AttributeContext_Request_HeadersEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal _AttributeContext_Request_HeadersEntry_DoNotUse_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR AttributeContext_Request::AttributeContext_Request(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.headers_) */ {},
+      /*decltype(_impl_.id_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.method_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.path_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.host_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.scheme_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.query_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.protocol_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.reason_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.time_)*/ nullptr,
+      /*decltype(_impl_.auth_)*/ nullptr,
+      /*decltype(_impl_.size_)*/ ::int64_t{0},
+    } {}
+struct AttributeContext_RequestDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContext_RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContext_RequestDefaultTypeInternal() {}
+  union {
+    AttributeContext_Request _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_RequestDefaultTypeInternal _AttributeContext_Request_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR AttributeContext_Response_HeadersEntry_DoNotUse::AttributeContext_Response_HeadersEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    AttributeContext_Response_HeadersEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal _AttributeContext_Response_HeadersEntry_DoNotUse_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR AttributeContext_Response::AttributeContext_Response(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.headers_) */ {},
+      /*decltype(_impl_.time_)*/ nullptr,
+      /*decltype(_impl_.backend_latency_)*/ nullptr,
+      /*decltype(_impl_.code_)*/ ::int64_t{0},
+      /*decltype(_impl_.size_)*/ ::int64_t{0},
+    } {}
+struct AttributeContext_ResponseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContext_ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContext_ResponseDefaultTypeInternal() {}
+  union {
+    AttributeContext_Response _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_ResponseDefaultTypeInternal _AttributeContext_Response_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR AttributeContext_Resource_LabelsEntry_DoNotUse::AttributeContext_Resource_LabelsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    AttributeContext_Resource_LabelsEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Resource_LabelsEntry_DoNotUse_default_instance_;
+      template <typename>
+PROTOBUF_CONSTEXPR AttributeContext_Resource_AnnotationsEntry_DoNotUse::AttributeContext_Resource_AnnotationsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    AttributeContext_Resource_AnnotationsEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Resource_AnnotationsEntry_DoNotUse_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR AttributeContext_Resource::AttributeContext_Resource(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.labels_) */ {},
+      /* decltype(_impl_.annotations_) */ {},
+      /*decltype(_impl_.service_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.name_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.type_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.uid_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.display_name_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.etag_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.location_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.create_time_)*/ nullptr,
+      /*decltype(_impl_.update_time_)*/ nullptr,
+      /*decltype(_impl_.delete_time_)*/ nullptr,
+    } {}
+struct AttributeContext_ResourceDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContext_ResourceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContext_ResourceDefaultTypeInternal() {}
+  union {
+    AttributeContext_Resource _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_ResourceDefaultTypeInternal _AttributeContext_Resource_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR AttributeContext::AttributeContext(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.extensions_)*/ {},
+      /*decltype(_impl_.source_)*/ nullptr,
+      /*decltype(_impl_.destination_)*/ nullptr,
+      /*decltype(_impl_.request_)*/ nullptr,
+      /*decltype(_impl_.response_)*/ nullptr,
+      /*decltype(_impl_.resource_)*/ nullptr,
+      /*decltype(_impl_.api_)*/ nullptr,
+      /*decltype(_impl_.origin_)*/ nullptr,
+    } {}
+struct AttributeContextDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR AttributeContextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~AttributeContextDefaultTypeInternal() {}
+  union {
+    AttributeContext _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContextDefaultTypeInternal _AttributeContext_default_instance_;
+}  // namespace context
+}  // namespace rpc
+}  // namespace google
+static ::_pb::Metadata file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[12];
+static constexpr const ::_pb::EnumDescriptor**
+    file_level_enum_descriptors_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto = nullptr;
+static constexpr const ::_pb::ServiceDescriptor**
+    file_level_service_descriptors_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto = nullptr;
+const ::uint32_t TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
+    protodesc_cold) = {
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse, value_),
+    0,
+    1,
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, _impl_.ip_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, _impl_.port_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, _impl_.labels_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, _impl_.principal_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, _impl_.region_code_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Api, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Api, _impl_.service_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Api, _impl_.operation_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Api, _impl_.protocol_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Api, _impl_.version_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, _impl_.principal_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, _impl_.audiences_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, _impl_.presenter_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, _impl_.claims_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, _impl_.access_levels_),
+    ~0u,
+    ~0u,
+    ~0u,
+    0,
+    ~0u,
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.id_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.method_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.headers_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.path_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.host_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.scheme_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.query_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.time_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.size_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.protocol_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.reason_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _impl_.auth_),
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    0,
+    ~0u,
+    ~0u,
+    ~0u,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, _impl_.code_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, _impl_.size_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, _impl_.headers_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, _impl_.time_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, _impl_.backend_latency_),
+    ~0u,
+    ~0u,
+    ~0u,
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse, value_),
+    0,
+    1,
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.service_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.name_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.type_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.labels_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.uid_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.annotations_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.display_name_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.create_time_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.update_time_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.delete_time_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.etag_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _impl_.location_),
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    ~0u,
+    0,
+    1,
+    2,
+    ~0u,
+    ~0u,
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, _impl_.origin_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, _impl_.source_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, _impl_.destination_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, _impl_.request_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, _impl_.response_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, _impl_.resource_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, _impl_.api_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, _impl_.extensions_),
+    6,
+    0,
+    1,
+    2,
+    3,
+    4,
+    5,
+    ~0u,
+};
+
+static const ::_pbi::MigrationSchema
+    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+        {0, 10, -1, sizeof(::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse)},
+        {12, -1, -1, sizeof(::google::rpc::context::AttributeContext_Peer)},
+        {25, -1, -1, sizeof(::google::rpc::context::AttributeContext_Api)},
+        {37, 50, -1, sizeof(::google::rpc::context::AttributeContext_Auth)},
+        {55, 65, -1, sizeof(::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse)},
+        {67, 87, -1, sizeof(::google::rpc::context::AttributeContext_Request)},
+        {99, 109, -1, sizeof(::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse)},
+        {111, 124, -1, sizeof(::google::rpc::context::AttributeContext_Response)},
+        {129, 139, -1, sizeof(::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse)},
+        {141, 151, -1, sizeof(::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse)},
+        {153, 173, -1, sizeof(::google::rpc::context::AttributeContext_Resource)},
+        {185, 201, -1, sizeof(::google::rpc::context::AttributeContext)},
+};
+
+static const ::_pb::Message* const file_default_instances[] = {
+    &::google::rpc::context::_AttributeContext_Peer_LabelsEntry_DoNotUse_default_instance_._instance,
+    &::google::rpc::context::_AttributeContext_Peer_default_instance_._instance,
+    &::google::rpc::context::_AttributeContext_Api_default_instance_._instance,
+    &::google::rpc::context::_AttributeContext_Auth_default_instance_._instance,
+    &::google::rpc::context::_AttributeContext_Request_HeadersEntry_DoNotUse_default_instance_._instance,
+    &::google::rpc::context::_AttributeContext_Request_default_instance_._instance,
+    &::google::rpc::context::_AttributeContext_Response_HeadersEntry_DoNotUse_default_instance_._instance,
+    &::google::rpc::context::_AttributeContext_Response_default_instance_._instance,
+    &::google::rpc::context::_AttributeContext_Resource_LabelsEntry_DoNotUse_default_instance_._instance,
+    &::google::rpc::context::_AttributeContext_Resource_AnnotationsEntry_DoNotUse_default_instance_._instance,
+    &::google::rpc::context::_AttributeContext_Resource_default_instance_._instance,
+    &::google::rpc::context::_AttributeContext_default_instance_._instance,
+};
+const char descriptor_table_protodef_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+    "\n*google/rpc/context/attribute_context.p"
+    "roto\022\022google.rpc.context\032\031google/protobu"
+    "f/any.proto\032\036google/protobuf/duration.pr"
+    "oto\032\034google/protobuf/struct.proto\032\037googl"
+    "e/protobuf/timestamp.proto\"\201\024\n\020Attribute"
+    "Context\022A\n\006origin\030\007 \001(\0132).google.rpc.con"
+    "text.AttributeContext.PeerR\006origin\022A\n\006so"
+    "urce\030\001 \001(\0132).google.rpc.context.Attribut"
+    "eContext.PeerR\006source\022K\n\013destination\030\002 \001"
+    "(\0132).google.rpc.context.AttributeContext"
+    ".PeerR\013destination\022F\n\007request\030\003 \001(\0132,.go"
+    "ogle.rpc.context.AttributeContext.Reques"
+    "tR\007request\022I\n\010response\030\004 \001(\0132-.google.rp"
+    "c.context.AttributeContext.ResponseR\010res"
+    "ponse\022I\n\010resource\030\005 \001(\0132-.google.rpc.con"
+    "text.AttributeContext.ResourceR\010resource"
+    "\022:\n\003api\030\006 \001(\0132(.google.rpc.context.Attri"
+    "buteContext.ApiR\003api\0224\n\nextensions\030\010 \003(\013"
+    "2\024.google.protobuf.AnyR\nextensions\032\363\001\n\004P"
+    "eer\022\016\n\002ip\030\001 \001(\tR\002ip\022\022\n\004port\030\002 \001(\003R\004port\022"
+    "M\n\006labels\030\006 \003(\01325.google.rpc.context.Att"
+    "ributeContext.Peer.LabelsEntryR\006labels\022\034"
+    "\n\tprincipal\030\007 \001(\tR\tprincipal\022\037\n\013region_c"
+    "ode\030\010 \001(\tR\nregionCode\0329\n\013LabelsEntry\022\020\n\003"
+    "key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001"
+    "\032s\n\003Api\022\030\n\007service\030\001 \001(\tR\007service\022\034\n\tope"
+    "ration\030\002 \001(\tR\toperation\022\032\n\010protocol\030\003 \001("
+    "\tR\010protocol\022\030\n\007version\030\004 \001(\tR\007version\032\266\001"
+    "\n\004Auth\022\034\n\tprincipal\030\001 \001(\tR\tprincipal\022\034\n\t"
+    "audiences\030\002 \003(\tR\taudiences\022\034\n\tpresenter\030"
+    "\003 \001(\tR\tpresenter\022/\n\006claims\030\004 \001(\0132\027.googl"
+    "e.protobuf.StructR\006claims\022#\n\raccess_leve"
+    "ls\030\005 \003(\tR\014accessLevels\032\317\003\n\007Request\022\016\n\002id"
+    "\030\001 \001(\tR\002id\022\026\n\006method\030\002 \001(\tR\006method\022S\n\007he"
+    "aders\030\003 \003(\01329.google.rpc.context.Attribu"
+    "teContext.Request.HeadersEntryR\007headers\022"
+    "\022\n\004path\030\004 \001(\tR\004path\022\022\n\004host\030\005 \001(\tR\004host\022"
+    "\026\n\006scheme\030\006 \001(\tR\006scheme\022\024\n\005query\030\007 \001(\tR\005"
+    "query\022.\n\004time\030\t \001(\0132\032.google.protobuf.Ti"
+    "mestampR\004time\022\022\n\004size\030\n \001(\003R\004size\022\032\n\010pro"
+    "tocol\030\013 \001(\tR\010protocol\022\026\n\006reason\030\014 \001(\tR\006r"
+    "eason\022=\n\004auth\030\r \001(\0132).google.rpc.context"
+    ".AttributeContext.AuthR\004auth\032:\n\014HeadersE"
+    "ntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005v"
+    "alue:\0028\001\032\270\002\n\010Response\022\022\n\004code\030\001 \001(\003R\004cod"
+    "e\022\022\n\004size\030\002 \001(\003R\004size\022T\n\007headers\030\003 \003(\0132:"
+    ".google.rpc.context.AttributeContext.Res"
+    "ponse.HeadersEntryR\007headers\022.\n\004time\030\004 \001("
+    "\0132\032.google.protobuf.TimestampR\004time\022B\n\017b"
+    "ackend_latency\030\005 \001(\0132\031.google.protobuf.D"
+    "urationR\016backendLatency\032:\n\014HeadersEntry\022"
+    "\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:"
+    "\0028\001\032\230\005\n\010Resource\022\030\n\007service\030\001 \001(\tR\007servi"
+    "ce\022\022\n\004name\030\002 \001(\tR\004name\022\022\n\004type\030\003 \001(\tR\004ty"
+    "pe\022Q\n\006labels\030\004 \003(\01329.google.rpc.context."
+    "AttributeContext.Resource.LabelsEntryR\006l"
+    "abels\022\020\n\003uid\030\005 \001(\tR\003uid\022`\n\013annotations\030\006"
+    " \003(\0132>.google.rpc.context.AttributeConte"
+    "xt.Resource.AnnotationsEntryR\013annotation"
+    "s\022!\n\014display_name\030\007 \001(\tR\013displayName\022;\n\013"
+    "create_time\030\010 \001(\0132\032.google.protobuf.Time"
+    "stampR\ncreateTime\022;\n\013update_time\030\t \001(\0132\032"
+    ".google.protobuf.TimestampR\nupdateTime\022;"
+    "\n\013delete_time\030\n \001(\0132\032.google.protobuf.Ti"
+    "mestampR\ndeleteTime\022\022\n\004etag\030\013 \001(\tR\004etag\022"
+    "\032\n\010location\030\014 \001(\tR\010location\0329\n\013LabelsEnt"
+    "ry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005val"
+    "ue:\0028\001\032>\n\020AnnotationsEntry\022\020\n\003key\030\001 \001(\tR"
+    "\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001B\363\001\n\026com.g"
+    "oogle.rpc.contextB\025AttributeContextProto"
+    "P\001ZUgoogle.golang.org/genproto/googleapi"
+    "s/rpc/context/attribute_context;attribut"
+    "e_context\370\001\001\242\002\003GRC\252\002\022Google.Rpc.Context\312"
+    "\002\022Google\\Rpc\\Context\342\002\036Google\\Rpc\\Contex"
+    "t\\GPBMetadata\352\002\024Google::Rpc::Contextb\006pr"
+    "oto3"
+};
+static const ::_pbi::DescriptorTable* const descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_deps[4] =
+    {
+        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
+        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
+        &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
+        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
+};
+static ::absl::once_flag descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once;
+const ::_pbi::DescriptorTable descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto = {
+    false,
+    false,
+    3004,
+    descriptor_table_protodef_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto,
+    "google/rpc/context/attribute_context.proto",
+    &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+    descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_deps,
+    4,
+    12,
+    schemas,
+    file_default_instances,
+    TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto::offsets,
+    file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto,
+    file_level_enum_descriptors_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto,
+    file_level_service_descriptors_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto,
+};
+
+// This function exists to be marked as weak.
+// It can significantly speed up compilation by breaking up LLVM's SCC
+// in the .pb.cc translation units. Large translation units see a
+// reduction of more than 35% of walltime for optimized builds. Without
+// the weak attribute all the messages in the file, including all the
+// vtables and everything they use become part of the same SCC through
+// a cycle like:
+// GetMetadata -> descriptor table -> default instances ->
+//   vtables -> GetMetadata
+// By adding a weak function here we break the connection from the
+// individual vtables back into the descriptor table.
+PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter() {
+  return &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+}
+// Force running AddDescriptors() at dynamic initialization time.
+PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
+static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto(&descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto);
+namespace google {
+namespace rpc {
+namespace context {
+// ===================================================================
+
+AttributeContext_Peer_LabelsEntry_DoNotUse::AttributeContext_Peer_LabelsEntry_DoNotUse() {}
+AttributeContext_Peer_LabelsEntry_DoNotUse::AttributeContext_Peer_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void AttributeContext_Peer_LabelsEntry_DoNotUse::MergeFrom(const AttributeContext_Peer_LabelsEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata AttributeContext_Peer_LabelsEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[0]);
+}
+// ===================================================================
+
+class AttributeContext_Peer::_Internal {
+ public:
+};
+
+AttributeContext_Peer::AttributeContext_Peer(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Peer)
+}
+AttributeContext_Peer::AttributeContext_Peer(const AttributeContext_Peer& from) : ::google::protobuf::Message() {
+  AttributeContext_Peer* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      /* decltype(_impl_.labels_) */ {},
+      decltype(_impl_.ip_){},
+      decltype(_impl_.principal_){},
+      decltype(_impl_.region_code_){},
+      decltype(_impl_.port_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
+  _impl_.ip_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.ip_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_ip().empty()) {
+    _this->_impl_.ip_.Set(from._internal_ip(), _this->GetArenaForAllocation());
+  }
+  _impl_.principal_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.principal_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_principal().empty()) {
+    _this->_impl_.principal_.Set(from._internal_principal(), _this->GetArenaForAllocation());
+  }
+  _impl_.region_code_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.region_code_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_region_code().empty()) {
+    _this->_impl_.region_code_.Set(from._internal_region_code(), _this->GetArenaForAllocation());
+  }
+  _this->_impl_.port_ = from._impl_.port_;
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Peer)
+}
+inline void AttributeContext_Peer::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      /* decltype(_impl_.labels_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      decltype(_impl_.ip_){},
+      decltype(_impl_.principal_){},
+      decltype(_impl_.region_code_){},
+      decltype(_impl_.port_){::int64_t{0}},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.ip_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.ip_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.principal_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.principal_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.region_code_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.region_code_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+AttributeContext_Peer::~AttributeContext_Peer() {
+  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Peer)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void AttributeContext_Peer::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.labels_.~MapField();
+  _impl_.ip_.Destroy();
+  _impl_.principal_.Destroy();
+  _impl_.region_code_.Destroy();
+}
+void AttributeContext_Peer::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void AttributeContext_Peer::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Peer)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.labels_.Clear();
+  _impl_.ip_.ClearToEmpty();
+  _impl_.principal_.ClearToEmpty();
+  _impl_.region_code_.ClearToEmpty();
+  _impl_.port_ = ::int64_t{0};
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* AttributeContext_Peer::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 5, 1, 77, 2> AttributeContext_Peer::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    8, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967068,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    5,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_AttributeContext_Peer_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string region_code = 8 [json_name = "regionCode"];
+    {::_pbi::TcParser::FastUS1,
+     {66, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Peer, _impl_.region_code_)}},
+    // string ip = 1 [json_name = "ip"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Peer, _impl_.ip_)}},
+    // int64 port = 2 [json_name = "port"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AttributeContext_Peer, _impl_.port_), 63>(),
+     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Peer, _impl_.port_)}},
+    // string principal = 7 [json_name = "principal"];
+    {::_pbi::TcParser::FastUS1,
+     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Peer, _impl_.principal_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string ip = 1 [json_name = "ip"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Peer, _impl_.ip_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // int64 port = 2 [json_name = "port"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Peer, _impl_.port_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
+    // map<string, string> labels = 6 [json_name = "labels"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Peer, _impl_.labels_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // string principal = 7 [json_name = "principal"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Peer, _impl_.principal_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string region_code = 8 [json_name = "regionCode"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Peer, _impl_.region_code_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }}, {{
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(AttributeContext_Peer()._impl_.labels_)>(1, 0, 0)},
+  }}, {{
+    "\50\2\0\6\11\13\0\0"
+    "google.rpc.context.AttributeContext.Peer"
+    "ip"
+    "labels"
+    "principal"
+    "region_code"
+  }},
+};
+
+::uint8_t* AttributeContext_Peer::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Peer)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string ip = 1 [json_name = "ip"];
+  if (!this->_internal_ip().empty()) {
+    const std::string& _s = this->_internal_ip();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Peer.ip");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // int64 port = 2 [json_name = "port"];
+  if (this->_internal_port() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt64ToArrayWithField<2>(
+            stream, this->_internal_port(), target);
+  }
+
+  // map<string, string> labels = 6 [json_name = "labels"];
+  if (!_internal_labels().empty()) {
+    using MapType = ::google::protobuf::Map<std::string, std::string>;
+    using WireHelper = AttributeContext_Peer_LabelsEntry_DoNotUse::Funcs;
+    const auto& field = _internal_labels();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            6, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Peer.labels");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Peer.labels");
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            6, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Peer.labels");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Peer.labels");
+      }
+    }
+  }
+
+  // string principal = 7 [json_name = "principal"];
+  if (!this->_internal_principal().empty()) {
+    const std::string& _s = this->_internal_principal();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Peer.principal");
+    target = stream->WriteStringMaybeAliased(7, _s, target);
+  }
+
+  // string region_code = 8 [json_name = "regionCode"];
+  if (!this->_internal_region_code().empty()) {
+    const std::string& _s = this->_internal_region_code();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Peer.region_code");
+    target = stream->WriteStringMaybeAliased(8, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Peer)
+  return target;
+}
+
+::size_t AttributeContext_Peer::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Peer)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // map<string, string> labels = 6 [json_name = "labels"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_labels_size());
+  for (const auto& entry : _internal_labels()) {
+    total_size += AttributeContext_Peer_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // string ip = 1 [json_name = "ip"];
+  if (!this->_internal_ip().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_ip());
+  }
+
+  // string principal = 7 [json_name = "principal"];
+  if (!this->_internal_principal().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_principal());
+  }
+
+  // string region_code = 8 [json_name = "regionCode"];
+  if (!this->_internal_region_code().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_region_code());
+  }
+
+  // int64 port = 2 [json_name = "port"];
+  if (this->_internal_port() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+        this->_internal_port());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData AttributeContext_Peer::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    AttributeContext_Peer::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*AttributeContext_Peer::GetClassData() const { return &_class_data_; }
+
+
+void AttributeContext_Peer::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<AttributeContext_Peer*>(&to_msg);
+  auto& from = static_cast<const AttributeContext_Peer&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Peer)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
+  if (!from._internal_ip().empty()) {
+    _this->_internal_set_ip(from._internal_ip());
+  }
+  if (!from._internal_principal().empty()) {
+    _this->_internal_set_principal(from._internal_principal());
+  }
+  if (!from._internal_region_code().empty()) {
+    _this->_internal_set_region_code(from._internal_region_code());
+  }
+  if (from._internal_port() != 0) {
+    _this->_internal_set_port(from._internal_port());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void AttributeContext_Peer::CopyFrom(const AttributeContext_Peer& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Peer)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool AttributeContext_Peer::IsInitialized() const {
+  return true;
+}
+
+void AttributeContext_Peer::InternalSwap(AttributeContext_Peer* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, lhs_arena,
+                                       &other->_impl_.ip_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.principal_, lhs_arena,
+                                       &other->_impl_.principal_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.region_code_, lhs_arena,
+                                       &other->_impl_.region_code_, rhs_arena);
+        swap(_impl_.port_, other->_impl_.port_);
+}
+
+::google::protobuf::Metadata AttributeContext_Peer::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[1]);
+}
+// ===================================================================
+
+class AttributeContext_Api::_Internal {
+ public:
+};
+
+AttributeContext_Api::AttributeContext_Api(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Api)
+}
+AttributeContext_Api::AttributeContext_Api(const AttributeContext_Api& from) : ::google::protobuf::Message() {
+  AttributeContext_Api* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.service_){},
+      decltype(_impl_.operation_){},
+      decltype(_impl_.protocol_){},
+      decltype(_impl_.version_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.service_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.service_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_service().empty()) {
+    _this->_impl_.service_.Set(from._internal_service(), _this->GetArenaForAllocation());
+  }
+  _impl_.operation_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.operation_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_operation().empty()) {
+    _this->_impl_.operation_.Set(from._internal_operation(), _this->GetArenaForAllocation());
+  }
+  _impl_.protocol_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.protocol_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_protocol().empty()) {
+    _this->_impl_.protocol_.Set(from._internal_protocol(), _this->GetArenaForAllocation());
+  }
+  _impl_.version_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.version_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_version().empty()) {
+    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Api)
+}
+inline void AttributeContext_Api::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.service_){},
+      decltype(_impl_.operation_){},
+      decltype(_impl_.protocol_){},
+      decltype(_impl_.version_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.service_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.service_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.operation_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.operation_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.protocol_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.protocol_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.version_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.version_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+AttributeContext_Api::~AttributeContext_Api() {
+  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Api)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void AttributeContext_Api::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.service_.Destroy();
+  _impl_.operation_.Destroy();
+  _impl_.protocol_.Destroy();
+  _impl_.version_.Destroy();
+}
+void AttributeContext_Api::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void AttributeContext_Api::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Api)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.service_.ClearToEmpty();
+  _impl_.operation_.ClearToEmpty();
+  _impl_.protocol_.ClearToEmpty();
+  _impl_.version_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* AttributeContext_Api::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 4, 0, 79, 2> AttributeContext_Api::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    4, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967280,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    4,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_AttributeContext_Api_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string version = 4 [json_name = "version"];
+    {::_pbi::TcParser::FastUS1,
+     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Api, _impl_.version_)}},
+    // string service = 1 [json_name = "service"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Api, _impl_.service_)}},
+    // string operation = 2 [json_name = "operation"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Api, _impl_.operation_)}},
+    // string protocol = 3 [json_name = "protocol"];
+    {::_pbi::TcParser::FastUS1,
+     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Api, _impl_.protocol_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string service = 1 [json_name = "service"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Api, _impl_.service_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string operation = 2 [json_name = "operation"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Api, _impl_.operation_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string protocol = 3 [json_name = "protocol"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Api, _impl_.protocol_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string version = 4 [json_name = "version"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Api, _impl_.version_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }},
+  // no aux_entries
+  {{
+    "\47\7\11\10\7\0\0\0"
+    "google.rpc.context.AttributeContext.Api"
+    "service"
+    "operation"
+    "protocol"
+    "version"
+  }},
+};
+
+::uint8_t* AttributeContext_Api::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Api)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string service = 1 [json_name = "service"];
+  if (!this->_internal_service().empty()) {
+    const std::string& _s = this->_internal_service();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Api.service");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string operation = 2 [json_name = "operation"];
+  if (!this->_internal_operation().empty()) {
+    const std::string& _s = this->_internal_operation();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Api.operation");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  // string protocol = 3 [json_name = "protocol"];
+  if (!this->_internal_protocol().empty()) {
+    const std::string& _s = this->_internal_protocol();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Api.protocol");
+    target = stream->WriteStringMaybeAliased(3, _s, target);
+  }
+
+  // string version = 4 [json_name = "version"];
+  if (!this->_internal_version().empty()) {
+    const std::string& _s = this->_internal_version();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Api.version");
+    target = stream->WriteStringMaybeAliased(4, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Api)
+  return target;
+}
+
+::size_t AttributeContext_Api::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Api)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string service = 1 [json_name = "service"];
+  if (!this->_internal_service().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_service());
+  }
+
+  // string operation = 2 [json_name = "operation"];
+  if (!this->_internal_operation().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_operation());
+  }
+
+  // string protocol = 3 [json_name = "protocol"];
+  if (!this->_internal_protocol().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_protocol());
+  }
+
+  // string version = 4 [json_name = "version"];
+  if (!this->_internal_version().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_version());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData AttributeContext_Api::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    AttributeContext_Api::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*AttributeContext_Api::GetClassData() const { return &_class_data_; }
+
+
+void AttributeContext_Api::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<AttributeContext_Api*>(&to_msg);
+  auto& from = static_cast<const AttributeContext_Api&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Api)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_service().empty()) {
+    _this->_internal_set_service(from._internal_service());
+  }
+  if (!from._internal_operation().empty()) {
+    _this->_internal_set_operation(from._internal_operation());
+  }
+  if (!from._internal_protocol().empty()) {
+    _this->_internal_set_protocol(from._internal_protocol());
+  }
+  if (!from._internal_version().empty()) {
+    _this->_internal_set_version(from._internal_version());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void AttributeContext_Api::CopyFrom(const AttributeContext_Api& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Api)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool AttributeContext_Api::IsInitialized() const {
+  return true;
+}
+
+void AttributeContext_Api::InternalSwap(AttributeContext_Api* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_, lhs_arena,
+                                       &other->_impl_.service_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_, lhs_arena,
+                                       &other->_impl_.operation_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protocol_, lhs_arena,
+                                       &other->_impl_.protocol_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
+                                       &other->_impl_.version_, rhs_arena);
+}
+
+::google::protobuf::Metadata AttributeContext_Api::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[2]);
+}
+// ===================================================================
+
+class AttributeContext_Auth::_Internal {
+ public:
+  using HasBits = decltype(std::declval<AttributeContext_Auth>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_._has_bits_);
+  static const ::google::protobuf::Struct& claims(const AttributeContext_Auth* msg);
+  static void set_has_claims(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+};
+
+const ::google::protobuf::Struct& AttributeContext_Auth::_Internal::claims(const AttributeContext_Auth* msg) {
+  return *msg->_impl_.claims_;
+}
+void AttributeContext_Auth::clear_claims() {
+  if (_impl_.claims_ != nullptr) _impl_.claims_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+AttributeContext_Auth::AttributeContext_Auth(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Auth)
+}
+AttributeContext_Auth::AttributeContext_Auth(const AttributeContext_Auth& from) : ::google::protobuf::Message() {
+  AttributeContext_Auth* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.audiences_){from._impl_.audiences_},
+      decltype(_impl_.access_levels_){from._impl_.access_levels_},
+      decltype(_impl_.principal_){},
+      decltype(_impl_.presenter_){},
+      decltype(_impl_.claims_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.principal_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.principal_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_principal().empty()) {
+    _this->_impl_.principal_.Set(from._internal_principal(), _this->GetArenaForAllocation());
+  }
+  _impl_.presenter_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.presenter_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_presenter().empty()) {
+    _this->_impl_.presenter_.Set(from._internal_presenter(), _this->GetArenaForAllocation());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.claims_ = new ::google::protobuf::Struct(*from._impl_.claims_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Auth)
+}
+inline void AttributeContext_Auth::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.audiences_){arena},
+      decltype(_impl_.access_levels_){arena},
+      decltype(_impl_.principal_){},
+      decltype(_impl_.presenter_){},
+      decltype(_impl_.claims_){nullptr},
+  };
+  _impl_.principal_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.principal_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.presenter_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.presenter_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+AttributeContext_Auth::~AttributeContext_Auth() {
+  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Auth)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void AttributeContext_Auth::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _internal_mutable_audiences()->~RepeatedPtrField();
+  _internal_mutable_access_levels()->~RepeatedPtrField();
+  _impl_.principal_.Destroy();
+  _impl_.presenter_.Destroy();
+  if (this != internal_default_instance()) delete _impl_.claims_;
+}
+void AttributeContext_Auth::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void AttributeContext_Auth::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Auth)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_audiences()->Clear();
+  _internal_mutable_access_levels()->Clear();
+  _impl_.principal_.ClearToEmpty();
+  _impl_.presenter_.ClearToEmpty();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    ABSL_DCHECK(_impl_.claims_ != nullptr);
+    _impl_.claims_->Clear();
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* AttributeContext_Auth::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<3, 5, 1, 89, 2> AttributeContext_Auth::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_._has_bits_),
+    0, // no _extensions_
+    5, 56,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967264,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    5,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_AttributeContext_Auth_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // string principal = 1 [json_name = "principal"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_.principal_)}},
+    // repeated string audiences = 2 [json_name = "audiences"];
+    {::_pbi::TcParser::FastUR1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_.audiences_)}},
+    // string presenter = 3 [json_name = "presenter"];
+    {::_pbi::TcParser::FastUS1,
+     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_.presenter_)}},
+    // .google.protobuf.Struct claims = 4 [json_name = "claims"];
+    {::_pbi::TcParser::FastMtS1,
+     {34, 0, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_.claims_)}},
+    // repeated string access_levels = 5 [json_name = "accessLevels"];
+    {::_pbi::TcParser::FastUR1,
+     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_.access_levels_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    {::_pbi::TcParser::MiniParse, {}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string principal = 1 [json_name = "principal"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_.principal_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // repeated string audiences = 2 [json_name = "audiences"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_.audiences_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
+    // string presenter = 3 [json_name = "presenter"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_.presenter_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // .google.protobuf.Struct claims = 4 [json_name = "claims"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_.claims_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // repeated string access_levels = 5 [json_name = "accessLevels"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Auth, _impl_.access_levels_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::protobuf::Struct>()},
+  }}, {{
+    "\50\11\11\11\0\15\0\0"
+    "google.rpc.context.AttributeContext.Auth"
+    "principal"
+    "audiences"
+    "presenter"
+    "access_levels"
+  }},
+};
+
+::uint8_t* AttributeContext_Auth::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Auth)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string principal = 1 [json_name = "principal"];
+  if (!this->_internal_principal().empty()) {
+    const std::string& _s = this->_internal_principal();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Auth.principal");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // repeated string audiences = 2 [json_name = "audiences"];
+  for (int i = 0, n = this->_internal_audiences_size(); i < n; ++i) {
+    const auto& s = this->_internal_audiences().Get(i);
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Auth.audiences");
+    target = stream->WriteString(2, s, target);
+  }
+
+  // string presenter = 3 [json_name = "presenter"];
+  if (!this->_internal_presenter().empty()) {
+    const std::string& _s = this->_internal_presenter();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Auth.presenter");
+    target = stream->WriteStringMaybeAliased(3, _s, target);
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.protobuf.Struct claims = 4 [json_name = "claims"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(4, _Internal::claims(this),
+        _Internal::claims(this).GetCachedSize(), target, stream);
+  }
+
+  // repeated string access_levels = 5 [json_name = "accessLevels"];
+  for (int i = 0, n = this->_internal_access_levels_size(); i < n; ++i) {
+    const auto& s = this->_internal_access_levels().Get(i);
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Auth.access_levels");
+    target = stream->WriteString(5, s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Auth)
+  return target;
+}
+
+::size_t AttributeContext_Auth::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Auth)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated string audiences = 2 [json_name = "audiences"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_audiences().size());
+  for (int i = 0, n = _internal_audiences().size(); i < n; ++i) {
+    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
+        _internal_audiences().Get(i));
+  }
+  // repeated string access_levels = 5 [json_name = "accessLevels"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_access_levels().size());
+  for (int i = 0, n = _internal_access_levels().size(); i < n; ++i) {
+    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
+        _internal_access_levels().Get(i));
+  }
+  // string principal = 1 [json_name = "principal"];
+  if (!this->_internal_principal().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_principal());
+  }
+
+  // string presenter = 3 [json_name = "presenter"];
+  if (!this->_internal_presenter().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_presenter());
+  }
+
+  // .google.protobuf.Struct claims = 4 [json_name = "claims"];
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    total_size += 1 +
+      ::google::protobuf::internal::WireFormatLite::MessageSize(
+        *_impl_.claims_);
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData AttributeContext_Auth::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    AttributeContext_Auth::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*AttributeContext_Auth::GetClassData() const { return &_class_data_; }
+
+
+void AttributeContext_Auth::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<AttributeContext_Auth*>(&to_msg);
+  auto& from = static_cast<const AttributeContext_Auth&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Auth)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_audiences()->MergeFrom(from._internal_audiences());
+  _this->_internal_mutable_access_levels()->MergeFrom(from._internal_access_levels());
+  if (!from._internal_principal().empty()) {
+    _this->_internal_set_principal(from._internal_principal());
+  }
+  if (!from._internal_presenter().empty()) {
+    _this->_internal_set_presenter(from._internal_presenter());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_internal_mutable_claims()->::google::protobuf::Struct::MergeFrom(
+        from._internal_claims());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void AttributeContext_Auth::CopyFrom(const AttributeContext_Auth& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Auth)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool AttributeContext_Auth::IsInitialized() const {
+  return true;
+}
+
+void AttributeContext_Auth::InternalSwap(AttributeContext_Auth* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  _impl_.audiences_.InternalSwap(&other->_impl_.audiences_);
+  _impl_.access_levels_.InternalSwap(&other->_impl_.access_levels_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.principal_, lhs_arena,
+                                       &other->_impl_.principal_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.presenter_, lhs_arena,
+                                       &other->_impl_.presenter_, rhs_arena);
+  swap(_impl_.claims_, other->_impl_.claims_);
+}
+
+::google::protobuf::Metadata AttributeContext_Auth::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[3]);
+}
+// ===================================================================
+
+AttributeContext_Request_HeadersEntry_DoNotUse::AttributeContext_Request_HeadersEntry_DoNotUse() {}
+AttributeContext_Request_HeadersEntry_DoNotUse::AttributeContext_Request_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void AttributeContext_Request_HeadersEntry_DoNotUse::MergeFrom(const AttributeContext_Request_HeadersEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata AttributeContext_Request_HeadersEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[4]);
+}
+// ===================================================================
+
+class AttributeContext_Request::_Internal {
+ public:
+  using HasBits = decltype(std::declval<AttributeContext_Request>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_._has_bits_);
+  static const ::google::protobuf::Timestamp& time(const AttributeContext_Request* msg);
+  static void set_has_time(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+  static const ::google::rpc::context::AttributeContext_Auth& auth(const AttributeContext_Request* msg);
+  static void set_has_auth(HasBits* has_bits) {
+    (*has_bits)[0] |= 2u;
+  }
+};
+
+const ::google::protobuf::Timestamp& AttributeContext_Request::_Internal::time(const AttributeContext_Request* msg) {
+  return *msg->_impl_.time_;
+}
+const ::google::rpc::context::AttributeContext_Auth& AttributeContext_Request::_Internal::auth(const AttributeContext_Request* msg) {
+  return *msg->_impl_.auth_;
+}
+void AttributeContext_Request::clear_time() {
+  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+AttributeContext_Request::AttributeContext_Request(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Request)
+}
+AttributeContext_Request::AttributeContext_Request(const AttributeContext_Request& from) : ::google::protobuf::Message() {
+  AttributeContext_Request* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.headers_) */ {},
+      decltype(_impl_.id_){},
+      decltype(_impl_.method_){},
+      decltype(_impl_.path_){},
+      decltype(_impl_.host_){},
+      decltype(_impl_.scheme_){},
+      decltype(_impl_.query_){},
+      decltype(_impl_.protocol_){},
+      decltype(_impl_.reason_){},
+      decltype(_impl_.time_){nullptr},
+      decltype(_impl_.auth_){nullptr},
+      decltype(_impl_.size_){},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
+  _impl_.id_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.id_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_id().empty()) {
+    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
+  }
+  _impl_.method_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.method_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_method().empty()) {
+    _this->_impl_.method_.Set(from._internal_method(), _this->GetArenaForAllocation());
+  }
+  _impl_.path_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.path_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_path().empty()) {
+    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
+  }
+  _impl_.host_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.host_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_host().empty()) {
+    _this->_impl_.host_.Set(from._internal_host(), _this->GetArenaForAllocation());
+  }
+  _impl_.scheme_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.scheme_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_scheme().empty()) {
+    _this->_impl_.scheme_.Set(from._internal_scheme(), _this->GetArenaForAllocation());
+  }
+  _impl_.query_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.query_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_query().empty()) {
+    _this->_impl_.query_.Set(from._internal_query(), _this->GetArenaForAllocation());
+  }
+  _impl_.protocol_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.protocol_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_protocol().empty()) {
+    _this->_impl_.protocol_.Set(from._internal_protocol(), _this->GetArenaForAllocation());
+  }
+  _impl_.reason_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.reason_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_reason().empty()) {
+    _this->_impl_.reason_.Set(from._internal_reason(), _this->GetArenaForAllocation());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.time_ = new ::google::protobuf::Timestamp(*from._impl_.time_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
+    _this->_impl_.auth_ = new ::google::rpc::context::AttributeContext_Auth(*from._impl_.auth_);
+  }
+  _this->_impl_.size_ = from._impl_.size_;
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Request)
+}
+inline void AttributeContext_Request::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.headers_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      decltype(_impl_.id_){},
+      decltype(_impl_.method_){},
+      decltype(_impl_.path_){},
+      decltype(_impl_.host_){},
+      decltype(_impl_.scheme_){},
+      decltype(_impl_.query_){},
+      decltype(_impl_.protocol_){},
+      decltype(_impl_.reason_){},
+      decltype(_impl_.time_){nullptr},
+      decltype(_impl_.auth_){nullptr},
+      decltype(_impl_.size_){::int64_t{0}},
+  };
+  _impl_.id_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.id_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.method_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.method_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.path_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.path_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.host_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.host_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.scheme_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.scheme_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.query_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.query_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.protocol_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.protocol_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.reason_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.reason_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+AttributeContext_Request::~AttributeContext_Request() {
+  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Request)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void AttributeContext_Request::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.headers_.~MapField();
+  _impl_.id_.Destroy();
+  _impl_.method_.Destroy();
+  _impl_.path_.Destroy();
+  _impl_.host_.Destroy();
+  _impl_.scheme_.Destroy();
+  _impl_.query_.Destroy();
+  _impl_.protocol_.Destroy();
+  _impl_.reason_.Destroy();
+  if (this != internal_default_instance()) delete _impl_.time_;
+  if (this != internal_default_instance()) delete _impl_.auth_;
+}
+void AttributeContext_Request::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void AttributeContext_Request::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Request)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.headers_.Clear();
+  _impl_.id_.ClearToEmpty();
+  _impl_.method_.ClearToEmpty();
+  _impl_.path_.ClearToEmpty();
+  _impl_.host_.ClearToEmpty();
+  _impl_.scheme_.ClearToEmpty();
+  _impl_.query_.ClearToEmpty();
+  _impl_.protocol_.ClearToEmpty();
+  _impl_.reason_.ClearToEmpty();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      ABSL_DCHECK(_impl_.time_ != nullptr);
+      _impl_.time_->Clear();
+    }
+    if (cached_has_bits & 0x00000002u) {
+      ABSL_DCHECK(_impl_.auth_ != nullptr);
+      _impl_.auth_->Clear();
+    }
+  }
+  _impl_.size_ = ::int64_t{0};
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* AttributeContext_Request::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<4, 12, 3, 108, 2> AttributeContext_Request::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_._has_bits_),
+    0, // no _extensions_
+    13, 120,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294959232,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    12,  // num_field_entries
+    3,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_AttributeContext_Request_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // string id = 1 [json_name = "id"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.id_)}},
+    // string method = 2 [json_name = "method"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.method_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    // string path = 4 [json_name = "path"];
+    {::_pbi::TcParser::FastUS1,
+     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.path_)}},
+    // string host = 5 [json_name = "host"];
+    {::_pbi::TcParser::FastUS1,
+     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.host_)}},
+    // string scheme = 6 [json_name = "scheme"];
+    {::_pbi::TcParser::FastUS1,
+     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.scheme_)}},
+    // string query = 7 [json_name = "query"];
+    {::_pbi::TcParser::FastUS1,
+     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.query_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    // .google.protobuf.Timestamp time = 9 [json_name = "time"];
+    {::_pbi::TcParser::FastMtS1,
+     {74, 0, 1, PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.time_)}},
+    // int64 size = 10 [json_name = "size"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AttributeContext_Request, _impl_.size_), 63>(),
+     {80, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.size_)}},
+    // string protocol = 11 [json_name = "protocol"];
+    {::_pbi::TcParser::FastUS1,
+     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.protocol_)}},
+    // string reason = 12 [json_name = "reason"];
+    {::_pbi::TcParser::FastUS1,
+     {98, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.reason_)}},
+    // .google.rpc.context.AttributeContext.Auth auth = 13 [json_name = "auth"];
+    {::_pbi::TcParser::FastMtS1,
+     {106, 1, 2, PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.auth_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    {::_pbi::TcParser::MiniParse, {}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string id = 1 [json_name = "id"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.id_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string method = 2 [json_name = "method"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.method_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // map<string, string> headers = 3 [json_name = "headers"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.headers_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // string path = 4 [json_name = "path"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.path_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string host = 5 [json_name = "host"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.host_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string scheme = 6 [json_name = "scheme"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.scheme_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string query = 7 [json_name = "query"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.query_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // .google.protobuf.Timestamp time = 9 [json_name = "time"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.time_), _Internal::kHasBitsOffset + 0, 1,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // int64 size = 10 [json_name = "size"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.size_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
+    // string protocol = 11 [json_name = "protocol"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.protocol_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string reason = 12 [json_name = "reason"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.reason_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // .google.rpc.context.AttributeContext.Auth auth = 13 [json_name = "auth"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.auth_), _Internal::kHasBitsOffset + 1, 2,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(AttributeContext_Request()._impl_.headers_)>(1, 0, 0)},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
+    {::_pbi::TcParser::GetTable<::google::rpc::context::AttributeContext_Auth>()},
+  }}, {{
+    "\53\2\6\7\4\4\6\5\0\0\10\6\0\0\0\0"
+    "google.rpc.context.AttributeContext.Request"
+    "id"
+    "method"
+    "headers"
+    "path"
+    "host"
+    "scheme"
+    "query"
+    "protocol"
+    "reason"
+  }},
+};
+
+::uint8_t* AttributeContext_Request::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Request)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string id = 1 [json_name = "id"];
+  if (!this->_internal_id().empty()) {
+    const std::string& _s = this->_internal_id();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.id");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string method = 2 [json_name = "method"];
+  if (!this->_internal_method().empty()) {
+    const std::string& _s = this->_internal_method();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.method");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  // map<string, string> headers = 3 [json_name = "headers"];
+  if (!_internal_headers().empty()) {
+    using MapType = ::google::protobuf::Map<std::string, std::string>;
+    using WireHelper = AttributeContext_Request_HeadersEntry_DoNotUse::Funcs;
+    const auto& field = _internal_headers();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            3, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.headers");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.headers");
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            3, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.headers");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.headers");
+      }
+    }
+  }
+
+  // string path = 4 [json_name = "path"];
+  if (!this->_internal_path().empty()) {
+    const std::string& _s = this->_internal_path();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.path");
+    target = stream->WriteStringMaybeAliased(4, _s, target);
+  }
+
+  // string host = 5 [json_name = "host"];
+  if (!this->_internal_host().empty()) {
+    const std::string& _s = this->_internal_host();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.host");
+    target = stream->WriteStringMaybeAliased(5, _s, target);
+  }
+
+  // string scheme = 6 [json_name = "scheme"];
+  if (!this->_internal_scheme().empty()) {
+    const std::string& _s = this->_internal_scheme();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.scheme");
+    target = stream->WriteStringMaybeAliased(6, _s, target);
+  }
+
+  // string query = 7 [json_name = "query"];
+  if (!this->_internal_query().empty()) {
+    const std::string& _s = this->_internal_query();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.query");
+    target = stream->WriteStringMaybeAliased(7, _s, target);
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.protobuf.Timestamp time = 9 [json_name = "time"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(9, _Internal::time(this),
+        _Internal::time(this).GetCachedSize(), target, stream);
+  }
+
+  // int64 size = 10 [json_name = "size"];
+  if (this->_internal_size() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt64ToArrayWithField<10>(
+            stream, this->_internal_size(), target);
+  }
+
+  // string protocol = 11 [json_name = "protocol"];
+  if (!this->_internal_protocol().empty()) {
+    const std::string& _s = this->_internal_protocol();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.protocol");
+    target = stream->WriteStringMaybeAliased(11, _s, target);
+  }
+
+  // string reason = 12 [json_name = "reason"];
+  if (!this->_internal_reason().empty()) {
+    const std::string& _s = this->_internal_reason();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Request.reason");
+    target = stream->WriteStringMaybeAliased(12, _s, target);
+  }
+
+  // .google.rpc.context.AttributeContext.Auth auth = 13 [json_name = "auth"];
+  if (cached_has_bits & 0x00000002u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(13, _Internal::auth(this),
+        _Internal::auth(this).GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Request)
+  return target;
+}
+
+::size_t AttributeContext_Request::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Request)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // map<string, string> headers = 3 [json_name = "headers"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_headers_size());
+  for (const auto& entry : _internal_headers()) {
+    total_size += AttributeContext_Request_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // string id = 1 [json_name = "id"];
+  if (!this->_internal_id().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_id());
+  }
+
+  // string method = 2 [json_name = "method"];
+  if (!this->_internal_method().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_method());
+  }
+
+  // string path = 4 [json_name = "path"];
+  if (!this->_internal_path().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_path());
+  }
+
+  // string host = 5 [json_name = "host"];
+  if (!this->_internal_host().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_host());
+  }
+
+  // string scheme = 6 [json_name = "scheme"];
+  if (!this->_internal_scheme().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_scheme());
+  }
+
+  // string query = 7 [json_name = "query"];
+  if (!this->_internal_query().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_query());
+  }
+
+  // string protocol = 11 [json_name = "protocol"];
+  if (!this->_internal_protocol().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_protocol());
+  }
+
+  // string reason = 12 [json_name = "reason"];
+  if (!this->_internal_reason().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_reason());
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    // .google.protobuf.Timestamp time = 9 [json_name = "time"];
+    if (cached_has_bits & 0x00000001u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.time_);
+    }
+
+    // .google.rpc.context.AttributeContext.Auth auth = 13 [json_name = "auth"];
+    if (cached_has_bits & 0x00000002u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.auth_);
+    }
+
+  }
+  // int64 size = 10 [json_name = "size"];
+  if (this->_internal_size() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+        this->_internal_size());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData AttributeContext_Request::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    AttributeContext_Request::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*AttributeContext_Request::GetClassData() const { return &_class_data_; }
+
+
+void AttributeContext_Request::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<AttributeContext_Request*>(&to_msg);
+  auto& from = static_cast<const AttributeContext_Request&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Request)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
+  if (!from._internal_id().empty()) {
+    _this->_internal_set_id(from._internal_id());
+  }
+  if (!from._internal_method().empty()) {
+    _this->_internal_set_method(from._internal_method());
+  }
+  if (!from._internal_path().empty()) {
+    _this->_internal_set_path(from._internal_path());
+  }
+  if (!from._internal_host().empty()) {
+    _this->_internal_set_host(from._internal_host());
+  }
+  if (!from._internal_scheme().empty()) {
+    _this->_internal_set_scheme(from._internal_scheme());
+  }
+  if (!from._internal_query().empty()) {
+    _this->_internal_set_query(from._internal_query());
+  }
+  if (!from._internal_protocol().empty()) {
+    _this->_internal_set_protocol(from._internal_protocol());
+  }
+  if (!from._internal_reason().empty()) {
+    _this->_internal_set_reason(from._internal_reason());
+  }
+  cached_has_bits = from._impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      _this->_internal_mutable_time()->::google::protobuf::Timestamp::MergeFrom(
+          from._internal_time());
+    }
+    if (cached_has_bits & 0x00000002u) {
+      _this->_internal_mutable_auth()->::google::rpc::context::AttributeContext_Auth::MergeFrom(
+          from._internal_auth());
+    }
+  }
+  if (from._internal_size() != 0) {
+    _this->_internal_set_size(from._internal_size());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void AttributeContext_Request::CopyFrom(const AttributeContext_Request& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Request)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool AttributeContext_Request::IsInitialized() const {
+  return true;
+}
+
+void AttributeContext_Request::InternalSwap(AttributeContext_Request* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
+                                       &other->_impl_.id_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, lhs_arena,
+                                       &other->_impl_.method_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
+                                       &other->_impl_.path_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.host_, lhs_arena,
+                                       &other->_impl_.host_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.scheme_, lhs_arena,
+                                       &other->_impl_.scheme_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.query_, lhs_arena,
+                                       &other->_impl_.query_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protocol_, lhs_arena,
+                                       &other->_impl_.protocol_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, lhs_arena,
+                                       &other->_impl_.reason_, rhs_arena);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.size_)
+      + sizeof(AttributeContext_Request::_impl_.size_)
+      - PROTOBUF_FIELD_OFFSET(AttributeContext_Request, _impl_.time_)>(
+          reinterpret_cast<char*>(&_impl_.time_),
+          reinterpret_cast<char*>(&other->_impl_.time_));
+}
+
+::google::protobuf::Metadata AttributeContext_Request::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[5]);
+}
+// ===================================================================
+
+AttributeContext_Response_HeadersEntry_DoNotUse::AttributeContext_Response_HeadersEntry_DoNotUse() {}
+AttributeContext_Response_HeadersEntry_DoNotUse::AttributeContext_Response_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void AttributeContext_Response_HeadersEntry_DoNotUse::MergeFrom(const AttributeContext_Response_HeadersEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata AttributeContext_Response_HeadersEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[6]);
+}
+// ===================================================================
+
+class AttributeContext_Response::_Internal {
+ public:
+  using HasBits = decltype(std::declval<AttributeContext_Response>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_._has_bits_);
+  static const ::google::protobuf::Timestamp& time(const AttributeContext_Response* msg);
+  static void set_has_time(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+  static const ::google::protobuf::Duration& backend_latency(const AttributeContext_Response* msg);
+  static void set_has_backend_latency(HasBits* has_bits) {
+    (*has_bits)[0] |= 2u;
+  }
+};
+
+const ::google::protobuf::Timestamp& AttributeContext_Response::_Internal::time(const AttributeContext_Response* msg) {
+  return *msg->_impl_.time_;
+}
+const ::google::protobuf::Duration& AttributeContext_Response::_Internal::backend_latency(const AttributeContext_Response* msg) {
+  return *msg->_impl_.backend_latency_;
+}
+void AttributeContext_Response::clear_time() {
+  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+void AttributeContext_Response::clear_backend_latency() {
+  if (_impl_.backend_latency_ != nullptr) _impl_.backend_latency_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000002u;
+}
+AttributeContext_Response::AttributeContext_Response(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Response)
+}
+AttributeContext_Response::AttributeContext_Response(const AttributeContext_Response& from) : ::google::protobuf::Message() {
+  AttributeContext_Response* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.headers_) */ {},
+      decltype(_impl_.time_){nullptr},
+      decltype(_impl_.backend_latency_){nullptr},
+      decltype(_impl_.code_){},
+      decltype(_impl_.size_){},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.time_ = new ::google::protobuf::Timestamp(*from._impl_.time_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
+    _this->_impl_.backend_latency_ = new ::google::protobuf::Duration(*from._impl_.backend_latency_);
+  }
+  ::memcpy(&_impl_.code_, &from._impl_.code_,
+    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.size_) -
+    reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.size_));
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Response)
+}
+inline void AttributeContext_Response::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.headers_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      decltype(_impl_.time_){nullptr},
+      decltype(_impl_.backend_latency_){nullptr},
+      decltype(_impl_.code_){::int64_t{0}},
+      decltype(_impl_.size_){::int64_t{0}},
+  };
+}
+AttributeContext_Response::~AttributeContext_Response() {
+  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Response)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void AttributeContext_Response::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.headers_.~MapField();
+  if (this != internal_default_instance()) delete _impl_.time_;
+  if (this != internal_default_instance()) delete _impl_.backend_latency_;
+}
+void AttributeContext_Response::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void AttributeContext_Response::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Response)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.headers_.Clear();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      ABSL_DCHECK(_impl_.time_ != nullptr);
+      _impl_.time_->Clear();
+    }
+    if (cached_has_bits & 0x00000002u) {
+      ABSL_DCHECK(_impl_.backend_latency_ != nullptr);
+      _impl_.backend_latency_->Clear();
+    }
+  }
+  ::memset(&_impl_.code_, 0, static_cast<::size_t>(
+      reinterpret_cast<char*>(&_impl_.size_) -
+      reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.size_));
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* AttributeContext_Response::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<3, 5, 3, 60, 2> AttributeContext_Response::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_._has_bits_),
+    0, // no _extensions_
+    5, 56,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967264,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    5,  // num_field_entries
+    3,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_AttributeContext_Response_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // int64 code = 1 [json_name = "code"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AttributeContext_Response, _impl_.code_), 63>(),
+     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_.code_)}},
+    // int64 size = 2 [json_name = "size"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AttributeContext_Response, _impl_.size_), 63>(),
+     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_.size_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    // .google.protobuf.Timestamp time = 4 [json_name = "time"];
+    {::_pbi::TcParser::FastMtS1,
+     {34, 0, 1, PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_.time_)}},
+    // .google.protobuf.Duration backend_latency = 5 [json_name = "backendLatency"];
+    {::_pbi::TcParser::FastMtS1,
+     {42, 1, 2, PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_.backend_latency_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    {::_pbi::TcParser::MiniParse, {}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // int64 code = 1 [json_name = "code"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_.code_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
+    // int64 size = 2 [json_name = "size"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_.size_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
+    // map<string, string> headers = 3 [json_name = "headers"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_.headers_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // .google.protobuf.Timestamp time = 4 [json_name = "time"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_.time_), _Internal::kHasBitsOffset + 0, 1,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Duration backend_latency = 5 [json_name = "backendLatency"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_.backend_latency_), _Internal::kHasBitsOffset + 1, 2,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(AttributeContext_Response()._impl_.headers_)>(1, 0, 0)},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
+  }}, {{
+    "\54\0\0\7\0\0\0\0"
+    "google.rpc.context.AttributeContext.Response"
+    "headers"
+  }},
+};
+
+::uint8_t* AttributeContext_Response::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Response)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // int64 code = 1 [json_name = "code"];
+  if (this->_internal_code() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt64ToArrayWithField<1>(
+            stream, this->_internal_code(), target);
+  }
+
+  // int64 size = 2 [json_name = "size"];
+  if (this->_internal_size() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt64ToArrayWithField<2>(
+            stream, this->_internal_size(), target);
+  }
+
+  // map<string, string> headers = 3 [json_name = "headers"];
+  if (!_internal_headers().empty()) {
+    using MapType = ::google::protobuf::Map<std::string, std::string>;
+    using WireHelper = AttributeContext_Response_HeadersEntry_DoNotUse::Funcs;
+    const auto& field = _internal_headers();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            3, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Response.headers");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Response.headers");
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            3, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Response.headers");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Response.headers");
+      }
+    }
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.protobuf.Timestamp time = 4 [json_name = "time"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(4, _Internal::time(this),
+        _Internal::time(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.Duration backend_latency = 5 [json_name = "backendLatency"];
+  if (cached_has_bits & 0x00000002u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(5, _Internal::backend_latency(this),
+        _Internal::backend_latency(this).GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Response)
+  return target;
+}
+
+::size_t AttributeContext_Response::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Response)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // map<string, string> headers = 3 [json_name = "headers"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_headers_size());
+  for (const auto& entry : _internal_headers()) {
+    total_size += AttributeContext_Response_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    // .google.protobuf.Timestamp time = 4 [json_name = "time"];
+    if (cached_has_bits & 0x00000001u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.time_);
+    }
+
+    // .google.protobuf.Duration backend_latency = 5 [json_name = "backendLatency"];
+    if (cached_has_bits & 0x00000002u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.backend_latency_);
+    }
+
+  }
+  // int64 code = 1 [json_name = "code"];
+  if (this->_internal_code() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+        this->_internal_code());
+  }
+
+  // int64 size = 2 [json_name = "size"];
+  if (this->_internal_size() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
+        this->_internal_size());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData AttributeContext_Response::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    AttributeContext_Response::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*AttributeContext_Response::GetClassData() const { return &_class_data_; }
+
+
+void AttributeContext_Response::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<AttributeContext_Response*>(&to_msg);
+  auto& from = static_cast<const AttributeContext_Response&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Response)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
+  cached_has_bits = from._impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000003u) {
+    if (cached_has_bits & 0x00000001u) {
+      _this->_internal_mutable_time()->::google::protobuf::Timestamp::MergeFrom(
+          from._internal_time());
+    }
+    if (cached_has_bits & 0x00000002u) {
+      _this->_internal_mutable_backend_latency()->::google::protobuf::Duration::MergeFrom(
+          from._internal_backend_latency());
+    }
+  }
+  if (from._internal_code() != 0) {
+    _this->_internal_set_code(from._internal_code());
+  }
+  if (from._internal_size() != 0) {
+    _this->_internal_set_size(from._internal_size());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void AttributeContext_Response::CopyFrom(const AttributeContext_Response& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Response)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool AttributeContext_Response::IsInitialized() const {
+  return true;
+}
+
+void AttributeContext_Response::InternalSwap(AttributeContext_Response* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_.size_)
+      + sizeof(AttributeContext_Response::_impl_.size_)
+      - PROTOBUF_FIELD_OFFSET(AttributeContext_Response, _impl_.time_)>(
+          reinterpret_cast<char*>(&_impl_.time_),
+          reinterpret_cast<char*>(&other->_impl_.time_));
+}
+
+::google::protobuf::Metadata AttributeContext_Response::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[7]);
+}
+// ===================================================================
+
+AttributeContext_Resource_LabelsEntry_DoNotUse::AttributeContext_Resource_LabelsEntry_DoNotUse() {}
+AttributeContext_Resource_LabelsEntry_DoNotUse::AttributeContext_Resource_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void AttributeContext_Resource_LabelsEntry_DoNotUse::MergeFrom(const AttributeContext_Resource_LabelsEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata AttributeContext_Resource_LabelsEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[8]);
+}
+// ===================================================================
+
+AttributeContext_Resource_AnnotationsEntry_DoNotUse::AttributeContext_Resource_AnnotationsEntry_DoNotUse() {}
+AttributeContext_Resource_AnnotationsEntry_DoNotUse::AttributeContext_Resource_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void AttributeContext_Resource_AnnotationsEntry_DoNotUse::MergeFrom(const AttributeContext_Resource_AnnotationsEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata AttributeContext_Resource_AnnotationsEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[9]);
+}
+// ===================================================================
+
+class AttributeContext_Resource::_Internal {
+ public:
+  using HasBits = decltype(std::declval<AttributeContext_Resource>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_._has_bits_);
+  static const ::google::protobuf::Timestamp& create_time(const AttributeContext_Resource* msg);
+  static void set_has_create_time(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+  static const ::google::protobuf::Timestamp& update_time(const AttributeContext_Resource* msg);
+  static void set_has_update_time(HasBits* has_bits) {
+    (*has_bits)[0] |= 2u;
+  }
+  static const ::google::protobuf::Timestamp& delete_time(const AttributeContext_Resource* msg);
+  static void set_has_delete_time(HasBits* has_bits) {
+    (*has_bits)[0] |= 4u;
+  }
+};
+
+const ::google::protobuf::Timestamp& AttributeContext_Resource::_Internal::create_time(const AttributeContext_Resource* msg) {
+  return *msg->_impl_.create_time_;
+}
+const ::google::protobuf::Timestamp& AttributeContext_Resource::_Internal::update_time(const AttributeContext_Resource* msg) {
+  return *msg->_impl_.update_time_;
+}
+const ::google::protobuf::Timestamp& AttributeContext_Resource::_Internal::delete_time(const AttributeContext_Resource* msg) {
+  return *msg->_impl_.delete_time_;
+}
+void AttributeContext_Resource::clear_create_time() {
+  if (_impl_.create_time_ != nullptr) _impl_.create_time_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+void AttributeContext_Resource::clear_update_time() {
+  if (_impl_.update_time_ != nullptr) _impl_.update_time_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000002u;
+}
+void AttributeContext_Resource::clear_delete_time() {
+  if (_impl_.delete_time_ != nullptr) _impl_.delete_time_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000004u;
+}
+AttributeContext_Resource::AttributeContext_Resource(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Resource)
+}
+AttributeContext_Resource::AttributeContext_Resource(const AttributeContext_Resource& from) : ::google::protobuf::Message() {
+  AttributeContext_Resource* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.labels_) */ {},
+      /* decltype(_impl_.annotations_) */ {},
+      decltype(_impl_.service_){},
+      decltype(_impl_.name_){},
+      decltype(_impl_.type_){},
+      decltype(_impl_.uid_){},
+      decltype(_impl_.display_name_){},
+      decltype(_impl_.etag_){},
+      decltype(_impl_.location_){},
+      decltype(_impl_.create_time_){nullptr},
+      decltype(_impl_.update_time_){nullptr},
+      decltype(_impl_.delete_time_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
+  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
+  _impl_.service_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.service_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_service().empty()) {
+    _this->_impl_.service_.Set(from._internal_service(), _this->GetArenaForAllocation());
+  }
+  _impl_.name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_name().empty()) {
+    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
+  }
+  _impl_.type_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.type_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_type().empty()) {
+    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
+  }
+  _impl_.uid_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.uid_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_uid().empty()) {
+    _this->_impl_.uid_.Set(from._internal_uid(), _this->GetArenaForAllocation());
+  }
+  _impl_.display_name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.display_name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_display_name().empty()) {
+    _this->_impl_.display_name_.Set(from._internal_display_name(), _this->GetArenaForAllocation());
+  }
+  _impl_.etag_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.etag_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_etag().empty()) {
+    _this->_impl_.etag_.Set(from._internal_etag(), _this->GetArenaForAllocation());
+  }
+  _impl_.location_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.location_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_location().empty()) {
+    _this->_impl_.location_.Set(from._internal_location(), _this->GetArenaForAllocation());
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.create_time_ = new ::google::protobuf::Timestamp(*from._impl_.create_time_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
+    _this->_impl_.update_time_ = new ::google::protobuf::Timestamp(*from._impl_.update_time_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
+    _this->_impl_.delete_time_ = new ::google::protobuf::Timestamp(*from._impl_.delete_time_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Resource)
+}
+inline void AttributeContext_Resource::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /* decltype(_impl_.labels_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      /* decltype(_impl_.annotations_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      decltype(_impl_.service_){},
+      decltype(_impl_.name_){},
+      decltype(_impl_.type_){},
+      decltype(_impl_.uid_){},
+      decltype(_impl_.display_name_){},
+      decltype(_impl_.etag_){},
+      decltype(_impl_.location_){},
+      decltype(_impl_.create_time_){nullptr},
+      decltype(_impl_.update_time_){nullptr},
+      decltype(_impl_.delete_time_){nullptr},
+  };
+  _impl_.service_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.service_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.type_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.type_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.uid_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.uid_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.display_name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.display_name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.etag_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.etag_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.location_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.location_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+AttributeContext_Resource::~AttributeContext_Resource() {
+  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Resource)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void AttributeContext_Resource::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.labels_.~MapField();
+  _impl_.annotations_.~MapField();
+  _impl_.service_.Destroy();
+  _impl_.name_.Destroy();
+  _impl_.type_.Destroy();
+  _impl_.uid_.Destroy();
+  _impl_.display_name_.Destroy();
+  _impl_.etag_.Destroy();
+  _impl_.location_.Destroy();
+  if (this != internal_default_instance()) delete _impl_.create_time_;
+  if (this != internal_default_instance()) delete _impl_.update_time_;
+  if (this != internal_default_instance()) delete _impl_.delete_time_;
+}
+void AttributeContext_Resource::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void AttributeContext_Resource::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Resource)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.labels_.Clear();
+  _impl_.annotations_.Clear();
+  _impl_.service_.ClearToEmpty();
+  _impl_.name_.ClearToEmpty();
+  _impl_.type_.ClearToEmpty();
+  _impl_.uid_.ClearToEmpty();
+  _impl_.display_name_.ClearToEmpty();
+  _impl_.etag_.ClearToEmpty();
+  _impl_.location_.ClearToEmpty();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000007u) {
+    if (cached_has_bits & 0x00000001u) {
+      ABSL_DCHECK(_impl_.create_time_ != nullptr);
+      _impl_.create_time_->Clear();
+    }
+    if (cached_has_bits & 0x00000002u) {
+      ABSL_DCHECK(_impl_.update_time_ != nullptr);
+      _impl_.update_time_->Clear();
+    }
+    if (cached_has_bits & 0x00000004u) {
+      ABSL_DCHECK(_impl_.delete_time_ != nullptr);
+      _impl_.delete_time_->Clear();
+    }
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* AttributeContext_Resource::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<4, 12, 5, 120, 2> AttributeContext_Resource::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_._has_bits_),
+    0, // no _extensions_
+    12, 120,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294963200,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    12,  // num_field_entries
+    5,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_AttributeContext_Resource_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // string service = 1 [json_name = "service"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.service_)}},
+    // string name = 2 [json_name = "name"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.name_)}},
+    // string type = 3 [json_name = "type"];
+    {::_pbi::TcParser::FastUS1,
+     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.type_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    // string uid = 5 [json_name = "uid"];
+    {::_pbi::TcParser::FastUS1,
+     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.uid_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    // string display_name = 7 [json_name = "displayName"];
+    {::_pbi::TcParser::FastUS1,
+     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.display_name_)}},
+    // .google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];
+    {::_pbi::TcParser::FastMtS1,
+     {66, 0, 2, PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.create_time_)}},
+    // .google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];
+    {::_pbi::TcParser::FastMtS1,
+     {74, 1, 3, PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.update_time_)}},
+    // .google.protobuf.Timestamp delete_time = 10 [json_name = "deleteTime"];
+    {::_pbi::TcParser::FastMtS1,
+     {82, 2, 4, PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.delete_time_)}},
+    // string etag = 11 [json_name = "etag"];
+    {::_pbi::TcParser::FastUS1,
+     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.etag_)}},
+    // string location = 12 [json_name = "location"];
+    {::_pbi::TcParser::FastUS1,
+     {98, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.location_)}},
+    {::_pbi::TcParser::MiniParse, {}},
+    {::_pbi::TcParser::MiniParse, {}},
+    {::_pbi::TcParser::MiniParse, {}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string service = 1 [json_name = "service"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.service_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string name = 2 [json_name = "name"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.name_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string type = 3 [json_name = "type"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.type_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // map<string, string> labels = 4 [json_name = "labels"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.labels_), -1, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // string uid = 5 [json_name = "uid"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.uid_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // map<string, string> annotations = 6 [json_name = "annotations"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.annotations_), -1, 1,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+    // string display_name = 7 [json_name = "displayName"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.display_name_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // .google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.create_time_), _Internal::kHasBitsOffset + 0, 2,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.update_time_), _Internal::kHasBitsOffset + 1, 3,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.protobuf.Timestamp delete_time = 10 [json_name = "deleteTime"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.delete_time_), _Internal::kHasBitsOffset + 2, 4,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // string etag = 11 [json_name = "etag"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.etag_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string location = 12 [json_name = "location"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.location_), -1, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }}, {{
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(AttributeContext_Resource()._impl_.labels_)>(1, 0, 0)},
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(AttributeContext_Resource()._impl_.annotations_)>(1, 0, 0)},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
+  }}, {{
+    "\54\7\4\4\6\3\13\14\0\0\0\4\10\0\0\0"
+    "google.rpc.context.AttributeContext.Resource"
+    "service"
+    "name"
+    "type"
+    "labels"
+    "uid"
+    "annotations"
+    "display_name"
+    "etag"
+    "location"
+  }},
+};
+
+::uint8_t* AttributeContext_Resource::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Resource)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string service = 1 [json_name = "service"];
+  if (!this->_internal_service().empty()) {
+    const std::string& _s = this->_internal_service();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.service");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string name = 2 [json_name = "name"];
+  if (!this->_internal_name().empty()) {
+    const std::string& _s = this->_internal_name();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.name");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  // string type = 3 [json_name = "type"];
+  if (!this->_internal_type().empty()) {
+    const std::string& _s = this->_internal_type();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.type");
+    target = stream->WriteStringMaybeAliased(3, _s, target);
+  }
+
+  // map<string, string> labels = 4 [json_name = "labels"];
+  if (!_internal_labels().empty()) {
+    using MapType = ::google::protobuf::Map<std::string, std::string>;
+    using WireHelper = AttributeContext_Resource_LabelsEntry_DoNotUse::Funcs;
+    const auto& field = _internal_labels();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            4, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.labels");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.labels");
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            4, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.labels");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.labels");
+      }
+    }
+  }
+
+  // string uid = 5 [json_name = "uid"];
+  if (!this->_internal_uid().empty()) {
+    const std::string& _s = this->_internal_uid();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.uid");
+    target = stream->WriteStringMaybeAliased(5, _s, target);
+  }
+
+  // map<string, string> annotations = 6 [json_name = "annotations"];
+  if (!_internal_annotations().empty()) {
+    using MapType = ::google::protobuf::Map<std::string, std::string>;
+    using WireHelper = AttributeContext_Resource_AnnotationsEntry_DoNotUse::Funcs;
+    const auto& field = _internal_annotations();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            6, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.annotations");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.annotations");
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            6, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.annotations");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.annotations");
+      }
+    }
+  }
+
+  // string display_name = 7 [json_name = "displayName"];
+  if (!this->_internal_display_name().empty()) {
+    const std::string& _s = this->_internal_display_name();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.display_name");
+    target = stream->WriteStringMaybeAliased(7, _s, target);
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(8, _Internal::create_time(this),
+        _Internal::create_time(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];
+  if (cached_has_bits & 0x00000002u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(9, _Internal::update_time(this),
+        _Internal::update_time(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.protobuf.Timestamp delete_time = 10 [json_name = "deleteTime"];
+  if (cached_has_bits & 0x00000004u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(10, _Internal::delete_time(this),
+        _Internal::delete_time(this).GetCachedSize(), target, stream);
+  }
+
+  // string etag = 11 [json_name = "etag"];
+  if (!this->_internal_etag().empty()) {
+    const std::string& _s = this->_internal_etag();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.etag");
+    target = stream->WriteStringMaybeAliased(11, _s, target);
+  }
+
+  // string location = 12 [json_name = "location"];
+  if (!this->_internal_location().empty()) {
+    const std::string& _s = this->_internal_location();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.context.AttributeContext.Resource.location");
+    target = stream->WriteStringMaybeAliased(12, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Resource)
+  return target;
+}
+
+::size_t AttributeContext_Resource::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Resource)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // map<string, string> labels = 4 [json_name = "labels"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_labels_size());
+  for (const auto& entry : _internal_labels()) {
+    total_size += AttributeContext_Resource_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // map<string, string> annotations = 6 [json_name = "annotations"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_annotations_size());
+  for (const auto& entry : _internal_annotations()) {
+    total_size += AttributeContext_Resource_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // string service = 1 [json_name = "service"];
+  if (!this->_internal_service().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_service());
+  }
+
+  // string name = 2 [json_name = "name"];
+  if (!this->_internal_name().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_name());
+  }
+
+  // string type = 3 [json_name = "type"];
+  if (!this->_internal_type().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_type());
+  }
+
+  // string uid = 5 [json_name = "uid"];
+  if (!this->_internal_uid().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_uid());
+  }
+
+  // string display_name = 7 [json_name = "displayName"];
+  if (!this->_internal_display_name().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_display_name());
+  }
+
+  // string etag = 11 [json_name = "etag"];
+  if (!this->_internal_etag().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_etag());
+  }
+
+  // string location = 12 [json_name = "location"];
+  if (!this->_internal_location().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_location());
+  }
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000007u) {
+    // .google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];
+    if (cached_has_bits & 0x00000001u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.create_time_);
+    }
+
+    // .google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];
+    if (cached_has_bits & 0x00000002u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.update_time_);
+    }
+
+    // .google.protobuf.Timestamp delete_time = 10 [json_name = "deleteTime"];
+    if (cached_has_bits & 0x00000004u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.delete_time_);
+    }
+
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData AttributeContext_Resource::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    AttributeContext_Resource::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*AttributeContext_Resource::GetClassData() const { return &_class_data_; }
+
+
+void AttributeContext_Resource::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<AttributeContext_Resource*>(&to_msg);
+  auto& from = static_cast<const AttributeContext_Resource&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Resource)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
+  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
+  if (!from._internal_service().empty()) {
+    _this->_internal_set_service(from._internal_service());
+  }
+  if (!from._internal_name().empty()) {
+    _this->_internal_set_name(from._internal_name());
+  }
+  if (!from._internal_type().empty()) {
+    _this->_internal_set_type(from._internal_type());
+  }
+  if (!from._internal_uid().empty()) {
+    _this->_internal_set_uid(from._internal_uid());
+  }
+  if (!from._internal_display_name().empty()) {
+    _this->_internal_set_display_name(from._internal_display_name());
+  }
+  if (!from._internal_etag().empty()) {
+    _this->_internal_set_etag(from._internal_etag());
+  }
+  if (!from._internal_location().empty()) {
+    _this->_internal_set_location(from._internal_location());
+  }
+  cached_has_bits = from._impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000007u) {
+    if (cached_has_bits & 0x00000001u) {
+      _this->_internal_mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(
+          from._internal_create_time());
+    }
+    if (cached_has_bits & 0x00000002u) {
+      _this->_internal_mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(
+          from._internal_update_time());
+    }
+    if (cached_has_bits & 0x00000004u) {
+      _this->_internal_mutable_delete_time()->::google::protobuf::Timestamp::MergeFrom(
+          from._internal_delete_time());
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void AttributeContext_Resource::CopyFrom(const AttributeContext_Resource& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Resource)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool AttributeContext_Resource::IsInitialized() const {
+  return true;
+}
+
+void AttributeContext_Resource::InternalSwap(AttributeContext_Resource* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
+  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_, lhs_arena,
+                                       &other->_impl_.service_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
+                                       &other->_impl_.name_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
+                                       &other->_impl_.type_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, lhs_arena,
+                                       &other->_impl_.uid_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_name_, lhs_arena,
+                                       &other->_impl_.display_name_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.etag_, lhs_arena,
+                                       &other->_impl_.etag_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.location_, lhs_arena,
+                                       &other->_impl_.location_, rhs_arena);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.delete_time_)
+      + sizeof(AttributeContext_Resource::_impl_.delete_time_)
+      - PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, _impl_.create_time_)>(
+          reinterpret_cast<char*>(&_impl_.create_time_),
+          reinterpret_cast<char*>(&other->_impl_.create_time_));
+}
+
+::google::protobuf::Metadata AttributeContext_Resource::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[10]);
+}
+// ===================================================================
+
+class AttributeContext::_Internal {
+ public:
+  using HasBits = decltype(std::declval<AttributeContext>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_._has_bits_);
+  static const ::google::rpc::context::AttributeContext_Peer& origin(const AttributeContext* msg);
+  static void set_has_origin(HasBits* has_bits) {
+    (*has_bits)[0] |= 64u;
+  }
+  static const ::google::rpc::context::AttributeContext_Peer& source(const AttributeContext* msg);
+  static void set_has_source(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+  static const ::google::rpc::context::AttributeContext_Peer& destination(const AttributeContext* msg);
+  static void set_has_destination(HasBits* has_bits) {
+    (*has_bits)[0] |= 2u;
+  }
+  static const ::google::rpc::context::AttributeContext_Request& request(const AttributeContext* msg);
+  static void set_has_request(HasBits* has_bits) {
+    (*has_bits)[0] |= 4u;
+  }
+  static const ::google::rpc::context::AttributeContext_Response& response(const AttributeContext* msg);
+  static void set_has_response(HasBits* has_bits) {
+    (*has_bits)[0] |= 8u;
+  }
+  static const ::google::rpc::context::AttributeContext_Resource& resource(const AttributeContext* msg);
+  static void set_has_resource(HasBits* has_bits) {
+    (*has_bits)[0] |= 16u;
+  }
+  static const ::google::rpc::context::AttributeContext_Api& api(const AttributeContext* msg);
+  static void set_has_api(HasBits* has_bits) {
+    (*has_bits)[0] |= 32u;
+  }
+};
+
+const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_Internal::origin(const AttributeContext* msg) {
+  return *msg->_impl_.origin_;
+}
+const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_Internal::source(const AttributeContext* msg) {
+  return *msg->_impl_.source_;
+}
+const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_Internal::destination(const AttributeContext* msg) {
+  return *msg->_impl_.destination_;
+}
+const ::google::rpc::context::AttributeContext_Request& AttributeContext::_Internal::request(const AttributeContext* msg) {
+  return *msg->_impl_.request_;
+}
+const ::google::rpc::context::AttributeContext_Response& AttributeContext::_Internal::response(const AttributeContext* msg) {
+  return *msg->_impl_.response_;
+}
+const ::google::rpc::context::AttributeContext_Resource& AttributeContext::_Internal::resource(const AttributeContext* msg) {
+  return *msg->_impl_.resource_;
+}
+const ::google::rpc::context::AttributeContext_Api& AttributeContext::_Internal::api(const AttributeContext* msg) {
+  return *msg->_impl_.api_;
+}
+void AttributeContext::clear_extensions() {
+  _internal_mutable_extensions()->Clear();
+}
+AttributeContext::AttributeContext(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext)
+}
+AttributeContext::AttributeContext(const AttributeContext& from) : ::google::protobuf::Message() {
+  AttributeContext* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.extensions_){from._impl_.extensions_},
+      decltype(_impl_.source_){nullptr},
+      decltype(_impl_.destination_){nullptr},
+      decltype(_impl_.request_){nullptr},
+      decltype(_impl_.response_){nullptr},
+      decltype(_impl_.resource_){nullptr},
+      decltype(_impl_.api_){nullptr},
+      decltype(_impl_.origin_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.source_ = new ::google::rpc::context::AttributeContext_Peer(*from._impl_.source_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
+    _this->_impl_.destination_ = new ::google::rpc::context::AttributeContext_Peer(*from._impl_.destination_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
+    _this->_impl_.request_ = new ::google::rpc::context::AttributeContext_Request(*from._impl_.request_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
+    _this->_impl_.response_ = new ::google::rpc::context::AttributeContext_Response(*from._impl_.response_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
+    _this->_impl_.resource_ = new ::google::rpc::context::AttributeContext_Resource(*from._impl_.resource_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
+    _this->_impl_.api_ = new ::google::rpc::context::AttributeContext_Api(*from._impl_.api_);
+  }
+  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
+    _this->_impl_.origin_ = new ::google::rpc::context::AttributeContext_Peer(*from._impl_.origin_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext)
+}
+inline void AttributeContext::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.extensions_){arena},
+      decltype(_impl_.source_){nullptr},
+      decltype(_impl_.destination_){nullptr},
+      decltype(_impl_.request_){nullptr},
+      decltype(_impl_.response_){nullptr},
+      decltype(_impl_.resource_){nullptr},
+      decltype(_impl_.api_){nullptr},
+      decltype(_impl_.origin_){nullptr},
+  };
+}
+AttributeContext::~AttributeContext() {
+  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void AttributeContext::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.extensions_.~RepeatedPtrField();
+  if (this != internal_default_instance()) delete _impl_.source_;
+  if (this != internal_default_instance()) delete _impl_.destination_;
+  if (this != internal_default_instance()) delete _impl_.request_;
+  if (this != internal_default_instance()) delete _impl_.response_;
+  if (this != internal_default_instance()) delete _impl_.resource_;
+  if (this != internal_default_instance()) delete _impl_.api_;
+  if (this != internal_default_instance()) delete _impl_.origin_;
+}
+void AttributeContext::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void AttributeContext::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_extensions()->Clear();
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x0000007fu) {
+    if (cached_has_bits & 0x00000001u) {
+      ABSL_DCHECK(_impl_.source_ != nullptr);
+      _impl_.source_->Clear();
+    }
+    if (cached_has_bits & 0x00000002u) {
+      ABSL_DCHECK(_impl_.destination_ != nullptr);
+      _impl_.destination_->Clear();
+    }
+    if (cached_has_bits & 0x00000004u) {
+      ABSL_DCHECK(_impl_.request_ != nullptr);
+      _impl_.request_->Clear();
+    }
+    if (cached_has_bits & 0x00000008u) {
+      ABSL_DCHECK(_impl_.response_ != nullptr);
+      _impl_.response_->Clear();
+    }
+    if (cached_has_bits & 0x00000010u) {
+      ABSL_DCHECK(_impl_.resource_ != nullptr);
+      _impl_.resource_->Clear();
+    }
+    if (cached_has_bits & 0x00000020u) {
+      ABSL_DCHECK(_impl_.api_ != nullptr);
+      _impl_.api_->Clear();
+    }
+    if (cached_has_bits & 0x00000040u) {
+      ABSL_DCHECK(_impl_.origin_ != nullptr);
+      _impl_.origin_->Clear();
+    }
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* AttributeContext::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<3, 8, 8, 0, 2> AttributeContext::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_._has_bits_),
+    0, // no _extensions_
+    8, 56,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967040,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    8,  // num_field_entries
+    8,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_AttributeContext_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.protobuf.Any extensions = 8 [json_name = "extensions"];
+    {::_pbi::TcParser::FastMtR1,
+     {66, 63, 7, PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.extensions_)}},
+    // .google.rpc.context.AttributeContext.Peer source = 1 [json_name = "source"];
+    {::_pbi::TcParser::FastMtS1,
+     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.source_)}},
+    // .google.rpc.context.AttributeContext.Peer destination = 2 [json_name = "destination"];
+    {::_pbi::TcParser::FastMtS1,
+     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.destination_)}},
+    // .google.rpc.context.AttributeContext.Request request = 3 [json_name = "request"];
+    {::_pbi::TcParser::FastMtS1,
+     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.request_)}},
+    // .google.rpc.context.AttributeContext.Response response = 4 [json_name = "response"];
+    {::_pbi::TcParser::FastMtS1,
+     {34, 3, 3, PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.response_)}},
+    // .google.rpc.context.AttributeContext.Resource resource = 5 [json_name = "resource"];
+    {::_pbi::TcParser::FastMtS1,
+     {42, 4, 4, PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.resource_)}},
+    // .google.rpc.context.AttributeContext.Api api = 6 [json_name = "api"];
+    {::_pbi::TcParser::FastMtS1,
+     {50, 5, 5, PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.api_)}},
+    // .google.rpc.context.AttributeContext.Peer origin = 7 [json_name = "origin"];
+    {::_pbi::TcParser::FastMtS1,
+     {58, 6, 6, PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.origin_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.rpc.context.AttributeContext.Peer source = 1 [json_name = "source"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.source_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.rpc.context.AttributeContext.Peer destination = 2 [json_name = "destination"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.destination_), _Internal::kHasBitsOffset + 1, 1,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.rpc.context.AttributeContext.Request request = 3 [json_name = "request"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.request_), _Internal::kHasBitsOffset + 2, 2,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.rpc.context.AttributeContext.Response response = 4 [json_name = "response"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.response_), _Internal::kHasBitsOffset + 3, 3,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.rpc.context.AttributeContext.Resource resource = 5 [json_name = "resource"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.resource_), _Internal::kHasBitsOffset + 4, 4,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.rpc.context.AttributeContext.Api api = 6 [json_name = "api"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.api_), _Internal::kHasBitsOffset + 5, 5,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // .google.rpc.context.AttributeContext.Peer origin = 7 [json_name = "origin"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.origin_), _Internal::kHasBitsOffset + 6, 6,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+    // repeated .google.protobuf.Any extensions = 8 [json_name = "extensions"];
+    {PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.extensions_), -1, 7,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::rpc::context::AttributeContext_Peer>()},
+    {::_pbi::TcParser::GetTable<::google::rpc::context::AttributeContext_Peer>()},
+    {::_pbi::TcParser::GetTable<::google::rpc::context::AttributeContext_Request>()},
+    {::_pbi::TcParser::GetTable<::google::rpc::context::AttributeContext_Response>()},
+    {::_pbi::TcParser::GetTable<::google::rpc::context::AttributeContext_Resource>()},
+    {::_pbi::TcParser::GetTable<::google::rpc::context::AttributeContext_Api>()},
+    {::_pbi::TcParser::GetTable<::google::rpc::context::AttributeContext_Peer>()},
+    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* AttributeContext::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.rpc.context.AttributeContext.Peer source = 1 [json_name = "source"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(1, _Internal::source(this),
+        _Internal::source(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.rpc.context.AttributeContext.Peer destination = 2 [json_name = "destination"];
+  if (cached_has_bits & 0x00000002u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(2, _Internal::destination(this),
+        _Internal::destination(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.rpc.context.AttributeContext.Request request = 3 [json_name = "request"];
+  if (cached_has_bits & 0x00000004u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(3, _Internal::request(this),
+        _Internal::request(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.rpc.context.AttributeContext.Response response = 4 [json_name = "response"];
+  if (cached_has_bits & 0x00000008u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(4, _Internal::response(this),
+        _Internal::response(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.rpc.context.AttributeContext.Resource resource = 5 [json_name = "resource"];
+  if (cached_has_bits & 0x00000010u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(5, _Internal::resource(this),
+        _Internal::resource(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.rpc.context.AttributeContext.Api api = 6 [json_name = "api"];
+  if (cached_has_bits & 0x00000020u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(6, _Internal::api(this),
+        _Internal::api(this).GetCachedSize(), target, stream);
+  }
+
+  // .google.rpc.context.AttributeContext.Peer origin = 7 [json_name = "origin"];
+  if (cached_has_bits & 0x00000040u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(7, _Internal::origin(this),
+        _Internal::origin(this).GetCachedSize(), target, stream);
+  }
+
+  // repeated .google.protobuf.Any extensions = 8 [json_name = "extensions"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_extensions_size()); i < n; i++) {
+    const auto& repfield = this->_internal_extensions().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext)
+  return target;
+}
+
+::size_t AttributeContext::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.protobuf.Any extensions = 8 [json_name = "extensions"];
+  total_size += 1UL * this->_internal_extensions_size();
+  for (const auto& msg : this->_internal_extensions()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x0000007fu) {
+    // .google.rpc.context.AttributeContext.Peer source = 1 [json_name = "source"];
+    if (cached_has_bits & 0x00000001u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.source_);
+    }
+
+    // .google.rpc.context.AttributeContext.Peer destination = 2 [json_name = "destination"];
+    if (cached_has_bits & 0x00000002u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.destination_);
+    }
+
+    // .google.rpc.context.AttributeContext.Request request = 3 [json_name = "request"];
+    if (cached_has_bits & 0x00000004u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.request_);
+    }
+
+    // .google.rpc.context.AttributeContext.Response response = 4 [json_name = "response"];
+    if (cached_has_bits & 0x00000008u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.response_);
+    }
+
+    // .google.rpc.context.AttributeContext.Resource resource = 5 [json_name = "resource"];
+    if (cached_has_bits & 0x00000010u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.resource_);
+    }
+
+    // .google.rpc.context.AttributeContext.Api api = 6 [json_name = "api"];
+    if (cached_has_bits & 0x00000020u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.api_);
+    }
+
+    // .google.rpc.context.AttributeContext.Peer origin = 7 [json_name = "origin"];
+    if (cached_has_bits & 0x00000040u) {
+      total_size += 1 +
+        ::google::protobuf::internal::WireFormatLite::MessageSize(
+          *_impl_.origin_);
+    }
+
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData AttributeContext::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    AttributeContext::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*AttributeContext::GetClassData() const { return &_class_data_; }
+
+
+void AttributeContext::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<AttributeContext*>(&to_msg);
+  auto& from = static_cast<const AttributeContext&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_extensions()->MergeFrom(from._internal_extensions());
+  cached_has_bits = from._impl_._has_bits_[0];
+  if (cached_has_bits & 0x0000007fu) {
+    if (cached_has_bits & 0x00000001u) {
+      _this->_internal_mutable_source()->::google::rpc::context::AttributeContext_Peer::MergeFrom(
+          from._internal_source());
+    }
+    if (cached_has_bits & 0x00000002u) {
+      _this->_internal_mutable_destination()->::google::rpc::context::AttributeContext_Peer::MergeFrom(
+          from._internal_destination());
+    }
+    if (cached_has_bits & 0x00000004u) {
+      _this->_internal_mutable_request()->::google::rpc::context::AttributeContext_Request::MergeFrom(
+          from._internal_request());
+    }
+    if (cached_has_bits & 0x00000008u) {
+      _this->_internal_mutable_response()->::google::rpc::context::AttributeContext_Response::MergeFrom(
+          from._internal_response());
+    }
+    if (cached_has_bits & 0x00000010u) {
+      _this->_internal_mutable_resource()->::google::rpc::context::AttributeContext_Resource::MergeFrom(
+          from._internal_resource());
+    }
+    if (cached_has_bits & 0x00000020u) {
+      _this->_internal_mutable_api()->::google::rpc::context::AttributeContext_Api::MergeFrom(
+          from._internal_api());
+    }
+    if (cached_has_bits & 0x00000040u) {
+      _this->_internal_mutable_origin()->::google::rpc::context::AttributeContext_Peer::MergeFrom(
+          from._internal_origin());
+    }
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void AttributeContext::CopyFrom(const AttributeContext& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool AttributeContext::IsInitialized() const {
+  return true;
+}
+
+void AttributeContext::InternalSwap(AttributeContext* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  _impl_.extensions_.InternalSwap(&other->_impl_.extensions_);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.origin_)
+      + sizeof(AttributeContext::_impl_.origin_)
+      - PROTOBUF_FIELD_OFFSET(AttributeContext, _impl_.source_)>(
+          reinterpret_cast<char*>(&_impl_.source_),
+          reinterpret_cast<char*>(&other->_impl_.source_));
+}
+
+::google::protobuf::Metadata AttributeContext::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
+      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[11]);
+}
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace context
+}  // namespace rpc
+}  // namespace google
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+// @@protoc_insertion_point(global_scope)
+#include "google/protobuf/port_undef.inc"
diff --git a/gen/google/rpc/context/attribute_context.pb.h b/gen/google/rpc/context/attribute_context.pb.h
new file mode 100644
index 0000000..65d21c5
--- /dev/null
+++ b/gen/google/rpc/context/attribute_context.pb.h
@@ -0,0 +1,5368 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/rpc/context/attribute_context.proto
+
+#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_2epb_2eh
+#define GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_2epb_2eh
+
+#include <limits>
+#include <string>
+#include <type_traits>
+
+#include "google/protobuf/port_def.inc"
+#if PROTOBUF_VERSION < 4024000
+#error "This file was generated by a newer version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please update"
+#error "your headers."
+#endif  // PROTOBUF_VERSION
+
+#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
+#error "This file was generated by an older version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please"
+#error "regenerate this file with a newer version of protoc."
+#endif  // PROTOBUF_MIN_PROTOC_VERSION
+#include "google/protobuf/port_undef.inc"
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/arena.h"
+#include "google/protobuf/arenastring.h"
+#include "google/protobuf/generated_message_tctable_decl.h"
+#include "google/protobuf/generated_message_util.h"
+#include "google/protobuf/metadata_lite.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/message.h"
+#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
+#include "google/protobuf/extension_set.h"  // IWYU pragma: export
+#include "google/protobuf/map.h"  // IWYU pragma: export
+#include "google/protobuf/map_entry.h"
+#include "google/protobuf/map_field_inl.h"
+#include "google/protobuf/unknown_field_set.h"
+#include "google/protobuf/any.pb.h"
+#include "google/protobuf/duration.pb.h"
+#include "google/protobuf/struct.pb.h"
+#include "google/protobuf/timestamp.pb.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+
+#define PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto
+
+namespace google {
+namespace protobuf {
+namespace internal {
+class AnyMetadata;
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+// Internal implementation detail -- do not use these members.
+struct TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto {
+  static const ::uint32_t offsets[];
+};
+extern const ::google::protobuf::internal::DescriptorTable
+    descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+namespace google {
+namespace rpc {
+namespace context {
+class AttributeContext;
+struct AttributeContextDefaultTypeInternal;
+extern AttributeContextDefaultTypeInternal _AttributeContext_default_instance_;
+class AttributeContext_Api;
+struct AttributeContext_ApiDefaultTypeInternal;
+extern AttributeContext_ApiDefaultTypeInternal _AttributeContext_Api_default_instance_;
+class AttributeContext_Auth;
+struct AttributeContext_AuthDefaultTypeInternal;
+extern AttributeContext_AuthDefaultTypeInternal _AttributeContext_Auth_default_instance_;
+class AttributeContext_Peer;
+struct AttributeContext_PeerDefaultTypeInternal;
+extern AttributeContext_PeerDefaultTypeInternal _AttributeContext_Peer_default_instance_;
+class AttributeContext_Peer_LabelsEntry_DoNotUse;
+struct AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal;
+extern AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Peer_LabelsEntry_DoNotUse_default_instance_;
+class AttributeContext_Request;
+struct AttributeContext_RequestDefaultTypeInternal;
+extern AttributeContext_RequestDefaultTypeInternal _AttributeContext_Request_default_instance_;
+class AttributeContext_Request_HeadersEntry_DoNotUse;
+struct AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal;
+extern AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal _AttributeContext_Request_HeadersEntry_DoNotUse_default_instance_;
+class AttributeContext_Resource;
+struct AttributeContext_ResourceDefaultTypeInternal;
+extern AttributeContext_ResourceDefaultTypeInternal _AttributeContext_Resource_default_instance_;
+class AttributeContext_Resource_AnnotationsEntry_DoNotUse;
+struct AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal;
+extern AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Resource_AnnotationsEntry_DoNotUse_default_instance_;
+class AttributeContext_Resource_LabelsEntry_DoNotUse;
+struct AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal;
+extern AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Resource_LabelsEntry_DoNotUse_default_instance_;
+class AttributeContext_Response;
+struct AttributeContext_ResponseDefaultTypeInternal;
+extern AttributeContext_ResponseDefaultTypeInternal _AttributeContext_Response_default_instance_;
+class AttributeContext_Response_HeadersEntry_DoNotUse;
+struct AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal;
+extern AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal _AttributeContext_Response_HeadersEntry_DoNotUse_default_instance_;
+}  // namespace context
+}  // namespace rpc
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+
+namespace google {
+namespace rpc {
+namespace context {
+
+// ===================================================================
+
+
+// -------------------------------------------------------------------
+
+class AttributeContext_Peer_LabelsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<AttributeContext_Peer_LabelsEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<AttributeContext_Peer_LabelsEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
+  AttributeContext_Peer_LabelsEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext_Peer_LabelsEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit AttributeContext_Peer_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const AttributeContext_Peer_LabelsEntry_DoNotUse& other);
+  static const AttributeContext_Peer_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributeContext_Peer_LabelsEntry_DoNotUse*>(&_AttributeContext_Peer_LabelsEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Peer.LabelsEntry.key");
+ }
+  static bool ValidateValue(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Peer.LabelsEntry.value");
+ }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};
+// -------------------------------------------------------------------
+
+class AttributeContext_Peer final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Peer) */ {
+ public:
+  inline AttributeContext_Peer() : AttributeContext_Peer(nullptr) {}
+  ~AttributeContext_Peer() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext_Peer(::google::protobuf::internal::ConstantInitialized);
+
+  AttributeContext_Peer(const AttributeContext_Peer& from);
+  AttributeContext_Peer(AttributeContext_Peer&& from) noexcept
+    : AttributeContext_Peer() {
+    *this = ::std::move(from);
+  }
+
+  inline AttributeContext_Peer& operator=(const AttributeContext_Peer& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline AttributeContext_Peer& operator=(AttributeContext_Peer&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const AttributeContext_Peer& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const AttributeContext_Peer* internal_default_instance() {
+    return reinterpret_cast<const AttributeContext_Peer*>(
+               &_AttributeContext_Peer_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    1;
+
+  friend void swap(AttributeContext_Peer& a, AttributeContext_Peer& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(AttributeContext_Peer* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(AttributeContext_Peer* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  AttributeContext_Peer* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<AttributeContext_Peer>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const AttributeContext_Peer& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const AttributeContext_Peer& from) {
+    AttributeContext_Peer::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(AttributeContext_Peer* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.context.AttributeContext.Peer";
+  }
+  protected:
+  explicit AttributeContext_Peer(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kLabelsFieldNumber = 6,
+    kIpFieldNumber = 1,
+    kPrincipalFieldNumber = 7,
+    kRegionCodeFieldNumber = 8,
+    kPortFieldNumber = 2,
+  };
+  // map<string, string> labels = 6 [json_name = "labels"];
+  int labels_size() const;
+  private:
+  int _internal_labels_size() const;
+
+  public:
+  void clear_labels() ;
+  const ::google::protobuf::Map<std::string, std::string>& labels() const;
+  ::google::protobuf::Map<std::string, std::string>* mutable_labels();
+
+  private:
+  const ::google::protobuf::Map<std::string, std::string>& _internal_labels() const;
+  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_labels();
+
+  public:
+  // string ip = 1 [json_name = "ip"];
+  void clear_ip() ;
+  const std::string& ip() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_ip(Arg_&& arg, Args_... args);
+  std::string* mutable_ip();
+  PROTOBUF_NODISCARD std::string* release_ip();
+  void set_allocated_ip(std::string* ptr);
+
+  private:
+  const std::string& _internal_ip() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
+      const std::string& value);
+  std::string* _internal_mutable_ip();
+
+  public:
+  // string principal = 7 [json_name = "principal"];
+  void clear_principal() ;
+  const std::string& principal() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_principal(Arg_&& arg, Args_... args);
+  std::string* mutable_principal();
+  PROTOBUF_NODISCARD std::string* release_principal();
+  void set_allocated_principal(std::string* ptr);
+
+  private:
+  const std::string& _internal_principal() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_principal(
+      const std::string& value);
+  std::string* _internal_mutable_principal();
+
+  public:
+  // string region_code = 8 [json_name = "regionCode"];
+  void clear_region_code() ;
+  const std::string& region_code() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_region_code(Arg_&& arg, Args_... args);
+  std::string* mutable_region_code();
+  PROTOBUF_NODISCARD std::string* release_region_code();
+  void set_allocated_region_code(std::string* ptr);
+
+  private:
+  const std::string& _internal_region_code() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region_code(
+      const std::string& value);
+  std::string* _internal_mutable_region_code();
+
+  public:
+  // int64 port = 2 [json_name = "port"];
+  void clear_port() ;
+  ::int64_t port() const;
+  void set_port(::int64_t value);
+
+  private:
+  ::int64_t _internal_port() const;
+  void _internal_set_port(::int64_t value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Peer)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 5, 1, 77, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::MapField<AttributeContext_Peer_LabelsEntry_DoNotUse, std::string, std::string,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
+        labels_;
+    ::google::protobuf::internal::ArenaStringPtr ip_;
+    ::google::protobuf::internal::ArenaStringPtr principal_;
+    ::google::protobuf::internal::ArenaStringPtr region_code_;
+    ::int64_t port_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};// -------------------------------------------------------------------
+
+class AttributeContext_Api final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Api) */ {
+ public:
+  inline AttributeContext_Api() : AttributeContext_Api(nullptr) {}
+  ~AttributeContext_Api() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext_Api(::google::protobuf::internal::ConstantInitialized);
+
+  AttributeContext_Api(const AttributeContext_Api& from);
+  AttributeContext_Api(AttributeContext_Api&& from) noexcept
+    : AttributeContext_Api() {
+    *this = ::std::move(from);
+  }
+
+  inline AttributeContext_Api& operator=(const AttributeContext_Api& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline AttributeContext_Api& operator=(AttributeContext_Api&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const AttributeContext_Api& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const AttributeContext_Api* internal_default_instance() {
+    return reinterpret_cast<const AttributeContext_Api*>(
+               &_AttributeContext_Api_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    2;
+
+  friend void swap(AttributeContext_Api& a, AttributeContext_Api& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(AttributeContext_Api* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(AttributeContext_Api* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  AttributeContext_Api* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<AttributeContext_Api>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const AttributeContext_Api& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const AttributeContext_Api& from) {
+    AttributeContext_Api::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(AttributeContext_Api* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.context.AttributeContext.Api";
+  }
+  protected:
+  explicit AttributeContext_Api(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kServiceFieldNumber = 1,
+    kOperationFieldNumber = 2,
+    kProtocolFieldNumber = 3,
+    kVersionFieldNumber = 4,
+  };
+  // string service = 1 [json_name = "service"];
+  void clear_service() ;
+  const std::string& service() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_service(Arg_&& arg, Args_... args);
+  std::string* mutable_service();
+  PROTOBUF_NODISCARD std::string* release_service();
+  void set_allocated_service(std::string* ptr);
+
+  private:
+  const std::string& _internal_service() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(
+      const std::string& value);
+  std::string* _internal_mutable_service();
+
+  public:
+  // string operation = 2 [json_name = "operation"];
+  void clear_operation() ;
+  const std::string& operation() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_operation(Arg_&& arg, Args_... args);
+  std::string* mutable_operation();
+  PROTOBUF_NODISCARD std::string* release_operation();
+  void set_allocated_operation(std::string* ptr);
+
+  private:
+  const std::string& _internal_operation() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation(
+      const std::string& value);
+  std::string* _internal_mutable_operation();
+
+  public:
+  // string protocol = 3 [json_name = "protocol"];
+  void clear_protocol() ;
+  const std::string& protocol() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_protocol(Arg_&& arg, Args_... args);
+  std::string* mutable_protocol();
+  PROTOBUF_NODISCARD std::string* release_protocol();
+  void set_allocated_protocol(std::string* ptr);
+
+  private:
+  const std::string& _internal_protocol() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(
+      const std::string& value);
+  std::string* _internal_mutable_protocol();
+
+  public:
+  // string version = 4 [json_name = "version"];
+  void clear_version() ;
+  const std::string& version() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_version(Arg_&& arg, Args_... args);
+  std::string* mutable_version();
+  PROTOBUF_NODISCARD std::string* release_version();
+  void set_allocated_version(std::string* ptr);
+
+  private:
+  const std::string& _internal_version() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
+      const std::string& value);
+  std::string* _internal_mutable_version();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Api)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 79, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr service_;
+    ::google::protobuf::internal::ArenaStringPtr operation_;
+    ::google::protobuf::internal::ArenaStringPtr protocol_;
+    ::google::protobuf::internal::ArenaStringPtr version_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};// -------------------------------------------------------------------
+
+class AttributeContext_Auth final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Auth) */ {
+ public:
+  inline AttributeContext_Auth() : AttributeContext_Auth(nullptr) {}
+  ~AttributeContext_Auth() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext_Auth(::google::protobuf::internal::ConstantInitialized);
+
+  AttributeContext_Auth(const AttributeContext_Auth& from);
+  AttributeContext_Auth(AttributeContext_Auth&& from) noexcept
+    : AttributeContext_Auth() {
+    *this = ::std::move(from);
+  }
+
+  inline AttributeContext_Auth& operator=(const AttributeContext_Auth& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline AttributeContext_Auth& operator=(AttributeContext_Auth&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const AttributeContext_Auth& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const AttributeContext_Auth* internal_default_instance() {
+    return reinterpret_cast<const AttributeContext_Auth*>(
+               &_AttributeContext_Auth_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    3;
+
+  friend void swap(AttributeContext_Auth& a, AttributeContext_Auth& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(AttributeContext_Auth* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(AttributeContext_Auth* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  AttributeContext_Auth* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<AttributeContext_Auth>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const AttributeContext_Auth& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const AttributeContext_Auth& from) {
+    AttributeContext_Auth::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(AttributeContext_Auth* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.context.AttributeContext.Auth";
+  }
+  protected:
+  explicit AttributeContext_Auth(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kAudiencesFieldNumber = 2,
+    kAccessLevelsFieldNumber = 5,
+    kPrincipalFieldNumber = 1,
+    kPresenterFieldNumber = 3,
+    kClaimsFieldNumber = 4,
+  };
+  // repeated string audiences = 2 [json_name = "audiences"];
+  int audiences_size() const;
+  private:
+  int _internal_audiences_size() const;
+
+  public:
+  void clear_audiences() ;
+  const std::string& audiences(int index) const;
+  std::string* mutable_audiences(int index);
+  void set_audiences(int index, const std::string& value);
+  void set_audiences(int index, std::string&& value);
+  void set_audiences(int index, const char* value);
+  void set_audiences(int index, const char* value, std::size_t size);
+  void set_audiences(int index, absl::string_view value);
+  std::string* add_audiences();
+  void add_audiences(const std::string& value);
+  void add_audiences(std::string&& value);
+  void add_audiences(const char* value);
+  void add_audiences(const char* value, std::size_t size);
+  void add_audiences(absl::string_view value);
+  const ::google::protobuf::RepeatedPtrField<std::string>& audiences() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* mutable_audiences();
+
+  private:
+  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_audiences() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_audiences();
+
+  public:
+  // repeated string access_levels = 5 [json_name = "accessLevels"];
+  int access_levels_size() const;
+  private:
+  int _internal_access_levels_size() const;
+
+  public:
+  void clear_access_levels() ;
+  const std::string& access_levels(int index) const;
+  std::string* mutable_access_levels(int index);
+  void set_access_levels(int index, const std::string& value);
+  void set_access_levels(int index, std::string&& value);
+  void set_access_levels(int index, const char* value);
+  void set_access_levels(int index, const char* value, std::size_t size);
+  void set_access_levels(int index, absl::string_view value);
+  std::string* add_access_levels();
+  void add_access_levels(const std::string& value);
+  void add_access_levels(std::string&& value);
+  void add_access_levels(const char* value);
+  void add_access_levels(const char* value, std::size_t size);
+  void add_access_levels(absl::string_view value);
+  const ::google::protobuf::RepeatedPtrField<std::string>& access_levels() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* mutable_access_levels();
+
+  private:
+  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_access_levels() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_access_levels();
+
+  public:
+  // string principal = 1 [json_name = "principal"];
+  void clear_principal() ;
+  const std::string& principal() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_principal(Arg_&& arg, Args_... args);
+  std::string* mutable_principal();
+  PROTOBUF_NODISCARD std::string* release_principal();
+  void set_allocated_principal(std::string* ptr);
+
+  private:
+  const std::string& _internal_principal() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_principal(
+      const std::string& value);
+  std::string* _internal_mutable_principal();
+
+  public:
+  // string presenter = 3 [json_name = "presenter"];
+  void clear_presenter() ;
+  const std::string& presenter() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_presenter(Arg_&& arg, Args_... args);
+  std::string* mutable_presenter();
+  PROTOBUF_NODISCARD std::string* release_presenter();
+  void set_allocated_presenter(std::string* ptr);
+
+  private:
+  const std::string& _internal_presenter() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_presenter(
+      const std::string& value);
+  std::string* _internal_mutable_presenter();
+
+  public:
+  // .google.protobuf.Struct claims = 4 [json_name = "claims"];
+  bool has_claims() const;
+  void clear_claims() ;
+  const ::google::protobuf::Struct& claims() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_claims();
+  ::google::protobuf::Struct* mutable_claims();
+  void set_allocated_claims(::google::protobuf::Struct* value);
+  void unsafe_arena_set_allocated_claims(::google::protobuf::Struct* value);
+  ::google::protobuf::Struct* unsafe_arena_release_claims();
+
+  private:
+  const ::google::protobuf::Struct& _internal_claims() const;
+  ::google::protobuf::Struct* _internal_mutable_claims();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Auth)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<3, 5, 1, 89, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::RepeatedPtrField<std::string> audiences_;
+    ::google::protobuf::RepeatedPtrField<std::string> access_levels_;
+    ::google::protobuf::internal::ArenaStringPtr principal_;
+    ::google::protobuf::internal::ArenaStringPtr presenter_;
+    ::google::protobuf::Struct* claims_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};// -------------------------------------------------------------------
+
+class AttributeContext_Request_HeadersEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<AttributeContext_Request_HeadersEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<AttributeContext_Request_HeadersEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
+  AttributeContext_Request_HeadersEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext_Request_HeadersEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit AttributeContext_Request_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const AttributeContext_Request_HeadersEntry_DoNotUse& other);
+  static const AttributeContext_Request_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributeContext_Request_HeadersEntry_DoNotUse*>(&_AttributeContext_Request_HeadersEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Request.HeadersEntry.key");
+ }
+  static bool ValidateValue(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Request.HeadersEntry.value");
+ }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};
+// -------------------------------------------------------------------
+
+class AttributeContext_Request final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Request) */ {
+ public:
+  inline AttributeContext_Request() : AttributeContext_Request(nullptr) {}
+  ~AttributeContext_Request() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext_Request(::google::protobuf::internal::ConstantInitialized);
+
+  AttributeContext_Request(const AttributeContext_Request& from);
+  AttributeContext_Request(AttributeContext_Request&& from) noexcept
+    : AttributeContext_Request() {
+    *this = ::std::move(from);
+  }
+
+  inline AttributeContext_Request& operator=(const AttributeContext_Request& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline AttributeContext_Request& operator=(AttributeContext_Request&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const AttributeContext_Request& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const AttributeContext_Request* internal_default_instance() {
+    return reinterpret_cast<const AttributeContext_Request*>(
+               &_AttributeContext_Request_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    5;
+
+  friend void swap(AttributeContext_Request& a, AttributeContext_Request& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(AttributeContext_Request* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(AttributeContext_Request* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  AttributeContext_Request* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<AttributeContext_Request>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const AttributeContext_Request& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const AttributeContext_Request& from) {
+    AttributeContext_Request::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(AttributeContext_Request* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.context.AttributeContext.Request";
+  }
+  protected:
+  explicit AttributeContext_Request(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kHeadersFieldNumber = 3,
+    kIdFieldNumber = 1,
+    kMethodFieldNumber = 2,
+    kPathFieldNumber = 4,
+    kHostFieldNumber = 5,
+    kSchemeFieldNumber = 6,
+    kQueryFieldNumber = 7,
+    kProtocolFieldNumber = 11,
+    kReasonFieldNumber = 12,
+    kTimeFieldNumber = 9,
+    kAuthFieldNumber = 13,
+    kSizeFieldNumber = 10,
+  };
+  // map<string, string> headers = 3 [json_name = "headers"];
+  int headers_size() const;
+  private:
+  int _internal_headers_size() const;
+
+  public:
+  void clear_headers() ;
+  const ::google::protobuf::Map<std::string, std::string>& headers() const;
+  ::google::protobuf::Map<std::string, std::string>* mutable_headers();
+
+  private:
+  const ::google::protobuf::Map<std::string, std::string>& _internal_headers() const;
+  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_headers();
+
+  public:
+  // string id = 1 [json_name = "id"];
+  void clear_id() ;
+  const std::string& id() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_id(Arg_&& arg, Args_... args);
+  std::string* mutable_id();
+  PROTOBUF_NODISCARD std::string* release_id();
+  void set_allocated_id(std::string* ptr);
+
+  private:
+  const std::string& _internal_id() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
+      const std::string& value);
+  std::string* _internal_mutable_id();
+
+  public:
+  // string method = 2 [json_name = "method"];
+  void clear_method() ;
+  const std::string& method() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_method(Arg_&& arg, Args_... args);
+  std::string* mutable_method();
+  PROTOBUF_NODISCARD std::string* release_method();
+  void set_allocated_method(std::string* ptr);
+
+  private:
+  const std::string& _internal_method() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
+      const std::string& value);
+  std::string* _internal_mutable_method();
+
+  public:
+  // string path = 4 [json_name = "path"];
+  void clear_path() ;
+  const std::string& path() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_path(Arg_&& arg, Args_... args);
+  std::string* mutable_path();
+  PROTOBUF_NODISCARD std::string* release_path();
+  void set_allocated_path(std::string* ptr);
+
+  private:
+  const std::string& _internal_path() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
+      const std::string& value);
+  std::string* _internal_mutable_path();
+
+  public:
+  // string host = 5 [json_name = "host"];
+  void clear_host() ;
+  const std::string& host() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_host(Arg_&& arg, Args_... args);
+  std::string* mutable_host();
+  PROTOBUF_NODISCARD std::string* release_host();
+  void set_allocated_host(std::string* ptr);
+
+  private:
+  const std::string& _internal_host() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
+      const std::string& value);
+  std::string* _internal_mutable_host();
+
+  public:
+  // string scheme = 6 [json_name = "scheme"];
+  void clear_scheme() ;
+  const std::string& scheme() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_scheme(Arg_&& arg, Args_... args);
+  std::string* mutable_scheme();
+  PROTOBUF_NODISCARD std::string* release_scheme();
+  void set_allocated_scheme(std::string* ptr);
+
+  private:
+  const std::string& _internal_scheme() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scheme(
+      const std::string& value);
+  std::string* _internal_mutable_scheme();
+
+  public:
+  // string query = 7 [json_name = "query"];
+  void clear_query() ;
+  const std::string& query() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_query(Arg_&& arg, Args_... args);
+  std::string* mutable_query();
+  PROTOBUF_NODISCARD std::string* release_query();
+  void set_allocated_query(std::string* ptr);
+
+  private:
+  const std::string& _internal_query() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(
+      const std::string& value);
+  std::string* _internal_mutable_query();
+
+  public:
+  // string protocol = 11 [json_name = "protocol"];
+  void clear_protocol() ;
+  const std::string& protocol() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_protocol(Arg_&& arg, Args_... args);
+  std::string* mutable_protocol();
+  PROTOBUF_NODISCARD std::string* release_protocol();
+  void set_allocated_protocol(std::string* ptr);
+
+  private:
+  const std::string& _internal_protocol() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(
+      const std::string& value);
+  std::string* _internal_mutable_protocol();
+
+  public:
+  // string reason = 12 [json_name = "reason"];
+  void clear_reason() ;
+  const std::string& reason() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_reason(Arg_&& arg, Args_... args);
+  std::string* mutable_reason();
+  PROTOBUF_NODISCARD std::string* release_reason();
+  void set_allocated_reason(std::string* ptr);
+
+  private:
+  const std::string& _internal_reason() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
+      const std::string& value);
+  std::string* _internal_mutable_reason();
+
+  public:
+  // .google.protobuf.Timestamp time = 9 [json_name = "time"];
+  bool has_time() const;
+  void clear_time() ;
+  const ::google::protobuf::Timestamp& time() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
+  ::google::protobuf::Timestamp* mutable_time();
+  void set_allocated_time(::google::protobuf::Timestamp* value);
+  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
+  ::google::protobuf::Timestamp* unsafe_arena_release_time();
+
+  private:
+  const ::google::protobuf::Timestamp& _internal_time() const;
+  ::google::protobuf::Timestamp* _internal_mutable_time();
+
+  public:
+  // .google.rpc.context.AttributeContext.Auth auth = 13 [json_name = "auth"];
+  bool has_auth() const;
+  void clear_auth() ;
+  const ::google::rpc::context::AttributeContext_Auth& auth() const;
+  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Auth* release_auth();
+  ::google::rpc::context::AttributeContext_Auth* mutable_auth();
+  void set_allocated_auth(::google::rpc::context::AttributeContext_Auth* value);
+  void unsafe_arena_set_allocated_auth(::google::rpc::context::AttributeContext_Auth* value);
+  ::google::rpc::context::AttributeContext_Auth* unsafe_arena_release_auth();
+
+  private:
+  const ::google::rpc::context::AttributeContext_Auth& _internal_auth() const;
+  ::google::rpc::context::AttributeContext_Auth* _internal_mutable_auth();
+
+  public:
+  // int64 size = 10 [json_name = "size"];
+  void clear_size() ;
+  ::int64_t size() const;
+  void set_size(::int64_t value);
+
+  private:
+  ::int64_t _internal_size() const;
+  void _internal_set_size(::int64_t value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Request)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<4, 12, 3, 108, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::internal::MapField<AttributeContext_Request_HeadersEntry_DoNotUse, std::string, std::string,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
+        headers_;
+    ::google::protobuf::internal::ArenaStringPtr id_;
+    ::google::protobuf::internal::ArenaStringPtr method_;
+    ::google::protobuf::internal::ArenaStringPtr path_;
+    ::google::protobuf::internal::ArenaStringPtr host_;
+    ::google::protobuf::internal::ArenaStringPtr scheme_;
+    ::google::protobuf::internal::ArenaStringPtr query_;
+    ::google::protobuf::internal::ArenaStringPtr protocol_;
+    ::google::protobuf::internal::ArenaStringPtr reason_;
+    ::google::protobuf::Timestamp* time_;
+    ::google::rpc::context::AttributeContext_Auth* auth_;
+    ::int64_t size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};// -------------------------------------------------------------------
+
+class AttributeContext_Response_HeadersEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<AttributeContext_Response_HeadersEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<AttributeContext_Response_HeadersEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
+  AttributeContext_Response_HeadersEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext_Response_HeadersEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit AttributeContext_Response_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const AttributeContext_Response_HeadersEntry_DoNotUse& other);
+  static const AttributeContext_Response_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributeContext_Response_HeadersEntry_DoNotUse*>(&_AttributeContext_Response_HeadersEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Response.HeadersEntry.key");
+ }
+  static bool ValidateValue(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Response.HeadersEntry.value");
+ }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};
+// -------------------------------------------------------------------
+
+class AttributeContext_Response final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Response) */ {
+ public:
+  inline AttributeContext_Response() : AttributeContext_Response(nullptr) {}
+  ~AttributeContext_Response() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext_Response(::google::protobuf::internal::ConstantInitialized);
+
+  AttributeContext_Response(const AttributeContext_Response& from);
+  AttributeContext_Response(AttributeContext_Response&& from) noexcept
+    : AttributeContext_Response() {
+    *this = ::std::move(from);
+  }
+
+  inline AttributeContext_Response& operator=(const AttributeContext_Response& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline AttributeContext_Response& operator=(AttributeContext_Response&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const AttributeContext_Response& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const AttributeContext_Response* internal_default_instance() {
+    return reinterpret_cast<const AttributeContext_Response*>(
+               &_AttributeContext_Response_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    7;
+
+  friend void swap(AttributeContext_Response& a, AttributeContext_Response& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(AttributeContext_Response* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(AttributeContext_Response* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  AttributeContext_Response* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<AttributeContext_Response>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const AttributeContext_Response& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const AttributeContext_Response& from) {
+    AttributeContext_Response::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(AttributeContext_Response* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.context.AttributeContext.Response";
+  }
+  protected:
+  explicit AttributeContext_Response(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kHeadersFieldNumber = 3,
+    kTimeFieldNumber = 4,
+    kBackendLatencyFieldNumber = 5,
+    kCodeFieldNumber = 1,
+    kSizeFieldNumber = 2,
+  };
+  // map<string, string> headers = 3 [json_name = "headers"];
+  int headers_size() const;
+  private:
+  int _internal_headers_size() const;
+
+  public:
+  void clear_headers() ;
+  const ::google::protobuf::Map<std::string, std::string>& headers() const;
+  ::google::protobuf::Map<std::string, std::string>* mutable_headers();
+
+  private:
+  const ::google::protobuf::Map<std::string, std::string>& _internal_headers() const;
+  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_headers();
+
+  public:
+  // .google.protobuf.Timestamp time = 4 [json_name = "time"];
+  bool has_time() const;
+  void clear_time() ;
+  const ::google::protobuf::Timestamp& time() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
+  ::google::protobuf::Timestamp* mutable_time();
+  void set_allocated_time(::google::protobuf::Timestamp* value);
+  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
+  ::google::protobuf::Timestamp* unsafe_arena_release_time();
+
+  private:
+  const ::google::protobuf::Timestamp& _internal_time() const;
+  ::google::protobuf::Timestamp* _internal_mutable_time();
+
+  public:
+  // .google.protobuf.Duration backend_latency = 5 [json_name = "backendLatency"];
+  bool has_backend_latency() const;
+  void clear_backend_latency() ;
+  const ::google::protobuf::Duration& backend_latency() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_backend_latency();
+  ::google::protobuf::Duration* mutable_backend_latency();
+  void set_allocated_backend_latency(::google::protobuf::Duration* value);
+  void unsafe_arena_set_allocated_backend_latency(::google::protobuf::Duration* value);
+  ::google::protobuf::Duration* unsafe_arena_release_backend_latency();
+
+  private:
+  const ::google::protobuf::Duration& _internal_backend_latency() const;
+  ::google::protobuf::Duration* _internal_mutable_backend_latency();
+
+  public:
+  // int64 code = 1 [json_name = "code"];
+  void clear_code() ;
+  ::int64_t code() const;
+  void set_code(::int64_t value);
+
+  private:
+  ::int64_t _internal_code() const;
+  void _internal_set_code(::int64_t value);
+
+  public:
+  // int64 size = 2 [json_name = "size"];
+  void clear_size() ;
+  ::int64_t size() const;
+  void set_size(::int64_t value);
+
+  private:
+  ::int64_t _internal_size() const;
+  void _internal_set_size(::int64_t value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Response)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<3, 5, 3, 60, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::internal::MapField<AttributeContext_Response_HeadersEntry_DoNotUse, std::string, std::string,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
+        headers_;
+    ::google::protobuf::Timestamp* time_;
+    ::google::protobuf::Duration* backend_latency_;
+    ::int64_t code_;
+    ::int64_t size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};// -------------------------------------------------------------------
+
+class AttributeContext_Resource_LabelsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<AttributeContext_Resource_LabelsEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<AttributeContext_Resource_LabelsEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
+  AttributeContext_Resource_LabelsEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext_Resource_LabelsEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit AttributeContext_Resource_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const AttributeContext_Resource_LabelsEntry_DoNotUse& other);
+  static const AttributeContext_Resource_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributeContext_Resource_LabelsEntry_DoNotUse*>(&_AttributeContext_Resource_LabelsEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Resource.LabelsEntry.key");
+ }
+  static bool ValidateValue(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Resource.LabelsEntry.value");
+ }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};
+// -------------------------------------------------------------------
+
+class AttributeContext_Resource_AnnotationsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<AttributeContext_Resource_AnnotationsEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<AttributeContext_Resource_AnnotationsEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
+  AttributeContext_Resource_AnnotationsEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext_Resource_AnnotationsEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit AttributeContext_Resource_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const AttributeContext_Resource_AnnotationsEntry_DoNotUse& other);
+  static const AttributeContext_Resource_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributeContext_Resource_AnnotationsEntry_DoNotUse*>(&_AttributeContext_Resource_AnnotationsEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Resource.AnnotationsEntry.key");
+ }
+  static bool ValidateValue(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Resource.AnnotationsEntry.value");
+ }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};
+// -------------------------------------------------------------------
+
+class AttributeContext_Resource final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Resource) */ {
+ public:
+  inline AttributeContext_Resource() : AttributeContext_Resource(nullptr) {}
+  ~AttributeContext_Resource() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext_Resource(::google::protobuf::internal::ConstantInitialized);
+
+  AttributeContext_Resource(const AttributeContext_Resource& from);
+  AttributeContext_Resource(AttributeContext_Resource&& from) noexcept
+    : AttributeContext_Resource() {
+    *this = ::std::move(from);
+  }
+
+  inline AttributeContext_Resource& operator=(const AttributeContext_Resource& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline AttributeContext_Resource& operator=(AttributeContext_Resource&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const AttributeContext_Resource& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const AttributeContext_Resource* internal_default_instance() {
+    return reinterpret_cast<const AttributeContext_Resource*>(
+               &_AttributeContext_Resource_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    10;
+
+  friend void swap(AttributeContext_Resource& a, AttributeContext_Resource& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(AttributeContext_Resource* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(AttributeContext_Resource* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  AttributeContext_Resource* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<AttributeContext_Resource>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const AttributeContext_Resource& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const AttributeContext_Resource& from) {
+    AttributeContext_Resource::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(AttributeContext_Resource* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.context.AttributeContext.Resource";
+  }
+  protected:
+  explicit AttributeContext_Resource(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kLabelsFieldNumber = 4,
+    kAnnotationsFieldNumber = 6,
+    kServiceFieldNumber = 1,
+    kNameFieldNumber = 2,
+    kTypeFieldNumber = 3,
+    kUidFieldNumber = 5,
+    kDisplayNameFieldNumber = 7,
+    kEtagFieldNumber = 11,
+    kLocationFieldNumber = 12,
+    kCreateTimeFieldNumber = 8,
+    kUpdateTimeFieldNumber = 9,
+    kDeleteTimeFieldNumber = 10,
+  };
+  // map<string, string> labels = 4 [json_name = "labels"];
+  int labels_size() const;
+  private:
+  int _internal_labels_size() const;
+
+  public:
+  void clear_labels() ;
+  const ::google::protobuf::Map<std::string, std::string>& labels() const;
+  ::google::protobuf::Map<std::string, std::string>* mutable_labels();
+
+  private:
+  const ::google::protobuf::Map<std::string, std::string>& _internal_labels() const;
+  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_labels();
+
+  public:
+  // map<string, string> annotations = 6 [json_name = "annotations"];
+  int annotations_size() const;
+  private:
+  int _internal_annotations_size() const;
+
+  public:
+  void clear_annotations() ;
+  const ::google::protobuf::Map<std::string, std::string>& annotations() const;
+  ::google::protobuf::Map<std::string, std::string>* mutable_annotations();
+
+  private:
+  const ::google::protobuf::Map<std::string, std::string>& _internal_annotations() const;
+  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_annotations();
+
+  public:
+  // string service = 1 [json_name = "service"];
+  void clear_service() ;
+  const std::string& service() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_service(Arg_&& arg, Args_... args);
+  std::string* mutable_service();
+  PROTOBUF_NODISCARD std::string* release_service();
+  void set_allocated_service(std::string* ptr);
+
+  private:
+  const std::string& _internal_service() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(
+      const std::string& value);
+  std::string* _internal_mutable_service();
+
+  public:
+  // string name = 2 [json_name = "name"];
+  void clear_name() ;
+  const std::string& name() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_name(Arg_&& arg, Args_... args);
+  std::string* mutable_name();
+  PROTOBUF_NODISCARD std::string* release_name();
+  void set_allocated_name(std::string* ptr);
+
+  private:
+  const std::string& _internal_name() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
+      const std::string& value);
+  std::string* _internal_mutable_name();
+
+  public:
+  // string type = 3 [json_name = "type"];
+  void clear_type() ;
+  const std::string& type() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_type(Arg_&& arg, Args_... args);
+  std::string* mutable_type();
+  PROTOBUF_NODISCARD std::string* release_type();
+  void set_allocated_type(std::string* ptr);
+
+  private:
+  const std::string& _internal_type() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
+      const std::string& value);
+  std::string* _internal_mutable_type();
+
+  public:
+  // string uid = 5 [json_name = "uid"];
+  void clear_uid() ;
+  const std::string& uid() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_uid(Arg_&& arg, Args_... args);
+  std::string* mutable_uid();
+  PROTOBUF_NODISCARD std::string* release_uid();
+  void set_allocated_uid(std::string* ptr);
+
+  private:
+  const std::string& _internal_uid() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
+      const std::string& value);
+  std::string* _internal_mutable_uid();
+
+  public:
+  // string display_name = 7 [json_name = "displayName"];
+  void clear_display_name() ;
+  const std::string& display_name() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_display_name(Arg_&& arg, Args_... args);
+  std::string* mutable_display_name();
+  PROTOBUF_NODISCARD std::string* release_display_name();
+  void set_allocated_display_name(std::string* ptr);
+
+  private:
+  const std::string& _internal_display_name() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(
+      const std::string& value);
+  std::string* _internal_mutable_display_name();
+
+  public:
+  // string etag = 11 [json_name = "etag"];
+  void clear_etag() ;
+  const std::string& etag() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_etag(Arg_&& arg, Args_... args);
+  std::string* mutable_etag();
+  PROTOBUF_NODISCARD std::string* release_etag();
+  void set_allocated_etag(std::string* ptr);
+
+  private:
+  const std::string& _internal_etag() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(
+      const std::string& value);
+  std::string* _internal_mutable_etag();
+
+  public:
+  // string location = 12 [json_name = "location"];
+  void clear_location() ;
+  const std::string& location() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_location(Arg_&& arg, Args_... args);
+  std::string* mutable_location();
+  PROTOBUF_NODISCARD std::string* release_location();
+  void set_allocated_location(std::string* ptr);
+
+  private:
+  const std::string& _internal_location() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
+      const std::string& value);
+  std::string* _internal_mutable_location();
+
+  public:
+  // .google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];
+  bool has_create_time() const;
+  void clear_create_time() ;
+  const ::google::protobuf::Timestamp& create_time() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_create_time();
+  ::google::protobuf::Timestamp* mutable_create_time();
+  void set_allocated_create_time(::google::protobuf::Timestamp* value);
+  void unsafe_arena_set_allocated_create_time(::google::protobuf::Timestamp* value);
+  ::google::protobuf::Timestamp* unsafe_arena_release_create_time();
+
+  private:
+  const ::google::protobuf::Timestamp& _internal_create_time() const;
+  ::google::protobuf::Timestamp* _internal_mutable_create_time();
+
+  public:
+  // .google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];
+  bool has_update_time() const;
+  void clear_update_time() ;
+  const ::google::protobuf::Timestamp& update_time() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_update_time();
+  ::google::protobuf::Timestamp* mutable_update_time();
+  void set_allocated_update_time(::google::protobuf::Timestamp* value);
+  void unsafe_arena_set_allocated_update_time(::google::protobuf::Timestamp* value);
+  ::google::protobuf::Timestamp* unsafe_arena_release_update_time();
+
+  private:
+  const ::google::protobuf::Timestamp& _internal_update_time() const;
+  ::google::protobuf::Timestamp* _internal_mutable_update_time();
+
+  public:
+  // .google.protobuf.Timestamp delete_time = 10 [json_name = "deleteTime"];
+  bool has_delete_time() const;
+  void clear_delete_time() ;
+  const ::google::protobuf::Timestamp& delete_time() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_delete_time();
+  ::google::protobuf::Timestamp* mutable_delete_time();
+  void set_allocated_delete_time(::google::protobuf::Timestamp* value);
+  void unsafe_arena_set_allocated_delete_time(::google::protobuf::Timestamp* value);
+  ::google::protobuf::Timestamp* unsafe_arena_release_delete_time();
+
+  private:
+  const ::google::protobuf::Timestamp& _internal_delete_time() const;
+  ::google::protobuf::Timestamp* _internal_mutable_delete_time();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Resource)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<4, 12, 5, 120, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::internal::MapField<AttributeContext_Resource_LabelsEntry_DoNotUse, std::string, std::string,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
+        labels_;
+    ::google::protobuf::internal::MapField<AttributeContext_Resource_AnnotationsEntry_DoNotUse, std::string, std::string,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
+        annotations_;
+    ::google::protobuf::internal::ArenaStringPtr service_;
+    ::google::protobuf::internal::ArenaStringPtr name_;
+    ::google::protobuf::internal::ArenaStringPtr type_;
+    ::google::protobuf::internal::ArenaStringPtr uid_;
+    ::google::protobuf::internal::ArenaStringPtr display_name_;
+    ::google::protobuf::internal::ArenaStringPtr etag_;
+    ::google::protobuf::internal::ArenaStringPtr location_;
+    ::google::protobuf::Timestamp* create_time_;
+    ::google::protobuf::Timestamp* update_time_;
+    ::google::protobuf::Timestamp* delete_time_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};// -------------------------------------------------------------------
+
+class AttributeContext final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext) */ {
+ public:
+  inline AttributeContext() : AttributeContext(nullptr) {}
+  ~AttributeContext() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR AttributeContext(::google::protobuf::internal::ConstantInitialized);
+
+  AttributeContext(const AttributeContext& from);
+  AttributeContext(AttributeContext&& from) noexcept
+    : AttributeContext() {
+    *this = ::std::move(from);
+  }
+
+  inline AttributeContext& operator=(const AttributeContext& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline AttributeContext& operator=(AttributeContext&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const AttributeContext& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const AttributeContext* internal_default_instance() {
+    return reinterpret_cast<const AttributeContext*>(
+               &_AttributeContext_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    11;
+
+  friend void swap(AttributeContext& a, AttributeContext& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(AttributeContext* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(AttributeContext* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  AttributeContext* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<AttributeContext>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const AttributeContext& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const AttributeContext& from) {
+    AttributeContext::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(AttributeContext* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.context.AttributeContext";
+  }
+  protected:
+  explicit AttributeContext(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef AttributeContext_Peer Peer;
+  typedef AttributeContext_Api Api;
+  typedef AttributeContext_Auth Auth;
+  typedef AttributeContext_Request Request;
+  typedef AttributeContext_Response Response;
+  typedef AttributeContext_Resource Resource;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kExtensionsFieldNumber = 8,
+    kSourceFieldNumber = 1,
+    kDestinationFieldNumber = 2,
+    kRequestFieldNumber = 3,
+    kResponseFieldNumber = 4,
+    kResourceFieldNumber = 5,
+    kApiFieldNumber = 6,
+    kOriginFieldNumber = 7,
+  };
+  // repeated .google.protobuf.Any extensions = 8 [json_name = "extensions"];
+  int extensions_size() const;
+  private:
+  int _internal_extensions_size() const;
+
+  public:
+  void clear_extensions() ;
+  ::google::protobuf::Any* mutable_extensions(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
+      mutable_extensions();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_extensions() const;
+  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_extensions();
+  public:
+  const ::google::protobuf::Any& extensions(int index) const;
+  ::google::protobuf::Any* add_extensions();
+  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
+      extensions() const;
+  // .google.rpc.context.AttributeContext.Peer source = 1 [json_name = "source"];
+  bool has_source() const;
+  void clear_source() ;
+  const ::google::rpc::context::AttributeContext_Peer& source() const;
+  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Peer* release_source();
+  ::google::rpc::context::AttributeContext_Peer* mutable_source();
+  void set_allocated_source(::google::rpc::context::AttributeContext_Peer* value);
+  void unsafe_arena_set_allocated_source(::google::rpc::context::AttributeContext_Peer* value);
+  ::google::rpc::context::AttributeContext_Peer* unsafe_arena_release_source();
+
+  private:
+  const ::google::rpc::context::AttributeContext_Peer& _internal_source() const;
+  ::google::rpc::context::AttributeContext_Peer* _internal_mutable_source();
+
+  public:
+  // .google.rpc.context.AttributeContext.Peer destination = 2 [json_name = "destination"];
+  bool has_destination() const;
+  void clear_destination() ;
+  const ::google::rpc::context::AttributeContext_Peer& destination() const;
+  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Peer* release_destination();
+  ::google::rpc::context::AttributeContext_Peer* mutable_destination();
+  void set_allocated_destination(::google::rpc::context::AttributeContext_Peer* value);
+  void unsafe_arena_set_allocated_destination(::google::rpc::context::AttributeContext_Peer* value);
+  ::google::rpc::context::AttributeContext_Peer* unsafe_arena_release_destination();
+
+  private:
+  const ::google::rpc::context::AttributeContext_Peer& _internal_destination() const;
+  ::google::rpc::context::AttributeContext_Peer* _internal_mutable_destination();
+
+  public:
+  // .google.rpc.context.AttributeContext.Request request = 3 [json_name = "request"];
+  bool has_request() const;
+  void clear_request() ;
+  const ::google::rpc::context::AttributeContext_Request& request() const;
+  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Request* release_request();
+  ::google::rpc::context::AttributeContext_Request* mutable_request();
+  void set_allocated_request(::google::rpc::context::AttributeContext_Request* value);
+  void unsafe_arena_set_allocated_request(::google::rpc::context::AttributeContext_Request* value);
+  ::google::rpc::context::AttributeContext_Request* unsafe_arena_release_request();
+
+  private:
+  const ::google::rpc::context::AttributeContext_Request& _internal_request() const;
+  ::google::rpc::context::AttributeContext_Request* _internal_mutable_request();
+
+  public:
+  // .google.rpc.context.AttributeContext.Response response = 4 [json_name = "response"];
+  bool has_response() const;
+  void clear_response() ;
+  const ::google::rpc::context::AttributeContext_Response& response() const;
+  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Response* release_response();
+  ::google::rpc::context::AttributeContext_Response* mutable_response();
+  void set_allocated_response(::google::rpc::context::AttributeContext_Response* value);
+  void unsafe_arena_set_allocated_response(::google::rpc::context::AttributeContext_Response* value);
+  ::google::rpc::context::AttributeContext_Response* unsafe_arena_release_response();
+
+  private:
+  const ::google::rpc::context::AttributeContext_Response& _internal_response() const;
+  ::google::rpc::context::AttributeContext_Response* _internal_mutable_response();
+
+  public:
+  // .google.rpc.context.AttributeContext.Resource resource = 5 [json_name = "resource"];
+  bool has_resource() const;
+  void clear_resource() ;
+  const ::google::rpc::context::AttributeContext_Resource& resource() const;
+  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Resource* release_resource();
+  ::google::rpc::context::AttributeContext_Resource* mutable_resource();
+  void set_allocated_resource(::google::rpc::context::AttributeContext_Resource* value);
+  void unsafe_arena_set_allocated_resource(::google::rpc::context::AttributeContext_Resource* value);
+  ::google::rpc::context::AttributeContext_Resource* unsafe_arena_release_resource();
+
+  private:
+  const ::google::rpc::context::AttributeContext_Resource& _internal_resource() const;
+  ::google::rpc::context::AttributeContext_Resource* _internal_mutable_resource();
+
+  public:
+  // .google.rpc.context.AttributeContext.Api api = 6 [json_name = "api"];
+  bool has_api() const;
+  void clear_api() ;
+  const ::google::rpc::context::AttributeContext_Api& api() const;
+  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Api* release_api();
+  ::google::rpc::context::AttributeContext_Api* mutable_api();
+  void set_allocated_api(::google::rpc::context::AttributeContext_Api* value);
+  void unsafe_arena_set_allocated_api(::google::rpc::context::AttributeContext_Api* value);
+  ::google::rpc::context::AttributeContext_Api* unsafe_arena_release_api();
+
+  private:
+  const ::google::rpc::context::AttributeContext_Api& _internal_api() const;
+  ::google::rpc::context::AttributeContext_Api* _internal_mutable_api();
+
+  public:
+  // .google.rpc.context.AttributeContext.Peer origin = 7 [json_name = "origin"];
+  bool has_origin() const;
+  void clear_origin() ;
+  const ::google::rpc::context::AttributeContext_Peer& origin() const;
+  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Peer* release_origin();
+  ::google::rpc::context::AttributeContext_Peer* mutable_origin();
+  void set_allocated_origin(::google::rpc::context::AttributeContext_Peer* value);
+  void unsafe_arena_set_allocated_origin(::google::rpc::context::AttributeContext_Peer* value);
+  ::google::rpc::context::AttributeContext_Peer* unsafe_arena_release_origin();
+
+  private:
+  const ::google::rpc::context::AttributeContext_Peer& _internal_origin() const;
+  ::google::rpc::context::AttributeContext_Peer* _internal_mutable_origin();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<3, 8, 8, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extensions_;
+    ::google::rpc::context::AttributeContext_Peer* source_;
+    ::google::rpc::context::AttributeContext_Peer* destination_;
+    ::google::rpc::context::AttributeContext_Request* request_;
+    ::google::rpc::context::AttributeContext_Response* response_;
+    ::google::rpc::context::AttributeContext_Resource* resource_;
+    ::google::rpc::context::AttributeContext_Api* api_;
+    ::google::rpc::context::AttributeContext_Peer* origin_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
+};
+
+// ===================================================================
+
+
+
+
+// ===================================================================
+
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif  // __GNUC__
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// AttributeContext_Peer
+
+// string ip = 1 [json_name = "ip"];
+inline void AttributeContext_Peer::clear_ip() {
+  _impl_.ip_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Peer::ip() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.ip)
+  return _internal_ip();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Peer::set_ip(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.ip)
+}
+inline std::string* AttributeContext_Peer::mutable_ip() {
+  std::string* _s = _internal_mutable_ip();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Peer.ip)
+  return _s;
+}
+inline const std::string& AttributeContext_Peer::_internal_ip() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.ip_.Get();
+}
+inline void AttributeContext_Peer::_internal_set_ip(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.ip_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Peer::_internal_mutable_ip() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.ip_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Peer::release_ip() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Peer.ip)
+  return _impl_.ip_.Release();
+}
+inline void AttributeContext_Peer::set_allocated_ip(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.ip_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.ip_.IsDefault()) {
+          _impl_.ip_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Peer.ip)
+}
+
+// int64 port = 2 [json_name = "port"];
+inline void AttributeContext_Peer::clear_port() {
+  _impl_.port_ = ::int64_t{0};
+}
+inline ::int64_t AttributeContext_Peer::port() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.port)
+  return _internal_port();
+}
+inline void AttributeContext_Peer::set_port(::int64_t value) {
+  _internal_set_port(value);
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.port)
+}
+inline ::int64_t AttributeContext_Peer::_internal_port() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.port_;
+}
+inline void AttributeContext_Peer::_internal_set_port(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.port_ = value;
+}
+
+// map<string, string> labels = 6 [json_name = "labels"];
+inline int AttributeContext_Peer::_internal_labels_size() const {
+  return _internal_labels().size();
+}
+inline int AttributeContext_Peer::labels_size() const {
+  return _internal_labels_size();
+}
+inline void AttributeContext_Peer::clear_labels() {
+  _impl_.labels_.Clear();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Peer::_internal_labels() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.labels_.GetMap();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Peer::labels() const {
+  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Peer.labels)
+  return _internal_labels();
+}
+inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Peer::_internal_mutable_labels() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.labels_.MutableMap();
+}
+inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Peer::mutable_labels() {
+  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Peer.labels)
+  return _internal_mutable_labels();
+}
+
+// string principal = 7 [json_name = "principal"];
+inline void AttributeContext_Peer::clear_principal() {
+  _impl_.principal_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Peer::principal() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.principal)
+  return _internal_principal();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Peer::set_principal(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.principal_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.principal)
+}
+inline std::string* AttributeContext_Peer::mutable_principal() {
+  std::string* _s = _internal_mutable_principal();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Peer.principal)
+  return _s;
+}
+inline const std::string& AttributeContext_Peer::_internal_principal() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.principal_.Get();
+}
+inline void AttributeContext_Peer::_internal_set_principal(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.principal_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Peer::_internal_mutable_principal() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.principal_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Peer::release_principal() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Peer.principal)
+  return _impl_.principal_.Release();
+}
+inline void AttributeContext_Peer::set_allocated_principal(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.principal_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.principal_.IsDefault()) {
+          _impl_.principal_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Peer.principal)
+}
+
+// string region_code = 8 [json_name = "regionCode"];
+inline void AttributeContext_Peer::clear_region_code() {
+  _impl_.region_code_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Peer::region_code() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.region_code)
+  return _internal_region_code();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Peer::set_region_code(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.region_code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.region_code)
+}
+inline std::string* AttributeContext_Peer::mutable_region_code() {
+  std::string* _s = _internal_mutable_region_code();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Peer.region_code)
+  return _s;
+}
+inline const std::string& AttributeContext_Peer::_internal_region_code() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.region_code_.Get();
+}
+inline void AttributeContext_Peer::_internal_set_region_code(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.region_code_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Peer::_internal_mutable_region_code() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.region_code_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Peer::release_region_code() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Peer.region_code)
+  return _impl_.region_code_.Release();
+}
+inline void AttributeContext_Peer::set_allocated_region_code(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.region_code_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.region_code_.IsDefault()) {
+          _impl_.region_code_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Peer.region_code)
+}
+
+// -------------------------------------------------------------------
+
+// AttributeContext_Api
+
+// string service = 1 [json_name = "service"];
+inline void AttributeContext_Api::clear_service() {
+  _impl_.service_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Api::service() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.service)
+  return _internal_service();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Api::set_service(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.service_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.service)
+}
+inline std::string* AttributeContext_Api::mutable_service() {
+  std::string* _s = _internal_mutable_service();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.service)
+  return _s;
+}
+inline const std::string& AttributeContext_Api::_internal_service() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.service_.Get();
+}
+inline void AttributeContext_Api::_internal_set_service(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.service_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Api::_internal_mutable_service() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.service_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Api::release_service() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.service)
+  return _impl_.service_.Release();
+}
+inline void AttributeContext_Api::set_allocated_service(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.service_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.service_.IsDefault()) {
+          _impl_.service_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.service)
+}
+
+// string operation = 2 [json_name = "operation"];
+inline void AttributeContext_Api::clear_operation() {
+  _impl_.operation_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Api::operation() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.operation)
+  return _internal_operation();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Api::set_operation(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.operation_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.operation)
+}
+inline std::string* AttributeContext_Api::mutable_operation() {
+  std::string* _s = _internal_mutable_operation();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.operation)
+  return _s;
+}
+inline const std::string& AttributeContext_Api::_internal_operation() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.operation_.Get();
+}
+inline void AttributeContext_Api::_internal_set_operation(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.operation_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Api::_internal_mutable_operation() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.operation_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Api::release_operation() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.operation)
+  return _impl_.operation_.Release();
+}
+inline void AttributeContext_Api::set_allocated_operation(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.operation_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.operation_.IsDefault()) {
+          _impl_.operation_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.operation)
+}
+
+// string protocol = 3 [json_name = "protocol"];
+inline void AttributeContext_Api::clear_protocol() {
+  _impl_.protocol_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Api::protocol() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.protocol)
+  return _internal_protocol();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Api::set_protocol(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.protocol)
+}
+inline std::string* AttributeContext_Api::mutable_protocol() {
+  std::string* _s = _internal_mutable_protocol();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.protocol)
+  return _s;
+}
+inline const std::string& AttributeContext_Api::_internal_protocol() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.protocol_.Get();
+}
+inline void AttributeContext_Api::_internal_set_protocol(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.protocol_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Api::_internal_mutable_protocol() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.protocol_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Api::release_protocol() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.protocol)
+  return _impl_.protocol_.Release();
+}
+inline void AttributeContext_Api::set_allocated_protocol(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.protocol_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.protocol_.IsDefault()) {
+          _impl_.protocol_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.protocol)
+}
+
+// string version = 4 [json_name = "version"];
+inline void AttributeContext_Api::clear_version() {
+  _impl_.version_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Api::version() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.version)
+  return _internal_version();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Api::set_version(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.version)
+}
+inline std::string* AttributeContext_Api::mutable_version() {
+  std::string* _s = _internal_mutable_version();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.version)
+  return _s;
+}
+inline const std::string& AttributeContext_Api::_internal_version() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.version_.Get();
+}
+inline void AttributeContext_Api::_internal_set_version(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.version_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Api::_internal_mutable_version() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.version_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Api::release_version() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.version)
+  return _impl_.version_.Release();
+}
+inline void AttributeContext_Api::set_allocated_version(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.version_.IsDefault()) {
+          _impl_.version_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.version)
+}
+
+// -------------------------------------------------------------------
+
+// AttributeContext_Auth
+
+// string principal = 1 [json_name = "principal"];
+inline void AttributeContext_Auth::clear_principal() {
+  _impl_.principal_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Auth::principal() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.principal)
+  return _internal_principal();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Auth::set_principal(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.principal_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.principal)
+}
+inline std::string* AttributeContext_Auth::mutable_principal() {
+  std::string* _s = _internal_mutable_principal();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.principal)
+  return _s;
+}
+inline const std::string& AttributeContext_Auth::_internal_principal() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.principal_.Get();
+}
+inline void AttributeContext_Auth::_internal_set_principal(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.principal_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Auth::_internal_mutable_principal() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.principal_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Auth::release_principal() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Auth.principal)
+  return _impl_.principal_.Release();
+}
+inline void AttributeContext_Auth::set_allocated_principal(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.principal_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.principal_.IsDefault()) {
+          _impl_.principal_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Auth.principal)
+}
+
+// repeated string audiences = 2 [json_name = "audiences"];
+inline int AttributeContext_Auth::_internal_audiences_size() const {
+  return _internal_audiences().size();
+}
+inline int AttributeContext_Auth::audiences_size() const {
+  return _internal_audiences_size();
+}
+inline void AttributeContext_Auth::clear_audiences() {
+  _internal_mutable_audiences()->Clear();
+}
+inline std::string* AttributeContext_Auth::add_audiences() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  std::string* _s = _internal_mutable_audiences()->Add();
+  // @@protoc_insertion_point(field_add_mutable:google.rpc.context.AttributeContext.Auth.audiences)
+  return _s;
+}
+inline const std::string& AttributeContext_Auth::audiences(int index) const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.audiences)
+  return _internal_audiences().Get(index);
+}
+inline std::string* AttributeContext_Auth::mutable_audiences(int index) {
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.audiences)
+  return _internal_mutable_audiences()->Mutable(index);
+}
+inline void AttributeContext_Auth::set_audiences(int index, const std::string& value) {
+  _internal_mutable_audiences()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.audiences)
+}
+inline void AttributeContext_Auth::set_audiences(int index, std::string&& value) {
+  _internal_mutable_audiences()->Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.audiences)
+}
+inline void AttributeContext_Auth::set_audiences(int index, const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  _internal_mutable_audiences()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Auth.audiences)
+}
+inline void AttributeContext_Auth::set_audiences(int index, const char* value,
+                              std::size_t size) {
+  _internal_mutable_audiences()->Mutable(index)->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Auth.audiences)
+}
+inline void AttributeContext_Auth::set_audiences(int index, absl::string_view value) {
+  _internal_mutable_audiences()->Mutable(index)->assign(value.data(),
+                                                     value.size());
+  // @@protoc_insertion_point(field_set_string_piece:google.rpc.context.AttributeContext.Auth.audiences)
+}
+inline void AttributeContext_Auth::add_audiences(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_audiences()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.audiences)
+}
+inline void AttributeContext_Auth::add_audiences(std::string&& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_audiences()->Add(std::move(value));
+  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.audiences)
+}
+inline void AttributeContext_Auth::add_audiences(const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_audiences()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add_char:google.rpc.context.AttributeContext.Auth.audiences)
+}
+inline void AttributeContext_Auth::add_audiences(const char* value, std::size_t size) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_audiences()->Add()->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_add_pointer:google.rpc.context.AttributeContext.Auth.audiences)
+}
+inline void AttributeContext_Auth::add_audiences(absl::string_view value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_audiences()->Add()->assign(value.data(), value.size());
+  // @@protoc_insertion_point(field_add_string_piece:google.rpc.context.AttributeContext.Auth.audiences)
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+AttributeContext_Auth::audiences() const {
+  // @@protoc_insertion_point(field_list:google.rpc.context.AttributeContext.Auth.audiences)
+  return _internal_audiences();
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>* AttributeContext_Auth::mutable_audiences() {
+  // @@protoc_insertion_point(field_mutable_list:google.rpc.context.AttributeContext.Auth.audiences)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_audiences();
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+AttributeContext_Auth::_internal_audiences() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.audiences_;
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>*
+AttributeContext_Auth::_internal_mutable_audiences() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.audiences_;
+}
+
+// string presenter = 3 [json_name = "presenter"];
+inline void AttributeContext_Auth::clear_presenter() {
+  _impl_.presenter_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Auth::presenter() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.presenter)
+  return _internal_presenter();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Auth::set_presenter(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.presenter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.presenter)
+}
+inline std::string* AttributeContext_Auth::mutable_presenter() {
+  std::string* _s = _internal_mutable_presenter();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.presenter)
+  return _s;
+}
+inline const std::string& AttributeContext_Auth::_internal_presenter() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.presenter_.Get();
+}
+inline void AttributeContext_Auth::_internal_set_presenter(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.presenter_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Auth::_internal_mutable_presenter() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.presenter_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Auth::release_presenter() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Auth.presenter)
+  return _impl_.presenter_.Release();
+}
+inline void AttributeContext_Auth::set_allocated_presenter(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.presenter_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.presenter_.IsDefault()) {
+          _impl_.presenter_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Auth.presenter)
+}
+
+// .google.protobuf.Struct claims = 4 [json_name = "claims"];
+inline bool AttributeContext_Auth::has_claims() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.claims_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Struct& AttributeContext_Auth::_internal_claims() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Struct* p = _impl_.claims_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
+}
+inline const ::google::protobuf::Struct& AttributeContext_Auth::claims() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.claims)
+  return _internal_claims();
+}
+inline void AttributeContext_Auth::unsafe_arena_set_allocated_claims(::google::protobuf::Struct* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.claims_);
+  }
+  _impl_.claims_ = reinterpret_cast<::google::protobuf::Struct*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Auth.claims)
+}
+inline ::google::protobuf::Struct* AttributeContext_Auth::release_claims() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::protobuf::Struct* released = _impl_.claims_;
+  _impl_.claims_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Struct* AttributeContext_Auth::unsafe_arena_release_claims() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Auth.claims)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::protobuf::Struct* temp = _impl_.claims_;
+  _impl_.claims_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Struct* AttributeContext_Auth::_internal_mutable_claims() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.claims_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaForAllocation());
+    _impl_.claims_ = reinterpret_cast<::google::protobuf::Struct*>(p);
+  }
+  return _impl_.claims_;
+}
+inline ::google::protobuf::Struct* AttributeContext_Auth::mutable_claims() {
+  ::google::protobuf::Struct* _msg = _internal_mutable_claims();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.claims)
+  return _msg;
+}
+inline void AttributeContext_Auth::set_allocated_claims(::google::protobuf::Struct* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.claims_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.claims_ = reinterpret_cast<::google::protobuf::Struct*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Auth.claims)
+}
+
+// repeated string access_levels = 5 [json_name = "accessLevels"];
+inline int AttributeContext_Auth::_internal_access_levels_size() const {
+  return _internal_access_levels().size();
+}
+inline int AttributeContext_Auth::access_levels_size() const {
+  return _internal_access_levels_size();
+}
+inline void AttributeContext_Auth::clear_access_levels() {
+  _internal_mutable_access_levels()->Clear();
+}
+inline std::string* AttributeContext_Auth::add_access_levels() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  std::string* _s = _internal_mutable_access_levels()->Add();
+  // @@protoc_insertion_point(field_add_mutable:google.rpc.context.AttributeContext.Auth.access_levels)
+  return _s;
+}
+inline const std::string& AttributeContext_Auth::access_levels(int index) const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.access_levels)
+  return _internal_access_levels().Get(index);
+}
+inline std::string* AttributeContext_Auth::mutable_access_levels(int index) {
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.access_levels)
+  return _internal_mutable_access_levels()->Mutable(index);
+}
+inline void AttributeContext_Auth::set_access_levels(int index, const std::string& value) {
+  _internal_mutable_access_levels()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.access_levels)
+}
+inline void AttributeContext_Auth::set_access_levels(int index, std::string&& value) {
+  _internal_mutable_access_levels()->Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.access_levels)
+}
+inline void AttributeContext_Auth::set_access_levels(int index, const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  _internal_mutable_access_levels()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Auth.access_levels)
+}
+inline void AttributeContext_Auth::set_access_levels(int index, const char* value,
+                              std::size_t size) {
+  _internal_mutable_access_levels()->Mutable(index)->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Auth.access_levels)
+}
+inline void AttributeContext_Auth::set_access_levels(int index, absl::string_view value) {
+  _internal_mutable_access_levels()->Mutable(index)->assign(value.data(),
+                                                     value.size());
+  // @@protoc_insertion_point(field_set_string_piece:google.rpc.context.AttributeContext.Auth.access_levels)
+}
+inline void AttributeContext_Auth::add_access_levels(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_access_levels()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.access_levels)
+}
+inline void AttributeContext_Auth::add_access_levels(std::string&& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_access_levels()->Add(std::move(value));
+  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.access_levels)
+}
+inline void AttributeContext_Auth::add_access_levels(const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_access_levels()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add_char:google.rpc.context.AttributeContext.Auth.access_levels)
+}
+inline void AttributeContext_Auth::add_access_levels(const char* value, std::size_t size) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_access_levels()->Add()->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_add_pointer:google.rpc.context.AttributeContext.Auth.access_levels)
+}
+inline void AttributeContext_Auth::add_access_levels(absl::string_view value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_access_levels()->Add()->assign(value.data(), value.size());
+  // @@protoc_insertion_point(field_add_string_piece:google.rpc.context.AttributeContext.Auth.access_levels)
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+AttributeContext_Auth::access_levels() const {
+  // @@protoc_insertion_point(field_list:google.rpc.context.AttributeContext.Auth.access_levels)
+  return _internal_access_levels();
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>* AttributeContext_Auth::mutable_access_levels() {
+  // @@protoc_insertion_point(field_mutable_list:google.rpc.context.AttributeContext.Auth.access_levels)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_access_levels();
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+AttributeContext_Auth::_internal_access_levels() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.access_levels_;
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>*
+AttributeContext_Auth::_internal_mutable_access_levels() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.access_levels_;
+}
+
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// AttributeContext_Request
+
+// string id = 1 [json_name = "id"];
+inline void AttributeContext_Request::clear_id() {
+  _impl_.id_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Request::id() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.id)
+  return _internal_id();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_id(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.id)
+}
+inline std::string* AttributeContext_Request::mutable_id() {
+  std::string* _s = _internal_mutable_id();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.id)
+  return _s;
+}
+inline const std::string& AttributeContext_Request::_internal_id() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.id_.Get();
+}
+inline void AttributeContext_Request::_internal_set_id(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.id_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::_internal_mutable_id() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.id_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::release_id() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.id)
+  return _impl_.id_.Release();
+}
+inline void AttributeContext_Request::set_allocated_id(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.id_.IsDefault()) {
+          _impl_.id_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.id)
+}
+
+// string method = 2 [json_name = "method"];
+inline void AttributeContext_Request::clear_method() {
+  _impl_.method_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Request::method() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.method)
+  return _internal_method();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_method(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.method)
+}
+inline std::string* AttributeContext_Request::mutable_method() {
+  std::string* _s = _internal_mutable_method();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.method)
+  return _s;
+}
+inline const std::string& AttributeContext_Request::_internal_method() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.method_.Get();
+}
+inline void AttributeContext_Request::_internal_set_method(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.method_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::_internal_mutable_method() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.method_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::release_method() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.method)
+  return _impl_.method_.Release();
+}
+inline void AttributeContext_Request::set_allocated_method(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.method_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.method_.IsDefault()) {
+          _impl_.method_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.method)
+}
+
+// map<string, string> headers = 3 [json_name = "headers"];
+inline int AttributeContext_Request::_internal_headers_size() const {
+  return _internal_headers().size();
+}
+inline int AttributeContext_Request::headers_size() const {
+  return _internal_headers_size();
+}
+inline void AttributeContext_Request::clear_headers() {
+  _impl_.headers_.Clear();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Request::_internal_headers() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.headers_.GetMap();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Request::headers() const {
+  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Request.headers)
+  return _internal_headers();
+}
+inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Request::_internal_mutable_headers() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.headers_.MutableMap();
+}
+inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Request::mutable_headers() {
+  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Request.headers)
+  return _internal_mutable_headers();
+}
+
+// string path = 4 [json_name = "path"];
+inline void AttributeContext_Request::clear_path() {
+  _impl_.path_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Request::path() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.path)
+  return _internal_path();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_path(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.path)
+}
+inline std::string* AttributeContext_Request::mutable_path() {
+  std::string* _s = _internal_mutable_path();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.path)
+  return _s;
+}
+inline const std::string& AttributeContext_Request::_internal_path() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.path_.Get();
+}
+inline void AttributeContext_Request::_internal_set_path(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.path_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::_internal_mutable_path() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.path_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::release_path() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.path)
+  return _impl_.path_.Release();
+}
+inline void AttributeContext_Request::set_allocated_path(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.path_.IsDefault()) {
+          _impl_.path_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.path)
+}
+
+// string host = 5 [json_name = "host"];
+inline void AttributeContext_Request::clear_host() {
+  _impl_.host_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Request::host() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.host)
+  return _internal_host();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_host(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.host)
+}
+inline std::string* AttributeContext_Request::mutable_host() {
+  std::string* _s = _internal_mutable_host();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.host)
+  return _s;
+}
+inline const std::string& AttributeContext_Request::_internal_host() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.host_.Get();
+}
+inline void AttributeContext_Request::_internal_set_host(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.host_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::_internal_mutable_host() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.host_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::release_host() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.host)
+  return _impl_.host_.Release();
+}
+inline void AttributeContext_Request::set_allocated_host(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.host_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.host_.IsDefault()) {
+          _impl_.host_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.host)
+}
+
+// string scheme = 6 [json_name = "scheme"];
+inline void AttributeContext_Request::clear_scheme() {
+  _impl_.scheme_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Request::scheme() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.scheme)
+  return _internal_scheme();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_scheme(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.scheme_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.scheme)
+}
+inline std::string* AttributeContext_Request::mutable_scheme() {
+  std::string* _s = _internal_mutable_scheme();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.scheme)
+  return _s;
+}
+inline const std::string& AttributeContext_Request::_internal_scheme() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.scheme_.Get();
+}
+inline void AttributeContext_Request::_internal_set_scheme(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.scheme_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::_internal_mutable_scheme() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.scheme_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::release_scheme() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.scheme)
+  return _impl_.scheme_.Release();
+}
+inline void AttributeContext_Request::set_allocated_scheme(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.scheme_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.scheme_.IsDefault()) {
+          _impl_.scheme_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.scheme)
+}
+
+// string query = 7 [json_name = "query"];
+inline void AttributeContext_Request::clear_query() {
+  _impl_.query_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Request::query() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.query)
+  return _internal_query();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_query(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.query_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.query)
+}
+inline std::string* AttributeContext_Request::mutable_query() {
+  std::string* _s = _internal_mutable_query();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.query)
+  return _s;
+}
+inline const std::string& AttributeContext_Request::_internal_query() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.query_.Get();
+}
+inline void AttributeContext_Request::_internal_set_query(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.query_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::_internal_mutable_query() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.query_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::release_query() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.query)
+  return _impl_.query_.Release();
+}
+inline void AttributeContext_Request::set_allocated_query(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.query_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.query_.IsDefault()) {
+          _impl_.query_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.query)
+}
+
+// .google.protobuf.Timestamp time = 9 [json_name = "time"];
+inline bool AttributeContext_Request::has_time() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Timestamp& AttributeContext_Request::_internal_time() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Timestamp* p = _impl_.time_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
+}
+inline const ::google::protobuf::Timestamp& AttributeContext_Request::time() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.time)
+  return _internal_time();
+}
+inline void AttributeContext_Request::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
+  }
+  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Request.time)
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Request::release_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::protobuf::Timestamp* released = _impl_.time_;
+  _impl_.time_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Request::unsafe_arena_release_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.time)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::protobuf::Timestamp* temp = _impl_.time_;
+  _impl_.time_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Request::_internal_mutable_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.time_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
+    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
+  }
+  return _impl_.time_;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Request::mutable_time() {
+  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.time)
+  return _msg;
+}
+inline void AttributeContext_Request::set_allocated_time(::google::protobuf::Timestamp* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.time)
+}
+
+// int64 size = 10 [json_name = "size"];
+inline void AttributeContext_Request::clear_size() {
+  _impl_.size_ = ::int64_t{0};
+}
+inline ::int64_t AttributeContext_Request::size() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.size)
+  return _internal_size();
+}
+inline void AttributeContext_Request::set_size(::int64_t value) {
+  _internal_set_size(value);
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.size)
+}
+inline ::int64_t AttributeContext_Request::_internal_size() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.size_;
+}
+inline void AttributeContext_Request::_internal_set_size(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.size_ = value;
+}
+
+// string protocol = 11 [json_name = "protocol"];
+inline void AttributeContext_Request::clear_protocol() {
+  _impl_.protocol_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Request::protocol() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.protocol)
+  return _internal_protocol();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_protocol(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.protocol)
+}
+inline std::string* AttributeContext_Request::mutable_protocol() {
+  std::string* _s = _internal_mutable_protocol();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.protocol)
+  return _s;
+}
+inline const std::string& AttributeContext_Request::_internal_protocol() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.protocol_.Get();
+}
+inline void AttributeContext_Request::_internal_set_protocol(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.protocol_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::_internal_mutable_protocol() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.protocol_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::release_protocol() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.protocol)
+  return _impl_.protocol_.Release();
+}
+inline void AttributeContext_Request::set_allocated_protocol(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.protocol_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.protocol_.IsDefault()) {
+          _impl_.protocol_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.protocol)
+}
+
+// string reason = 12 [json_name = "reason"];
+inline void AttributeContext_Request::clear_reason() {
+  _impl_.reason_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Request::reason() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.reason)
+  return _internal_reason();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_reason(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.reason)
+}
+inline std::string* AttributeContext_Request::mutable_reason() {
+  std::string* _s = _internal_mutable_reason();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.reason)
+  return _s;
+}
+inline const std::string& AttributeContext_Request::_internal_reason() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.reason_.Get();
+}
+inline void AttributeContext_Request::_internal_set_reason(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.reason_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::_internal_mutable_reason() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.reason_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Request::release_reason() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.reason)
+  return _impl_.reason_.Release();
+}
+inline void AttributeContext_Request::set_allocated_reason(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.reason_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.reason_.IsDefault()) {
+          _impl_.reason_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.reason)
+}
+
+// .google.rpc.context.AttributeContext.Auth auth = 13 [json_name = "auth"];
+inline bool AttributeContext_Request::has_auth() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.auth_ != nullptr);
+  return value;
+}
+inline void AttributeContext_Request::clear_auth() {
+  if (_impl_.auth_ != nullptr) _impl_.auth_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000002u;
+}
+inline const ::google::rpc::context::AttributeContext_Auth& AttributeContext_Request::_internal_auth() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::rpc::context::AttributeContext_Auth* p = _impl_.auth_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Auth&>(::google::rpc::context::_AttributeContext_Auth_default_instance_);
+}
+inline const ::google::rpc::context::AttributeContext_Auth& AttributeContext_Request::auth() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.auth)
+  return _internal_auth();
+}
+inline void AttributeContext_Request::unsafe_arena_set_allocated_auth(::google::rpc::context::AttributeContext_Auth* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.auth_);
+  }
+  _impl_.auth_ = reinterpret_cast<::google::rpc::context::AttributeContext_Auth*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Request.auth)
+}
+inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::release_auth() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::rpc::context::AttributeContext_Auth* released = _impl_.auth_;
+  _impl_.auth_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::unsafe_arena_release_auth() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.auth)
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::rpc::context::AttributeContext_Auth* temp = _impl_.auth_;
+  _impl_.auth_ = nullptr;
+  return temp;
+}
+inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::_internal_mutable_auth() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000002u;
+  if (_impl_.auth_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Auth>(GetArenaForAllocation());
+    _impl_.auth_ = reinterpret_cast<::google::rpc::context::AttributeContext_Auth*>(p);
+  }
+  return _impl_.auth_;
+}
+inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::mutable_auth() {
+  ::google::rpc::context::AttributeContext_Auth* _msg = _internal_mutable_auth();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.auth)
+  return _msg;
+}
+inline void AttributeContext_Request::set_allocated_auth(::google::rpc::context::AttributeContext_Auth* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::rpc::context::AttributeContext_Auth*>(_impl_.auth_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::rpc::context::AttributeContext_Auth*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+
+  _impl_.auth_ = reinterpret_cast<::google::rpc::context::AttributeContext_Auth*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.auth)
+}
+
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// AttributeContext_Response
+
+// int64 code = 1 [json_name = "code"];
+inline void AttributeContext_Response::clear_code() {
+  _impl_.code_ = ::int64_t{0};
+}
+inline ::int64_t AttributeContext_Response::code() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Response.code)
+  return _internal_code();
+}
+inline void AttributeContext_Response::set_code(::int64_t value) {
+  _internal_set_code(value);
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Response.code)
+}
+inline ::int64_t AttributeContext_Response::_internal_code() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.code_;
+}
+inline void AttributeContext_Response::_internal_set_code(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.code_ = value;
+}
+
+// int64 size = 2 [json_name = "size"];
+inline void AttributeContext_Response::clear_size() {
+  _impl_.size_ = ::int64_t{0};
+}
+inline ::int64_t AttributeContext_Response::size() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Response.size)
+  return _internal_size();
+}
+inline void AttributeContext_Response::set_size(::int64_t value) {
+  _internal_set_size(value);
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Response.size)
+}
+inline ::int64_t AttributeContext_Response::_internal_size() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.size_;
+}
+inline void AttributeContext_Response::_internal_set_size(::int64_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.size_ = value;
+}
+
+// map<string, string> headers = 3 [json_name = "headers"];
+inline int AttributeContext_Response::_internal_headers_size() const {
+  return _internal_headers().size();
+}
+inline int AttributeContext_Response::headers_size() const {
+  return _internal_headers_size();
+}
+inline void AttributeContext_Response::clear_headers() {
+  _impl_.headers_.Clear();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Response::_internal_headers() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.headers_.GetMap();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Response::headers() const {
+  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Response.headers)
+  return _internal_headers();
+}
+inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Response::_internal_mutable_headers() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.headers_.MutableMap();
+}
+inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Response::mutable_headers() {
+  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Response.headers)
+  return _internal_mutable_headers();
+}
+
+// .google.protobuf.Timestamp time = 4 [json_name = "time"];
+inline bool AttributeContext_Response::has_time() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Timestamp& AttributeContext_Response::_internal_time() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Timestamp* p = _impl_.time_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
+}
+inline const ::google::protobuf::Timestamp& AttributeContext_Response::time() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Response.time)
+  return _internal_time();
+}
+inline void AttributeContext_Response::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
+  }
+  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Response.time)
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Response::release_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::protobuf::Timestamp* released = _impl_.time_;
+  _impl_.time_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Response::unsafe_arena_release_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Response.time)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::protobuf::Timestamp* temp = _impl_.time_;
+  _impl_.time_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Response::_internal_mutable_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.time_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
+    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
+  }
+  return _impl_.time_;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Response::mutable_time() {
+  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Response.time)
+  return _msg;
+}
+inline void AttributeContext_Response::set_allocated_time(::google::protobuf::Timestamp* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Response.time)
+}
+
+// .google.protobuf.Duration backend_latency = 5 [json_name = "backendLatency"];
+inline bool AttributeContext_Response::has_backend_latency() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.backend_latency_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Duration& AttributeContext_Response::_internal_backend_latency() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Duration* p = _impl_.backend_latency_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
+}
+inline const ::google::protobuf::Duration& AttributeContext_Response::backend_latency() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Response.backend_latency)
+  return _internal_backend_latency();
+}
+inline void AttributeContext_Response::unsafe_arena_set_allocated_backend_latency(::google::protobuf::Duration* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.backend_latency_);
+  }
+  _impl_.backend_latency_ = reinterpret_cast<::google::protobuf::Duration*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Response.backend_latency)
+}
+inline ::google::protobuf::Duration* AttributeContext_Response::release_backend_latency() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::protobuf::Duration* released = _impl_.backend_latency_;
+  _impl_.backend_latency_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Duration* AttributeContext_Response::unsafe_arena_release_backend_latency() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Response.backend_latency)
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::protobuf::Duration* temp = _impl_.backend_latency_;
+  _impl_.backend_latency_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Duration* AttributeContext_Response::_internal_mutable_backend_latency() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000002u;
+  if (_impl_.backend_latency_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaForAllocation());
+    _impl_.backend_latency_ = reinterpret_cast<::google::protobuf::Duration*>(p);
+  }
+  return _impl_.backend_latency_;
+}
+inline ::google::protobuf::Duration* AttributeContext_Response::mutable_backend_latency() {
+  ::google::protobuf::Duration* _msg = _internal_mutable_backend_latency();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Response.backend_latency)
+  return _msg;
+}
+inline void AttributeContext_Response::set_allocated_backend_latency(::google::protobuf::Duration* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.backend_latency_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+
+  _impl_.backend_latency_ = reinterpret_cast<::google::protobuf::Duration*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Response.backend_latency)
+}
+
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// AttributeContext_Resource
+
+// string service = 1 [json_name = "service"];
+inline void AttributeContext_Resource::clear_service() {
+  _impl_.service_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Resource::service() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.service)
+  return _internal_service();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_service(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.service_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.service)
+}
+inline std::string* AttributeContext_Resource::mutable_service() {
+  std::string* _s = _internal_mutable_service();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.service)
+  return _s;
+}
+inline const std::string& AttributeContext_Resource::_internal_service() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.service_.Get();
+}
+inline void AttributeContext_Resource::_internal_set_service(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.service_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::_internal_mutable_service() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.service_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::release_service() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.service)
+  return _impl_.service_.Release();
+}
+inline void AttributeContext_Resource::set_allocated_service(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.service_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.service_.IsDefault()) {
+          _impl_.service_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.service)
+}
+
+// string name = 2 [json_name = "name"];
+inline void AttributeContext_Resource::clear_name() {
+  _impl_.name_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Resource::name() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.name)
+  return _internal_name();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_name(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.name)
+}
+inline std::string* AttributeContext_Resource::mutable_name() {
+  std::string* _s = _internal_mutable_name();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.name)
+  return _s;
+}
+inline const std::string& AttributeContext_Resource::_internal_name() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.name_.Get();
+}
+inline void AttributeContext_Resource::_internal_set_name(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.name_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::_internal_mutable_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.name_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::release_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.name)
+  return _impl_.name_.Release();
+}
+inline void AttributeContext_Resource::set_allocated_name(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.name_.IsDefault()) {
+          _impl_.name_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.name)
+}
+
+// string type = 3 [json_name = "type"];
+inline void AttributeContext_Resource::clear_type() {
+  _impl_.type_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Resource::type() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.type)
+  return _internal_type();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_type(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.type)
+}
+inline std::string* AttributeContext_Resource::mutable_type() {
+  std::string* _s = _internal_mutable_type();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.type)
+  return _s;
+}
+inline const std::string& AttributeContext_Resource::_internal_type() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.type_.Get();
+}
+inline void AttributeContext_Resource::_internal_set_type(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.type_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::_internal_mutable_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.type_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::release_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.type)
+  return _impl_.type_.Release();
+}
+inline void AttributeContext_Resource::set_allocated_type(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.type_.IsDefault()) {
+          _impl_.type_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.type)
+}
+
+// map<string, string> labels = 4 [json_name = "labels"];
+inline int AttributeContext_Resource::_internal_labels_size() const {
+  return _internal_labels().size();
+}
+inline int AttributeContext_Resource::labels_size() const {
+  return _internal_labels_size();
+}
+inline void AttributeContext_Resource::clear_labels() {
+  _impl_.labels_.Clear();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Resource::_internal_labels() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.labels_.GetMap();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Resource::labels() const {
+  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Resource.labels)
+  return _internal_labels();
+}
+inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Resource::_internal_mutable_labels() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.labels_.MutableMap();
+}
+inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Resource::mutable_labels() {
+  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Resource.labels)
+  return _internal_mutable_labels();
+}
+
+// string uid = 5 [json_name = "uid"];
+inline void AttributeContext_Resource::clear_uid() {
+  _impl_.uid_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Resource::uid() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.uid)
+  return _internal_uid();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_uid(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.uid)
+}
+inline std::string* AttributeContext_Resource::mutable_uid() {
+  std::string* _s = _internal_mutable_uid();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.uid)
+  return _s;
+}
+inline const std::string& AttributeContext_Resource::_internal_uid() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.uid_.Get();
+}
+inline void AttributeContext_Resource::_internal_set_uid(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.uid_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::_internal_mutable_uid() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.uid_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::release_uid() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.uid)
+  return _impl_.uid_.Release();
+}
+inline void AttributeContext_Resource::set_allocated_uid(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.uid_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.uid_.IsDefault()) {
+          _impl_.uid_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.uid)
+}
+
+// map<string, string> annotations = 6 [json_name = "annotations"];
+inline int AttributeContext_Resource::_internal_annotations_size() const {
+  return _internal_annotations().size();
+}
+inline int AttributeContext_Resource::annotations_size() const {
+  return _internal_annotations_size();
+}
+inline void AttributeContext_Resource::clear_annotations() {
+  _impl_.annotations_.Clear();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Resource::_internal_annotations() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.annotations_.GetMap();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Resource::annotations() const {
+  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Resource.annotations)
+  return _internal_annotations();
+}
+inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Resource::_internal_mutable_annotations() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.annotations_.MutableMap();
+}
+inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Resource::mutable_annotations() {
+  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Resource.annotations)
+  return _internal_mutable_annotations();
+}
+
+// string display_name = 7 [json_name = "displayName"];
+inline void AttributeContext_Resource::clear_display_name() {
+  _impl_.display_name_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Resource::display_name() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.display_name)
+  return _internal_display_name();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_display_name(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.display_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.display_name)
+}
+inline std::string* AttributeContext_Resource::mutable_display_name() {
+  std::string* _s = _internal_mutable_display_name();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.display_name)
+  return _s;
+}
+inline const std::string& AttributeContext_Resource::_internal_display_name() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.display_name_.Get();
+}
+inline void AttributeContext_Resource::_internal_set_display_name(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.display_name_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::_internal_mutable_display_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.display_name_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::release_display_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.display_name)
+  return _impl_.display_name_.Release();
+}
+inline void AttributeContext_Resource::set_allocated_display_name(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.display_name_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.display_name_.IsDefault()) {
+          _impl_.display_name_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.display_name)
+}
+
+// .google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];
+inline bool AttributeContext_Resource::has_create_time() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.create_time_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Timestamp& AttributeContext_Resource::_internal_create_time() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Timestamp* p = _impl_.create_time_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
+}
+inline const ::google::protobuf::Timestamp& AttributeContext_Resource::create_time() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.create_time)
+  return _internal_create_time();
+}
+inline void AttributeContext_Resource::unsafe_arena_set_allocated_create_time(::google::protobuf::Timestamp* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.create_time_);
+  }
+  _impl_.create_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Resource.create_time)
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::release_create_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::protobuf::Timestamp* released = _impl_.create_time_;
+  _impl_.create_time_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::unsafe_arena_release_create_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.create_time)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::protobuf::Timestamp* temp = _impl_.create_time_;
+  _impl_.create_time_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::_internal_mutable_create_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.create_time_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
+    _impl_.create_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
+  }
+  return _impl_.create_time_;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::mutable_create_time() {
+  ::google::protobuf::Timestamp* _msg = _internal_mutable_create_time();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.create_time)
+  return _msg;
+}
+inline void AttributeContext_Resource::set_allocated_create_time(::google::protobuf::Timestamp* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.create_time_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.create_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.create_time)
+}
+
+// .google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];
+inline bool AttributeContext_Resource::has_update_time() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.update_time_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Timestamp& AttributeContext_Resource::_internal_update_time() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Timestamp* p = _impl_.update_time_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
+}
+inline const ::google::protobuf::Timestamp& AttributeContext_Resource::update_time() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.update_time)
+  return _internal_update_time();
+}
+inline void AttributeContext_Resource::unsafe_arena_set_allocated_update_time(::google::protobuf::Timestamp* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.update_time_);
+  }
+  _impl_.update_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Resource.update_time)
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::release_update_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::protobuf::Timestamp* released = _impl_.update_time_;
+  _impl_.update_time_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::unsafe_arena_release_update_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.update_time)
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::protobuf::Timestamp* temp = _impl_.update_time_;
+  _impl_.update_time_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::_internal_mutable_update_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000002u;
+  if (_impl_.update_time_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
+    _impl_.update_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
+  }
+  return _impl_.update_time_;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::mutable_update_time() {
+  ::google::protobuf::Timestamp* _msg = _internal_mutable_update_time();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.update_time)
+  return _msg;
+}
+inline void AttributeContext_Resource::set_allocated_update_time(::google::protobuf::Timestamp* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.update_time_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+
+  _impl_.update_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.update_time)
+}
+
+// .google.protobuf.Timestamp delete_time = 10 [json_name = "deleteTime"];
+inline bool AttributeContext_Resource::has_delete_time() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.delete_time_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Timestamp& AttributeContext_Resource::_internal_delete_time() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Timestamp* p = _impl_.delete_time_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
+}
+inline const ::google::protobuf::Timestamp& AttributeContext_Resource::delete_time() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.delete_time)
+  return _internal_delete_time();
+}
+inline void AttributeContext_Resource::unsafe_arena_set_allocated_delete_time(::google::protobuf::Timestamp* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.delete_time_);
+  }
+  _impl_.delete_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000004u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000004u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Resource.delete_time)
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::release_delete_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000004u;
+  ::google::protobuf::Timestamp* released = _impl_.delete_time_;
+  _impl_.delete_time_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::unsafe_arena_release_delete_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.delete_time)
+
+  _impl_._has_bits_[0] &= ~0x00000004u;
+  ::google::protobuf::Timestamp* temp = _impl_.delete_time_;
+  _impl_.delete_time_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::_internal_mutable_delete_time() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000004u;
+  if (_impl_.delete_time_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
+    _impl_.delete_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
+  }
+  return _impl_.delete_time_;
+}
+inline ::google::protobuf::Timestamp* AttributeContext_Resource::mutable_delete_time() {
+  ::google::protobuf::Timestamp* _msg = _internal_mutable_delete_time();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.delete_time)
+  return _msg;
+}
+inline void AttributeContext_Resource::set_allocated_delete_time(::google::protobuf::Timestamp* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.delete_time_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000004u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000004u;
+  }
+
+  _impl_.delete_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.delete_time)
+}
+
+// string etag = 11 [json_name = "etag"];
+inline void AttributeContext_Resource::clear_etag() {
+  _impl_.etag_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Resource::etag() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.etag)
+  return _internal_etag();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_etag(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.etag_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.etag)
+}
+inline std::string* AttributeContext_Resource::mutable_etag() {
+  std::string* _s = _internal_mutable_etag();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.etag)
+  return _s;
+}
+inline const std::string& AttributeContext_Resource::_internal_etag() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.etag_.Get();
+}
+inline void AttributeContext_Resource::_internal_set_etag(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.etag_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::_internal_mutable_etag() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.etag_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::release_etag() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.etag)
+  return _impl_.etag_.Release();
+}
+inline void AttributeContext_Resource::set_allocated_etag(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.etag_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.etag_.IsDefault()) {
+          _impl_.etag_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.etag)
+}
+
+// string location = 12 [json_name = "location"];
+inline void AttributeContext_Resource::clear_location() {
+  _impl_.location_.ClearToEmpty();
+}
+inline const std::string& AttributeContext_Resource::location() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.location)
+  return _internal_location();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_location(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.location)
+}
+inline std::string* AttributeContext_Resource::mutable_location() {
+  std::string* _s = _internal_mutable_location();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.location)
+  return _s;
+}
+inline const std::string& AttributeContext_Resource::_internal_location() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.location_.Get();
+}
+inline void AttributeContext_Resource::_internal_set_location(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.location_.Set(value, GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::_internal_mutable_location() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.location_.Mutable( GetArenaForAllocation());
+}
+inline std::string* AttributeContext_Resource::release_location() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.location)
+  return _impl_.location_.Release();
+}
+inline void AttributeContext_Resource::set_allocated_location(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.location_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.location_.IsDefault()) {
+          _impl_.location_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.location)
+}
+
+// -------------------------------------------------------------------
+
+// AttributeContext
+
+// .google.rpc.context.AttributeContext.Peer origin = 7 [json_name = "origin"];
+inline bool AttributeContext::has_origin() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.origin_ != nullptr);
+  return value;
+}
+inline void AttributeContext::clear_origin() {
+  if (_impl_.origin_ != nullptr) _impl_.origin_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000040u;
+}
+inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_internal_origin() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::rpc::context::AttributeContext_Peer* p = _impl_.origin_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Peer&>(::google::rpc::context::_AttributeContext_Peer_default_instance_);
+}
+inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::origin() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.origin)
+  return _internal_origin();
+}
+inline void AttributeContext::unsafe_arena_set_allocated_origin(::google::rpc::context::AttributeContext_Peer* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.origin_);
+  }
+  _impl_.origin_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000040u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000040u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.origin)
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::release_origin() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000040u;
+  ::google::rpc::context::AttributeContext_Peer* released = _impl_.origin_;
+  _impl_.origin_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::unsafe_arena_release_origin() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.origin)
+
+  _impl_._has_bits_[0] &= ~0x00000040u;
+  ::google::rpc::context::AttributeContext_Peer* temp = _impl_.origin_;
+  _impl_.origin_ = nullptr;
+  return temp;
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::_internal_mutable_origin() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000040u;
+  if (_impl_.origin_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Peer>(GetArenaForAllocation());
+    _impl_.origin_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(p);
+  }
+  return _impl_.origin_;
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::mutable_origin() {
+  ::google::rpc::context::AttributeContext_Peer* _msg = _internal_mutable_origin();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.origin)
+  return _msg;
+}
+inline void AttributeContext::set_allocated_origin(::google::rpc::context::AttributeContext_Peer* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(_impl_.origin_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000040u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000040u;
+  }
+
+  _impl_.origin_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.origin)
+}
+
+// .google.rpc.context.AttributeContext.Peer source = 1 [json_name = "source"];
+inline bool AttributeContext::has_source() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.source_ != nullptr);
+  return value;
+}
+inline void AttributeContext::clear_source() {
+  if (_impl_.source_ != nullptr) _impl_.source_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_internal_source() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::rpc::context::AttributeContext_Peer* p = _impl_.source_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Peer&>(::google::rpc::context::_AttributeContext_Peer_default_instance_);
+}
+inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::source() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.source)
+  return _internal_source();
+}
+inline void AttributeContext::unsafe_arena_set_allocated_source(::google::rpc::context::AttributeContext_Peer* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_);
+  }
+  _impl_.source_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.source)
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::release_source() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::rpc::context::AttributeContext_Peer* released = _impl_.source_;
+  _impl_.source_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::unsafe_arena_release_source() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.source)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::rpc::context::AttributeContext_Peer* temp = _impl_.source_;
+  _impl_.source_ = nullptr;
+  return temp;
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::_internal_mutable_source() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.source_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Peer>(GetArenaForAllocation());
+    _impl_.source_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(p);
+  }
+  return _impl_.source_;
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::mutable_source() {
+  ::google::rpc::context::AttributeContext_Peer* _msg = _internal_mutable_source();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.source)
+  return _msg;
+}
+inline void AttributeContext::set_allocated_source(::google::rpc::context::AttributeContext_Peer* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(_impl_.source_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.source_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.source)
+}
+
+// .google.rpc.context.AttributeContext.Peer destination = 2 [json_name = "destination"];
+inline bool AttributeContext::has_destination() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.destination_ != nullptr);
+  return value;
+}
+inline void AttributeContext::clear_destination() {
+  if (_impl_.destination_ != nullptr) _impl_.destination_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000002u;
+}
+inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_internal_destination() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::rpc::context::AttributeContext_Peer* p = _impl_.destination_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Peer&>(::google::rpc::context::_AttributeContext_Peer_default_instance_);
+}
+inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::destination() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.destination)
+  return _internal_destination();
+}
+inline void AttributeContext::unsafe_arena_set_allocated_destination(::google::rpc::context::AttributeContext_Peer* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.destination_);
+  }
+  _impl_.destination_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.destination)
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::release_destination() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::rpc::context::AttributeContext_Peer* released = _impl_.destination_;
+  _impl_.destination_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::unsafe_arena_release_destination() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.destination)
+
+  _impl_._has_bits_[0] &= ~0x00000002u;
+  ::google::rpc::context::AttributeContext_Peer* temp = _impl_.destination_;
+  _impl_.destination_ = nullptr;
+  return temp;
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::_internal_mutable_destination() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000002u;
+  if (_impl_.destination_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Peer>(GetArenaForAllocation());
+    _impl_.destination_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(p);
+  }
+  return _impl_.destination_;
+}
+inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::mutable_destination() {
+  ::google::rpc::context::AttributeContext_Peer* _msg = _internal_mutable_destination();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.destination)
+  return _msg;
+}
+inline void AttributeContext::set_allocated_destination(::google::rpc::context::AttributeContext_Peer* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(_impl_.destination_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000002u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000002u;
+  }
+
+  _impl_.destination_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.destination)
+}
+
+// .google.rpc.context.AttributeContext.Request request = 3 [json_name = "request"];
+inline bool AttributeContext::has_request() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.request_ != nullptr);
+  return value;
+}
+inline void AttributeContext::clear_request() {
+  if (_impl_.request_ != nullptr) _impl_.request_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000004u;
+}
+inline const ::google::rpc::context::AttributeContext_Request& AttributeContext::_internal_request() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::rpc::context::AttributeContext_Request* p = _impl_.request_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Request&>(::google::rpc::context::_AttributeContext_Request_default_instance_);
+}
+inline const ::google::rpc::context::AttributeContext_Request& AttributeContext::request() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.request)
+  return _internal_request();
+}
+inline void AttributeContext::unsafe_arena_set_allocated_request(::google::rpc::context::AttributeContext_Request* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.request_);
+  }
+  _impl_.request_ = reinterpret_cast<::google::rpc::context::AttributeContext_Request*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000004u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000004u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.request)
+}
+inline ::google::rpc::context::AttributeContext_Request* AttributeContext::release_request() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000004u;
+  ::google::rpc::context::AttributeContext_Request* released = _impl_.request_;
+  _impl_.request_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::rpc::context::AttributeContext_Request* AttributeContext::unsafe_arena_release_request() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.request)
+
+  _impl_._has_bits_[0] &= ~0x00000004u;
+  ::google::rpc::context::AttributeContext_Request* temp = _impl_.request_;
+  _impl_.request_ = nullptr;
+  return temp;
+}
+inline ::google::rpc::context::AttributeContext_Request* AttributeContext::_internal_mutable_request() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000004u;
+  if (_impl_.request_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Request>(GetArenaForAllocation());
+    _impl_.request_ = reinterpret_cast<::google::rpc::context::AttributeContext_Request*>(p);
+  }
+  return _impl_.request_;
+}
+inline ::google::rpc::context::AttributeContext_Request* AttributeContext::mutable_request() {
+  ::google::rpc::context::AttributeContext_Request* _msg = _internal_mutable_request();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.request)
+  return _msg;
+}
+inline void AttributeContext::set_allocated_request(::google::rpc::context::AttributeContext_Request* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::rpc::context::AttributeContext_Request*>(_impl_.request_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::rpc::context::AttributeContext_Request*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000004u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000004u;
+  }
+
+  _impl_.request_ = reinterpret_cast<::google::rpc::context::AttributeContext_Request*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.request)
+}
+
+// .google.rpc.context.AttributeContext.Response response = 4 [json_name = "response"];
+inline bool AttributeContext::has_response() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
+  return value;
+}
+inline void AttributeContext::clear_response() {
+  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000008u;
+}
+inline const ::google::rpc::context::AttributeContext_Response& AttributeContext::_internal_response() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::rpc::context::AttributeContext_Response* p = _impl_.response_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Response&>(::google::rpc::context::_AttributeContext_Response_default_instance_);
+}
+inline const ::google::rpc::context::AttributeContext_Response& AttributeContext::response() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.response)
+  return _internal_response();
+}
+inline void AttributeContext::unsafe_arena_set_allocated_response(::google::rpc::context::AttributeContext_Response* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
+  }
+  _impl_.response_ = reinterpret_cast<::google::rpc::context::AttributeContext_Response*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000008u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000008u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.response)
+}
+inline ::google::rpc::context::AttributeContext_Response* AttributeContext::release_response() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000008u;
+  ::google::rpc::context::AttributeContext_Response* released = _impl_.response_;
+  _impl_.response_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::rpc::context::AttributeContext_Response* AttributeContext::unsafe_arena_release_response() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.response)
+
+  _impl_._has_bits_[0] &= ~0x00000008u;
+  ::google::rpc::context::AttributeContext_Response* temp = _impl_.response_;
+  _impl_.response_ = nullptr;
+  return temp;
+}
+inline ::google::rpc::context::AttributeContext_Response* AttributeContext::_internal_mutable_response() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000008u;
+  if (_impl_.response_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Response>(GetArenaForAllocation());
+    _impl_.response_ = reinterpret_cast<::google::rpc::context::AttributeContext_Response*>(p);
+  }
+  return _impl_.response_;
+}
+inline ::google::rpc::context::AttributeContext_Response* AttributeContext::mutable_response() {
+  ::google::rpc::context::AttributeContext_Response* _msg = _internal_mutable_response();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.response)
+  return _msg;
+}
+inline void AttributeContext::set_allocated_response(::google::rpc::context::AttributeContext_Response* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::rpc::context::AttributeContext_Response*>(_impl_.response_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::rpc::context::AttributeContext_Response*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000008u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000008u;
+  }
+
+  _impl_.response_ = reinterpret_cast<::google::rpc::context::AttributeContext_Response*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.response)
+}
+
+// .google.rpc.context.AttributeContext.Resource resource = 5 [json_name = "resource"];
+inline bool AttributeContext::has_resource() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
+  return value;
+}
+inline void AttributeContext::clear_resource() {
+  if (_impl_.resource_ != nullptr) _impl_.resource_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000010u;
+}
+inline const ::google::rpc::context::AttributeContext_Resource& AttributeContext::_internal_resource() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::rpc::context::AttributeContext_Resource* p = _impl_.resource_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Resource&>(::google::rpc::context::_AttributeContext_Resource_default_instance_);
+}
+inline const ::google::rpc::context::AttributeContext_Resource& AttributeContext::resource() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.resource)
+  return _internal_resource();
+}
+inline void AttributeContext::unsafe_arena_set_allocated_resource(::google::rpc::context::AttributeContext_Resource* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
+  }
+  _impl_.resource_ = reinterpret_cast<::google::rpc::context::AttributeContext_Resource*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000010u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000010u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.resource)
+}
+inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::release_resource() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000010u;
+  ::google::rpc::context::AttributeContext_Resource* released = _impl_.resource_;
+  _impl_.resource_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::unsafe_arena_release_resource() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.resource)
+
+  _impl_._has_bits_[0] &= ~0x00000010u;
+  ::google::rpc::context::AttributeContext_Resource* temp = _impl_.resource_;
+  _impl_.resource_ = nullptr;
+  return temp;
+}
+inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::_internal_mutable_resource() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000010u;
+  if (_impl_.resource_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Resource>(GetArenaForAllocation());
+    _impl_.resource_ = reinterpret_cast<::google::rpc::context::AttributeContext_Resource*>(p);
+  }
+  return _impl_.resource_;
+}
+inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::mutable_resource() {
+  ::google::rpc::context::AttributeContext_Resource* _msg = _internal_mutable_resource();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.resource)
+  return _msg;
+}
+inline void AttributeContext::set_allocated_resource(::google::rpc::context::AttributeContext_Resource* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::rpc::context::AttributeContext_Resource*>(_impl_.resource_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::rpc::context::AttributeContext_Resource*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000010u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000010u;
+  }
+
+  _impl_.resource_ = reinterpret_cast<::google::rpc::context::AttributeContext_Resource*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.resource)
+}
+
+// .google.rpc.context.AttributeContext.Api api = 6 [json_name = "api"];
+inline bool AttributeContext::has_api() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.api_ != nullptr);
+  return value;
+}
+inline void AttributeContext::clear_api() {
+  if (_impl_.api_ != nullptr) _impl_.api_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000020u;
+}
+inline const ::google::rpc::context::AttributeContext_Api& AttributeContext::_internal_api() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::rpc::context::AttributeContext_Api* p = _impl_.api_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Api&>(::google::rpc::context::_AttributeContext_Api_default_instance_);
+}
+inline const ::google::rpc::context::AttributeContext_Api& AttributeContext::api() const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.api)
+  return _internal_api();
+}
+inline void AttributeContext::unsafe_arena_set_allocated_api(::google::rpc::context::AttributeContext_Api* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.api_);
+  }
+  _impl_.api_ = reinterpret_cast<::google::rpc::context::AttributeContext_Api*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000020u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000020u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.api)
+}
+inline ::google::rpc::context::AttributeContext_Api* AttributeContext::release_api() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000020u;
+  ::google::rpc::context::AttributeContext_Api* released = _impl_.api_;
+  _impl_.api_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::rpc::context::AttributeContext_Api* AttributeContext::unsafe_arena_release_api() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.api)
+
+  _impl_._has_bits_[0] &= ~0x00000020u;
+  ::google::rpc::context::AttributeContext_Api* temp = _impl_.api_;
+  _impl_.api_ = nullptr;
+  return temp;
+}
+inline ::google::rpc::context::AttributeContext_Api* AttributeContext::_internal_mutable_api() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000020u;
+  if (_impl_.api_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Api>(GetArenaForAllocation());
+    _impl_.api_ = reinterpret_cast<::google::rpc::context::AttributeContext_Api*>(p);
+  }
+  return _impl_.api_;
+}
+inline ::google::rpc::context::AttributeContext_Api* AttributeContext::mutable_api() {
+  ::google::rpc::context::AttributeContext_Api* _msg = _internal_mutable_api();
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.api)
+  return _msg;
+}
+inline void AttributeContext::set_allocated_api(::google::rpc::context::AttributeContext_Api* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::rpc::context::AttributeContext_Api*>(_impl_.api_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::rpc::context::AttributeContext_Api*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000020u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000020u;
+  }
+
+  _impl_.api_ = reinterpret_cast<::google::rpc::context::AttributeContext_Api*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.api)
+}
+
+// repeated .google.protobuf.Any extensions = 8 [json_name = "extensions"];
+inline int AttributeContext::_internal_extensions_size() const {
+  return _internal_extensions().size();
+}
+inline int AttributeContext::extensions_size() const {
+  return _internal_extensions_size();
+}
+inline ::google::protobuf::Any* AttributeContext::mutable_extensions(int index) {
+  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.extensions)
+  return _internal_mutable_extensions()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
+AttributeContext::mutable_extensions() {
+  // @@protoc_insertion_point(field_mutable_list:google.rpc.context.AttributeContext.extensions)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_extensions();
+}
+inline const ::google::protobuf::Any& AttributeContext::extensions(int index) const {
+  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.extensions)
+    return _internal_extensions().Get(index);
+}
+inline ::google::protobuf::Any* AttributeContext::add_extensions() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::protobuf::Any* _add = _internal_mutable_extensions()->Add();
+  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.extensions)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
+AttributeContext::extensions() const {
+  // @@protoc_insertion_point(field_list:google.rpc.context.AttributeContext.extensions)
+  return _internal_extensions();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
+AttributeContext::_internal_extensions() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.extensions_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
+AttributeContext::_internal_mutable_extensions() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.extensions_;
+}
+
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif  // __GNUC__
+
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace context
+}  // namespace rpc
+}  // namespace google
+
+
+// @@protoc_insertion_point(global_scope)
+
+#include "google/protobuf/port_undef.inc"
+
+#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_2epb_2eh
diff --git a/gen/google/rpc/error_details.pb.cc b/gen/google/rpc/error_details.pb.cc
new file mode 100644
index 0000000..15cc255
--- /dev/null
+++ b/gen/google/rpc/error_details.pb.cc
@@ -0,0 +1,3773 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/rpc/error_details.proto
+
+#include "google/rpc/error_details.pb.h"
+
+#include <algorithm>
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/extension_set.h"
+#include "google/protobuf/wire_format_lite.h"
+#include "google/protobuf/descriptor.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/reflection_ops.h"
+#include "google/protobuf/wire_format.h"
+#include "google/protobuf/generated_message_tctable_impl.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+PROTOBUF_PRAGMA_INIT_SEG
+namespace _pb = ::google::protobuf;
+namespace _pbi = ::google::protobuf::internal;
+namespace _fl = ::google::protobuf::internal::field_layout;
+namespace google {
+namespace rpc {
+      template <typename>
+PROTOBUF_CONSTEXPR ErrorInfo_MetadataEntry_DoNotUse::ErrorInfo_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized) {}
+struct ErrorInfo_MetadataEntry_DoNotUseDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ErrorInfo_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ErrorInfo_MetadataEntry_DoNotUseDefaultTypeInternal() {}
+  union {
+    ErrorInfo_MetadataEntry_DoNotUse _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorInfo_MetadataEntry_DoNotUseDefaultTypeInternal _ErrorInfo_MetadataEntry_DoNotUse_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR ErrorInfo::ErrorInfo(::_pbi::ConstantInitialized)
+    : _impl_{
+      /* decltype(_impl_.metadata_) */ {},
+      /*decltype(_impl_.reason_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.domain_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct ErrorInfoDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ErrorInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ErrorInfoDefaultTypeInternal() {}
+  union {
+    ErrorInfo _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorInfoDefaultTypeInternal _ErrorInfo_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR RetryInfo::RetryInfo(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_._has_bits_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+      /*decltype(_impl_.retry_delay_)*/ nullptr,
+    } {}
+struct RetryInfoDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR RetryInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~RetryInfoDefaultTypeInternal() {}
+  union {
+    RetryInfo _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RetryInfoDefaultTypeInternal _RetryInfo_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR DebugInfo::DebugInfo(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.stack_entries_)*/ {},
+      /*decltype(_impl_.detail_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct DebugInfoDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR DebugInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~DebugInfoDefaultTypeInternal() {}
+  union {
+    DebugInfo _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugInfoDefaultTypeInternal _DebugInfo_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR QuotaFailure_Violation::QuotaFailure_Violation(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.subject_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.description_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct QuotaFailure_ViolationDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR QuotaFailure_ViolationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~QuotaFailure_ViolationDefaultTypeInternal() {}
+  union {
+    QuotaFailure_Violation _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuotaFailure_ViolationDefaultTypeInternal _QuotaFailure_Violation_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR QuotaFailure::QuotaFailure(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.violations_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct QuotaFailureDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR QuotaFailureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~QuotaFailureDefaultTypeInternal() {}
+  union {
+    QuotaFailure _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuotaFailureDefaultTypeInternal _QuotaFailure_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR PreconditionFailure_Violation::PreconditionFailure_Violation(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.type_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.subject_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.description_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct PreconditionFailure_ViolationDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR PreconditionFailure_ViolationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~PreconditionFailure_ViolationDefaultTypeInternal() {}
+  union {
+    PreconditionFailure_Violation _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreconditionFailure_ViolationDefaultTypeInternal _PreconditionFailure_Violation_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR PreconditionFailure::PreconditionFailure(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.violations_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct PreconditionFailureDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR PreconditionFailureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~PreconditionFailureDefaultTypeInternal() {}
+  union {
+    PreconditionFailure _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreconditionFailureDefaultTypeInternal _PreconditionFailure_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR BadRequest_FieldViolation::BadRequest_FieldViolation(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.field_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.description_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct BadRequest_FieldViolationDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR BadRequest_FieldViolationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~BadRequest_FieldViolationDefaultTypeInternal() {}
+  union {
+    BadRequest_FieldViolation _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BadRequest_FieldViolationDefaultTypeInternal _BadRequest_FieldViolation_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR BadRequest::BadRequest(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.field_violations_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct BadRequestDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR BadRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~BadRequestDefaultTypeInternal() {}
+  union {
+    BadRequest _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BadRequestDefaultTypeInternal _BadRequest_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR RequestInfo::RequestInfo(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.request_id_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.serving_data_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct RequestInfoDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR RequestInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~RequestInfoDefaultTypeInternal() {}
+  union {
+    RequestInfo _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR ResourceInfo::ResourceInfo(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.resource_type_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.resource_name_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.owner_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.description_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct ResourceInfoDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR ResourceInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~ResourceInfoDefaultTypeInternal() {}
+  union {
+    ResourceInfo _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceInfoDefaultTypeInternal _ResourceInfo_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Help_Link::Help_Link(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.description_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.url_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct Help_LinkDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR Help_LinkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~Help_LinkDefaultTypeInternal() {}
+  union {
+    Help_Link _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Help_LinkDefaultTypeInternal _Help_Link_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR Help::Help(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.links_)*/ {},
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct HelpDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR HelpDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~HelpDefaultTypeInternal() {}
+  union {
+    Help _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelpDefaultTypeInternal _Help_default_instance_;
+        template <typename>
+PROTOBUF_CONSTEXPR LocalizedMessage::LocalizedMessage(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.locale_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.message_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct LocalizedMessageDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR LocalizedMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~LocalizedMessageDefaultTypeInternal() {}
+  union {
+    LocalizedMessage _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalizedMessageDefaultTypeInternal _LocalizedMessage_default_instance_;
+}  // namespace rpc
+}  // namespace google
+static ::_pb::Metadata file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[15];
+static constexpr const ::_pb::EnumDescriptor**
+    file_level_enum_descriptors_google_2frpc_2ferror_5fdetails_2eproto = nullptr;
+static constexpr const ::_pb::ServiceDescriptor**
+    file_level_service_descriptors_google_2frpc_2ferror_5fdetails_2eproto = nullptr;
+const ::uint32_t TableStruct_google_2frpc_2ferror_5fdetails_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
+    protodesc_cold) = {
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ErrorInfo_MetadataEntry_DoNotUse, _has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ErrorInfo_MetadataEntry_DoNotUse, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ErrorInfo_MetadataEntry_DoNotUse, key_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ErrorInfo_MetadataEntry_DoNotUse, value_),
+    0,
+    1,
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ErrorInfo, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ErrorInfo, _impl_.reason_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ErrorInfo, _impl_.domain_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ErrorInfo, _impl_.metadata_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::RetryInfo, _impl_._has_bits_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::RetryInfo, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::RetryInfo, _impl_.retry_delay_),
+    0,
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::DebugInfo, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::DebugInfo, _impl_.stack_entries_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::DebugInfo, _impl_.detail_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::QuotaFailure_Violation, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::QuotaFailure_Violation, _impl_.subject_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::QuotaFailure_Violation, _impl_.description_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::QuotaFailure, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::QuotaFailure, _impl_.violations_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::PreconditionFailure_Violation, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::PreconditionFailure_Violation, _impl_.type_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::PreconditionFailure_Violation, _impl_.subject_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::PreconditionFailure_Violation, _impl_.description_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::PreconditionFailure, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::PreconditionFailure, _impl_.violations_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::BadRequest_FieldViolation, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::BadRequest_FieldViolation, _impl_.field_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::BadRequest_FieldViolation, _impl_.description_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::BadRequest, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::BadRequest, _impl_.field_violations_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::RequestInfo, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::RequestInfo, _impl_.request_id_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::RequestInfo, _impl_.serving_data_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ResourceInfo, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ResourceInfo, _impl_.resource_type_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ResourceInfo, _impl_.resource_name_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ResourceInfo, _impl_.owner_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::ResourceInfo, _impl_.description_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::Help_Link, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::Help_Link, _impl_.description_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::Help_Link, _impl_.url_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::Help, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::Help, _impl_.links_),
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::LocalizedMessage, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::LocalizedMessage, _impl_.locale_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::LocalizedMessage, _impl_.message_),
+};
+
+static const ::_pbi::MigrationSchema
+    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+        {0, 10, -1, sizeof(::google::rpc::ErrorInfo_MetadataEntry_DoNotUse)},
+        {12, -1, -1, sizeof(::google::rpc::ErrorInfo)},
+        {23, 32, -1, sizeof(::google::rpc::RetryInfo)},
+        {33, -1, -1, sizeof(::google::rpc::DebugInfo)},
+        {43, -1, -1, sizeof(::google::rpc::QuotaFailure_Violation)},
+        {53, -1, -1, sizeof(::google::rpc::QuotaFailure)},
+        {62, -1, -1, sizeof(::google::rpc::PreconditionFailure_Violation)},
+        {73, -1, -1, sizeof(::google::rpc::PreconditionFailure)},
+        {82, -1, -1, sizeof(::google::rpc::BadRequest_FieldViolation)},
+        {92, -1, -1, sizeof(::google::rpc::BadRequest)},
+        {101, -1, -1, sizeof(::google::rpc::RequestInfo)},
+        {111, -1, -1, sizeof(::google::rpc::ResourceInfo)},
+        {123, -1, -1, sizeof(::google::rpc::Help_Link)},
+        {133, -1, -1, sizeof(::google::rpc::Help)},
+        {142, -1, -1, sizeof(::google::rpc::LocalizedMessage)},
+};
+
+static const ::_pb::Message* const file_default_instances[] = {
+    &::google::rpc::_ErrorInfo_MetadataEntry_DoNotUse_default_instance_._instance,
+    &::google::rpc::_ErrorInfo_default_instance_._instance,
+    &::google::rpc::_RetryInfo_default_instance_._instance,
+    &::google::rpc::_DebugInfo_default_instance_._instance,
+    &::google::rpc::_QuotaFailure_Violation_default_instance_._instance,
+    &::google::rpc::_QuotaFailure_default_instance_._instance,
+    &::google::rpc::_PreconditionFailure_Violation_default_instance_._instance,
+    &::google::rpc::_PreconditionFailure_default_instance_._instance,
+    &::google::rpc::_BadRequest_FieldViolation_default_instance_._instance,
+    &::google::rpc::_BadRequest_default_instance_._instance,
+    &::google::rpc::_RequestInfo_default_instance_._instance,
+    &::google::rpc::_ResourceInfo_default_instance_._instance,
+    &::google::rpc::_Help_Link_default_instance_._instance,
+    &::google::rpc::_Help_default_instance_._instance,
+    &::google::rpc::_LocalizedMessage_default_instance_._instance,
+};
+const char descriptor_table_protodef_google_2frpc_2ferror_5fdetails_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+    "\n\036google/rpc/error_details.proto\022\ngoogle"
+    ".rpc\032\036google/protobuf/duration.proto\"\271\001\n"
+    "\tErrorInfo\022\026\n\006reason\030\001 \001(\tR\006reason\022\026\n\006do"
+    "main\030\002 \001(\tR\006domain\022\?\n\010metadata\030\003 \003(\0132#.g"
+    "oogle.rpc.ErrorInfo.MetadataEntryR\010metad"
+    "ata\032;\n\rMetadataEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024"
+    "\n\005value\030\002 \001(\tR\005value:\0028\001\"G\n\tRetryInfo\022:\n"
+    "\013retry_delay\030\001 \001(\0132\031.google.protobuf.Dur"
+    "ationR\nretryDelay\"H\n\tDebugInfo\022#\n\rstack_"
+    "entries\030\001 \003(\tR\014stackEntries\022\026\n\006detail\030\002 "
+    "\001(\tR\006detail\"\233\001\n\014QuotaFailure\022B\n\nviolatio"
+    "ns\030\001 \003(\0132\".google.rpc.QuotaFailure.Viola"
+    "tionR\nviolations\032G\n\tViolation\022\030\n\007subject"
+    "\030\001 \001(\tR\007subject\022 \n\013description\030\002 \001(\tR\013de"
+    "scription\"\275\001\n\023PreconditionFailure\022I\n\nvio"
+    "lations\030\001 \003(\0132).google.rpc.PreconditionF"
+    "ailure.ViolationR\nviolations\032[\n\tViolatio"
+    "n\022\022\n\004type\030\001 \001(\tR\004type\022\030\n\007subject\030\002 \001(\tR\007"
+    "subject\022 \n\013description\030\003 \001(\tR\013descriptio"
+    "n\"\250\001\n\nBadRequest\022P\n\020field_violations\030\001 \003"
+    "(\0132%.google.rpc.BadRequest.FieldViolatio"
+    "nR\017fieldViolations\032H\n\016FieldViolation\022\024\n\005"
+    "field\030\001 \001(\tR\005field\022 \n\013description\030\002 \001(\tR"
+    "\013description\"O\n\013RequestInfo\022\035\n\nrequest_i"
+    "d\030\001 \001(\tR\trequestId\022!\n\014serving_data\030\002 \001(\t"
+    "R\013servingData\"\220\001\n\014ResourceInfo\022#\n\rresour"
+    "ce_type\030\001 \001(\tR\014resourceType\022#\n\rresource_"
+    "name\030\002 \001(\tR\014resourceName\022\024\n\005owner\030\003 \001(\tR"
+    "\005owner\022 \n\013description\030\004 \001(\tR\013description"
+    "\"o\n\004Help\022+\n\005links\030\001 \003(\0132\025.google.rpc.Hel"
+    "p.LinkR\005links\032:\n\004Link\022 \n\013description\030\001 \001"
+    "(\tR\013description\022\020\n\003url\030\002 \001(\tR\003url\"D\n\020Loc"
+    "alizedMessage\022\026\n\006locale\030\001 \001(\tR\006locale\022\030\n"
+    "\007message\030\002 \001(\tR\007messageB\255\001\n\016com.google.r"
+    "pcB\021ErrorDetailsProtoP\001Z\?google.golang.o"
+    "rg/genproto/googleapis/rpc/errdetails;er"
+    "rdetails\242\002\003GRX\252\002\nGoogle.Rpc\312\002\nGoogle\\Rpc"
+    "\342\002\026Google\\Rpc\\GPBMetadata\352\002\013Google::Rpcb"
+    "\006proto3"
+};
+static const ::_pbi::DescriptorTable* const descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_deps[1] =
+    {
+        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
+};
+static ::absl::once_flag descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once;
+const ::_pbi::DescriptorTable descriptor_table_google_2frpc_2ferror_5fdetails_2eproto = {
+    false,
+    false,
+    1527,
+    descriptor_table_protodef_google_2frpc_2ferror_5fdetails_2eproto,
+    "google/rpc/error_details.proto",
+    &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+    descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_deps,
+    1,
+    15,
+    schemas,
+    file_default_instances,
+    TableStruct_google_2frpc_2ferror_5fdetails_2eproto::offsets,
+    file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto,
+    file_level_enum_descriptors_google_2frpc_2ferror_5fdetails_2eproto,
+    file_level_service_descriptors_google_2frpc_2ferror_5fdetails_2eproto,
+};
+
+// This function exists to be marked as weak.
+// It can significantly speed up compilation by breaking up LLVM's SCC
+// in the .pb.cc translation units. Large translation units see a
+// reduction of more than 35% of walltime for optimized builds. Without
+// the weak attribute all the messages in the file, including all the
+// vtables and everything they use become part of the same SCC through
+// a cycle like:
+// GetMetadata -> descriptor table -> default instances ->
+//   vtables -> GetMetadata
+// By adding a weak function here we break the connection from the
+// individual vtables back into the descriptor table.
+PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter() {
+  return &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto;
+}
+// Force running AddDescriptors() at dynamic initialization time.
+PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
+static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2frpc_2ferror_5fdetails_2eproto(&descriptor_table_google_2frpc_2ferror_5fdetails_2eproto);
+namespace google {
+namespace rpc {
+// ===================================================================
+
+ErrorInfo_MetadataEntry_DoNotUse::ErrorInfo_MetadataEntry_DoNotUse() {}
+ErrorInfo_MetadataEntry_DoNotUse::ErrorInfo_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
+    : SuperType(arena) {}
+void ErrorInfo_MetadataEntry_DoNotUse::MergeFrom(const ErrorInfo_MetadataEntry_DoNotUse& other) {
+  MergeFromInternal(other);
+}
+::google::protobuf::Metadata ErrorInfo_MetadataEntry_DoNotUse::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[0]);
+}
+// ===================================================================
+
+class ErrorInfo::_Internal {
+ public:
+};
+
+ErrorInfo::ErrorInfo(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.ErrorInfo)
+}
+ErrorInfo::ErrorInfo(const ErrorInfo& from) : ::google::protobuf::Message() {
+  ErrorInfo* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      /* decltype(_impl_.metadata_) */ {},
+      decltype(_impl_.reason_){},
+      decltype(_impl_.domain_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
+  _impl_.reason_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.reason_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_reason().empty()) {
+    _this->_impl_.reason_.Set(from._internal_reason(), _this->GetArenaForAllocation());
+  }
+  _impl_.domain_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.domain_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_domain().empty()) {
+    _this->_impl_.domain_.Set(from._internal_domain(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.ErrorInfo)
+}
+inline void ErrorInfo::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      /* decltype(_impl_.metadata_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
+      decltype(_impl_.reason_){},
+      decltype(_impl_.domain_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.reason_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.reason_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.domain_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.domain_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+ErrorInfo::~ErrorInfo() {
+  // @@protoc_insertion_point(destructor:google.rpc.ErrorInfo)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void ErrorInfo::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.metadata_.~MapField();
+  _impl_.reason_.Destroy();
+  _impl_.domain_.Destroy();
+}
+void ErrorInfo::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void ErrorInfo::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.ErrorInfo)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.metadata_.Clear();
+  _impl_.reason_.ClearToEmpty();
+  _impl_.domain_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* ErrorInfo::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 3, 1, 49, 2> ErrorInfo::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    3, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967288,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    3,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_ErrorInfo_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string domain = 2 [json_name = "domain"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorInfo, _impl_.domain_)}},
+    // string reason = 1 [json_name = "reason"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorInfo, _impl_.reason_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string reason = 1 [json_name = "reason"];
+    {PROTOBUF_FIELD_OFFSET(ErrorInfo, _impl_.reason_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string domain = 2 [json_name = "domain"];
+    {PROTOBUF_FIELD_OFFSET(ErrorInfo, _impl_.domain_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // map<string, string> metadata = 3 [json_name = "metadata"];
+    {PROTOBUF_FIELD_OFFSET(ErrorInfo, _impl_.metadata_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
+  }}, {{
+    {::_pbi::TcParser::GetMapAuxInfo<decltype(ErrorInfo()._impl_.metadata_)>(1, 0, 0)},
+  }}, {{
+    "\24\6\6\10\0\0\0\0"
+    "google.rpc.ErrorInfo"
+    "reason"
+    "domain"
+    "metadata"
+  }},
+};
+
+::uint8_t* ErrorInfo::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.ErrorInfo)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string reason = 1 [json_name = "reason"];
+  if (!this->_internal_reason().empty()) {
+    const std::string& _s = this->_internal_reason();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.ErrorInfo.reason");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string domain = 2 [json_name = "domain"];
+  if (!this->_internal_domain().empty()) {
+    const std::string& _s = this->_internal_domain();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.ErrorInfo.domain");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  // map<string, string> metadata = 3 [json_name = "metadata"];
+  if (!_internal_metadata().empty()) {
+    using MapType = ::google::protobuf::Map<std::string, std::string>;
+    using WireHelper = ErrorInfo_MetadataEntry_DoNotUse::Funcs;
+    const auto& field = _internal_metadata();
+
+    if (stream->IsSerializationDeterministic() && field.size() > 1) {
+      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
+        target = WireHelper::InternalSerialize(
+            3, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.ErrorInfo.metadata");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.ErrorInfo.metadata");
+      }
+    } else {
+      for (const auto& entry : field) {
+        target = WireHelper::InternalSerialize(
+            3, entry.first, entry.second, target, stream);
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.first.data(), static_cast<int>(entry.first.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.ErrorInfo.metadata");
+        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+            entry.second.data(), static_cast<int>(entry.second.length()),
+ ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.ErrorInfo.metadata");
+      }
+    }
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.ErrorInfo)
+  return target;
+}
+
+::size_t ErrorInfo::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.ErrorInfo)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // map<string, string> metadata = 3 [json_name = "metadata"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_metadata_size());
+  for (const auto& entry : _internal_metadata()) {
+    total_size += ErrorInfo_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
+  }
+  // string reason = 1 [json_name = "reason"];
+  if (!this->_internal_reason().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_reason());
+  }
+
+  // string domain = 2 [json_name = "domain"];
+  if (!this->_internal_domain().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_domain());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData ErrorInfo::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    ErrorInfo::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*ErrorInfo::GetClassData() const { return &_class_data_; }
+
+
+void ErrorInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<ErrorInfo*>(&to_msg);
+  auto& from = static_cast<const ErrorInfo&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.ErrorInfo)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
+  if (!from._internal_reason().empty()) {
+    _this->_internal_set_reason(from._internal_reason());
+  }
+  if (!from._internal_domain().empty()) {
+    _this->_internal_set_domain(from._internal_domain());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void ErrorInfo::CopyFrom(const ErrorInfo& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.ErrorInfo)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool ErrorInfo::IsInitialized() const {
+  return true;
+}
+
+void ErrorInfo::InternalSwap(ErrorInfo* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, lhs_arena,
+                                       &other->_impl_.reason_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domain_, lhs_arena,
+                                       &other->_impl_.domain_, rhs_arena);
+}
+
+::google::protobuf::Metadata ErrorInfo::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[1]);
+}
+// ===================================================================
+
+class RetryInfo::_Internal {
+ public:
+  using HasBits = decltype(std::declval<RetryInfo>()._impl_._has_bits_);
+  static constexpr ::int32_t kHasBitsOffset =
+    8 * PROTOBUF_FIELD_OFFSET(RetryInfo, _impl_._has_bits_);
+  static const ::google::protobuf::Duration& retry_delay(const RetryInfo* msg);
+  static void set_has_retry_delay(HasBits* has_bits) {
+    (*has_bits)[0] |= 1u;
+  }
+};
+
+const ::google::protobuf::Duration& RetryInfo::_Internal::retry_delay(const RetryInfo* msg) {
+  return *msg->_impl_.retry_delay_;
+}
+void RetryInfo::clear_retry_delay() {
+  if (_impl_.retry_delay_ != nullptr) _impl_.retry_delay_->Clear();
+  _impl_._has_bits_[0] &= ~0x00000001u;
+}
+RetryInfo::RetryInfo(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.RetryInfo)
+}
+RetryInfo::RetryInfo(const RetryInfo& from) : ::google::protobuf::Message() {
+  RetryInfo* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){from._impl_._has_bits_},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.retry_delay_){nullptr},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_impl_.retry_delay_ = new ::google::protobuf::Duration(*from._impl_.retry_delay_);
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.RetryInfo)
+}
+inline void RetryInfo::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_._has_bits_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+      decltype(_impl_.retry_delay_){nullptr},
+  };
+}
+RetryInfo::~RetryInfo() {
+  // @@protoc_insertion_point(destructor:google.rpc.RetryInfo)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void RetryInfo::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  if (this != internal_default_instance()) delete _impl_.retry_delay_;
+}
+void RetryInfo::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void RetryInfo::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.RetryInfo)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    ABSL_DCHECK(_impl_.retry_delay_ != nullptr);
+    _impl_.retry_delay_->Clear();
+  }
+  _impl_._has_bits_.Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* RetryInfo::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 1, 0, 2> RetryInfo::_table_ = {
+  {
+    PROTOBUF_FIELD_OFFSET(RetryInfo, _impl_._has_bits_),
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_RetryInfo_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // .google.protobuf.Duration retry_delay = 1 [json_name = "retryDelay"];
+    {::_pbi::TcParser::FastMtS1,
+     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RetryInfo, _impl_.retry_delay_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // .google.protobuf.Duration retry_delay = 1 [json_name = "retryDelay"];
+    {PROTOBUF_FIELD_OFFSET(RetryInfo, _impl_.retry_delay_), _Internal::kHasBitsOffset + 0, 0,
+    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* RetryInfo::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.RetryInfo)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  cached_has_bits = _impl_._has_bits_[0];
+  // .google.protobuf.Duration retry_delay = 1 [json_name = "retryDelay"];
+  if (cached_has_bits & 0x00000001u) {
+    target = ::google::protobuf::internal::WireFormatLite::
+      InternalWriteMessage(1, _Internal::retry_delay(this),
+        _Internal::retry_delay(this).GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.RetryInfo)
+  return target;
+}
+
+::size_t RetryInfo::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.RetryInfo)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // .google.protobuf.Duration retry_delay = 1 [json_name = "retryDelay"];
+  cached_has_bits = _impl_._has_bits_[0];
+  if (cached_has_bits & 0x00000001u) {
+    total_size += 1 +
+      ::google::protobuf::internal::WireFormatLite::MessageSize(
+        *_impl_.retry_delay_);
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData RetryInfo::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    RetryInfo::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*RetryInfo::GetClassData() const { return &_class_data_; }
+
+
+void RetryInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<RetryInfo*>(&to_msg);
+  auto& from = static_cast<const RetryInfo&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.RetryInfo)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
+    _this->_internal_mutable_retry_delay()->::google::protobuf::Duration::MergeFrom(
+        from._internal_retry_delay());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void RetryInfo::CopyFrom(const RetryInfo& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.RetryInfo)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool RetryInfo::IsInitialized() const {
+  return true;
+}
+
+void RetryInfo::InternalSwap(RetryInfo* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
+  swap(_impl_.retry_delay_, other->_impl_.retry_delay_);
+}
+
+::google::protobuf::Metadata RetryInfo::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[2]);
+}
+// ===================================================================
+
+class DebugInfo::_Internal {
+ public:
+};
+
+DebugInfo::DebugInfo(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.DebugInfo)
+}
+DebugInfo::DebugInfo(const DebugInfo& from) : ::google::protobuf::Message() {
+  DebugInfo* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.stack_entries_){from._impl_.stack_entries_},
+      decltype(_impl_.detail_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.detail_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.detail_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_detail().empty()) {
+    _this->_impl_.detail_.Set(from._internal_detail(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.DebugInfo)
+}
+inline void DebugInfo::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.stack_entries_){arena},
+      decltype(_impl_.detail_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.detail_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.detail_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+DebugInfo::~DebugInfo() {
+  // @@protoc_insertion_point(destructor:google.rpc.DebugInfo)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void DebugInfo::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _internal_mutable_stack_entries()->~RepeatedPtrField();
+  _impl_.detail_.Destroy();
+}
+void DebugInfo::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void DebugInfo::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.DebugInfo)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_stack_entries()->Clear();
+  _impl_.detail_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* DebugInfo::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 0, 48, 2> DebugInfo::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_DebugInfo_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string detail = 2 [json_name = "detail"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DebugInfo, _impl_.detail_)}},
+    // repeated string stack_entries = 1 [json_name = "stackEntries"];
+    {::_pbi::TcParser::FastUR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DebugInfo, _impl_.stack_entries_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated string stack_entries = 1 [json_name = "stackEntries"];
+    {PROTOBUF_FIELD_OFFSET(DebugInfo, _impl_.stack_entries_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
+    // string detail = 2 [json_name = "detail"];
+    {PROTOBUF_FIELD_OFFSET(DebugInfo, _impl_.detail_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }},
+  // no aux_entries
+  {{
+    "\24\15\6\0\0\0\0\0"
+    "google.rpc.DebugInfo"
+    "stack_entries"
+    "detail"
+  }},
+};
+
+::uint8_t* DebugInfo::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.DebugInfo)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated string stack_entries = 1 [json_name = "stackEntries"];
+  for (int i = 0, n = this->_internal_stack_entries_size(); i < n; ++i) {
+    const auto& s = this->_internal_stack_entries().Get(i);
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.DebugInfo.stack_entries");
+    target = stream->WriteString(1, s, target);
+  }
+
+  // string detail = 2 [json_name = "detail"];
+  if (!this->_internal_detail().empty()) {
+    const std::string& _s = this->_internal_detail();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.DebugInfo.detail");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.DebugInfo)
+  return target;
+}
+
+::size_t DebugInfo::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.DebugInfo)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated string stack_entries = 1 [json_name = "stackEntries"];
+  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_stack_entries().size());
+  for (int i = 0, n = _internal_stack_entries().size(); i < n; ++i) {
+    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
+        _internal_stack_entries().Get(i));
+  }
+  // string detail = 2 [json_name = "detail"];
+  if (!this->_internal_detail().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_detail());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData DebugInfo::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    DebugInfo::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*DebugInfo::GetClassData() const { return &_class_data_; }
+
+
+void DebugInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<DebugInfo*>(&to_msg);
+  auto& from = static_cast<const DebugInfo&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.DebugInfo)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_stack_entries()->MergeFrom(from._internal_stack_entries());
+  if (!from._internal_detail().empty()) {
+    _this->_internal_set_detail(from._internal_detail());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void DebugInfo::CopyFrom(const DebugInfo& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.DebugInfo)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool DebugInfo::IsInitialized() const {
+  return true;
+}
+
+void DebugInfo::InternalSwap(DebugInfo* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.stack_entries_.InternalSwap(&other->_impl_.stack_entries_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.detail_, lhs_arena,
+                                       &other->_impl_.detail_, rhs_arena);
+}
+
+::google::protobuf::Metadata DebugInfo::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[3]);
+}
+// ===================================================================
+
+class QuotaFailure_Violation::_Internal {
+ public:
+};
+
+QuotaFailure_Violation::QuotaFailure_Violation(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.QuotaFailure.Violation)
+}
+QuotaFailure_Violation::QuotaFailure_Violation(const QuotaFailure_Violation& from) : ::google::protobuf::Message() {
+  QuotaFailure_Violation* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.subject_){},
+      decltype(_impl_.description_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.subject_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.subject_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_subject().empty()) {
+    _this->_impl_.subject_.Set(from._internal_subject(), _this->GetArenaForAllocation());
+  }
+  _impl_.description_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.description_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_description().empty()) {
+    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.QuotaFailure.Violation)
+}
+inline void QuotaFailure_Violation::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.subject_){},
+      decltype(_impl_.description_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.subject_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.subject_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.description_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.description_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+QuotaFailure_Violation::~QuotaFailure_Violation() {
+  // @@protoc_insertion_point(destructor:google.rpc.QuotaFailure.Violation)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void QuotaFailure_Violation::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.subject_.Destroy();
+  _impl_.description_.Destroy();
+}
+void QuotaFailure_Violation::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void QuotaFailure_Violation::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.QuotaFailure.Violation)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.subject_.ClearToEmpty();
+  _impl_.description_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* QuotaFailure_Violation::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 0, 60, 2> QuotaFailure_Violation::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_QuotaFailure_Violation_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string description = 2 [json_name = "description"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(QuotaFailure_Violation, _impl_.description_)}},
+    // string subject = 1 [json_name = "subject"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(QuotaFailure_Violation, _impl_.subject_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string subject = 1 [json_name = "subject"];
+    {PROTOBUF_FIELD_OFFSET(QuotaFailure_Violation, _impl_.subject_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string description = 2 [json_name = "description"];
+    {PROTOBUF_FIELD_OFFSET(QuotaFailure_Violation, _impl_.description_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }},
+  // no aux_entries
+  {{
+    "\41\7\13\0\0\0\0\0"
+    "google.rpc.QuotaFailure.Violation"
+    "subject"
+    "description"
+  }},
+};
+
+::uint8_t* QuotaFailure_Violation::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.QuotaFailure.Violation)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string subject = 1 [json_name = "subject"];
+  if (!this->_internal_subject().empty()) {
+    const std::string& _s = this->_internal_subject();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.QuotaFailure.Violation.subject");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string description = 2 [json_name = "description"];
+  if (!this->_internal_description().empty()) {
+    const std::string& _s = this->_internal_description();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.QuotaFailure.Violation.description");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.QuotaFailure.Violation)
+  return target;
+}
+
+::size_t QuotaFailure_Violation::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.QuotaFailure.Violation)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string subject = 1 [json_name = "subject"];
+  if (!this->_internal_subject().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_subject());
+  }
+
+  // string description = 2 [json_name = "description"];
+  if (!this->_internal_description().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_description());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData QuotaFailure_Violation::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    QuotaFailure_Violation::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*QuotaFailure_Violation::GetClassData() const { return &_class_data_; }
+
+
+void QuotaFailure_Violation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<QuotaFailure_Violation*>(&to_msg);
+  auto& from = static_cast<const QuotaFailure_Violation&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.QuotaFailure.Violation)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_subject().empty()) {
+    _this->_internal_set_subject(from._internal_subject());
+  }
+  if (!from._internal_description().empty()) {
+    _this->_internal_set_description(from._internal_description());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void QuotaFailure_Violation::CopyFrom(const QuotaFailure_Violation& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.QuotaFailure.Violation)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool QuotaFailure_Violation::IsInitialized() const {
+  return true;
+}
+
+void QuotaFailure_Violation::InternalSwap(QuotaFailure_Violation* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subject_, lhs_arena,
+                                       &other->_impl_.subject_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
+                                       &other->_impl_.description_, rhs_arena);
+}
+
+::google::protobuf::Metadata QuotaFailure_Violation::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[4]);
+}
+// ===================================================================
+
+class QuotaFailure::_Internal {
+ public:
+};
+
+QuotaFailure::QuotaFailure(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.QuotaFailure)
+}
+QuotaFailure::QuotaFailure(const QuotaFailure& from) : ::google::protobuf::Message() {
+  QuotaFailure* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.violations_){from._impl_.violations_},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.QuotaFailure)
+}
+inline void QuotaFailure::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.violations_){arena},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+QuotaFailure::~QuotaFailure() {
+  // @@protoc_insertion_point(destructor:google.rpc.QuotaFailure)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void QuotaFailure::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.violations_.~RepeatedPtrField();
+}
+void QuotaFailure::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void QuotaFailure::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.QuotaFailure)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_violations()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* QuotaFailure::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 1, 0, 2> QuotaFailure::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_QuotaFailure_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.rpc.QuotaFailure.Violation violations = 1 [json_name = "violations"];
+    {::_pbi::TcParser::FastMtR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(QuotaFailure, _impl_.violations_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated .google.rpc.QuotaFailure.Violation violations = 1 [json_name = "violations"];
+    {PROTOBUF_FIELD_OFFSET(QuotaFailure, _impl_.violations_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::rpc::QuotaFailure_Violation>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* QuotaFailure::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.QuotaFailure)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated .google.rpc.QuotaFailure.Violation violations = 1 [json_name = "violations"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_violations_size()); i < n; i++) {
+    const auto& repfield = this->_internal_violations().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.QuotaFailure)
+  return target;
+}
+
+::size_t QuotaFailure::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.QuotaFailure)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.rpc.QuotaFailure.Violation violations = 1 [json_name = "violations"];
+  total_size += 1UL * this->_internal_violations_size();
+  for (const auto& msg : this->_internal_violations()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData QuotaFailure::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    QuotaFailure::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*QuotaFailure::GetClassData() const { return &_class_data_; }
+
+
+void QuotaFailure::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<QuotaFailure*>(&to_msg);
+  auto& from = static_cast<const QuotaFailure&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.QuotaFailure)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_violations()->MergeFrom(from._internal_violations());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void QuotaFailure::CopyFrom(const QuotaFailure& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.QuotaFailure)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool QuotaFailure::IsInitialized() const {
+  return true;
+}
+
+void QuotaFailure::InternalSwap(QuotaFailure* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.violations_.InternalSwap(&other->_impl_.violations_);
+}
+
+::google::protobuf::Metadata QuotaFailure::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[5]);
+}
+// ===================================================================
+
+class PreconditionFailure_Violation::_Internal {
+ public:
+};
+
+PreconditionFailure_Violation::PreconditionFailure_Violation(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.PreconditionFailure.Violation)
+}
+PreconditionFailure_Violation::PreconditionFailure_Violation(const PreconditionFailure_Violation& from) : ::google::protobuf::Message() {
+  PreconditionFailure_Violation* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.type_){},
+      decltype(_impl_.subject_){},
+      decltype(_impl_.description_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.type_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.type_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_type().empty()) {
+    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
+  }
+  _impl_.subject_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.subject_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_subject().empty()) {
+    _this->_impl_.subject_.Set(from._internal_subject(), _this->GetArenaForAllocation());
+  }
+  _impl_.description_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.description_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_description().empty()) {
+    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.PreconditionFailure.Violation)
+}
+inline void PreconditionFailure_Violation::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.type_){},
+      decltype(_impl_.subject_){},
+      decltype(_impl_.description_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.type_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.type_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.subject_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.subject_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.description_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.description_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+PreconditionFailure_Violation::~PreconditionFailure_Violation() {
+  // @@protoc_insertion_point(destructor:google.rpc.PreconditionFailure.Violation)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void PreconditionFailure_Violation::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.type_.Destroy();
+  _impl_.subject_.Destroy();
+  _impl_.description_.Destroy();
+}
+void PreconditionFailure_Violation::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void PreconditionFailure_Violation::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.PreconditionFailure.Violation)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.type_.ClearToEmpty();
+  _impl_.subject_.ClearToEmpty();
+  _impl_.description_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* PreconditionFailure_Violation::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 3, 0, 71, 2> PreconditionFailure_Violation::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    3, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967288,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    3,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_PreconditionFailure_Violation_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // string type = 1 [json_name = "type"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PreconditionFailure_Violation, _impl_.type_)}},
+    // string subject = 2 [json_name = "subject"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PreconditionFailure_Violation, _impl_.subject_)}},
+    // string description = 3 [json_name = "description"];
+    {::_pbi::TcParser::FastUS1,
+     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PreconditionFailure_Violation, _impl_.description_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string type = 1 [json_name = "type"];
+    {PROTOBUF_FIELD_OFFSET(PreconditionFailure_Violation, _impl_.type_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string subject = 2 [json_name = "subject"];
+    {PROTOBUF_FIELD_OFFSET(PreconditionFailure_Violation, _impl_.subject_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string description = 3 [json_name = "description"];
+    {PROTOBUF_FIELD_OFFSET(PreconditionFailure_Violation, _impl_.description_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }},
+  // no aux_entries
+  {{
+    "\50\4\7\13\0\0\0\0"
+    "google.rpc.PreconditionFailure.Violation"
+    "type"
+    "subject"
+    "description"
+  }},
+};
+
+::uint8_t* PreconditionFailure_Violation::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.PreconditionFailure.Violation)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string type = 1 [json_name = "type"];
+  if (!this->_internal_type().empty()) {
+    const std::string& _s = this->_internal_type();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.PreconditionFailure.Violation.type");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string subject = 2 [json_name = "subject"];
+  if (!this->_internal_subject().empty()) {
+    const std::string& _s = this->_internal_subject();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.PreconditionFailure.Violation.subject");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  // string description = 3 [json_name = "description"];
+  if (!this->_internal_description().empty()) {
+    const std::string& _s = this->_internal_description();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.PreconditionFailure.Violation.description");
+    target = stream->WriteStringMaybeAliased(3, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.PreconditionFailure.Violation)
+  return target;
+}
+
+::size_t PreconditionFailure_Violation::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.PreconditionFailure.Violation)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string type = 1 [json_name = "type"];
+  if (!this->_internal_type().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_type());
+  }
+
+  // string subject = 2 [json_name = "subject"];
+  if (!this->_internal_subject().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_subject());
+  }
+
+  // string description = 3 [json_name = "description"];
+  if (!this->_internal_description().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_description());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData PreconditionFailure_Violation::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    PreconditionFailure_Violation::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*PreconditionFailure_Violation::GetClassData() const { return &_class_data_; }
+
+
+void PreconditionFailure_Violation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<PreconditionFailure_Violation*>(&to_msg);
+  auto& from = static_cast<const PreconditionFailure_Violation&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.PreconditionFailure.Violation)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_type().empty()) {
+    _this->_internal_set_type(from._internal_type());
+  }
+  if (!from._internal_subject().empty()) {
+    _this->_internal_set_subject(from._internal_subject());
+  }
+  if (!from._internal_description().empty()) {
+    _this->_internal_set_description(from._internal_description());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void PreconditionFailure_Violation::CopyFrom(const PreconditionFailure_Violation& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.PreconditionFailure.Violation)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool PreconditionFailure_Violation::IsInitialized() const {
+  return true;
+}
+
+void PreconditionFailure_Violation::InternalSwap(PreconditionFailure_Violation* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
+                                       &other->_impl_.type_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subject_, lhs_arena,
+                                       &other->_impl_.subject_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
+                                       &other->_impl_.description_, rhs_arena);
+}
+
+::google::protobuf::Metadata PreconditionFailure_Violation::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[6]);
+}
+// ===================================================================
+
+class PreconditionFailure::_Internal {
+ public:
+};
+
+PreconditionFailure::PreconditionFailure(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.PreconditionFailure)
+}
+PreconditionFailure::PreconditionFailure(const PreconditionFailure& from) : ::google::protobuf::Message() {
+  PreconditionFailure* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.violations_){from._impl_.violations_},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.PreconditionFailure)
+}
+inline void PreconditionFailure::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.violations_){arena},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+PreconditionFailure::~PreconditionFailure() {
+  // @@protoc_insertion_point(destructor:google.rpc.PreconditionFailure)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void PreconditionFailure::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.violations_.~RepeatedPtrField();
+}
+void PreconditionFailure::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void PreconditionFailure::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.PreconditionFailure)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_violations()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* PreconditionFailure::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PreconditionFailure::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_PreconditionFailure_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.rpc.PreconditionFailure.Violation violations = 1 [json_name = "violations"];
+    {::_pbi::TcParser::FastMtR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PreconditionFailure, _impl_.violations_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated .google.rpc.PreconditionFailure.Violation violations = 1 [json_name = "violations"];
+    {PROTOBUF_FIELD_OFFSET(PreconditionFailure, _impl_.violations_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::rpc::PreconditionFailure_Violation>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* PreconditionFailure::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.PreconditionFailure)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated .google.rpc.PreconditionFailure.Violation violations = 1 [json_name = "violations"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_violations_size()); i < n; i++) {
+    const auto& repfield = this->_internal_violations().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.PreconditionFailure)
+  return target;
+}
+
+::size_t PreconditionFailure::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.PreconditionFailure)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.rpc.PreconditionFailure.Violation violations = 1 [json_name = "violations"];
+  total_size += 1UL * this->_internal_violations_size();
+  for (const auto& msg : this->_internal_violations()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData PreconditionFailure::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    PreconditionFailure::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*PreconditionFailure::GetClassData() const { return &_class_data_; }
+
+
+void PreconditionFailure::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<PreconditionFailure*>(&to_msg);
+  auto& from = static_cast<const PreconditionFailure&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.PreconditionFailure)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_violations()->MergeFrom(from._internal_violations());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void PreconditionFailure::CopyFrom(const PreconditionFailure& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.PreconditionFailure)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool PreconditionFailure::IsInitialized() const {
+  return true;
+}
+
+void PreconditionFailure::InternalSwap(PreconditionFailure* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.violations_.InternalSwap(&other->_impl_.violations_);
+}
+
+::google::protobuf::Metadata PreconditionFailure::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[7]);
+}
+// ===================================================================
+
+class BadRequest_FieldViolation::_Internal {
+ public:
+};
+
+BadRequest_FieldViolation::BadRequest_FieldViolation(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.BadRequest.FieldViolation)
+}
+BadRequest_FieldViolation::BadRequest_FieldViolation(const BadRequest_FieldViolation& from) : ::google::protobuf::Message() {
+  BadRequest_FieldViolation* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.field_){},
+      decltype(_impl_.description_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.field_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.field_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_field().empty()) {
+    _this->_impl_.field_.Set(from._internal_field(), _this->GetArenaForAllocation());
+  }
+  _impl_.description_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.description_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_description().empty()) {
+    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.BadRequest.FieldViolation)
+}
+inline void BadRequest_FieldViolation::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.field_){},
+      decltype(_impl_.description_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.field_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.field_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.description_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.description_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+BadRequest_FieldViolation::~BadRequest_FieldViolation() {
+  // @@protoc_insertion_point(destructor:google.rpc.BadRequest.FieldViolation)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void BadRequest_FieldViolation::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.field_.Destroy();
+  _impl_.description_.Destroy();
+}
+void BadRequest_FieldViolation::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void BadRequest_FieldViolation::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.BadRequest.FieldViolation)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.field_.ClearToEmpty();
+  _impl_.description_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* BadRequest_FieldViolation::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 0, 61, 2> BadRequest_FieldViolation::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_BadRequest_FieldViolation_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string description = 2 [json_name = "description"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(BadRequest_FieldViolation, _impl_.description_)}},
+    // string field = 1 [json_name = "field"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BadRequest_FieldViolation, _impl_.field_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string field = 1 [json_name = "field"];
+    {PROTOBUF_FIELD_OFFSET(BadRequest_FieldViolation, _impl_.field_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string description = 2 [json_name = "description"];
+    {PROTOBUF_FIELD_OFFSET(BadRequest_FieldViolation, _impl_.description_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }},
+  // no aux_entries
+  {{
+    "\44\5\13\0\0\0\0\0"
+    "google.rpc.BadRequest.FieldViolation"
+    "field"
+    "description"
+  }},
+};
+
+::uint8_t* BadRequest_FieldViolation::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.BadRequest.FieldViolation)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string field = 1 [json_name = "field"];
+  if (!this->_internal_field().empty()) {
+    const std::string& _s = this->_internal_field();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.BadRequest.FieldViolation.field");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string description = 2 [json_name = "description"];
+  if (!this->_internal_description().empty()) {
+    const std::string& _s = this->_internal_description();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.BadRequest.FieldViolation.description");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.BadRequest.FieldViolation)
+  return target;
+}
+
+::size_t BadRequest_FieldViolation::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.BadRequest.FieldViolation)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string field = 1 [json_name = "field"];
+  if (!this->_internal_field().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_field());
+  }
+
+  // string description = 2 [json_name = "description"];
+  if (!this->_internal_description().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_description());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData BadRequest_FieldViolation::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    BadRequest_FieldViolation::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*BadRequest_FieldViolation::GetClassData() const { return &_class_data_; }
+
+
+void BadRequest_FieldViolation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<BadRequest_FieldViolation*>(&to_msg);
+  auto& from = static_cast<const BadRequest_FieldViolation&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.BadRequest.FieldViolation)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_field().empty()) {
+    _this->_internal_set_field(from._internal_field());
+  }
+  if (!from._internal_description().empty()) {
+    _this->_internal_set_description(from._internal_description());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void BadRequest_FieldViolation::CopyFrom(const BadRequest_FieldViolation& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.BadRequest.FieldViolation)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool BadRequest_FieldViolation::IsInitialized() const {
+  return true;
+}
+
+void BadRequest_FieldViolation::InternalSwap(BadRequest_FieldViolation* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.field_, lhs_arena,
+                                       &other->_impl_.field_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
+                                       &other->_impl_.description_, rhs_arena);
+}
+
+::google::protobuf::Metadata BadRequest_FieldViolation::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[8]);
+}
+// ===================================================================
+
+class BadRequest::_Internal {
+ public:
+};
+
+BadRequest::BadRequest(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.BadRequest)
+}
+BadRequest::BadRequest(const BadRequest& from) : ::google::protobuf::Message() {
+  BadRequest* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.field_violations_){from._impl_.field_violations_},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.BadRequest)
+}
+inline void BadRequest::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.field_violations_){arena},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+BadRequest::~BadRequest() {
+  // @@protoc_insertion_point(destructor:google.rpc.BadRequest)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void BadRequest::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.field_violations_.~RepeatedPtrField();
+}
+void BadRequest::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void BadRequest::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.BadRequest)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_field_violations()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* BadRequest::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 1, 0, 2> BadRequest::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_BadRequest_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.rpc.BadRequest.FieldViolation field_violations = 1 [json_name = "fieldViolations"];
+    {::_pbi::TcParser::FastMtR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BadRequest, _impl_.field_violations_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated .google.rpc.BadRequest.FieldViolation field_violations = 1 [json_name = "fieldViolations"];
+    {PROTOBUF_FIELD_OFFSET(BadRequest, _impl_.field_violations_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::rpc::BadRequest_FieldViolation>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* BadRequest::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.BadRequest)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated .google.rpc.BadRequest.FieldViolation field_violations = 1 [json_name = "fieldViolations"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_field_violations_size()); i < n; i++) {
+    const auto& repfield = this->_internal_field_violations().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.BadRequest)
+  return target;
+}
+
+::size_t BadRequest::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.BadRequest)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.rpc.BadRequest.FieldViolation field_violations = 1 [json_name = "fieldViolations"];
+  total_size += 1UL * this->_internal_field_violations_size();
+  for (const auto& msg : this->_internal_field_violations()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData BadRequest::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    BadRequest::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*BadRequest::GetClassData() const { return &_class_data_; }
+
+
+void BadRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<BadRequest*>(&to_msg);
+  auto& from = static_cast<const BadRequest&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.BadRequest)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_field_violations()->MergeFrom(from._internal_field_violations());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void BadRequest::CopyFrom(const BadRequest& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.BadRequest)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool BadRequest::IsInitialized() const {
+  return true;
+}
+
+void BadRequest::InternalSwap(BadRequest* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.field_violations_.InternalSwap(&other->_impl_.field_violations_);
+}
+
+::google::protobuf::Metadata BadRequest::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[9]);
+}
+// ===================================================================
+
+class RequestInfo::_Internal {
+ public:
+};
+
+RequestInfo::RequestInfo(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.RequestInfo)
+}
+RequestInfo::RequestInfo(const RequestInfo& from) : ::google::protobuf::Message() {
+  RequestInfo* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.request_id_){},
+      decltype(_impl_.serving_data_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.request_id_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.request_id_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_request_id().empty()) {
+    _this->_impl_.request_id_.Set(from._internal_request_id(), _this->GetArenaForAllocation());
+  }
+  _impl_.serving_data_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.serving_data_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_serving_data().empty()) {
+    _this->_impl_.serving_data_.Set(from._internal_serving_data(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.RequestInfo)
+}
+inline void RequestInfo::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.request_id_){},
+      decltype(_impl_.serving_data_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.request_id_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.request_id_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.serving_data_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.serving_data_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+RequestInfo::~RequestInfo() {
+  // @@protoc_insertion_point(destructor:google.rpc.RequestInfo)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void RequestInfo::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.request_id_.Destroy();
+  _impl_.serving_data_.Destroy();
+}
+void RequestInfo::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void RequestInfo::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.RequestInfo)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.request_id_.ClearToEmpty();
+  _impl_.serving_data_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* RequestInfo::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 0, 53, 2> RequestInfo::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_RequestInfo_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string serving_data = 2 [json_name = "servingData"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RequestInfo, _impl_.serving_data_)}},
+    // string request_id = 1 [json_name = "requestId"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RequestInfo, _impl_.request_id_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string request_id = 1 [json_name = "requestId"];
+    {PROTOBUF_FIELD_OFFSET(RequestInfo, _impl_.request_id_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string serving_data = 2 [json_name = "servingData"];
+    {PROTOBUF_FIELD_OFFSET(RequestInfo, _impl_.serving_data_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }},
+  // no aux_entries
+  {{
+    "\26\12\14\0\0\0\0\0"
+    "google.rpc.RequestInfo"
+    "request_id"
+    "serving_data"
+  }},
+};
+
+::uint8_t* RequestInfo::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.RequestInfo)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string request_id = 1 [json_name = "requestId"];
+  if (!this->_internal_request_id().empty()) {
+    const std::string& _s = this->_internal_request_id();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.RequestInfo.request_id");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string serving_data = 2 [json_name = "servingData"];
+  if (!this->_internal_serving_data().empty()) {
+    const std::string& _s = this->_internal_serving_data();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.RequestInfo.serving_data");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.RequestInfo)
+  return target;
+}
+
+::size_t RequestInfo::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.RequestInfo)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string request_id = 1 [json_name = "requestId"];
+  if (!this->_internal_request_id().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_request_id());
+  }
+
+  // string serving_data = 2 [json_name = "servingData"];
+  if (!this->_internal_serving_data().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_serving_data());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData RequestInfo::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    RequestInfo::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*RequestInfo::GetClassData() const { return &_class_data_; }
+
+
+void RequestInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<RequestInfo*>(&to_msg);
+  auto& from = static_cast<const RequestInfo&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.RequestInfo)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_request_id().empty()) {
+    _this->_internal_set_request_id(from._internal_request_id());
+  }
+  if (!from._internal_serving_data().empty()) {
+    _this->_internal_set_serving_data(from._internal_serving_data());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void RequestInfo::CopyFrom(const RequestInfo& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.RequestInfo)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool RequestInfo::IsInitialized() const {
+  return true;
+}
+
+void RequestInfo::InternalSwap(RequestInfo* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_id_, lhs_arena,
+                                       &other->_impl_.request_id_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.serving_data_, lhs_arena,
+                                       &other->_impl_.serving_data_, rhs_arena);
+}
+
+::google::protobuf::Metadata RequestInfo::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[10]);
+}
+// ===================================================================
+
+class ResourceInfo::_Internal {
+ public:
+};
+
+ResourceInfo::ResourceInfo(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.ResourceInfo)
+}
+ResourceInfo::ResourceInfo(const ResourceInfo& from) : ::google::protobuf::Message() {
+  ResourceInfo* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.resource_type_){},
+      decltype(_impl_.resource_name_){},
+      decltype(_impl_.owner_){},
+      decltype(_impl_.description_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.resource_type_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.resource_type_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_resource_type().empty()) {
+    _this->_impl_.resource_type_.Set(from._internal_resource_type(), _this->GetArenaForAllocation());
+  }
+  _impl_.resource_name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.resource_name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_resource_name().empty()) {
+    _this->_impl_.resource_name_.Set(from._internal_resource_name(), _this->GetArenaForAllocation());
+  }
+  _impl_.owner_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.owner_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_owner().empty()) {
+    _this->_impl_.owner_.Set(from._internal_owner(), _this->GetArenaForAllocation());
+  }
+  _impl_.description_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.description_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_description().empty()) {
+    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.ResourceInfo)
+}
+inline void ResourceInfo::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.resource_type_){},
+      decltype(_impl_.resource_name_){},
+      decltype(_impl_.owner_){},
+      decltype(_impl_.description_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.resource_type_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.resource_type_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.resource_name_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.resource_name_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.owner_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.owner_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.description_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.description_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+ResourceInfo::~ResourceInfo() {
+  // @@protoc_insertion_point(destructor:google.rpc.ResourceInfo)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void ResourceInfo::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.resource_type_.Destroy();
+  _impl_.resource_name_.Destroy();
+  _impl_.owner_.Destroy();
+  _impl_.description_.Destroy();
+}
+void ResourceInfo::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void ResourceInfo::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.ResourceInfo)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.resource_type_.ClearToEmpty();
+  _impl_.resource_name_.ClearToEmpty();
+  _impl_.owner_.ClearToEmpty();
+  _impl_.description_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* ResourceInfo::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 4, 0, 74, 2> ResourceInfo::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    4, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967280,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    4,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_ResourceInfo_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string description = 4 [json_name = "description"];
+    {::_pbi::TcParser::FastUS1,
+     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceInfo, _impl_.description_)}},
+    // string resource_type = 1 [json_name = "resourceType"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceInfo, _impl_.resource_type_)}},
+    // string resource_name = 2 [json_name = "resourceName"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceInfo, _impl_.resource_name_)}},
+    // string owner = 3 [json_name = "owner"];
+    {::_pbi::TcParser::FastUS1,
+     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceInfo, _impl_.owner_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string resource_type = 1 [json_name = "resourceType"];
+    {PROTOBUF_FIELD_OFFSET(ResourceInfo, _impl_.resource_type_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string resource_name = 2 [json_name = "resourceName"];
+    {PROTOBUF_FIELD_OFFSET(ResourceInfo, _impl_.resource_name_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string owner = 3 [json_name = "owner"];
+    {PROTOBUF_FIELD_OFFSET(ResourceInfo, _impl_.owner_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string description = 4 [json_name = "description"];
+    {PROTOBUF_FIELD_OFFSET(ResourceInfo, _impl_.description_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }},
+  // no aux_entries
+  {{
+    "\27\15\15\5\13\0\0\0"
+    "google.rpc.ResourceInfo"
+    "resource_type"
+    "resource_name"
+    "owner"
+    "description"
+  }},
+};
+
+::uint8_t* ResourceInfo::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.ResourceInfo)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string resource_type = 1 [json_name = "resourceType"];
+  if (!this->_internal_resource_type().empty()) {
+    const std::string& _s = this->_internal_resource_type();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.ResourceInfo.resource_type");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string resource_name = 2 [json_name = "resourceName"];
+  if (!this->_internal_resource_name().empty()) {
+    const std::string& _s = this->_internal_resource_name();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.ResourceInfo.resource_name");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  // string owner = 3 [json_name = "owner"];
+  if (!this->_internal_owner().empty()) {
+    const std::string& _s = this->_internal_owner();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.ResourceInfo.owner");
+    target = stream->WriteStringMaybeAliased(3, _s, target);
+  }
+
+  // string description = 4 [json_name = "description"];
+  if (!this->_internal_description().empty()) {
+    const std::string& _s = this->_internal_description();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.ResourceInfo.description");
+    target = stream->WriteStringMaybeAliased(4, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.ResourceInfo)
+  return target;
+}
+
+::size_t ResourceInfo::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.ResourceInfo)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string resource_type = 1 [json_name = "resourceType"];
+  if (!this->_internal_resource_type().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_resource_type());
+  }
+
+  // string resource_name = 2 [json_name = "resourceName"];
+  if (!this->_internal_resource_name().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_resource_name());
+  }
+
+  // string owner = 3 [json_name = "owner"];
+  if (!this->_internal_owner().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_owner());
+  }
+
+  // string description = 4 [json_name = "description"];
+  if (!this->_internal_description().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_description());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData ResourceInfo::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    ResourceInfo::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*ResourceInfo::GetClassData() const { return &_class_data_; }
+
+
+void ResourceInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<ResourceInfo*>(&to_msg);
+  auto& from = static_cast<const ResourceInfo&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.ResourceInfo)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_resource_type().empty()) {
+    _this->_internal_set_resource_type(from._internal_resource_type());
+  }
+  if (!from._internal_resource_name().empty()) {
+    _this->_internal_set_resource_name(from._internal_resource_name());
+  }
+  if (!from._internal_owner().empty()) {
+    _this->_internal_set_owner(from._internal_owner());
+  }
+  if (!from._internal_description().empty()) {
+    _this->_internal_set_description(from._internal_description());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void ResourceInfo::CopyFrom(const ResourceInfo& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.ResourceInfo)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool ResourceInfo::IsInitialized() const {
+  return true;
+}
+
+void ResourceInfo::InternalSwap(ResourceInfo* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.resource_type_, lhs_arena,
+                                       &other->_impl_.resource_type_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.resource_name_, lhs_arena,
+                                       &other->_impl_.resource_name_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_, lhs_arena,
+                                       &other->_impl_.owner_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
+                                       &other->_impl_.description_, rhs_arena);
+}
+
+::google::protobuf::Metadata ResourceInfo::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[11]);
+}
+// ===================================================================
+
+class Help_Link::_Internal {
+ public:
+};
+
+Help_Link::Help_Link(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.Help.Link)
+}
+Help_Link::Help_Link(const Help_Link& from) : ::google::protobuf::Message() {
+  Help_Link* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.description_){},
+      decltype(_impl_.url_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.description_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.description_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_description().empty()) {
+    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
+  }
+  _impl_.url_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.url_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_url().empty()) {
+    _this->_impl_.url_.Set(from._internal_url(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.Help.Link)
+}
+inline void Help_Link::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.description_){},
+      decltype(_impl_.url_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.description_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.description_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.url_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.url_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+Help_Link::~Help_Link() {
+  // @@protoc_insertion_point(destructor:google.rpc.Help.Link)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Help_Link::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.description_.Destroy();
+  _impl_.url_.Destroy();
+}
+void Help_Link::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Help_Link::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.Help.Link)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.description_.ClearToEmpty();
+  _impl_.url_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Help_Link::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 0, 43, 2> Help_Link::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_Help_Link_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string url = 2 [json_name = "url"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Help_Link, _impl_.url_)}},
+    // string description = 1 [json_name = "description"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Help_Link, _impl_.description_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string description = 1 [json_name = "description"];
+    {PROTOBUF_FIELD_OFFSET(Help_Link, _impl_.description_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string url = 2 [json_name = "url"];
+    {PROTOBUF_FIELD_OFFSET(Help_Link, _impl_.url_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }},
+  // no aux_entries
+  {{
+    "\24\13\3\0\0\0\0\0"
+    "google.rpc.Help.Link"
+    "description"
+    "url"
+  }},
+};
+
+::uint8_t* Help_Link::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.Help.Link)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string description = 1 [json_name = "description"];
+  if (!this->_internal_description().empty()) {
+    const std::string& _s = this->_internal_description();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.Help.Link.description");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string url = 2 [json_name = "url"];
+  if (!this->_internal_url().empty()) {
+    const std::string& _s = this->_internal_url();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.Help.Link.url");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.Help.Link)
+  return target;
+}
+
+::size_t Help_Link::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.Help.Link)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string description = 1 [json_name = "description"];
+  if (!this->_internal_description().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_description());
+  }
+
+  // string url = 2 [json_name = "url"];
+  if (!this->_internal_url().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_url());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Help_Link::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Help_Link::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Help_Link::GetClassData() const { return &_class_data_; }
+
+
+void Help_Link::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Help_Link*>(&to_msg);
+  auto& from = static_cast<const Help_Link&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.Help.Link)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_description().empty()) {
+    _this->_internal_set_description(from._internal_description());
+  }
+  if (!from._internal_url().empty()) {
+    _this->_internal_set_url(from._internal_url());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Help_Link::CopyFrom(const Help_Link& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.Help.Link)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Help_Link::IsInitialized() const {
+  return true;
+}
+
+void Help_Link::InternalSwap(Help_Link* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
+                                       &other->_impl_.description_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, lhs_arena,
+                                       &other->_impl_.url_, rhs_arena);
+}
+
+::google::protobuf::Metadata Help_Link::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[12]);
+}
+// ===================================================================
+
+class Help::_Internal {
+ public:
+};
+
+Help::Help(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.Help)
+}
+Help::Help(const Help& from) : ::google::protobuf::Message() {
+  Help* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.links_){from._impl_.links_},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.Help)
+}
+inline void Help::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.links_){arena},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+Help::~Help() {
+  // @@protoc_insertion_point(destructor:google.rpc.Help)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Help::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.links_.~RepeatedPtrField();
+}
+void Help::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Help::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.Help)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_links()->Clear();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Help::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Help::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    1, 0,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967294,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    1,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Help_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // repeated .google.rpc.Help.Link links = 1 [json_name = "links"];
+    {::_pbi::TcParser::FastMtR1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Help, _impl_.links_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // repeated .google.rpc.Help.Link links = 1 [json_name = "links"];
+    {PROTOBUF_FIELD_OFFSET(Help, _impl_.links_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::rpc::Help_Link>()},
+  }}, {{
+  }},
+};
+
+::uint8_t* Help::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.Help)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // repeated .google.rpc.Help.Link links = 1 [json_name = "links"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_links_size()); i < n; i++) {
+    const auto& repfield = this->_internal_links().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.Help)
+  return target;
+}
+
+::size_t Help::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.Help)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.rpc.Help.Link links = 1 [json_name = "links"];
+  total_size += 1UL * this->_internal_links_size();
+  for (const auto& msg : this->_internal_links()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Help::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Help::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Help::GetClassData() const { return &_class_data_; }
+
+
+void Help::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Help*>(&to_msg);
+  auto& from = static_cast<const Help&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.Help)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_links()->MergeFrom(from._internal_links());
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Help::CopyFrom(const Help& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.Help)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Help::IsInitialized() const {
+  return true;
+}
+
+void Help::InternalSwap(Help* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.links_.InternalSwap(&other->_impl_.links_);
+}
+
+::google::protobuf::Metadata Help::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[13]);
+}
+// ===================================================================
+
+class LocalizedMessage::_Internal {
+ public:
+};
+
+LocalizedMessage::LocalizedMessage(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.LocalizedMessage)
+}
+LocalizedMessage::LocalizedMessage(const LocalizedMessage& from) : ::google::protobuf::Message() {
+  LocalizedMessage* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.locale_){},
+      decltype(_impl_.message_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.locale_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.locale_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_locale().empty()) {
+    _this->_impl_.locale_.Set(from._internal_locale(), _this->GetArenaForAllocation());
+  }
+  _impl_.message_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.message_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_message().empty()) {
+    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
+  }
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.LocalizedMessage)
+}
+inline void LocalizedMessage::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.locale_){},
+      decltype(_impl_.message_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.locale_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.locale_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  _impl_.message_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.message_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+LocalizedMessage::~LocalizedMessage() {
+  // @@protoc_insertion_point(destructor:google.rpc.LocalizedMessage)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void LocalizedMessage::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.locale_.Destroy();
+  _impl_.message_.Destroy();
+}
+void LocalizedMessage::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void LocalizedMessage::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.LocalizedMessage)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _impl_.locale_.ClearToEmpty();
+  _impl_.message_.ClearToEmpty();
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* LocalizedMessage::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<1, 2, 0, 49, 2> LocalizedMessage::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    2, 8,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967292,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    2,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_LocalizedMessage_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // string message = 2 [json_name = "message"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LocalizedMessage, _impl_.message_)}},
+    // string locale = 1 [json_name = "locale"];
+    {::_pbi::TcParser::FastUS1,
+     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LocalizedMessage, _impl_.locale_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // string locale = 1 [json_name = "locale"];
+    {PROTOBUF_FIELD_OFFSET(LocalizedMessage, _impl_.locale_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // string message = 2 [json_name = "message"];
+    {PROTOBUF_FIELD_OFFSET(LocalizedMessage, _impl_.message_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+  }},
+  // no aux_entries
+  {{
+    "\33\6\7\0\0\0\0\0"
+    "google.rpc.LocalizedMessage"
+    "locale"
+    "message"
+  }},
+};
+
+::uint8_t* LocalizedMessage::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.LocalizedMessage)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // string locale = 1 [json_name = "locale"];
+  if (!this->_internal_locale().empty()) {
+    const std::string& _s = this->_internal_locale();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.LocalizedMessage.locale");
+    target = stream->WriteStringMaybeAliased(1, _s, target);
+  }
+
+  // string message = 2 [json_name = "message"];
+  if (!this->_internal_message().empty()) {
+    const std::string& _s = this->_internal_message();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.LocalizedMessage.message");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.LocalizedMessage)
+  return target;
+}
+
+::size_t LocalizedMessage::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.LocalizedMessage)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // string locale = 1 [json_name = "locale"];
+  if (!this->_internal_locale().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_locale());
+  }
+
+  // string message = 2 [json_name = "message"];
+  if (!this->_internal_message().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_message());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData LocalizedMessage::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    LocalizedMessage::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*LocalizedMessage::GetClassData() const { return &_class_data_; }
+
+
+void LocalizedMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<LocalizedMessage*>(&to_msg);
+  auto& from = static_cast<const LocalizedMessage&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.LocalizedMessage)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (!from._internal_locale().empty()) {
+    _this->_internal_set_locale(from._internal_locale());
+  }
+  if (!from._internal_message().empty()) {
+    _this->_internal_set_message(from._internal_message());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void LocalizedMessage::CopyFrom(const LocalizedMessage& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.LocalizedMessage)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool LocalizedMessage::IsInitialized() const {
+  return true;
+}
+
+void LocalizedMessage::InternalSwap(LocalizedMessage* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.locale_, lhs_arena,
+                                       &other->_impl_.locale_, rhs_arena);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
+                                       &other->_impl_.message_, rhs_arena);
+}
+
+::google::protobuf::Metadata LocalizedMessage::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_getter, &descriptor_table_google_2frpc_2ferror_5fdetails_2eproto_once,
+      file_level_metadata_google_2frpc_2ferror_5fdetails_2eproto[14]);
+}
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace rpc
+}  // namespace google
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+// @@protoc_insertion_point(global_scope)
+#include "google/protobuf/port_undef.inc"
diff --git a/gen/google/rpc/error_details.pb.h b/gen/google/rpc/error_details.pb.h
new file mode 100644
index 0000000..027f0f6
--- /dev/null
+++ b/gen/google/rpc/error_details.pb.h
@@ -0,0 +1,4211 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/rpc/error_details.proto
+
+#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2ferror_5fdetails_2eproto_2epb_2eh
+#define GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2ferror_5fdetails_2eproto_2epb_2eh
+
+#include <limits>
+#include <string>
+#include <type_traits>
+
+#include "google/protobuf/port_def.inc"
+#if PROTOBUF_VERSION < 4024000
+#error "This file was generated by a newer version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please update"
+#error "your headers."
+#endif  // PROTOBUF_VERSION
+
+#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
+#error "This file was generated by an older version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please"
+#error "regenerate this file with a newer version of protoc."
+#endif  // PROTOBUF_MIN_PROTOC_VERSION
+#include "google/protobuf/port_undef.inc"
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/arena.h"
+#include "google/protobuf/arenastring.h"
+#include "google/protobuf/generated_message_tctable_decl.h"
+#include "google/protobuf/generated_message_util.h"
+#include "google/protobuf/metadata_lite.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/message.h"
+#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
+#include "google/protobuf/extension_set.h"  // IWYU pragma: export
+#include "google/protobuf/map.h"  // IWYU pragma: export
+#include "google/protobuf/map_entry.h"
+#include "google/protobuf/map_field_inl.h"
+#include "google/protobuf/unknown_field_set.h"
+#include "google/protobuf/duration.pb.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+
+#define PROTOBUF_INTERNAL_EXPORT_google_2frpc_2ferror_5fdetails_2eproto
+
+namespace google {
+namespace protobuf {
+namespace internal {
+class AnyMetadata;
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+// Internal implementation detail -- do not use these members.
+struct TableStruct_google_2frpc_2ferror_5fdetails_2eproto {
+  static const ::uint32_t offsets[];
+};
+extern const ::google::protobuf::internal::DescriptorTable
+    descriptor_table_google_2frpc_2ferror_5fdetails_2eproto;
+namespace google {
+namespace rpc {
+class BadRequest;
+struct BadRequestDefaultTypeInternal;
+extern BadRequestDefaultTypeInternal _BadRequest_default_instance_;
+class BadRequest_FieldViolation;
+struct BadRequest_FieldViolationDefaultTypeInternal;
+extern BadRequest_FieldViolationDefaultTypeInternal _BadRequest_FieldViolation_default_instance_;
+class DebugInfo;
+struct DebugInfoDefaultTypeInternal;
+extern DebugInfoDefaultTypeInternal _DebugInfo_default_instance_;
+class ErrorInfo;
+struct ErrorInfoDefaultTypeInternal;
+extern ErrorInfoDefaultTypeInternal _ErrorInfo_default_instance_;
+class ErrorInfo_MetadataEntry_DoNotUse;
+struct ErrorInfo_MetadataEntry_DoNotUseDefaultTypeInternal;
+extern ErrorInfo_MetadataEntry_DoNotUseDefaultTypeInternal _ErrorInfo_MetadataEntry_DoNotUse_default_instance_;
+class Help;
+struct HelpDefaultTypeInternal;
+extern HelpDefaultTypeInternal _Help_default_instance_;
+class Help_Link;
+struct Help_LinkDefaultTypeInternal;
+extern Help_LinkDefaultTypeInternal _Help_Link_default_instance_;
+class LocalizedMessage;
+struct LocalizedMessageDefaultTypeInternal;
+extern LocalizedMessageDefaultTypeInternal _LocalizedMessage_default_instance_;
+class PreconditionFailure;
+struct PreconditionFailureDefaultTypeInternal;
+extern PreconditionFailureDefaultTypeInternal _PreconditionFailure_default_instance_;
+class PreconditionFailure_Violation;
+struct PreconditionFailure_ViolationDefaultTypeInternal;
+extern PreconditionFailure_ViolationDefaultTypeInternal _PreconditionFailure_Violation_default_instance_;
+class QuotaFailure;
+struct QuotaFailureDefaultTypeInternal;
+extern QuotaFailureDefaultTypeInternal _QuotaFailure_default_instance_;
+class QuotaFailure_Violation;
+struct QuotaFailure_ViolationDefaultTypeInternal;
+extern QuotaFailure_ViolationDefaultTypeInternal _QuotaFailure_Violation_default_instance_;
+class RequestInfo;
+struct RequestInfoDefaultTypeInternal;
+extern RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
+class ResourceInfo;
+struct ResourceInfoDefaultTypeInternal;
+extern ResourceInfoDefaultTypeInternal _ResourceInfo_default_instance_;
+class RetryInfo;
+struct RetryInfoDefaultTypeInternal;
+extern RetryInfoDefaultTypeInternal _RetryInfo_default_instance_;
+}  // namespace rpc
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+
+namespace google {
+namespace rpc {
+
+// ===================================================================
+
+
+// -------------------------------------------------------------------
+
+class ErrorInfo_MetadataEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<ErrorInfo_MetadataEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
+public:
+  typedef ::google::protobuf::internal::MapEntry<ErrorInfo_MetadataEntry_DoNotUse, 
+    std::string, std::string,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
+  ErrorInfo_MetadataEntry_DoNotUse();
+  template <typename = void>
+  explicit PROTOBUF_CONSTEXPR ErrorInfo_MetadataEntry_DoNotUse(
+      ::google::protobuf::internal::ConstantInitialized);
+  explicit ErrorInfo_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
+  void MergeFrom(const ErrorInfo_MetadataEntry_DoNotUse& other);
+  static const ErrorInfo_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ErrorInfo_MetadataEntry_DoNotUse*>(&_ErrorInfo_MetadataEntry_DoNotUse_default_instance_); }
+  static bool ValidateKey(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.ErrorInfo.MetadataEntry.key");
+ }
+  static bool ValidateValue(std::string* s) {
+    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.ErrorInfo.MetadataEntry.value");
+ }
+  using ::google::protobuf::Message::MergeFrom;
+  ::google::protobuf::Metadata GetMetadata() const final;
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};
+// -------------------------------------------------------------------
+
+class ErrorInfo final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.ErrorInfo) */ {
+ public:
+  inline ErrorInfo() : ErrorInfo(nullptr) {}
+  ~ErrorInfo() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR ErrorInfo(::google::protobuf::internal::ConstantInitialized);
+
+  ErrorInfo(const ErrorInfo& from);
+  ErrorInfo(ErrorInfo&& from) noexcept
+    : ErrorInfo() {
+    *this = ::std::move(from);
+  }
+
+  inline ErrorInfo& operator=(const ErrorInfo& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline ErrorInfo& operator=(ErrorInfo&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const ErrorInfo& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const ErrorInfo* internal_default_instance() {
+    return reinterpret_cast<const ErrorInfo*>(
+               &_ErrorInfo_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    1;
+
+  friend void swap(ErrorInfo& a, ErrorInfo& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(ErrorInfo* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(ErrorInfo* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  ErrorInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<ErrorInfo>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const ErrorInfo& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const ErrorInfo& from) {
+    ErrorInfo::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(ErrorInfo* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.ErrorInfo";
+  }
+  protected:
+  explicit ErrorInfo(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kMetadataFieldNumber = 3,
+    kReasonFieldNumber = 1,
+    kDomainFieldNumber = 2,
+  };
+  // map<string, string> metadata = 3 [json_name = "metadata"];
+  int metadata_size() const;
+  private:
+  int _internal_metadata_size() const;
+
+  public:
+  void clear_metadata() ;
+  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
+  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();
+
+  private:
+  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
+  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();
+
+  public:
+  // string reason = 1 [json_name = "reason"];
+  void clear_reason() ;
+  const std::string& reason() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_reason(Arg_&& arg, Args_... args);
+  std::string* mutable_reason();
+  PROTOBUF_NODISCARD std::string* release_reason();
+  void set_allocated_reason(std::string* ptr);
+
+  private:
+  const std::string& _internal_reason() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
+      const std::string& value);
+  std::string* _internal_mutable_reason();
+
+  public:
+  // string domain = 2 [json_name = "domain"];
+  void clear_domain() ;
+  const std::string& domain() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_domain(Arg_&& arg, Args_... args);
+  std::string* mutable_domain();
+  PROTOBUF_NODISCARD std::string* release_domain();
+  void set_allocated_domain(std::string* ptr);
+
+  private:
+  const std::string& _internal_domain() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(
+      const std::string& value);
+  std::string* _internal_mutable_domain();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.ErrorInfo)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 3, 1, 49, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::MapField<ErrorInfo_MetadataEntry_DoNotUse, std::string, std::string,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
+                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
+        metadata_;
+    ::google::protobuf::internal::ArenaStringPtr reason_;
+    ::google::protobuf::internal::ArenaStringPtr domain_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class RetryInfo final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.RetryInfo) */ {
+ public:
+  inline RetryInfo() : RetryInfo(nullptr) {}
+  ~RetryInfo() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR RetryInfo(::google::protobuf::internal::ConstantInitialized);
+
+  RetryInfo(const RetryInfo& from);
+  RetryInfo(RetryInfo&& from) noexcept
+    : RetryInfo() {
+    *this = ::std::move(from);
+  }
+
+  inline RetryInfo& operator=(const RetryInfo& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline RetryInfo& operator=(RetryInfo&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const RetryInfo& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const RetryInfo* internal_default_instance() {
+    return reinterpret_cast<const RetryInfo*>(
+               &_RetryInfo_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    2;
+
+  friend void swap(RetryInfo& a, RetryInfo& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(RetryInfo* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(RetryInfo* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  RetryInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<RetryInfo>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const RetryInfo& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const RetryInfo& from) {
+    RetryInfo::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(RetryInfo* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.RetryInfo";
+  }
+  protected:
+  explicit RetryInfo(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kRetryDelayFieldNumber = 1,
+  };
+  // .google.protobuf.Duration retry_delay = 1 [json_name = "retryDelay"];
+  bool has_retry_delay() const;
+  void clear_retry_delay() ;
+  const ::google::protobuf::Duration& retry_delay() const;
+  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_retry_delay();
+  ::google::protobuf::Duration* mutable_retry_delay();
+  void set_allocated_retry_delay(::google::protobuf::Duration* value);
+  void unsafe_arena_set_allocated_retry_delay(::google::protobuf::Duration* value);
+  ::google::protobuf::Duration* unsafe_arena_release_retry_delay();
+
+  private:
+  const ::google::protobuf::Duration& _internal_retry_delay() const;
+  ::google::protobuf::Duration* _internal_mutable_retry_delay();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.RetryInfo)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::HasBits<1> _has_bits_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    ::google::protobuf::Duration* retry_delay_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class DebugInfo final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.DebugInfo) */ {
+ public:
+  inline DebugInfo() : DebugInfo(nullptr) {}
+  ~DebugInfo() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR DebugInfo(::google::protobuf::internal::ConstantInitialized);
+
+  DebugInfo(const DebugInfo& from);
+  DebugInfo(DebugInfo&& from) noexcept
+    : DebugInfo() {
+    *this = ::std::move(from);
+  }
+
+  inline DebugInfo& operator=(const DebugInfo& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline DebugInfo& operator=(DebugInfo&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const DebugInfo& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const DebugInfo* internal_default_instance() {
+    return reinterpret_cast<const DebugInfo*>(
+               &_DebugInfo_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    3;
+
+  friend void swap(DebugInfo& a, DebugInfo& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(DebugInfo* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(DebugInfo* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  DebugInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<DebugInfo>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const DebugInfo& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const DebugInfo& from) {
+    DebugInfo::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(DebugInfo* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.DebugInfo";
+  }
+  protected:
+  explicit DebugInfo(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kStackEntriesFieldNumber = 1,
+    kDetailFieldNumber = 2,
+  };
+  // repeated string stack_entries = 1 [json_name = "stackEntries"];
+  int stack_entries_size() const;
+  private:
+  int _internal_stack_entries_size() const;
+
+  public:
+  void clear_stack_entries() ;
+  const std::string& stack_entries(int index) const;
+  std::string* mutable_stack_entries(int index);
+  void set_stack_entries(int index, const std::string& value);
+  void set_stack_entries(int index, std::string&& value);
+  void set_stack_entries(int index, const char* value);
+  void set_stack_entries(int index, const char* value, std::size_t size);
+  void set_stack_entries(int index, absl::string_view value);
+  std::string* add_stack_entries();
+  void add_stack_entries(const std::string& value);
+  void add_stack_entries(std::string&& value);
+  void add_stack_entries(const char* value);
+  void add_stack_entries(const char* value, std::size_t size);
+  void add_stack_entries(absl::string_view value);
+  const ::google::protobuf::RepeatedPtrField<std::string>& stack_entries() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* mutable_stack_entries();
+
+  private:
+  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_stack_entries() const;
+  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_stack_entries();
+
+  public:
+  // string detail = 2 [json_name = "detail"];
+  void clear_detail() ;
+  const std::string& detail() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_detail(Arg_&& arg, Args_... args);
+  std::string* mutable_detail();
+  PROTOBUF_NODISCARD std::string* release_detail();
+  void set_allocated_detail(std::string* ptr);
+
+  private:
+  const std::string& _internal_detail() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(
+      const std::string& value);
+  std::string* _internal_mutable_detail();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.DebugInfo)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 48, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField<std::string> stack_entries_;
+    ::google::protobuf::internal::ArenaStringPtr detail_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class QuotaFailure_Violation final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.QuotaFailure.Violation) */ {
+ public:
+  inline QuotaFailure_Violation() : QuotaFailure_Violation(nullptr) {}
+  ~QuotaFailure_Violation() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR QuotaFailure_Violation(::google::protobuf::internal::ConstantInitialized);
+
+  QuotaFailure_Violation(const QuotaFailure_Violation& from);
+  QuotaFailure_Violation(QuotaFailure_Violation&& from) noexcept
+    : QuotaFailure_Violation() {
+    *this = ::std::move(from);
+  }
+
+  inline QuotaFailure_Violation& operator=(const QuotaFailure_Violation& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline QuotaFailure_Violation& operator=(QuotaFailure_Violation&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const QuotaFailure_Violation& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const QuotaFailure_Violation* internal_default_instance() {
+    return reinterpret_cast<const QuotaFailure_Violation*>(
+               &_QuotaFailure_Violation_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    4;
+
+  friend void swap(QuotaFailure_Violation& a, QuotaFailure_Violation& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(QuotaFailure_Violation* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(QuotaFailure_Violation* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  QuotaFailure_Violation* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<QuotaFailure_Violation>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const QuotaFailure_Violation& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const QuotaFailure_Violation& from) {
+    QuotaFailure_Violation::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(QuotaFailure_Violation* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.QuotaFailure.Violation";
+  }
+  protected:
+  explicit QuotaFailure_Violation(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kSubjectFieldNumber = 1,
+    kDescriptionFieldNumber = 2,
+  };
+  // string subject = 1 [json_name = "subject"];
+  void clear_subject() ;
+  const std::string& subject() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_subject(Arg_&& arg, Args_... args);
+  std::string* mutable_subject();
+  PROTOBUF_NODISCARD std::string* release_subject();
+  void set_allocated_subject(std::string* ptr);
+
+  private:
+  const std::string& _internal_subject() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
+      const std::string& value);
+  std::string* _internal_mutable_subject();
+
+  public:
+  // string description = 2 [json_name = "description"];
+  void clear_description() ;
+  const std::string& description() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_description(Arg_&& arg, Args_... args);
+  std::string* mutable_description();
+  PROTOBUF_NODISCARD std::string* release_description();
+  void set_allocated_description(std::string* ptr);
+
+  private:
+  const std::string& _internal_description() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
+      const std::string& value);
+  std::string* _internal_mutable_description();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.QuotaFailure.Violation)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 60, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr subject_;
+    ::google::protobuf::internal::ArenaStringPtr description_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class QuotaFailure final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.QuotaFailure) */ {
+ public:
+  inline QuotaFailure() : QuotaFailure(nullptr) {}
+  ~QuotaFailure() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR QuotaFailure(::google::protobuf::internal::ConstantInitialized);
+
+  QuotaFailure(const QuotaFailure& from);
+  QuotaFailure(QuotaFailure&& from) noexcept
+    : QuotaFailure() {
+    *this = ::std::move(from);
+  }
+
+  inline QuotaFailure& operator=(const QuotaFailure& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline QuotaFailure& operator=(QuotaFailure&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const QuotaFailure& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const QuotaFailure* internal_default_instance() {
+    return reinterpret_cast<const QuotaFailure*>(
+               &_QuotaFailure_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    5;
+
+  friend void swap(QuotaFailure& a, QuotaFailure& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(QuotaFailure* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(QuotaFailure* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  QuotaFailure* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<QuotaFailure>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const QuotaFailure& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const QuotaFailure& from) {
+    QuotaFailure::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(QuotaFailure* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.QuotaFailure";
+  }
+  protected:
+  explicit QuotaFailure(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef QuotaFailure_Violation Violation;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kViolationsFieldNumber = 1,
+  };
+  // repeated .google.rpc.QuotaFailure.Violation violations = 1 [json_name = "violations"];
+  int violations_size() const;
+  private:
+  int _internal_violations_size() const;
+
+  public:
+  void clear_violations() ;
+  ::google::rpc::QuotaFailure_Violation* mutable_violations(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::rpc::QuotaFailure_Violation >*
+      mutable_violations();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::rpc::QuotaFailure_Violation>& _internal_violations() const;
+  ::google::protobuf::RepeatedPtrField<::google::rpc::QuotaFailure_Violation>* _internal_mutable_violations();
+  public:
+  const ::google::rpc::QuotaFailure_Violation& violations(int index) const;
+  ::google::rpc::QuotaFailure_Violation* add_violations();
+  const ::google::protobuf::RepeatedPtrField< ::google::rpc::QuotaFailure_Violation >&
+      violations() const;
+  // @@protoc_insertion_point(class_scope:google.rpc.QuotaFailure)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::rpc::QuotaFailure_Violation > violations_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class PreconditionFailure_Violation final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.PreconditionFailure.Violation) */ {
+ public:
+  inline PreconditionFailure_Violation() : PreconditionFailure_Violation(nullptr) {}
+  ~PreconditionFailure_Violation() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR PreconditionFailure_Violation(::google::protobuf::internal::ConstantInitialized);
+
+  PreconditionFailure_Violation(const PreconditionFailure_Violation& from);
+  PreconditionFailure_Violation(PreconditionFailure_Violation&& from) noexcept
+    : PreconditionFailure_Violation() {
+    *this = ::std::move(from);
+  }
+
+  inline PreconditionFailure_Violation& operator=(const PreconditionFailure_Violation& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline PreconditionFailure_Violation& operator=(PreconditionFailure_Violation&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const PreconditionFailure_Violation& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const PreconditionFailure_Violation* internal_default_instance() {
+    return reinterpret_cast<const PreconditionFailure_Violation*>(
+               &_PreconditionFailure_Violation_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    6;
+
+  friend void swap(PreconditionFailure_Violation& a, PreconditionFailure_Violation& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(PreconditionFailure_Violation* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(PreconditionFailure_Violation* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  PreconditionFailure_Violation* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<PreconditionFailure_Violation>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const PreconditionFailure_Violation& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const PreconditionFailure_Violation& from) {
+    PreconditionFailure_Violation::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(PreconditionFailure_Violation* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.PreconditionFailure.Violation";
+  }
+  protected:
+  explicit PreconditionFailure_Violation(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kTypeFieldNumber = 1,
+    kSubjectFieldNumber = 2,
+    kDescriptionFieldNumber = 3,
+  };
+  // string type = 1 [json_name = "type"];
+  void clear_type() ;
+  const std::string& type() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_type(Arg_&& arg, Args_... args);
+  std::string* mutable_type();
+  PROTOBUF_NODISCARD std::string* release_type();
+  void set_allocated_type(std::string* ptr);
+
+  private:
+  const std::string& _internal_type() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
+      const std::string& value);
+  std::string* _internal_mutable_type();
+
+  public:
+  // string subject = 2 [json_name = "subject"];
+  void clear_subject() ;
+  const std::string& subject() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_subject(Arg_&& arg, Args_... args);
+  std::string* mutable_subject();
+  PROTOBUF_NODISCARD std::string* release_subject();
+  void set_allocated_subject(std::string* ptr);
+
+  private:
+  const std::string& _internal_subject() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
+      const std::string& value);
+  std::string* _internal_mutable_subject();
+
+  public:
+  // string description = 3 [json_name = "description"];
+  void clear_description() ;
+  const std::string& description() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_description(Arg_&& arg, Args_... args);
+  std::string* mutable_description();
+  PROTOBUF_NODISCARD std::string* release_description();
+  void set_allocated_description(std::string* ptr);
+
+  private:
+  const std::string& _internal_description() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
+      const std::string& value);
+  std::string* _internal_mutable_description();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.PreconditionFailure.Violation)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 71, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr type_;
+    ::google::protobuf::internal::ArenaStringPtr subject_;
+    ::google::protobuf::internal::ArenaStringPtr description_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class PreconditionFailure final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.PreconditionFailure) */ {
+ public:
+  inline PreconditionFailure() : PreconditionFailure(nullptr) {}
+  ~PreconditionFailure() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR PreconditionFailure(::google::protobuf::internal::ConstantInitialized);
+
+  PreconditionFailure(const PreconditionFailure& from);
+  PreconditionFailure(PreconditionFailure&& from) noexcept
+    : PreconditionFailure() {
+    *this = ::std::move(from);
+  }
+
+  inline PreconditionFailure& operator=(const PreconditionFailure& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline PreconditionFailure& operator=(PreconditionFailure&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const PreconditionFailure& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const PreconditionFailure* internal_default_instance() {
+    return reinterpret_cast<const PreconditionFailure*>(
+               &_PreconditionFailure_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    7;
+
+  friend void swap(PreconditionFailure& a, PreconditionFailure& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(PreconditionFailure* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(PreconditionFailure* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  PreconditionFailure* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<PreconditionFailure>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const PreconditionFailure& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const PreconditionFailure& from) {
+    PreconditionFailure::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(PreconditionFailure* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.PreconditionFailure";
+  }
+  protected:
+  explicit PreconditionFailure(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef PreconditionFailure_Violation Violation;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kViolationsFieldNumber = 1,
+  };
+  // repeated .google.rpc.PreconditionFailure.Violation violations = 1 [json_name = "violations"];
+  int violations_size() const;
+  private:
+  int _internal_violations_size() const;
+
+  public:
+  void clear_violations() ;
+  ::google::rpc::PreconditionFailure_Violation* mutable_violations(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::rpc::PreconditionFailure_Violation >*
+      mutable_violations();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::rpc::PreconditionFailure_Violation>& _internal_violations() const;
+  ::google::protobuf::RepeatedPtrField<::google::rpc::PreconditionFailure_Violation>* _internal_mutable_violations();
+  public:
+  const ::google::rpc::PreconditionFailure_Violation& violations(int index) const;
+  ::google::rpc::PreconditionFailure_Violation* add_violations();
+  const ::google::protobuf::RepeatedPtrField< ::google::rpc::PreconditionFailure_Violation >&
+      violations() const;
+  // @@protoc_insertion_point(class_scope:google.rpc.PreconditionFailure)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::rpc::PreconditionFailure_Violation > violations_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class BadRequest_FieldViolation final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.BadRequest.FieldViolation) */ {
+ public:
+  inline BadRequest_FieldViolation() : BadRequest_FieldViolation(nullptr) {}
+  ~BadRequest_FieldViolation() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR BadRequest_FieldViolation(::google::protobuf::internal::ConstantInitialized);
+
+  BadRequest_FieldViolation(const BadRequest_FieldViolation& from);
+  BadRequest_FieldViolation(BadRequest_FieldViolation&& from) noexcept
+    : BadRequest_FieldViolation() {
+    *this = ::std::move(from);
+  }
+
+  inline BadRequest_FieldViolation& operator=(const BadRequest_FieldViolation& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline BadRequest_FieldViolation& operator=(BadRequest_FieldViolation&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const BadRequest_FieldViolation& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const BadRequest_FieldViolation* internal_default_instance() {
+    return reinterpret_cast<const BadRequest_FieldViolation*>(
+               &_BadRequest_FieldViolation_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    8;
+
+  friend void swap(BadRequest_FieldViolation& a, BadRequest_FieldViolation& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(BadRequest_FieldViolation* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(BadRequest_FieldViolation* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  BadRequest_FieldViolation* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<BadRequest_FieldViolation>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const BadRequest_FieldViolation& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const BadRequest_FieldViolation& from) {
+    BadRequest_FieldViolation::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(BadRequest_FieldViolation* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.BadRequest.FieldViolation";
+  }
+  protected:
+  explicit BadRequest_FieldViolation(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kFieldFieldNumber = 1,
+    kDescriptionFieldNumber = 2,
+  };
+  // string field = 1 [json_name = "field"];
+  void clear_field() ;
+  const std::string& field() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_field(Arg_&& arg, Args_... args);
+  std::string* mutable_field();
+  PROTOBUF_NODISCARD std::string* release_field();
+  void set_allocated_field(std::string* ptr);
+
+  private:
+  const std::string& _internal_field() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field(
+      const std::string& value);
+  std::string* _internal_mutable_field();
+
+  public:
+  // string description = 2 [json_name = "description"];
+  void clear_description() ;
+  const std::string& description() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_description(Arg_&& arg, Args_... args);
+  std::string* mutable_description();
+  PROTOBUF_NODISCARD std::string* release_description();
+  void set_allocated_description(std::string* ptr);
+
+  private:
+  const std::string& _internal_description() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
+      const std::string& value);
+  std::string* _internal_mutable_description();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.BadRequest.FieldViolation)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 61, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr field_;
+    ::google::protobuf::internal::ArenaStringPtr description_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class BadRequest final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.BadRequest) */ {
+ public:
+  inline BadRequest() : BadRequest(nullptr) {}
+  ~BadRequest() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR BadRequest(::google::protobuf::internal::ConstantInitialized);
+
+  BadRequest(const BadRequest& from);
+  BadRequest(BadRequest&& from) noexcept
+    : BadRequest() {
+    *this = ::std::move(from);
+  }
+
+  inline BadRequest& operator=(const BadRequest& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline BadRequest& operator=(BadRequest&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const BadRequest& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const BadRequest* internal_default_instance() {
+    return reinterpret_cast<const BadRequest*>(
+               &_BadRequest_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    9;
+
+  friend void swap(BadRequest& a, BadRequest& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(BadRequest* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(BadRequest* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  BadRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<BadRequest>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const BadRequest& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const BadRequest& from) {
+    BadRequest::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(BadRequest* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.BadRequest";
+  }
+  protected:
+  explicit BadRequest(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef BadRequest_FieldViolation FieldViolation;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kFieldViolationsFieldNumber = 1,
+  };
+  // repeated .google.rpc.BadRequest.FieldViolation field_violations = 1 [json_name = "fieldViolations"];
+  int field_violations_size() const;
+  private:
+  int _internal_field_violations_size() const;
+
+  public:
+  void clear_field_violations() ;
+  ::google::rpc::BadRequest_FieldViolation* mutable_field_violations(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::rpc::BadRequest_FieldViolation >*
+      mutable_field_violations();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::rpc::BadRequest_FieldViolation>& _internal_field_violations() const;
+  ::google::protobuf::RepeatedPtrField<::google::rpc::BadRequest_FieldViolation>* _internal_mutable_field_violations();
+  public:
+  const ::google::rpc::BadRequest_FieldViolation& field_violations(int index) const;
+  ::google::rpc::BadRequest_FieldViolation* add_field_violations();
+  const ::google::protobuf::RepeatedPtrField< ::google::rpc::BadRequest_FieldViolation >&
+      field_violations() const;
+  // @@protoc_insertion_point(class_scope:google.rpc.BadRequest)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::rpc::BadRequest_FieldViolation > field_violations_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class RequestInfo final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.RequestInfo) */ {
+ public:
+  inline RequestInfo() : RequestInfo(nullptr) {}
+  ~RequestInfo() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR RequestInfo(::google::protobuf::internal::ConstantInitialized);
+
+  RequestInfo(const RequestInfo& from);
+  RequestInfo(RequestInfo&& from) noexcept
+    : RequestInfo() {
+    *this = ::std::move(from);
+  }
+
+  inline RequestInfo& operator=(const RequestInfo& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline RequestInfo& operator=(RequestInfo&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const RequestInfo& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const RequestInfo* internal_default_instance() {
+    return reinterpret_cast<const RequestInfo*>(
+               &_RequestInfo_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    10;
+
+  friend void swap(RequestInfo& a, RequestInfo& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(RequestInfo* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(RequestInfo* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  RequestInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<RequestInfo>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const RequestInfo& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const RequestInfo& from) {
+    RequestInfo::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(RequestInfo* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.RequestInfo";
+  }
+  protected:
+  explicit RequestInfo(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kRequestIdFieldNumber = 1,
+    kServingDataFieldNumber = 2,
+  };
+  // string request_id = 1 [json_name = "requestId"];
+  void clear_request_id() ;
+  const std::string& request_id() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_request_id(Arg_&& arg, Args_... args);
+  std::string* mutable_request_id();
+  PROTOBUF_NODISCARD std::string* release_request_id();
+  void set_allocated_request_id(std::string* ptr);
+
+  private:
+  const std::string& _internal_request_id() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
+      const std::string& value);
+  std::string* _internal_mutable_request_id();
+
+  public:
+  // string serving_data = 2 [json_name = "servingData"];
+  void clear_serving_data() ;
+  const std::string& serving_data() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_serving_data(Arg_&& arg, Args_... args);
+  std::string* mutable_serving_data();
+  PROTOBUF_NODISCARD std::string* release_serving_data();
+  void set_allocated_serving_data(std::string* ptr);
+
+  private:
+  const std::string& _internal_serving_data() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serving_data(
+      const std::string& value);
+  std::string* _internal_mutable_serving_data();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.RequestInfo)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 53, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr request_id_;
+    ::google::protobuf::internal::ArenaStringPtr serving_data_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class ResourceInfo final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.ResourceInfo) */ {
+ public:
+  inline ResourceInfo() : ResourceInfo(nullptr) {}
+  ~ResourceInfo() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR ResourceInfo(::google::protobuf::internal::ConstantInitialized);
+
+  ResourceInfo(const ResourceInfo& from);
+  ResourceInfo(ResourceInfo&& from) noexcept
+    : ResourceInfo() {
+    *this = ::std::move(from);
+  }
+
+  inline ResourceInfo& operator=(const ResourceInfo& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline ResourceInfo& operator=(ResourceInfo&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const ResourceInfo& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const ResourceInfo* internal_default_instance() {
+    return reinterpret_cast<const ResourceInfo*>(
+               &_ResourceInfo_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    11;
+
+  friend void swap(ResourceInfo& a, ResourceInfo& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(ResourceInfo* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(ResourceInfo* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  ResourceInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<ResourceInfo>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const ResourceInfo& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const ResourceInfo& from) {
+    ResourceInfo::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(ResourceInfo* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.ResourceInfo";
+  }
+  protected:
+  explicit ResourceInfo(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kResourceTypeFieldNumber = 1,
+    kResourceNameFieldNumber = 2,
+    kOwnerFieldNumber = 3,
+    kDescriptionFieldNumber = 4,
+  };
+  // string resource_type = 1 [json_name = "resourceType"];
+  void clear_resource_type() ;
+  const std::string& resource_type() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_resource_type(Arg_&& arg, Args_... args);
+  std::string* mutable_resource_type();
+  PROTOBUF_NODISCARD std::string* release_resource_type();
+  void set_allocated_resource_type(std::string* ptr);
+
+  private:
+  const std::string& _internal_resource_type() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_type(
+      const std::string& value);
+  std::string* _internal_mutable_resource_type();
+
+  public:
+  // string resource_name = 2 [json_name = "resourceName"];
+  void clear_resource_name() ;
+  const std::string& resource_name() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_resource_name(Arg_&& arg, Args_... args);
+  std::string* mutable_resource_name();
+  PROTOBUF_NODISCARD std::string* release_resource_name();
+  void set_allocated_resource_name(std::string* ptr);
+
+  private:
+  const std::string& _internal_resource_name() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_name(
+      const std::string& value);
+  std::string* _internal_mutable_resource_name();
+
+  public:
+  // string owner = 3 [json_name = "owner"];
+  void clear_owner() ;
+  const std::string& owner() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_owner(Arg_&& arg, Args_... args);
+  std::string* mutable_owner();
+  PROTOBUF_NODISCARD std::string* release_owner();
+  void set_allocated_owner(std::string* ptr);
+
+  private:
+  const std::string& _internal_owner() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
+      const std::string& value);
+  std::string* _internal_mutable_owner();
+
+  public:
+  // string description = 4 [json_name = "description"];
+  void clear_description() ;
+  const std::string& description() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_description(Arg_&& arg, Args_... args);
+  std::string* mutable_description();
+  PROTOBUF_NODISCARD std::string* release_description();
+  void set_allocated_description(std::string* ptr);
+
+  private:
+  const std::string& _internal_description() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
+      const std::string& value);
+  std::string* _internal_mutable_description();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.ResourceInfo)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 74, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr resource_type_;
+    ::google::protobuf::internal::ArenaStringPtr resource_name_;
+    ::google::protobuf::internal::ArenaStringPtr owner_;
+    ::google::protobuf::internal::ArenaStringPtr description_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class Help_Link final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.Help.Link) */ {
+ public:
+  inline Help_Link() : Help_Link(nullptr) {}
+  ~Help_Link() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Help_Link(::google::protobuf::internal::ConstantInitialized);
+
+  Help_Link(const Help_Link& from);
+  Help_Link(Help_Link&& from) noexcept
+    : Help_Link() {
+    *this = ::std::move(from);
+  }
+
+  inline Help_Link& operator=(const Help_Link& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Help_Link& operator=(Help_Link&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Help_Link& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Help_Link* internal_default_instance() {
+    return reinterpret_cast<const Help_Link*>(
+               &_Help_Link_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    12;
+
+  friend void swap(Help_Link& a, Help_Link& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Help_Link* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Help_Link* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Help_Link* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Help_Link>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Help_Link& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Help_Link& from) {
+    Help_Link::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Help_Link* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.Help.Link";
+  }
+  protected:
+  explicit Help_Link(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kDescriptionFieldNumber = 1,
+    kUrlFieldNumber = 2,
+  };
+  // string description = 1 [json_name = "description"];
+  void clear_description() ;
+  const std::string& description() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_description(Arg_&& arg, Args_... args);
+  std::string* mutable_description();
+  PROTOBUF_NODISCARD std::string* release_description();
+  void set_allocated_description(std::string* ptr);
+
+  private:
+  const std::string& _internal_description() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
+      const std::string& value);
+  std::string* _internal_mutable_description();
+
+  public:
+  // string url = 2 [json_name = "url"];
+  void clear_url() ;
+  const std::string& url() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_url(Arg_&& arg, Args_... args);
+  std::string* mutable_url();
+  PROTOBUF_NODISCARD std::string* release_url();
+  void set_allocated_url(std::string* ptr);
+
+  private:
+  const std::string& _internal_url() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
+      const std::string& value);
+  std::string* _internal_mutable_url();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.Help.Link)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 43, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr description_;
+    ::google::protobuf::internal::ArenaStringPtr url_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class Help final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.Help) */ {
+ public:
+  inline Help() : Help(nullptr) {}
+  ~Help() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Help(::google::protobuf::internal::ConstantInitialized);
+
+  Help(const Help& from);
+  Help(Help&& from) noexcept
+    : Help() {
+    *this = ::std::move(from);
+  }
+
+  inline Help& operator=(const Help& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Help& operator=(Help&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Help& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Help* internal_default_instance() {
+    return reinterpret_cast<const Help*>(
+               &_Help_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    13;
+
+  friend void swap(Help& a, Help& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Help* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Help* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Help* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Help>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Help& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Help& from) {
+    Help::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Help* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.Help";
+  }
+  protected:
+  explicit Help(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  typedef Help_Link Link;
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kLinksFieldNumber = 1,
+  };
+  // repeated .google.rpc.Help.Link links = 1 [json_name = "links"];
+  int links_size() const;
+  private:
+  int _internal_links_size() const;
+
+  public:
+  void clear_links() ;
+  ::google::rpc::Help_Link* mutable_links(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::rpc::Help_Link >*
+      mutable_links();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::rpc::Help_Link>& _internal_links() const;
+  ::google::protobuf::RepeatedPtrField<::google::rpc::Help_Link>* _internal_mutable_links();
+  public:
+  const ::google::rpc::Help_Link& links(int index) const;
+  ::google::rpc::Help_Link* add_links();
+  const ::google::protobuf::RepeatedPtrField< ::google::rpc::Help_Link >&
+      links() const;
+  // @@protoc_insertion_point(class_scope:google.rpc.Help)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::rpc::Help_Link > links_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};// -------------------------------------------------------------------
+
+class LocalizedMessage final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.LocalizedMessage) */ {
+ public:
+  inline LocalizedMessage() : LocalizedMessage(nullptr) {}
+  ~LocalizedMessage() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR LocalizedMessage(::google::protobuf::internal::ConstantInitialized);
+
+  LocalizedMessage(const LocalizedMessage& from);
+  LocalizedMessage(LocalizedMessage&& from) noexcept
+    : LocalizedMessage() {
+    *this = ::std::move(from);
+  }
+
+  inline LocalizedMessage& operator=(const LocalizedMessage& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline LocalizedMessage& operator=(LocalizedMessage&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const LocalizedMessage& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const LocalizedMessage* internal_default_instance() {
+    return reinterpret_cast<const LocalizedMessage*>(
+               &_LocalizedMessage_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    14;
+
+  friend void swap(LocalizedMessage& a, LocalizedMessage& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(LocalizedMessage* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(LocalizedMessage* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  LocalizedMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<LocalizedMessage>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const LocalizedMessage& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const LocalizedMessage& from) {
+    LocalizedMessage::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(LocalizedMessage* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.LocalizedMessage";
+  }
+  protected:
+  explicit LocalizedMessage(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kLocaleFieldNumber = 1,
+    kMessageFieldNumber = 2,
+  };
+  // string locale = 1 [json_name = "locale"];
+  void clear_locale() ;
+  const std::string& locale() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_locale(Arg_&& arg, Args_... args);
+  std::string* mutable_locale();
+  PROTOBUF_NODISCARD std::string* release_locale();
+  void set_allocated_locale(std::string* ptr);
+
+  private:
+  const std::string& _internal_locale() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(
+      const std::string& value);
+  std::string* _internal_mutable_locale();
+
+  public:
+  // string message = 2 [json_name = "message"];
+  void clear_message() ;
+  const std::string& message() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_message(Arg_&& arg, Args_... args);
+  std::string* mutable_message();
+  PROTOBUF_NODISCARD std::string* release_message();
+  void set_allocated_message(std::string* ptr);
+
+  private:
+  const std::string& _internal_message() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
+      const std::string& value);
+  std::string* _internal_mutable_message();
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.LocalizedMessage)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 49, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::internal::ArenaStringPtr locale_;
+    ::google::protobuf::internal::ArenaStringPtr message_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2ferror_5fdetails_2eproto;
+};
+
+// ===================================================================
+
+
+
+
+// ===================================================================
+
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif  // __GNUC__
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+
+// ErrorInfo
+
+// string reason = 1 [json_name = "reason"];
+inline void ErrorInfo::clear_reason() {
+  _impl_.reason_.ClearToEmpty();
+}
+inline const std::string& ErrorInfo::reason() const {
+  // @@protoc_insertion_point(field_get:google.rpc.ErrorInfo.reason)
+  return _internal_reason();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void ErrorInfo::set_reason(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.ErrorInfo.reason)
+}
+inline std::string* ErrorInfo::mutable_reason() {
+  std::string* _s = _internal_mutable_reason();
+  // @@protoc_insertion_point(field_mutable:google.rpc.ErrorInfo.reason)
+  return _s;
+}
+inline const std::string& ErrorInfo::_internal_reason() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.reason_.Get();
+}
+inline void ErrorInfo::_internal_set_reason(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.reason_.Set(value, GetArenaForAllocation());
+}
+inline std::string* ErrorInfo::_internal_mutable_reason() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.reason_.Mutable( GetArenaForAllocation());
+}
+inline std::string* ErrorInfo::release_reason() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.ErrorInfo.reason)
+  return _impl_.reason_.Release();
+}
+inline void ErrorInfo::set_allocated_reason(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.reason_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.reason_.IsDefault()) {
+          _impl_.reason_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.ErrorInfo.reason)
+}
+
+// string domain = 2 [json_name = "domain"];
+inline void ErrorInfo::clear_domain() {
+  _impl_.domain_.ClearToEmpty();
+}
+inline const std::string& ErrorInfo::domain() const {
+  // @@protoc_insertion_point(field_get:google.rpc.ErrorInfo.domain)
+  return _internal_domain();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void ErrorInfo::set_domain(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.domain_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.ErrorInfo.domain)
+}
+inline std::string* ErrorInfo::mutable_domain() {
+  std::string* _s = _internal_mutable_domain();
+  // @@protoc_insertion_point(field_mutable:google.rpc.ErrorInfo.domain)
+  return _s;
+}
+inline const std::string& ErrorInfo::_internal_domain() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.domain_.Get();
+}
+inline void ErrorInfo::_internal_set_domain(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.domain_.Set(value, GetArenaForAllocation());
+}
+inline std::string* ErrorInfo::_internal_mutable_domain() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.domain_.Mutable( GetArenaForAllocation());
+}
+inline std::string* ErrorInfo::release_domain() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.ErrorInfo.domain)
+  return _impl_.domain_.Release();
+}
+inline void ErrorInfo::set_allocated_domain(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.domain_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.domain_.IsDefault()) {
+          _impl_.domain_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.ErrorInfo.domain)
+}
+
+// map<string, string> metadata = 3 [json_name = "metadata"];
+inline int ErrorInfo::_internal_metadata_size() const {
+  return _internal_metadata().size();
+}
+inline int ErrorInfo::metadata_size() const {
+  return _internal_metadata_size();
+}
+inline void ErrorInfo::clear_metadata() {
+  _impl_.metadata_.Clear();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& ErrorInfo::_internal_metadata() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.metadata_.GetMap();
+}
+inline const ::google::protobuf::Map<std::string, std::string>& ErrorInfo::metadata() const {
+  // @@protoc_insertion_point(field_map:google.rpc.ErrorInfo.metadata)
+  return _internal_metadata();
+}
+inline ::google::protobuf::Map<std::string, std::string>* ErrorInfo::_internal_mutable_metadata() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _impl_.metadata_.MutableMap();
+}
+inline ::google::protobuf::Map<std::string, std::string>* ErrorInfo::mutable_metadata() {
+  // @@protoc_insertion_point(field_mutable_map:google.rpc.ErrorInfo.metadata)
+  return _internal_mutable_metadata();
+}
+
+// -------------------------------------------------------------------
+
+// RetryInfo
+
+// .google.protobuf.Duration retry_delay = 1 [json_name = "retryDelay"];
+inline bool RetryInfo::has_retry_delay() const {
+  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
+  PROTOBUF_ASSUME(!value || _impl_.retry_delay_ != nullptr);
+  return value;
+}
+inline const ::google::protobuf::Duration& RetryInfo::_internal_retry_delay() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  const ::google::protobuf::Duration* p = _impl_.retry_delay_;
+  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
+}
+inline const ::google::protobuf::Duration& RetryInfo::retry_delay() const {
+  // @@protoc_insertion_point(field_get:google.rpc.RetryInfo.retry_delay)
+  return _internal_retry_delay();
+}
+inline void RetryInfo::unsafe_arena_set_allocated_retry_delay(::google::protobuf::Duration* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (GetArenaForAllocation() == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.retry_delay_);
+  }
+  _impl_.retry_delay_ = reinterpret_cast<::google::protobuf::Duration*>(value);
+  if (value != nullptr) {
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.RetryInfo.retry_delay)
+}
+inline ::google::protobuf::Duration* RetryInfo::release_retry_delay() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::protobuf::Duration* released = _impl_.retry_delay_;
+  _impl_.retry_delay_ = nullptr;
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
+  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  if (GetArenaForAllocation() == nullptr) {
+    delete old;
+  }
+#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
+    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
+  }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
+  return released;
+}
+inline ::google::protobuf::Duration* RetryInfo::unsafe_arena_release_retry_delay() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.RetryInfo.retry_delay)
+
+  _impl_._has_bits_[0] &= ~0x00000001u;
+  ::google::protobuf::Duration* temp = _impl_.retry_delay_;
+  _impl_.retry_delay_ = nullptr;
+  return temp;
+}
+inline ::google::protobuf::Duration* RetryInfo::_internal_mutable_retry_delay() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_._has_bits_[0] |= 0x00000001u;
+  if (_impl_.retry_delay_ == nullptr) {
+    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaForAllocation());
+    _impl_.retry_delay_ = reinterpret_cast<::google::protobuf::Duration*>(p);
+  }
+  return _impl_.retry_delay_;
+}
+inline ::google::protobuf::Duration* RetryInfo::mutable_retry_delay() {
+  ::google::protobuf::Duration* _msg = _internal_mutable_retry_delay();
+  // @@protoc_insertion_point(field_mutable:google.rpc.RetryInfo.retry_delay)
+  return _msg;
+}
+inline void RetryInfo::set_allocated_retry_delay(::google::protobuf::Duration* value) {
+  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  if (message_arena == nullptr) {
+    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.retry_delay_);
+  }
+
+  if (value != nullptr) {
+    ::google::protobuf::Arena* submessage_arena =
+        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
+    if (message_arena != submessage_arena) {
+      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
+    }
+    _impl_._has_bits_[0] |= 0x00000001u;
+  } else {
+    _impl_._has_bits_[0] &= ~0x00000001u;
+  }
+
+  _impl_.retry_delay_ = reinterpret_cast<::google::protobuf::Duration*>(value);
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.RetryInfo.retry_delay)
+}
+
+// -------------------------------------------------------------------
+
+// DebugInfo
+
+// repeated string stack_entries = 1 [json_name = "stackEntries"];
+inline int DebugInfo::_internal_stack_entries_size() const {
+  return _internal_stack_entries().size();
+}
+inline int DebugInfo::stack_entries_size() const {
+  return _internal_stack_entries_size();
+}
+inline void DebugInfo::clear_stack_entries() {
+  _internal_mutable_stack_entries()->Clear();
+}
+inline std::string* DebugInfo::add_stack_entries() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  std::string* _s = _internal_mutable_stack_entries()->Add();
+  // @@protoc_insertion_point(field_add_mutable:google.rpc.DebugInfo.stack_entries)
+  return _s;
+}
+inline const std::string& DebugInfo::stack_entries(int index) const {
+  // @@protoc_insertion_point(field_get:google.rpc.DebugInfo.stack_entries)
+  return _internal_stack_entries().Get(index);
+}
+inline std::string* DebugInfo::mutable_stack_entries(int index) {
+  // @@protoc_insertion_point(field_mutable:google.rpc.DebugInfo.stack_entries)
+  return _internal_mutable_stack_entries()->Mutable(index);
+}
+inline void DebugInfo::set_stack_entries(int index, const std::string& value) {
+  _internal_mutable_stack_entries()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:google.rpc.DebugInfo.stack_entries)
+}
+inline void DebugInfo::set_stack_entries(int index, std::string&& value) {
+  _internal_mutable_stack_entries()->Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:google.rpc.DebugInfo.stack_entries)
+}
+inline void DebugInfo::set_stack_entries(int index, const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  _internal_mutable_stack_entries()->Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set_char:google.rpc.DebugInfo.stack_entries)
+}
+inline void DebugInfo::set_stack_entries(int index, const char* value,
+                              std::size_t size) {
+  _internal_mutable_stack_entries()->Mutable(index)->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_set_pointer:google.rpc.DebugInfo.stack_entries)
+}
+inline void DebugInfo::set_stack_entries(int index, absl::string_view value) {
+  _internal_mutable_stack_entries()->Mutable(index)->assign(value.data(),
+                                                     value.size());
+  // @@protoc_insertion_point(field_set_string_piece:google.rpc.DebugInfo.stack_entries)
+}
+inline void DebugInfo::add_stack_entries(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_stack_entries()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add:google.rpc.DebugInfo.stack_entries)
+}
+inline void DebugInfo::add_stack_entries(std::string&& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_stack_entries()->Add(std::move(value));
+  // @@protoc_insertion_point(field_add:google.rpc.DebugInfo.stack_entries)
+}
+inline void DebugInfo::add_stack_entries(const char* value) {
+  ABSL_DCHECK(value != nullptr);
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_stack_entries()->Add()->assign(value);
+  // @@protoc_insertion_point(field_add_char:google.rpc.DebugInfo.stack_entries)
+}
+inline void DebugInfo::add_stack_entries(const char* value, std::size_t size) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_stack_entries()->Add()->assign(
+      reinterpret_cast<const char*>(value), size);
+  // @@protoc_insertion_point(field_add_pointer:google.rpc.DebugInfo.stack_entries)
+}
+inline void DebugInfo::add_stack_entries(absl::string_view value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _internal_mutable_stack_entries()->Add()->assign(value.data(), value.size());
+  // @@protoc_insertion_point(field_add_string_piece:google.rpc.DebugInfo.stack_entries)
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+DebugInfo::stack_entries() const {
+  // @@protoc_insertion_point(field_list:google.rpc.DebugInfo.stack_entries)
+  return _internal_stack_entries();
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>* DebugInfo::mutable_stack_entries() {
+  // @@protoc_insertion_point(field_mutable_list:google.rpc.DebugInfo.stack_entries)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_stack_entries();
+}
+inline const ::google::protobuf::RepeatedPtrField<std::string>&
+DebugInfo::_internal_stack_entries() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.stack_entries_;
+}
+inline ::google::protobuf::RepeatedPtrField<std::string>*
+DebugInfo::_internal_mutable_stack_entries() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.stack_entries_;
+}
+
+// string detail = 2 [json_name = "detail"];
+inline void DebugInfo::clear_detail() {
+  _impl_.detail_.ClearToEmpty();
+}
+inline const std::string& DebugInfo::detail() const {
+  // @@protoc_insertion_point(field_get:google.rpc.DebugInfo.detail)
+  return _internal_detail();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void DebugInfo::set_detail(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.detail_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.DebugInfo.detail)
+}
+inline std::string* DebugInfo::mutable_detail() {
+  std::string* _s = _internal_mutable_detail();
+  // @@protoc_insertion_point(field_mutable:google.rpc.DebugInfo.detail)
+  return _s;
+}
+inline const std::string& DebugInfo::_internal_detail() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.detail_.Get();
+}
+inline void DebugInfo::_internal_set_detail(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.detail_.Set(value, GetArenaForAllocation());
+}
+inline std::string* DebugInfo::_internal_mutable_detail() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.detail_.Mutable( GetArenaForAllocation());
+}
+inline std::string* DebugInfo::release_detail() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.DebugInfo.detail)
+  return _impl_.detail_.Release();
+}
+inline void DebugInfo::set_allocated_detail(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.detail_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.detail_.IsDefault()) {
+          _impl_.detail_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.DebugInfo.detail)
+}
+
+// -------------------------------------------------------------------
+
+// QuotaFailure_Violation
+
+// string subject = 1 [json_name = "subject"];
+inline void QuotaFailure_Violation::clear_subject() {
+  _impl_.subject_.ClearToEmpty();
+}
+inline const std::string& QuotaFailure_Violation::subject() const {
+  // @@protoc_insertion_point(field_get:google.rpc.QuotaFailure.Violation.subject)
+  return _internal_subject();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void QuotaFailure_Violation::set_subject(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.QuotaFailure.Violation.subject)
+}
+inline std::string* QuotaFailure_Violation::mutable_subject() {
+  std::string* _s = _internal_mutable_subject();
+  // @@protoc_insertion_point(field_mutable:google.rpc.QuotaFailure.Violation.subject)
+  return _s;
+}
+inline const std::string& QuotaFailure_Violation::_internal_subject() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.subject_.Get();
+}
+inline void QuotaFailure_Violation::_internal_set_subject(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.subject_.Set(value, GetArenaForAllocation());
+}
+inline std::string* QuotaFailure_Violation::_internal_mutable_subject() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.subject_.Mutable( GetArenaForAllocation());
+}
+inline std::string* QuotaFailure_Violation::release_subject() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.QuotaFailure.Violation.subject)
+  return _impl_.subject_.Release();
+}
+inline void QuotaFailure_Violation::set_allocated_subject(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.subject_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.subject_.IsDefault()) {
+          _impl_.subject_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.QuotaFailure.Violation.subject)
+}
+
+// string description = 2 [json_name = "description"];
+inline void QuotaFailure_Violation::clear_description() {
+  _impl_.description_.ClearToEmpty();
+}
+inline const std::string& QuotaFailure_Violation::description() const {
+  // @@protoc_insertion_point(field_get:google.rpc.QuotaFailure.Violation.description)
+  return _internal_description();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void QuotaFailure_Violation::set_description(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.QuotaFailure.Violation.description)
+}
+inline std::string* QuotaFailure_Violation::mutable_description() {
+  std::string* _s = _internal_mutable_description();
+  // @@protoc_insertion_point(field_mutable:google.rpc.QuotaFailure.Violation.description)
+  return _s;
+}
+inline const std::string& QuotaFailure_Violation::_internal_description() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.description_.Get();
+}
+inline void QuotaFailure_Violation::_internal_set_description(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.description_.Set(value, GetArenaForAllocation());
+}
+inline std::string* QuotaFailure_Violation::_internal_mutable_description() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.description_.Mutable( GetArenaForAllocation());
+}
+inline std::string* QuotaFailure_Violation::release_description() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.QuotaFailure.Violation.description)
+  return _impl_.description_.Release();
+}
+inline void QuotaFailure_Violation::set_allocated_description(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.description_.IsDefault()) {
+          _impl_.description_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.QuotaFailure.Violation.description)
+}
+
+// -------------------------------------------------------------------
+
+// QuotaFailure
+
+// repeated .google.rpc.QuotaFailure.Violation violations = 1 [json_name = "violations"];
+inline int QuotaFailure::_internal_violations_size() const {
+  return _internal_violations().size();
+}
+inline int QuotaFailure::violations_size() const {
+  return _internal_violations_size();
+}
+inline void QuotaFailure::clear_violations() {
+  _internal_mutable_violations()->Clear();
+}
+inline ::google::rpc::QuotaFailure_Violation* QuotaFailure::mutable_violations(int index) {
+  // @@protoc_insertion_point(field_mutable:google.rpc.QuotaFailure.violations)
+  return _internal_mutable_violations()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::rpc::QuotaFailure_Violation >*
+QuotaFailure::mutable_violations() {
+  // @@protoc_insertion_point(field_mutable_list:google.rpc.QuotaFailure.violations)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_violations();
+}
+inline const ::google::rpc::QuotaFailure_Violation& QuotaFailure::violations(int index) const {
+  // @@protoc_insertion_point(field_get:google.rpc.QuotaFailure.violations)
+    return _internal_violations().Get(index);
+}
+inline ::google::rpc::QuotaFailure_Violation* QuotaFailure::add_violations() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::rpc::QuotaFailure_Violation* _add = _internal_mutable_violations()->Add();
+  // @@protoc_insertion_point(field_add:google.rpc.QuotaFailure.violations)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::rpc::QuotaFailure_Violation >&
+QuotaFailure::violations() const {
+  // @@protoc_insertion_point(field_list:google.rpc.QuotaFailure.violations)
+  return _internal_violations();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::rpc::QuotaFailure_Violation>&
+QuotaFailure::_internal_violations() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.violations_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::rpc::QuotaFailure_Violation>*
+QuotaFailure::_internal_mutable_violations() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.violations_;
+}
+
+// -------------------------------------------------------------------
+
+// PreconditionFailure_Violation
+
+// string type = 1 [json_name = "type"];
+inline void PreconditionFailure_Violation::clear_type() {
+  _impl_.type_.ClearToEmpty();
+}
+inline const std::string& PreconditionFailure_Violation::type() const {
+  // @@protoc_insertion_point(field_get:google.rpc.PreconditionFailure.Violation.type)
+  return _internal_type();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void PreconditionFailure_Violation::set_type(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.PreconditionFailure.Violation.type)
+}
+inline std::string* PreconditionFailure_Violation::mutable_type() {
+  std::string* _s = _internal_mutable_type();
+  // @@protoc_insertion_point(field_mutable:google.rpc.PreconditionFailure.Violation.type)
+  return _s;
+}
+inline const std::string& PreconditionFailure_Violation::_internal_type() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.type_.Get();
+}
+inline void PreconditionFailure_Violation::_internal_set_type(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.type_.Set(value, GetArenaForAllocation());
+}
+inline std::string* PreconditionFailure_Violation::_internal_mutable_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.type_.Mutable( GetArenaForAllocation());
+}
+inline std::string* PreconditionFailure_Violation::release_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.PreconditionFailure.Violation.type)
+  return _impl_.type_.Release();
+}
+inline void PreconditionFailure_Violation::set_allocated_type(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.type_.IsDefault()) {
+          _impl_.type_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.PreconditionFailure.Violation.type)
+}
+
+// string subject = 2 [json_name = "subject"];
+inline void PreconditionFailure_Violation::clear_subject() {
+  _impl_.subject_.ClearToEmpty();
+}
+inline const std::string& PreconditionFailure_Violation::subject() const {
+  // @@protoc_insertion_point(field_get:google.rpc.PreconditionFailure.Violation.subject)
+  return _internal_subject();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void PreconditionFailure_Violation::set_subject(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.PreconditionFailure.Violation.subject)
+}
+inline std::string* PreconditionFailure_Violation::mutable_subject() {
+  std::string* _s = _internal_mutable_subject();
+  // @@protoc_insertion_point(field_mutable:google.rpc.PreconditionFailure.Violation.subject)
+  return _s;
+}
+inline const std::string& PreconditionFailure_Violation::_internal_subject() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.subject_.Get();
+}
+inline void PreconditionFailure_Violation::_internal_set_subject(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.subject_.Set(value, GetArenaForAllocation());
+}
+inline std::string* PreconditionFailure_Violation::_internal_mutable_subject() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.subject_.Mutable( GetArenaForAllocation());
+}
+inline std::string* PreconditionFailure_Violation::release_subject() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.PreconditionFailure.Violation.subject)
+  return _impl_.subject_.Release();
+}
+inline void PreconditionFailure_Violation::set_allocated_subject(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.subject_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.subject_.IsDefault()) {
+          _impl_.subject_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.PreconditionFailure.Violation.subject)
+}
+
+// string description = 3 [json_name = "description"];
+inline void PreconditionFailure_Violation::clear_description() {
+  _impl_.description_.ClearToEmpty();
+}
+inline const std::string& PreconditionFailure_Violation::description() const {
+  // @@protoc_insertion_point(field_get:google.rpc.PreconditionFailure.Violation.description)
+  return _internal_description();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void PreconditionFailure_Violation::set_description(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.PreconditionFailure.Violation.description)
+}
+inline std::string* PreconditionFailure_Violation::mutable_description() {
+  std::string* _s = _internal_mutable_description();
+  // @@protoc_insertion_point(field_mutable:google.rpc.PreconditionFailure.Violation.description)
+  return _s;
+}
+inline const std::string& PreconditionFailure_Violation::_internal_description() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.description_.Get();
+}
+inline void PreconditionFailure_Violation::_internal_set_description(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.description_.Set(value, GetArenaForAllocation());
+}
+inline std::string* PreconditionFailure_Violation::_internal_mutable_description() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.description_.Mutable( GetArenaForAllocation());
+}
+inline std::string* PreconditionFailure_Violation::release_description() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.PreconditionFailure.Violation.description)
+  return _impl_.description_.Release();
+}
+inline void PreconditionFailure_Violation::set_allocated_description(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.description_.IsDefault()) {
+          _impl_.description_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.PreconditionFailure.Violation.description)
+}
+
+// -------------------------------------------------------------------
+
+// PreconditionFailure
+
+// repeated .google.rpc.PreconditionFailure.Violation violations = 1 [json_name = "violations"];
+inline int PreconditionFailure::_internal_violations_size() const {
+  return _internal_violations().size();
+}
+inline int PreconditionFailure::violations_size() const {
+  return _internal_violations_size();
+}
+inline void PreconditionFailure::clear_violations() {
+  _internal_mutable_violations()->Clear();
+}
+inline ::google::rpc::PreconditionFailure_Violation* PreconditionFailure::mutable_violations(int index) {
+  // @@protoc_insertion_point(field_mutable:google.rpc.PreconditionFailure.violations)
+  return _internal_mutable_violations()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::rpc::PreconditionFailure_Violation >*
+PreconditionFailure::mutable_violations() {
+  // @@protoc_insertion_point(field_mutable_list:google.rpc.PreconditionFailure.violations)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_violations();
+}
+inline const ::google::rpc::PreconditionFailure_Violation& PreconditionFailure::violations(int index) const {
+  // @@protoc_insertion_point(field_get:google.rpc.PreconditionFailure.violations)
+    return _internal_violations().Get(index);
+}
+inline ::google::rpc::PreconditionFailure_Violation* PreconditionFailure::add_violations() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::rpc::PreconditionFailure_Violation* _add = _internal_mutable_violations()->Add();
+  // @@protoc_insertion_point(field_add:google.rpc.PreconditionFailure.violations)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::rpc::PreconditionFailure_Violation >&
+PreconditionFailure::violations() const {
+  // @@protoc_insertion_point(field_list:google.rpc.PreconditionFailure.violations)
+  return _internal_violations();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::rpc::PreconditionFailure_Violation>&
+PreconditionFailure::_internal_violations() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.violations_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::rpc::PreconditionFailure_Violation>*
+PreconditionFailure::_internal_mutable_violations() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.violations_;
+}
+
+// -------------------------------------------------------------------
+
+// BadRequest_FieldViolation
+
+// string field = 1 [json_name = "field"];
+inline void BadRequest_FieldViolation::clear_field() {
+  _impl_.field_.ClearToEmpty();
+}
+inline const std::string& BadRequest_FieldViolation::field() const {
+  // @@protoc_insertion_point(field_get:google.rpc.BadRequest.FieldViolation.field)
+  return _internal_field();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void BadRequest_FieldViolation::set_field(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.field_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.BadRequest.FieldViolation.field)
+}
+inline std::string* BadRequest_FieldViolation::mutable_field() {
+  std::string* _s = _internal_mutable_field();
+  // @@protoc_insertion_point(field_mutable:google.rpc.BadRequest.FieldViolation.field)
+  return _s;
+}
+inline const std::string& BadRequest_FieldViolation::_internal_field() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.field_.Get();
+}
+inline void BadRequest_FieldViolation::_internal_set_field(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.field_.Set(value, GetArenaForAllocation());
+}
+inline std::string* BadRequest_FieldViolation::_internal_mutable_field() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.field_.Mutable( GetArenaForAllocation());
+}
+inline std::string* BadRequest_FieldViolation::release_field() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.BadRequest.FieldViolation.field)
+  return _impl_.field_.Release();
+}
+inline void BadRequest_FieldViolation::set_allocated_field(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.field_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.field_.IsDefault()) {
+          _impl_.field_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.BadRequest.FieldViolation.field)
+}
+
+// string description = 2 [json_name = "description"];
+inline void BadRequest_FieldViolation::clear_description() {
+  _impl_.description_.ClearToEmpty();
+}
+inline const std::string& BadRequest_FieldViolation::description() const {
+  // @@protoc_insertion_point(field_get:google.rpc.BadRequest.FieldViolation.description)
+  return _internal_description();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void BadRequest_FieldViolation::set_description(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.BadRequest.FieldViolation.description)
+}
+inline std::string* BadRequest_FieldViolation::mutable_description() {
+  std::string* _s = _internal_mutable_description();
+  // @@protoc_insertion_point(field_mutable:google.rpc.BadRequest.FieldViolation.description)
+  return _s;
+}
+inline const std::string& BadRequest_FieldViolation::_internal_description() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.description_.Get();
+}
+inline void BadRequest_FieldViolation::_internal_set_description(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.description_.Set(value, GetArenaForAllocation());
+}
+inline std::string* BadRequest_FieldViolation::_internal_mutable_description() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.description_.Mutable( GetArenaForAllocation());
+}
+inline std::string* BadRequest_FieldViolation::release_description() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.BadRequest.FieldViolation.description)
+  return _impl_.description_.Release();
+}
+inline void BadRequest_FieldViolation::set_allocated_description(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.description_.IsDefault()) {
+          _impl_.description_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.BadRequest.FieldViolation.description)
+}
+
+// -------------------------------------------------------------------
+
+// BadRequest
+
+// repeated .google.rpc.BadRequest.FieldViolation field_violations = 1 [json_name = "fieldViolations"];
+inline int BadRequest::_internal_field_violations_size() const {
+  return _internal_field_violations().size();
+}
+inline int BadRequest::field_violations_size() const {
+  return _internal_field_violations_size();
+}
+inline void BadRequest::clear_field_violations() {
+  _internal_mutable_field_violations()->Clear();
+}
+inline ::google::rpc::BadRequest_FieldViolation* BadRequest::mutable_field_violations(int index) {
+  // @@protoc_insertion_point(field_mutable:google.rpc.BadRequest.field_violations)
+  return _internal_mutable_field_violations()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::rpc::BadRequest_FieldViolation >*
+BadRequest::mutable_field_violations() {
+  // @@protoc_insertion_point(field_mutable_list:google.rpc.BadRequest.field_violations)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_field_violations();
+}
+inline const ::google::rpc::BadRequest_FieldViolation& BadRequest::field_violations(int index) const {
+  // @@protoc_insertion_point(field_get:google.rpc.BadRequest.field_violations)
+    return _internal_field_violations().Get(index);
+}
+inline ::google::rpc::BadRequest_FieldViolation* BadRequest::add_field_violations() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::rpc::BadRequest_FieldViolation* _add = _internal_mutable_field_violations()->Add();
+  // @@protoc_insertion_point(field_add:google.rpc.BadRequest.field_violations)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::rpc::BadRequest_FieldViolation >&
+BadRequest::field_violations() const {
+  // @@protoc_insertion_point(field_list:google.rpc.BadRequest.field_violations)
+  return _internal_field_violations();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::rpc::BadRequest_FieldViolation>&
+BadRequest::_internal_field_violations() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.field_violations_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::rpc::BadRequest_FieldViolation>*
+BadRequest::_internal_mutable_field_violations() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.field_violations_;
+}
+
+// -------------------------------------------------------------------
+
+// RequestInfo
+
+// string request_id = 1 [json_name = "requestId"];
+inline void RequestInfo::clear_request_id() {
+  _impl_.request_id_.ClearToEmpty();
+}
+inline const std::string& RequestInfo::request_id() const {
+  // @@protoc_insertion_point(field_get:google.rpc.RequestInfo.request_id)
+  return _internal_request_id();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void RequestInfo::set_request_id(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.RequestInfo.request_id)
+}
+inline std::string* RequestInfo::mutable_request_id() {
+  std::string* _s = _internal_mutable_request_id();
+  // @@protoc_insertion_point(field_mutable:google.rpc.RequestInfo.request_id)
+  return _s;
+}
+inline const std::string& RequestInfo::_internal_request_id() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.request_id_.Get();
+}
+inline void RequestInfo::_internal_set_request_id(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.request_id_.Set(value, GetArenaForAllocation());
+}
+inline std::string* RequestInfo::_internal_mutable_request_id() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.request_id_.Mutable( GetArenaForAllocation());
+}
+inline std::string* RequestInfo::release_request_id() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.RequestInfo.request_id)
+  return _impl_.request_id_.Release();
+}
+inline void RequestInfo::set_allocated_request_id(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.request_id_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.request_id_.IsDefault()) {
+          _impl_.request_id_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.RequestInfo.request_id)
+}
+
+// string serving_data = 2 [json_name = "servingData"];
+inline void RequestInfo::clear_serving_data() {
+  _impl_.serving_data_.ClearToEmpty();
+}
+inline const std::string& RequestInfo::serving_data() const {
+  // @@protoc_insertion_point(field_get:google.rpc.RequestInfo.serving_data)
+  return _internal_serving_data();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void RequestInfo::set_serving_data(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.serving_data_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.RequestInfo.serving_data)
+}
+inline std::string* RequestInfo::mutable_serving_data() {
+  std::string* _s = _internal_mutable_serving_data();
+  // @@protoc_insertion_point(field_mutable:google.rpc.RequestInfo.serving_data)
+  return _s;
+}
+inline const std::string& RequestInfo::_internal_serving_data() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.serving_data_.Get();
+}
+inline void RequestInfo::_internal_set_serving_data(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.serving_data_.Set(value, GetArenaForAllocation());
+}
+inline std::string* RequestInfo::_internal_mutable_serving_data() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.serving_data_.Mutable( GetArenaForAllocation());
+}
+inline std::string* RequestInfo::release_serving_data() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.RequestInfo.serving_data)
+  return _impl_.serving_data_.Release();
+}
+inline void RequestInfo::set_allocated_serving_data(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.serving_data_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.serving_data_.IsDefault()) {
+          _impl_.serving_data_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.RequestInfo.serving_data)
+}
+
+// -------------------------------------------------------------------
+
+// ResourceInfo
+
+// string resource_type = 1 [json_name = "resourceType"];
+inline void ResourceInfo::clear_resource_type() {
+  _impl_.resource_type_.ClearToEmpty();
+}
+inline const std::string& ResourceInfo::resource_type() const {
+  // @@protoc_insertion_point(field_get:google.rpc.ResourceInfo.resource_type)
+  return _internal_resource_type();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void ResourceInfo::set_resource_type(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.resource_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.ResourceInfo.resource_type)
+}
+inline std::string* ResourceInfo::mutable_resource_type() {
+  std::string* _s = _internal_mutable_resource_type();
+  // @@protoc_insertion_point(field_mutable:google.rpc.ResourceInfo.resource_type)
+  return _s;
+}
+inline const std::string& ResourceInfo::_internal_resource_type() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.resource_type_.Get();
+}
+inline void ResourceInfo::_internal_set_resource_type(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.resource_type_.Set(value, GetArenaForAllocation());
+}
+inline std::string* ResourceInfo::_internal_mutable_resource_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.resource_type_.Mutable( GetArenaForAllocation());
+}
+inline std::string* ResourceInfo::release_resource_type() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.ResourceInfo.resource_type)
+  return _impl_.resource_type_.Release();
+}
+inline void ResourceInfo::set_allocated_resource_type(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.resource_type_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.resource_type_.IsDefault()) {
+          _impl_.resource_type_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.ResourceInfo.resource_type)
+}
+
+// string resource_name = 2 [json_name = "resourceName"];
+inline void ResourceInfo::clear_resource_name() {
+  _impl_.resource_name_.ClearToEmpty();
+}
+inline const std::string& ResourceInfo::resource_name() const {
+  // @@protoc_insertion_point(field_get:google.rpc.ResourceInfo.resource_name)
+  return _internal_resource_name();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void ResourceInfo::set_resource_name(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.resource_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.ResourceInfo.resource_name)
+}
+inline std::string* ResourceInfo::mutable_resource_name() {
+  std::string* _s = _internal_mutable_resource_name();
+  // @@protoc_insertion_point(field_mutable:google.rpc.ResourceInfo.resource_name)
+  return _s;
+}
+inline const std::string& ResourceInfo::_internal_resource_name() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.resource_name_.Get();
+}
+inline void ResourceInfo::_internal_set_resource_name(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.resource_name_.Set(value, GetArenaForAllocation());
+}
+inline std::string* ResourceInfo::_internal_mutable_resource_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.resource_name_.Mutable( GetArenaForAllocation());
+}
+inline std::string* ResourceInfo::release_resource_name() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.ResourceInfo.resource_name)
+  return _impl_.resource_name_.Release();
+}
+inline void ResourceInfo::set_allocated_resource_name(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.resource_name_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.resource_name_.IsDefault()) {
+          _impl_.resource_name_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.ResourceInfo.resource_name)
+}
+
+// string owner = 3 [json_name = "owner"];
+inline void ResourceInfo::clear_owner() {
+  _impl_.owner_.ClearToEmpty();
+}
+inline const std::string& ResourceInfo::owner() const {
+  // @@protoc_insertion_point(field_get:google.rpc.ResourceInfo.owner)
+  return _internal_owner();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void ResourceInfo::set_owner(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.ResourceInfo.owner)
+}
+inline std::string* ResourceInfo::mutable_owner() {
+  std::string* _s = _internal_mutable_owner();
+  // @@protoc_insertion_point(field_mutable:google.rpc.ResourceInfo.owner)
+  return _s;
+}
+inline const std::string& ResourceInfo::_internal_owner() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.owner_.Get();
+}
+inline void ResourceInfo::_internal_set_owner(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.owner_.Set(value, GetArenaForAllocation());
+}
+inline std::string* ResourceInfo::_internal_mutable_owner() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.owner_.Mutable( GetArenaForAllocation());
+}
+inline std::string* ResourceInfo::release_owner() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.ResourceInfo.owner)
+  return _impl_.owner_.Release();
+}
+inline void ResourceInfo::set_allocated_owner(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.owner_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.owner_.IsDefault()) {
+          _impl_.owner_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.ResourceInfo.owner)
+}
+
+// string description = 4 [json_name = "description"];
+inline void ResourceInfo::clear_description() {
+  _impl_.description_.ClearToEmpty();
+}
+inline const std::string& ResourceInfo::description() const {
+  // @@protoc_insertion_point(field_get:google.rpc.ResourceInfo.description)
+  return _internal_description();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void ResourceInfo::set_description(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.ResourceInfo.description)
+}
+inline std::string* ResourceInfo::mutable_description() {
+  std::string* _s = _internal_mutable_description();
+  // @@protoc_insertion_point(field_mutable:google.rpc.ResourceInfo.description)
+  return _s;
+}
+inline const std::string& ResourceInfo::_internal_description() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.description_.Get();
+}
+inline void ResourceInfo::_internal_set_description(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.description_.Set(value, GetArenaForAllocation());
+}
+inline std::string* ResourceInfo::_internal_mutable_description() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.description_.Mutable( GetArenaForAllocation());
+}
+inline std::string* ResourceInfo::release_description() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.ResourceInfo.description)
+  return _impl_.description_.Release();
+}
+inline void ResourceInfo::set_allocated_description(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.description_.IsDefault()) {
+          _impl_.description_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.ResourceInfo.description)
+}
+
+// -------------------------------------------------------------------
+
+// Help_Link
+
+// string description = 1 [json_name = "description"];
+inline void Help_Link::clear_description() {
+  _impl_.description_.ClearToEmpty();
+}
+inline const std::string& Help_Link::description() const {
+  // @@protoc_insertion_point(field_get:google.rpc.Help.Link.description)
+  return _internal_description();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Help_Link::set_description(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.Help.Link.description)
+}
+inline std::string* Help_Link::mutable_description() {
+  std::string* _s = _internal_mutable_description();
+  // @@protoc_insertion_point(field_mutable:google.rpc.Help.Link.description)
+  return _s;
+}
+inline const std::string& Help_Link::_internal_description() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.description_.Get();
+}
+inline void Help_Link::_internal_set_description(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.description_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Help_Link::_internal_mutable_description() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.description_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Help_Link::release_description() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.Help.Link.description)
+  return _impl_.description_.Release();
+}
+inline void Help_Link::set_allocated_description(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.description_.IsDefault()) {
+          _impl_.description_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.Help.Link.description)
+}
+
+// string url = 2 [json_name = "url"];
+inline void Help_Link::clear_url() {
+  _impl_.url_.ClearToEmpty();
+}
+inline const std::string& Help_Link::url() const {
+  // @@protoc_insertion_point(field_get:google.rpc.Help.Link.url)
+  return _internal_url();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Help_Link::set_url(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.Help.Link.url)
+}
+inline std::string* Help_Link::mutable_url() {
+  std::string* _s = _internal_mutable_url();
+  // @@protoc_insertion_point(field_mutable:google.rpc.Help.Link.url)
+  return _s;
+}
+inline const std::string& Help_Link::_internal_url() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.url_.Get();
+}
+inline void Help_Link::_internal_set_url(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.url_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Help_Link::_internal_mutable_url() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.url_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Help_Link::release_url() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.Help.Link.url)
+  return _impl_.url_.Release();
+}
+inline void Help_Link::set_allocated_url(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.url_.IsDefault()) {
+          _impl_.url_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.Help.Link.url)
+}
+
+// -------------------------------------------------------------------
+
+// Help
+
+// repeated .google.rpc.Help.Link links = 1 [json_name = "links"];
+inline int Help::_internal_links_size() const {
+  return _internal_links().size();
+}
+inline int Help::links_size() const {
+  return _internal_links_size();
+}
+inline void Help::clear_links() {
+  _internal_mutable_links()->Clear();
+}
+inline ::google::rpc::Help_Link* Help::mutable_links(int index) {
+  // @@protoc_insertion_point(field_mutable:google.rpc.Help.links)
+  return _internal_mutable_links()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::rpc::Help_Link >*
+Help::mutable_links() {
+  // @@protoc_insertion_point(field_mutable_list:google.rpc.Help.links)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_links();
+}
+inline const ::google::rpc::Help_Link& Help::links(int index) const {
+  // @@protoc_insertion_point(field_get:google.rpc.Help.links)
+    return _internal_links().Get(index);
+}
+inline ::google::rpc::Help_Link* Help::add_links() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::rpc::Help_Link* _add = _internal_mutable_links()->Add();
+  // @@protoc_insertion_point(field_add:google.rpc.Help.links)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::rpc::Help_Link >&
+Help::links() const {
+  // @@protoc_insertion_point(field_list:google.rpc.Help.links)
+  return _internal_links();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::rpc::Help_Link>&
+Help::_internal_links() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.links_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::rpc::Help_Link>*
+Help::_internal_mutable_links() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.links_;
+}
+
+// -------------------------------------------------------------------
+
+// LocalizedMessage
+
+// string locale = 1 [json_name = "locale"];
+inline void LocalizedMessage::clear_locale() {
+  _impl_.locale_.ClearToEmpty();
+}
+inline const std::string& LocalizedMessage::locale() const {
+  // @@protoc_insertion_point(field_get:google.rpc.LocalizedMessage.locale)
+  return _internal_locale();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void LocalizedMessage::set_locale(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.locale_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.LocalizedMessage.locale)
+}
+inline std::string* LocalizedMessage::mutable_locale() {
+  std::string* _s = _internal_mutable_locale();
+  // @@protoc_insertion_point(field_mutable:google.rpc.LocalizedMessage.locale)
+  return _s;
+}
+inline const std::string& LocalizedMessage::_internal_locale() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.locale_.Get();
+}
+inline void LocalizedMessage::_internal_set_locale(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.locale_.Set(value, GetArenaForAllocation());
+}
+inline std::string* LocalizedMessage::_internal_mutable_locale() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.locale_.Mutable( GetArenaForAllocation());
+}
+inline std::string* LocalizedMessage::release_locale() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.LocalizedMessage.locale)
+  return _impl_.locale_.Release();
+}
+inline void LocalizedMessage::set_allocated_locale(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.locale_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.locale_.IsDefault()) {
+          _impl_.locale_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.LocalizedMessage.locale)
+}
+
+// string message = 2 [json_name = "message"];
+inline void LocalizedMessage::clear_message() {
+  _impl_.message_.ClearToEmpty();
+}
+inline const std::string& LocalizedMessage::message() const {
+  // @@protoc_insertion_point(field_get:google.rpc.LocalizedMessage.message)
+  return _internal_message();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void LocalizedMessage::set_message(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.LocalizedMessage.message)
+}
+inline std::string* LocalizedMessage::mutable_message() {
+  std::string* _s = _internal_mutable_message();
+  // @@protoc_insertion_point(field_mutable:google.rpc.LocalizedMessage.message)
+  return _s;
+}
+inline const std::string& LocalizedMessage::_internal_message() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.message_.Get();
+}
+inline void LocalizedMessage::_internal_set_message(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.message_.Set(value, GetArenaForAllocation());
+}
+inline std::string* LocalizedMessage::_internal_mutable_message() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.message_.Mutable( GetArenaForAllocation());
+}
+inline std::string* LocalizedMessage::release_message() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.LocalizedMessage.message)
+  return _impl_.message_.Release();
+}
+inline void LocalizedMessage::set_allocated_message(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.message_.IsDefault()) {
+          _impl_.message_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.LocalizedMessage.message)
+}
+
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif  // __GNUC__
+
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace rpc
+}  // namespace google
+
+
+// @@protoc_insertion_point(global_scope)
+
+#include "google/protobuf/port_undef.inc"
+
+#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2ferror_5fdetails_2eproto_2epb_2eh
diff --git a/gen/google/rpc/status.pb.cc b/gen/google/rpc/status.pb.cc
new file mode 100644
index 0000000..4a0a484
--- /dev/null
+++ b/gen/google/rpc/status.pb.cc
@@ -0,0 +1,385 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/rpc/status.proto
+
+#include "google/rpc/status.pb.h"
+
+#include <algorithm>
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/extension_set.h"
+#include "google/protobuf/wire_format_lite.h"
+#include "google/protobuf/descriptor.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/reflection_ops.h"
+#include "google/protobuf/wire_format.h"
+#include "google/protobuf/generated_message_tctable_impl.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+PROTOBUF_PRAGMA_INIT_SEG
+namespace _pb = ::google::protobuf;
+namespace _pbi = ::google::protobuf::internal;
+namespace _fl = ::google::protobuf::internal::field_layout;
+namespace google {
+namespace rpc {
+        template <typename>
+PROTOBUF_CONSTEXPR Status::Status(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.details_)*/ {},
+      /*decltype(_impl_.message_)*/ {
+          &::_pbi::fixed_address_empty_string,
+          ::_pbi::ConstantInitialized{},
+      },
+      /*decltype(_impl_.code_)*/ 0,
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct StatusDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~StatusDefaultTypeInternal() {}
+  union {
+    Status _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
+}  // namespace rpc
+}  // namespace google
+static ::_pb::Metadata file_level_metadata_google_2frpc_2fstatus_2eproto[1];
+static constexpr const ::_pb::EnumDescriptor**
+    file_level_enum_descriptors_google_2frpc_2fstatus_2eproto = nullptr;
+static constexpr const ::_pb::ServiceDescriptor**
+    file_level_service_descriptors_google_2frpc_2fstatus_2eproto = nullptr;
+const ::uint32_t TableStruct_google_2frpc_2fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
+    protodesc_cold) = {
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::rpc::Status, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::rpc::Status, _impl_.code_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::Status, _impl_.message_),
+    PROTOBUF_FIELD_OFFSET(::google::rpc::Status, _impl_.details_),
+};
+
+static const ::_pbi::MigrationSchema
+    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+        {0, -1, -1, sizeof(::google::rpc::Status)},
+};
+
+static const ::_pb::Message* const file_default_instances[] = {
+    &::google::rpc::_Status_default_instance_._instance,
+};
+const char descriptor_table_protodef_google_2frpc_2fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+    "\n\027google/rpc/status.proto\022\ngoogle.rpc\032\031g"
+    "oogle/protobuf/any.proto\"f\n\006Status\022\022\n\004co"
+    "de\030\001 \001(\005R\004code\022\030\n\007message\030\002 \001(\tR\007message"
+    "\022.\n\007details\030\003 \003(\0132\024.google.protobuf.AnyR"
+    "\007detailsB\242\001\n\016com.google.rpcB\013StatusProto"
+    "P\001Z7google.golang.org/genproto/googleapi"
+    "s/rpc/status;status\370\001\001\242\002\003GRX\252\002\nGoogle.Rp"
+    "c\312\002\nGoogle\\Rpc\342\002\026Google\\Rpc\\GPBMetadata\352"
+    "\002\013Google::Rpcb\006proto3"
+};
+static const ::_pbi::DescriptorTable* const descriptor_table_google_2frpc_2fstatus_2eproto_deps[1] =
+    {
+        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
+};
+static ::absl::once_flag descriptor_table_google_2frpc_2fstatus_2eproto_once;
+const ::_pbi::DescriptorTable descriptor_table_google_2frpc_2fstatus_2eproto = {
+    false,
+    false,
+    341,
+    descriptor_table_protodef_google_2frpc_2fstatus_2eproto,
+    "google/rpc/status.proto",
+    &descriptor_table_google_2frpc_2fstatus_2eproto_once,
+    descriptor_table_google_2frpc_2fstatus_2eproto_deps,
+    1,
+    1,
+    schemas,
+    file_default_instances,
+    TableStruct_google_2frpc_2fstatus_2eproto::offsets,
+    file_level_metadata_google_2frpc_2fstatus_2eproto,
+    file_level_enum_descriptors_google_2frpc_2fstatus_2eproto,
+    file_level_service_descriptors_google_2frpc_2fstatus_2eproto,
+};
+
+// This function exists to be marked as weak.
+// It can significantly speed up compilation by breaking up LLVM's SCC
+// in the .pb.cc translation units. Large translation units see a
+// reduction of more than 35% of walltime for optimized builds. Without
+// the weak attribute all the messages in the file, including all the
+// vtables and everything they use become part of the same SCC through
+// a cycle like:
+// GetMetadata -> descriptor table -> default instances ->
+//   vtables -> GetMetadata
+// By adding a weak function here we break the connection from the
+// individual vtables back into the descriptor table.
+PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2frpc_2fstatus_2eproto_getter() {
+  return &descriptor_table_google_2frpc_2fstatus_2eproto;
+}
+// Force running AddDescriptors() at dynamic initialization time.
+PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
+static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2frpc_2fstatus_2eproto(&descriptor_table_google_2frpc_2fstatus_2eproto);
+namespace google {
+namespace rpc {
+// ===================================================================
+
+class Status::_Internal {
+ public:
+};
+
+void Status::clear_details() {
+  _internal_mutable_details()->Clear();
+}
+Status::Status(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.rpc.Status)
+}
+Status::Status(const Status& from) : ::google::protobuf::Message() {
+  Status* const _this = this;
+  (void)_this;
+  new (&_impl_) Impl_{
+      decltype(_impl_.details_){from._impl_.details_},
+      decltype(_impl_.message_){},
+      decltype(_impl_.code_){},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  _impl_.message_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.message_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  if (!from._internal_message().empty()) {
+    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
+  }
+  _this->_impl_.code_ = from._impl_.code_;
+
+  // @@protoc_insertion_point(copy_constructor:google.rpc.Status)
+}
+inline void Status::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.details_){arena},
+      decltype(_impl_.message_){},
+      decltype(_impl_.code_){0},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+  _impl_.message_.InitDefault();
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        _impl_.message_.Set("", GetArenaForAllocation());
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+}
+Status::~Status() {
+  // @@protoc_insertion_point(destructor:google.rpc.Status)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void Status::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+  _impl_.details_.~RepeatedPtrField();
+  _impl_.message_.Destroy();
+}
+void Status::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void Status::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.rpc.Status)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  _internal_mutable_details()->Clear();
+  _impl_.message_.ClearToEmpty();
+  _impl_.code_ = 0;
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* Status::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 3, 1, 33, 2> Status::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    3, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967288,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    3,  // num_field_entries
+    1,  // num_aux_entries
+    offsetof(decltype(_table_), aux_entries),
+    &_Status_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    {::_pbi::TcParser::MiniParse, {}},
+    // int32 code = 1 [json_name = "code"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Status, _impl_.code_), 63>(),
+     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.code_)}},
+    // string message = 2 [json_name = "message"];
+    {::_pbi::TcParser::FastUS1,
+     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.message_)}},
+    // repeated .google.protobuf.Any details = 3 [json_name = "details"];
+    {::_pbi::TcParser::FastMtR1,
+     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.details_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // int32 code = 1 [json_name = "code"];
+    {PROTOBUF_FIELD_OFFSET(Status, _impl_.code_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
+    // string message = 2 [json_name = "message"];
+    {PROTOBUF_FIELD_OFFSET(Status, _impl_.message_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
+    // repeated .google.protobuf.Any details = 3 [json_name = "details"];
+    {PROTOBUF_FIELD_OFFSET(Status, _impl_.details_), 0, 0,
+    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
+  }}, {{
+    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
+  }}, {{
+    "\21\0\7\0\0\0\0\0"
+    "google.rpc.Status"
+    "message"
+  }},
+};
+
+::uint8_t* Status::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.Status)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // int32 code = 1 [json_name = "code"];
+  if (this->_internal_code() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt32ToArrayWithField<1>(
+            stream, this->_internal_code(), target);
+  }
+
+  // string message = 2 [json_name = "message"];
+  if (!this->_internal_message().empty()) {
+    const std::string& _s = this->_internal_message();
+    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
+        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.rpc.Status.message");
+    target = stream->WriteStringMaybeAliased(2, _s, target);
+  }
+
+  // repeated .google.protobuf.Any details = 3 [json_name = "details"];
+  for (unsigned i = 0,
+      n = static_cast<unsigned>(this->_internal_details_size()); i < n; i++) {
+    const auto& repfield = this->_internal_details().Get(i);
+    target = ::google::protobuf::internal::WireFormatLite::
+        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.Status)
+  return target;
+}
+
+::size_t Status::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.rpc.Status)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // repeated .google.protobuf.Any details = 3 [json_name = "details"];
+  total_size += 1UL * this->_internal_details_size();
+  for (const auto& msg : this->_internal_details()) {
+    total_size +=
+      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
+  }
+  // string message = 2 [json_name = "message"];
+  if (!this->_internal_message().empty()) {
+    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
+                                    this->_internal_message());
+  }
+
+  // int32 code = 1 [json_name = "code"];
+  if (this->_internal_code() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
+        this->_internal_code());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData Status::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    Status::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*Status::GetClassData() const { return &_class_data_; }
+
+
+void Status::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<Status*>(&to_msg);
+  auto& from = static_cast<const Status&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.Status)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  _this->_internal_mutable_details()->MergeFrom(from._internal_details());
+  if (!from._internal_message().empty()) {
+    _this->_internal_set_message(from._internal_message());
+  }
+  if (from._internal_code() != 0) {
+    _this->_internal_set_code(from._internal_code());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void Status::CopyFrom(const Status& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.Status)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool Status::IsInitialized() const {
+  return true;
+}
+
+void Status::InternalSwap(Status* other) {
+  using std::swap;
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  _impl_.details_.InternalSwap(&other->_impl_.details_);
+  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
+                                       &other->_impl_.message_, rhs_arena);
+        swap(_impl_.code_, other->_impl_.code_);
+}
+
+::google::protobuf::Metadata Status::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2frpc_2fstatus_2eproto_getter, &descriptor_table_google_2frpc_2fstatus_2eproto_once,
+      file_level_metadata_google_2frpc_2fstatus_2eproto[0]);
+}
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace rpc
+}  // namespace google
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+// @@protoc_insertion_point(global_scope)
+#include "google/protobuf/port_undef.inc"
diff --git a/gen/google/rpc/status.pb.h b/gen/google/rpc/status.pb.h
new file mode 100644
index 0000000..989818c
--- /dev/null
+++ b/gen/google/rpc/status.pb.h
@@ -0,0 +1,416 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/rpc/status.proto
+
+#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fstatus_2eproto_2epb_2eh
+#define GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fstatus_2eproto_2epb_2eh
+
+#include <limits>
+#include <string>
+#include <type_traits>
+
+#include "google/protobuf/port_def.inc"
+#if PROTOBUF_VERSION < 4024000
+#error "This file was generated by a newer version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please update"
+#error "your headers."
+#endif  // PROTOBUF_VERSION
+
+#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
+#error "This file was generated by an older version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please"
+#error "regenerate this file with a newer version of protoc."
+#endif  // PROTOBUF_MIN_PROTOC_VERSION
+#include "google/protobuf/port_undef.inc"
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/arena.h"
+#include "google/protobuf/arenastring.h"
+#include "google/protobuf/generated_message_tctable_decl.h"
+#include "google/protobuf/generated_message_util.h"
+#include "google/protobuf/metadata_lite.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/message.h"
+#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
+#include "google/protobuf/extension_set.h"  // IWYU pragma: export
+#include "google/protobuf/unknown_field_set.h"
+#include "google/protobuf/any.pb.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+
+#define PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fstatus_2eproto
+
+namespace google {
+namespace protobuf {
+namespace internal {
+class AnyMetadata;
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+// Internal implementation detail -- do not use these members.
+struct TableStruct_google_2frpc_2fstatus_2eproto {
+  static const ::uint32_t offsets[];
+};
+extern const ::google::protobuf::internal::DescriptorTable
+    descriptor_table_google_2frpc_2fstatus_2eproto;
+namespace google {
+namespace rpc {
+class Status;
+struct StatusDefaultTypeInternal;
+extern StatusDefaultTypeInternal _Status_default_instance_;
+}  // namespace rpc
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+
+namespace google {
+namespace rpc {
+
+// ===================================================================
+
+
+// -------------------------------------------------------------------
+
+class Status final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.Status) */ {
+ public:
+  inline Status() : Status(nullptr) {}
+  ~Status() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR Status(::google::protobuf::internal::ConstantInitialized);
+
+  Status(const Status& from);
+  Status(Status&& from) noexcept
+    : Status() {
+    *this = ::std::move(from);
+  }
+
+  inline Status& operator=(const Status& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline Status& operator=(Status&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const Status& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const Status* internal_default_instance() {
+    return reinterpret_cast<const Status*>(
+               &_Status_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    0;
+
+  friend void swap(Status& a, Status& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(Status* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(Status* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  Status* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<Status>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const Status& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const Status& from) {
+    Status::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(Status* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.rpc.Status";
+  }
+  protected:
+  explicit Status(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kDetailsFieldNumber = 3,
+    kMessageFieldNumber = 2,
+    kCodeFieldNumber = 1,
+  };
+  // repeated .google.protobuf.Any details = 3 [json_name = "details"];
+  int details_size() const;
+  private:
+  int _internal_details_size() const;
+
+  public:
+  void clear_details() ;
+  ::google::protobuf::Any* mutable_details(int index);
+  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
+      mutable_details();
+  private:
+  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_details() const;
+  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_details();
+  public:
+  const ::google::protobuf::Any& details(int index) const;
+  ::google::protobuf::Any* add_details();
+  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
+      details() const;
+  // string message = 2 [json_name = "message"];
+  void clear_message() ;
+  const std::string& message() const;
+  template <typename Arg_ = const std::string&, typename... Args_>
+  void set_message(Arg_&& arg, Args_... args);
+  std::string* mutable_message();
+  PROTOBUF_NODISCARD std::string* release_message();
+  void set_allocated_message(std::string* ptr);
+
+  private:
+  const std::string& _internal_message() const;
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
+      const std::string& value);
+  std::string* _internal_mutable_message();
+
+  public:
+  // int32 code = 1 [json_name = "code"];
+  void clear_code() ;
+  ::int32_t code() const;
+  void set_code(::int32_t value);
+
+  private:
+  ::int32_t _internal_code() const;
+  void _internal_set_code(::int32_t value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.rpc.Status)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 33, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > details_;
+    ::google::protobuf::internal::ArenaStringPtr message_;
+    ::int32_t code_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2frpc_2fstatus_2eproto;
+};
+
+// ===================================================================
+
+
+
+
+// ===================================================================
+
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif  // __GNUC__
+// -------------------------------------------------------------------
+
+// Status
+
+// int32 code = 1 [json_name = "code"];
+inline void Status::clear_code() {
+  _impl_.code_ = 0;
+}
+inline ::int32_t Status::code() const {
+  // @@protoc_insertion_point(field_get:google.rpc.Status.code)
+  return _internal_code();
+}
+inline void Status::set_code(::int32_t value) {
+  _internal_set_code(value);
+  // @@protoc_insertion_point(field_set:google.rpc.Status.code)
+}
+inline ::int32_t Status::_internal_code() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.code_;
+}
+inline void Status::_internal_set_code(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.code_ = value;
+}
+
+// string message = 2 [json_name = "message"];
+inline void Status::clear_message() {
+  _impl_.message_.ClearToEmpty();
+}
+inline const std::string& Status::message() const {
+  // @@protoc_insertion_point(field_get:google.rpc.Status.message)
+  return _internal_message();
+}
+template <typename Arg_, typename... Args_>
+inline PROTOBUF_ALWAYS_INLINE void Status::set_message(Arg_&& arg,
+                                                     Args_... args) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
+  // @@protoc_insertion_point(field_set:google.rpc.Status.message)
+}
+inline std::string* Status::mutable_message() {
+  std::string* _s = _internal_mutable_message();
+  // @@protoc_insertion_point(field_mutable:google.rpc.Status.message)
+  return _s;
+}
+inline const std::string& Status::_internal_message() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.message_.Get();
+}
+inline void Status::_internal_set_message(const std::string& value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.message_.Set(value, GetArenaForAllocation());
+}
+inline std::string* Status::_internal_mutable_message() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  return _impl_.message_.Mutable( GetArenaForAllocation());
+}
+inline std::string* Status::release_message() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  // @@protoc_insertion_point(field_release:google.rpc.Status.message)
+  return _impl_.message_.Release();
+}
+inline void Status::set_allocated_message(std::string* value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
+  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
+        if (_impl_.message_.IsDefault()) {
+          _impl_.message_.Set("", GetArenaForAllocation());
+        }
+  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
+  // @@protoc_insertion_point(field_set_allocated:google.rpc.Status.message)
+}
+
+// repeated .google.protobuf.Any details = 3 [json_name = "details"];
+inline int Status::_internal_details_size() const {
+  return _internal_details().size();
+}
+inline int Status::details_size() const {
+  return _internal_details_size();
+}
+inline ::google::protobuf::Any* Status::mutable_details(int index) {
+  // @@protoc_insertion_point(field_mutable:google.rpc.Status.details)
+  return _internal_mutable_details()->Mutable(index);
+}
+inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
+Status::mutable_details() {
+  // @@protoc_insertion_point(field_mutable_list:google.rpc.Status.details)
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  return _internal_mutable_details();
+}
+inline const ::google::protobuf::Any& Status::details(int index) const {
+  // @@protoc_insertion_point(field_get:google.rpc.Status.details)
+    return _internal_details().Get(index);
+}
+inline ::google::protobuf::Any* Status::add_details() {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ::google::protobuf::Any* _add = _internal_mutable_details()->Add();
+  // @@protoc_insertion_point(field_add:google.rpc.Status.details)
+  return _add;
+}
+inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
+Status::details() const {
+  // @@protoc_insertion_point(field_list:google.rpc.Status.details)
+  return _internal_details();
+}
+inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
+Status::_internal_details() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.details_;
+}
+inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
+Status::_internal_mutable_details() {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return &_impl_.details_;
+}
+
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif  // __GNUC__
+
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace rpc
+}  // namespace google
+
+
+// @@protoc_insertion_point(global_scope)
+
+#include "google/protobuf/port_undef.inc"
+
+#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fstatus_2eproto_2epb_2eh
diff --git a/gen/google/type/timeofday.pb.cc b/gen/google/type/timeofday.pb.cc
new file mode 100644
index 0000000..825fd3e
--- /dev/null
+++ b/gen/google/type/timeofday.pb.cc
@@ -0,0 +1,374 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/type/timeofday.proto
+
+#include "google/type/timeofday.pb.h"
+
+#include <algorithm>
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/extension_set.h"
+#include "google/protobuf/wire_format_lite.h"
+#include "google/protobuf/descriptor.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/reflection_ops.h"
+#include "google/protobuf/wire_format.h"
+#include "google/protobuf/generated_message_tctable_impl.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+PROTOBUF_PRAGMA_INIT_SEG
+namespace _pb = ::google::protobuf;
+namespace _pbi = ::google::protobuf::internal;
+namespace _fl = ::google::protobuf::internal::field_layout;
+namespace google {
+namespace type {
+        template <typename>
+PROTOBUF_CONSTEXPR TimeOfDay::TimeOfDay(::_pbi::ConstantInitialized)
+    : _impl_{
+      /*decltype(_impl_.hours_)*/ 0,
+      /*decltype(_impl_.minutes_)*/ 0,
+      /*decltype(_impl_.seconds_)*/ 0,
+      /*decltype(_impl_.nanos_)*/ 0,
+      /*decltype(_impl_._cached_size_)*/ {},
+    } {}
+struct TimeOfDayDefaultTypeInternal {
+  PROTOBUF_CONSTEXPR TimeOfDayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
+  ~TimeOfDayDefaultTypeInternal() {}
+  union {
+    TimeOfDay _instance;
+  };
+};
+
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
+    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeOfDayDefaultTypeInternal _TimeOfDay_default_instance_;
+}  // namespace type
+}  // namespace google
+static ::_pb::Metadata file_level_metadata_google_2ftype_2ftimeofday_2eproto[1];
+static constexpr const ::_pb::EnumDescriptor**
+    file_level_enum_descriptors_google_2ftype_2ftimeofday_2eproto = nullptr;
+static constexpr const ::_pb::ServiceDescriptor**
+    file_level_service_descriptors_google_2ftype_2ftimeofday_2eproto = nullptr;
+const ::uint32_t TableStruct_google_2ftype_2ftimeofday_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
+    protodesc_cold) = {
+    ~0u,  // no _has_bits_
+    PROTOBUF_FIELD_OFFSET(::google::type::TimeOfDay, _internal_metadata_),
+    ~0u,  // no _extensions_
+    ~0u,  // no _oneof_case_
+    ~0u,  // no _weak_field_map_
+    ~0u,  // no _inlined_string_donated_
+    ~0u,  // no _split_
+    ~0u,  // no sizeof(Split)
+    PROTOBUF_FIELD_OFFSET(::google::type::TimeOfDay, _impl_.hours_),
+    PROTOBUF_FIELD_OFFSET(::google::type::TimeOfDay, _impl_.minutes_),
+    PROTOBUF_FIELD_OFFSET(::google::type::TimeOfDay, _impl_.seconds_),
+    PROTOBUF_FIELD_OFFSET(::google::type::TimeOfDay, _impl_.nanos_),
+};
+
+static const ::_pbi::MigrationSchema
+    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+        {0, -1, -1, sizeof(::google::type::TimeOfDay)},
+};
+
+static const ::_pb::Message* const file_default_instances[] = {
+    &::google::type::_TimeOfDay_default_instance_._instance,
+};
+const char descriptor_table_protodef_google_2ftype_2ftimeofday_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
+    "\n\033google/type/timeofday.proto\022\013google.ty"
+    "pe\"k\n\tTimeOfDay\022\024\n\005hours\030\001 \001(\005R\005hours\022\030\n"
+    "\007minutes\030\002 \001(\005R\007minutes\022\030\n\007seconds\030\003 \001(\005"
+    "R\007seconds\022\024\n\005nanos\030\004 \001(\005R\005nanosB\261\001\n\017com."
+    "google.typeB\016TimeofdayProtoP\001Z>google.go"
+    "lang.org/genproto/googleapis/type/timeof"
+    "day;timeofday\370\001\001\242\002\003GTX\252\002\013Google.Type\312\002\013G"
+    "oogle\\Type\342\002\027Google\\Type\\GPBMetadata\352\002\014G"
+    "oogle::Typeb\006proto3"
+};
+static ::absl::once_flag descriptor_table_google_2ftype_2ftimeofday_2eproto_once;
+const ::_pbi::DescriptorTable descriptor_table_google_2ftype_2ftimeofday_2eproto = {
+    false,
+    false,
+    339,
+    descriptor_table_protodef_google_2ftype_2ftimeofday_2eproto,
+    "google/type/timeofday.proto",
+    &descriptor_table_google_2ftype_2ftimeofday_2eproto_once,
+    nullptr,
+    0,
+    1,
+    schemas,
+    file_default_instances,
+    TableStruct_google_2ftype_2ftimeofday_2eproto::offsets,
+    file_level_metadata_google_2ftype_2ftimeofday_2eproto,
+    file_level_enum_descriptors_google_2ftype_2ftimeofday_2eproto,
+    file_level_service_descriptors_google_2ftype_2ftimeofday_2eproto,
+};
+
+// This function exists to be marked as weak.
+// It can significantly speed up compilation by breaking up LLVM's SCC
+// in the .pb.cc translation units. Large translation units see a
+// reduction of more than 35% of walltime for optimized builds. Without
+// the weak attribute all the messages in the file, including all the
+// vtables and everything they use become part of the same SCC through
+// a cycle like:
+// GetMetadata -> descriptor table -> default instances ->
+//   vtables -> GetMetadata
+// By adding a weak function here we break the connection from the
+// individual vtables back into the descriptor table.
+PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2ftype_2ftimeofday_2eproto_getter() {
+  return &descriptor_table_google_2ftype_2ftimeofday_2eproto;
+}
+// Force running AddDescriptors() at dynamic initialization time.
+PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
+static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2ftype_2ftimeofday_2eproto(&descriptor_table_google_2ftype_2ftimeofday_2eproto);
+namespace google {
+namespace type {
+// ===================================================================
+
+class TimeOfDay::_Internal {
+ public:
+};
+
+TimeOfDay::TimeOfDay(::google::protobuf::Arena* arena)
+    : ::google::protobuf::Message(arena) {
+  SharedCtor(arena);
+  // @@protoc_insertion_point(arena_constructor:google.type.TimeOfDay)
+}
+TimeOfDay::TimeOfDay(const TimeOfDay& from)
+    : ::google::protobuf::Message(), _impl_(from._impl_) {
+  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
+      from._internal_metadata_);
+  // @@protoc_insertion_point(copy_constructor:google.type.TimeOfDay)
+}
+inline void TimeOfDay::SharedCtor(::_pb::Arena* arena) {
+  (void)arena;
+  new (&_impl_) Impl_{
+      decltype(_impl_.hours_){0},
+      decltype(_impl_.minutes_){0},
+      decltype(_impl_.seconds_){0},
+      decltype(_impl_.nanos_){0},
+      /*decltype(_impl_._cached_size_)*/ {},
+  };
+}
+TimeOfDay::~TimeOfDay() {
+  // @@protoc_insertion_point(destructor:google.type.TimeOfDay)
+  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
+  SharedDtor();
+}
+inline void TimeOfDay::SharedDtor() {
+  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
+}
+void TimeOfDay::SetCachedSize(int size) const {
+  _impl_._cached_size_.Set(size);
+}
+
+PROTOBUF_NOINLINE void TimeOfDay::Clear() {
+// @@protoc_insertion_point(message_clear_start:google.type.TimeOfDay)
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  ::memset(&_impl_.hours_, 0, static_cast<::size_t>(
+      reinterpret_cast<char*>(&_impl_.nanos_) -
+      reinterpret_cast<char*>(&_impl_.hours_)) + sizeof(_impl_.nanos_));
+  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
+}
+
+const char* TimeOfDay::_InternalParse(
+    const char* ptr, ::_pbi::ParseContext* ctx) {
+  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
+  return ptr;
+}
+
+
+PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
+const ::_pbi::TcParseTable<2, 4, 0, 0, 2> TimeOfDay::_table_ = {
+  {
+    0,  // no _has_bits_
+    0, // no _extensions_
+    4, 24,  // max_field_number, fast_idx_mask
+    offsetof(decltype(_table_), field_lookup_table),
+    4294967280,  // skipmap
+    offsetof(decltype(_table_), field_entries),
+    4,  // num_field_entries
+    0,  // num_aux_entries
+    offsetof(decltype(_table_), field_names),  // no aux_entries
+    &_TimeOfDay_default_instance_._instance,
+    ::_pbi::TcParser::GenericFallback,  // fallback
+  }, {{
+    // int32 nanos = 4 [json_name = "nanos"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimeOfDay, _impl_.nanos_), 63>(),
+     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.nanos_)}},
+    // int32 hours = 1 [json_name = "hours"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimeOfDay, _impl_.hours_), 63>(),
+     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.hours_)}},
+    // int32 minutes = 2 [json_name = "minutes"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimeOfDay, _impl_.minutes_), 63>(),
+     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.minutes_)}},
+    // int32 seconds = 3 [json_name = "seconds"];
+    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimeOfDay, _impl_.seconds_), 63>(),
+     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.seconds_)}},
+  }}, {{
+    65535, 65535
+  }}, {{
+    // int32 hours = 1 [json_name = "hours"];
+    {PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.hours_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
+    // int32 minutes = 2 [json_name = "minutes"];
+    {PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.minutes_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
+    // int32 seconds = 3 [json_name = "seconds"];
+    {PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.seconds_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
+    // int32 nanos = 4 [json_name = "nanos"];
+    {PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.nanos_), 0, 0,
+    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
+  }},
+  // no aux_entries
+  {{
+  }},
+};
+
+::uint8_t* TimeOfDay::_InternalSerialize(
+    ::uint8_t* target,
+    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
+  // @@protoc_insertion_point(serialize_to_array_start:google.type.TimeOfDay)
+  ::uint32_t cached_has_bits = 0;
+  (void)cached_has_bits;
+
+  // int32 hours = 1 [json_name = "hours"];
+  if (this->_internal_hours() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt32ToArrayWithField<1>(
+            stream, this->_internal_hours(), target);
+  }
+
+  // int32 minutes = 2 [json_name = "minutes"];
+  if (this->_internal_minutes() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt32ToArrayWithField<2>(
+            stream, this->_internal_minutes(), target);
+  }
+
+  // int32 seconds = 3 [json_name = "seconds"];
+  if (this->_internal_seconds() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt32ToArrayWithField<3>(
+            stream, this->_internal_seconds(), target);
+  }
+
+  // int32 nanos = 4 [json_name = "nanos"];
+  if (this->_internal_nanos() != 0) {
+    target = ::google::protobuf::internal::WireFormatLite::
+        WriteInt32ToArrayWithField<4>(
+            stream, this->_internal_nanos(), target);
+  }
+
+  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
+    target =
+        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
+            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
+  }
+  // @@protoc_insertion_point(serialize_to_array_end:google.type.TimeOfDay)
+  return target;
+}
+
+::size_t TimeOfDay::ByteSizeLong() const {
+// @@protoc_insertion_point(message_byte_size_start:google.type.TimeOfDay)
+  ::size_t total_size = 0;
+
+  ::uint32_t cached_has_bits = 0;
+  // Prevent compiler warnings about cached_has_bits being unused
+  (void) cached_has_bits;
+
+  // int32 hours = 1 [json_name = "hours"];
+  if (this->_internal_hours() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
+        this->_internal_hours());
+  }
+
+  // int32 minutes = 2 [json_name = "minutes"];
+  if (this->_internal_minutes() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
+        this->_internal_minutes());
+  }
+
+  // int32 seconds = 3 [json_name = "seconds"];
+  if (this->_internal_seconds() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
+        this->_internal_seconds());
+  }
+
+  // int32 nanos = 4 [json_name = "nanos"];
+  if (this->_internal_nanos() != 0) {
+    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
+        this->_internal_nanos());
+  }
+
+  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
+}
+
+const ::google::protobuf::Message::ClassData TimeOfDay::_class_data_ = {
+    ::google::protobuf::Message::CopyWithSourceCheck,
+    TimeOfDay::MergeImpl
+};
+const ::google::protobuf::Message::ClassData*TimeOfDay::GetClassData() const { return &_class_data_; }
+
+
+void TimeOfDay::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
+  auto* const _this = static_cast<TimeOfDay*>(&to_msg);
+  auto& from = static_cast<const TimeOfDay&>(from_msg);
+  // @@protoc_insertion_point(class_specific_merge_from_start:google.type.TimeOfDay)
+  ABSL_DCHECK_NE(&from, _this);
+  ::uint32_t cached_has_bits = 0;
+  (void) cached_has_bits;
+
+  if (from._internal_hours() != 0) {
+    _this->_internal_set_hours(from._internal_hours());
+  }
+  if (from._internal_minutes() != 0) {
+    _this->_internal_set_minutes(from._internal_minutes());
+  }
+  if (from._internal_seconds() != 0) {
+    _this->_internal_set_seconds(from._internal_seconds());
+  }
+  if (from._internal_nanos() != 0) {
+    _this->_internal_set_nanos(from._internal_nanos());
+  }
+  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
+}
+
+void TimeOfDay::CopyFrom(const TimeOfDay& from) {
+// @@protoc_insertion_point(class_specific_copy_from_start:google.type.TimeOfDay)
+  if (&from == this) return;
+  Clear();
+  MergeFrom(from);
+}
+
+PROTOBUF_NOINLINE bool TimeOfDay::IsInitialized() const {
+  return true;
+}
+
+void TimeOfDay::InternalSwap(TimeOfDay* other) {
+  using std::swap;
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
+  ::google::protobuf::internal::memswap<
+      PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.nanos_)
+      + sizeof(TimeOfDay::_impl_.nanos_)
+      - PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.hours_)>(
+          reinterpret_cast<char*>(&_impl_.hours_),
+          reinterpret_cast<char*>(&other->_impl_.hours_));
+}
+
+::google::protobuf::Metadata TimeOfDay::GetMetadata() const {
+  return ::_pbi::AssignDescriptors(
+      &descriptor_table_google_2ftype_2ftimeofday_2eproto_getter, &descriptor_table_google_2ftype_2ftimeofday_2eproto_once,
+      file_level_metadata_google_2ftype_2ftimeofday_2eproto[0]);
+}
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace type
+}  // namespace google
+namespace google {
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+// @@protoc_insertion_point(global_scope)
+#include "google/protobuf/port_undef.inc"
diff --git a/gen/google/type/timeofday.pb.h b/gen/google/type/timeofday.pb.h
new file mode 100644
index 0000000..4e094d7
--- /dev/null
+++ b/gen/google/type/timeofday.pb.h
@@ -0,0 +1,385 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: google/type/timeofday.proto
+
+#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2ftype_2ftimeofday_2eproto_2epb_2eh
+#define GOOGLE_PROTOBUF_INCLUDED_google_2ftype_2ftimeofday_2eproto_2epb_2eh
+
+#include <limits>
+#include <string>
+#include <type_traits>
+
+#include "google/protobuf/port_def.inc"
+#if PROTOBUF_VERSION < 4024000
+#error "This file was generated by a newer version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please update"
+#error "your headers."
+#endif  // PROTOBUF_VERSION
+
+#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
+#error "This file was generated by an older version of protoc which is"
+#error "incompatible with your Protocol Buffer headers. Please"
+#error "regenerate this file with a newer version of protoc."
+#endif  // PROTOBUF_MIN_PROTOC_VERSION
+#include "google/protobuf/port_undef.inc"
+#include "google/protobuf/io/coded_stream.h"
+#include "google/protobuf/arena.h"
+#include "google/protobuf/arenastring.h"
+#include "google/protobuf/generated_message_tctable_decl.h"
+#include "google/protobuf/generated_message_util.h"
+#include "google/protobuf/metadata_lite.h"
+#include "google/protobuf/generated_message_reflection.h"
+#include "google/protobuf/message.h"
+#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
+#include "google/protobuf/extension_set.h"  // IWYU pragma: export
+#include "google/protobuf/unknown_field_set.h"
+// @@protoc_insertion_point(includes)
+
+// Must be included last.
+#include "google/protobuf/port_def.inc"
+
+#define PROTOBUF_INTERNAL_EXPORT_google_2ftype_2ftimeofday_2eproto
+
+namespace google {
+namespace protobuf {
+namespace internal {
+class AnyMetadata;
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+// Internal implementation detail -- do not use these members.
+struct TableStruct_google_2ftype_2ftimeofday_2eproto {
+  static const ::uint32_t offsets[];
+};
+extern const ::google::protobuf::internal::DescriptorTable
+    descriptor_table_google_2ftype_2ftimeofday_2eproto;
+namespace google {
+namespace type {
+class TimeOfDay;
+struct TimeOfDayDefaultTypeInternal;
+extern TimeOfDayDefaultTypeInternal _TimeOfDay_default_instance_;
+}  // namespace type
+namespace protobuf {
+}  // namespace protobuf
+}  // namespace google
+
+namespace google {
+namespace type {
+
+// ===================================================================
+
+
+// -------------------------------------------------------------------
+
+class TimeOfDay final :
+    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.type.TimeOfDay) */ {
+ public:
+  inline TimeOfDay() : TimeOfDay(nullptr) {}
+  ~TimeOfDay() override;
+  template<typename = void>
+  explicit PROTOBUF_CONSTEXPR TimeOfDay(::google::protobuf::internal::ConstantInitialized);
+
+  TimeOfDay(const TimeOfDay& from);
+  TimeOfDay(TimeOfDay&& from) noexcept
+    : TimeOfDay() {
+    *this = ::std::move(from);
+  }
+
+  inline TimeOfDay& operator=(const TimeOfDay& from) {
+    CopyFrom(from);
+    return *this;
+  }
+  inline TimeOfDay& operator=(TimeOfDay&& from) noexcept {
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
+    } else {
+      CopyFrom(from);
+    }
+    return *this;
+  }
+
+  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
+    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
+  }
+  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
+    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
+  }
+
+  static const ::google::protobuf::Descriptor* descriptor() {
+    return GetDescriptor();
+  }
+  static const ::google::protobuf::Descriptor* GetDescriptor() {
+    return default_instance().GetMetadata().descriptor;
+  }
+  static const ::google::protobuf::Reflection* GetReflection() {
+    return default_instance().GetMetadata().reflection;
+  }
+  static const TimeOfDay& default_instance() {
+    return *internal_default_instance();
+  }
+  static inline const TimeOfDay* internal_default_instance() {
+    return reinterpret_cast<const TimeOfDay*>(
+               &_TimeOfDay_default_instance_);
+  }
+  static constexpr int kIndexInFileMessages =
+    0;
+
+  friend void swap(TimeOfDay& a, TimeOfDay& b) {
+    a.Swap(&b);
+  }
+  inline void Swap(TimeOfDay* other) {
+    if (other == this) return;
+  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() != nullptr &&
+        GetOwningArena() == other->GetOwningArena()) {
+   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
+    if (GetOwningArena() == other->GetOwningArena()) {
+  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
+      InternalSwap(other);
+    } else {
+      ::google::protobuf::internal::GenericSwap(this, other);
+    }
+  }
+  void UnsafeArenaSwap(TimeOfDay* other) {
+    if (other == this) return;
+    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
+    InternalSwap(other);
+  }
+
+  // implements Message ----------------------------------------------
+
+  TimeOfDay* New(::google::protobuf::Arena* arena = nullptr) const final {
+    return CreateMaybeMessage<TimeOfDay>(arena);
+  }
+  using ::google::protobuf::Message::CopyFrom;
+  void CopyFrom(const TimeOfDay& from);
+  using ::google::protobuf::Message::MergeFrom;
+  void MergeFrom( const TimeOfDay& from) {
+    TimeOfDay::MergeImpl(*this, from);
+  }
+  private:
+  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
+  public:
+  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
+  bool IsInitialized() const final;
+
+  ::size_t ByteSizeLong() const final;
+  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
+  ::uint8_t* _InternalSerialize(
+      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
+  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }
+
+  private:
+  void SharedCtor(::google::protobuf::Arena* arena);
+  void SharedDtor();
+  void SetCachedSize(int size) const final;
+  void InternalSwap(TimeOfDay* other);
+
+  private:
+  friend class ::google::protobuf::internal::AnyMetadata;
+  static ::absl::string_view FullMessageName() {
+    return "google.type.TimeOfDay";
+  }
+  protected:
+  explicit TimeOfDay(::google::protobuf::Arena* arena);
+  public:
+
+  static const ClassData _class_data_;
+  const ::google::protobuf::Message::ClassData*GetClassData() const final;
+
+  ::google::protobuf::Metadata GetMetadata() const final;
+
+  // nested types ----------------------------------------------------
+
+  // accessors -------------------------------------------------------
+
+  enum : int {
+    kHoursFieldNumber = 1,
+    kMinutesFieldNumber = 2,
+    kSecondsFieldNumber = 3,
+    kNanosFieldNumber = 4,
+  };
+  // int32 hours = 1 [json_name = "hours"];
+  void clear_hours() ;
+  ::int32_t hours() const;
+  void set_hours(::int32_t value);
+
+  private:
+  ::int32_t _internal_hours() const;
+  void _internal_set_hours(::int32_t value);
+
+  public:
+  // int32 minutes = 2 [json_name = "minutes"];
+  void clear_minutes() ;
+  ::int32_t minutes() const;
+  void set_minutes(::int32_t value);
+
+  private:
+  ::int32_t _internal_minutes() const;
+  void _internal_set_minutes(::int32_t value);
+
+  public:
+  // int32 seconds = 3 [json_name = "seconds"];
+  void clear_seconds() ;
+  ::int32_t seconds() const;
+  void set_seconds(::int32_t value);
+
+  private:
+  ::int32_t _internal_seconds() const;
+  void _internal_set_seconds(::int32_t value);
+
+  public:
+  // int32 nanos = 4 [json_name = "nanos"];
+  void clear_nanos() ;
+  ::int32_t nanos() const;
+  void set_nanos(::int32_t value);
+
+  private:
+  ::int32_t _internal_nanos() const;
+  void _internal_set_nanos(::int32_t value);
+
+  public:
+  // @@protoc_insertion_point(class_scope:google.type.TimeOfDay)
+ private:
+  class _Internal;
+
+  friend class ::google::protobuf::internal::TcParser;
+  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
+  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
+  typedef void InternalArenaConstructable_;
+  typedef void DestructorSkippable_;
+  struct Impl_ {
+    ::int32_t hours_;
+    ::int32_t minutes_;
+    ::int32_t seconds_;
+    ::int32_t nanos_;
+    mutable ::google::protobuf::internal::CachedSize _cached_size_;
+    PROTOBUF_TSAN_DECLARE_MEMBER;
+  };
+  union { Impl_ _impl_; };
+  friend struct ::TableStruct_google_2ftype_2ftimeofday_2eproto;
+};
+
+// ===================================================================
+
+
+
+
+// ===================================================================
+
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+#endif  // __GNUC__
+// -------------------------------------------------------------------
+
+// TimeOfDay
+
+// int32 hours = 1 [json_name = "hours"];
+inline void TimeOfDay::clear_hours() {
+  _impl_.hours_ = 0;
+}
+inline ::int32_t TimeOfDay::hours() const {
+  // @@protoc_insertion_point(field_get:google.type.TimeOfDay.hours)
+  return _internal_hours();
+}
+inline void TimeOfDay::set_hours(::int32_t value) {
+  _internal_set_hours(value);
+  // @@protoc_insertion_point(field_set:google.type.TimeOfDay.hours)
+}
+inline ::int32_t TimeOfDay::_internal_hours() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.hours_;
+}
+inline void TimeOfDay::_internal_set_hours(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.hours_ = value;
+}
+
+// int32 minutes = 2 [json_name = "minutes"];
+inline void TimeOfDay::clear_minutes() {
+  _impl_.minutes_ = 0;
+}
+inline ::int32_t TimeOfDay::minutes() const {
+  // @@protoc_insertion_point(field_get:google.type.TimeOfDay.minutes)
+  return _internal_minutes();
+}
+inline void TimeOfDay::set_minutes(::int32_t value) {
+  _internal_set_minutes(value);
+  // @@protoc_insertion_point(field_set:google.type.TimeOfDay.minutes)
+}
+inline ::int32_t TimeOfDay::_internal_minutes() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.minutes_;
+}
+inline void TimeOfDay::_internal_set_minutes(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.minutes_ = value;
+}
+
+// int32 seconds = 3 [json_name = "seconds"];
+inline void TimeOfDay::clear_seconds() {
+  _impl_.seconds_ = 0;
+}
+inline ::int32_t TimeOfDay::seconds() const {
+  // @@protoc_insertion_point(field_get:google.type.TimeOfDay.seconds)
+  return _internal_seconds();
+}
+inline void TimeOfDay::set_seconds(::int32_t value) {
+  _internal_set_seconds(value);
+  // @@protoc_insertion_point(field_set:google.type.TimeOfDay.seconds)
+}
+inline ::int32_t TimeOfDay::_internal_seconds() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.seconds_;
+}
+inline void TimeOfDay::_internal_set_seconds(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.seconds_ = value;
+}
+
+// int32 nanos = 4 [json_name = "nanos"];
+inline void TimeOfDay::clear_nanos() {
+  _impl_.nanos_ = 0;
+}
+inline ::int32_t TimeOfDay::nanos() const {
+  // @@protoc_insertion_point(field_get:google.type.TimeOfDay.nanos)
+  return _internal_nanos();
+}
+inline void TimeOfDay::set_nanos(::int32_t value) {
+  _internal_set_nanos(value);
+  // @@protoc_insertion_point(field_set:google.type.TimeOfDay.nanos)
+}
+inline ::int32_t TimeOfDay::_internal_nanos() const {
+  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
+  return _impl_.nanos_;
+}
+inline void TimeOfDay::_internal_set_nanos(::int32_t value) {
+  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
+  ;
+  _impl_.nanos_ = value;
+}
+
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif  // __GNUC__
+
+// @@protoc_insertion_point(namespace_scope)
+}  // namespace type
+}  // namespace google
+
+
+// @@protoc_insertion_point(global_scope)
+
+#include "google/protobuf/port_undef.inc"
+
+#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2ftype_2ftimeofday_2eproto_2epb_2eh
diff --git a/gen/parser/internal/CelBaseVisitor.cpp b/gen/parser/internal/CelBaseVisitor.cpp
new file mode 100755
index 0000000..b8b4d25
--- /dev/null
+++ b/gen/parser/internal/CelBaseVisitor.cpp
@@ -0,0 +1,9 @@
+
+// Generated from parser/internal/Cel.g4 by ANTLR 4.10.1
+
+
+#include "CelBaseVisitor.h"
+
+
+using namespace cel_parser_internal;
+
diff --git a/gen/parser/internal/CelBaseVisitor.h b/gen/parser/internal/CelBaseVisitor.h
new file mode 100755
index 0000000..450902b
--- /dev/null
+++ b/gen/parser/internal/CelBaseVisitor.h
@@ -0,0 +1,139 @@
+
+// Generated from parser/internal/Cel.g4 by ANTLR 4.10.1
+
+#pragma once
+
+
+#include "antlr4-runtime.h"
+#include "CelVisitor.h"
+
+
+namespace cel_parser_internal {
+
+/**
+ * This class provides an empty implementation of CelVisitor, which can be
+ * extended to create a visitor which only needs to handle a subset of the available methods.
+ */
+class  CelBaseVisitor : public CelVisitor {
+public:
+
+  virtual std::any visitStart(CelParser::StartContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitExpr(CelParser::ExprContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitConditionalOr(CelParser::ConditionalOrContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitConditionalAnd(CelParser::ConditionalAndContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitRelation(CelParser::RelationContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitCalc(CelParser::CalcContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitMemberExpr(CelParser::MemberExprContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitLogicalNot(CelParser::LogicalNotContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitNegate(CelParser::NegateContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitSelectOrCall(CelParser::SelectOrCallContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitPrimaryExpr(CelParser::PrimaryExprContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitIndex(CelParser::IndexContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitCreateMessage(CelParser::CreateMessageContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitIdentOrGlobalCall(CelParser::IdentOrGlobalCallContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitNested(CelParser::NestedContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitCreateList(CelParser::CreateListContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitCreateStruct(CelParser::CreateStructContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitConstantLiteral(CelParser::ConstantLiteralContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitExprList(CelParser::ExprListContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitFieldInitializerList(CelParser::FieldInitializerListContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitMapInitializerList(CelParser::MapInitializerListContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitInt(CelParser::IntContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitUint(CelParser::UintContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitDouble(CelParser::DoubleContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitString(CelParser::StringContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitBytes(CelParser::BytesContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitBoolTrue(CelParser::BoolTrueContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitBoolFalse(CelParser::BoolFalseContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+  virtual std::any visitNull(CelParser::NullContext *ctx) override {
+    return visitChildren(ctx);
+  }
+
+
+};
+
+}  // namespace cel_parser_internal
diff --git a/gen/parser/internal/CelLexer.cpp b/gen/parser/internal/CelLexer.cpp
new file mode 100755
index 0000000..b70cf3d
--- /dev/null
+++ b/gen/parser/internal/CelLexer.cpp
@@ -0,0 +1,290 @@
+
+// Generated from parser/internal/Cel.g4 by ANTLR 4.10.1
+
+
+#include "CelLexer.h"
+
+
+using namespace antlr4;
+
+using namespace cel_parser_internal;
+
+
+using namespace antlr4;
+
+namespace {
+
+struct CelLexerStaticData final {
+  CelLexerStaticData(std::vector<std::string> ruleNames,
+                          std::vector<std::string> channelNames,
+                          std::vector<std::string> modeNames,
+                          std::vector<std::string> literalNames,
+                          std::vector<std::string> symbolicNames)
+      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
+        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
+        symbolicNames(std::move(symbolicNames)),
+        vocabulary(this->literalNames, this->symbolicNames) {}
+
+  CelLexerStaticData(const CelLexerStaticData&) = delete;
+  CelLexerStaticData(CelLexerStaticData&&) = delete;
+  CelLexerStaticData& operator=(const CelLexerStaticData&) = delete;
+  CelLexerStaticData& operator=(CelLexerStaticData&&) = delete;
+
+  std::vector<antlr4::dfa::DFA> decisionToDFA;
+  antlr4::atn::PredictionContextCache sharedContextCache;
+  const std::vector<std::string> ruleNames;
+  const std::vector<std::string> channelNames;
+  const std::vector<std::string> modeNames;
+  const std::vector<std::string> literalNames;
+  const std::vector<std::string> symbolicNames;
+  const antlr4::dfa::Vocabulary vocabulary;
+  antlr4::atn::SerializedATNView serializedATN;
+  std::unique_ptr<antlr4::atn::ATN> atn;
+};
+
+std::once_flag cellexerLexerOnceFlag;
+CelLexerStaticData *cellexerLexerStaticData = nullptr;
+
+void cellexerLexerInitialize() {
+  assert(cellexerLexerStaticData == nullptr);
+  auto staticData = std::make_unique<CelLexerStaticData>(
+    std::vector<std::string>{
+      "T__0", "EQUALS", "NOT_EQUALS", "LESS", "LESS_EQUALS", "GREATER_EQUALS", 
+      "GREATER", "LOGICAL_AND", "LOGICAL_OR", "LBRACKET", "RPRACKET", "LBRACE", 
+      "RBRACE", "LPAREN", "RPAREN", "DOT", "COMMA", "MINUS", "EXCLAM", "QUESTIONMARK", 
+      "COLON", "PLUS", "STAR", "SLASH", "PERCENT", "CEL_TRUE", "CEL_FALSE", 
+      "NUL", "BACKSLASH", "LETTER", "DIGIT", "EXPONENT", "HEXDIGIT", "RAW", 
+      "ESC_SEQ", "ESC_CHAR_SEQ", "ESC_OCT_SEQ", "ESC_BYTE_SEQ", "ESC_UNI_SEQ", 
+      "WHITESPACE", "COMMENT", "NUM_FLOAT", "NUM_INT", "NUM_UINT", "STRING", 
+      "BYTES", "IDENTIFIER"
+    },
+    std::vector<std::string>{
+      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
+    },
+    std::vector<std::string>{
+      "DEFAULT_MODE"
+    },
+    std::vector<std::string>{
+      "", "'in'", "'=='", "'!='", "'<'", "'<='", "'>='", "'>'", "'&&'", 
+      "'||'", "'['", "']'", "'{'", "'}'", "'('", "')'", "'.'", "','", "'-'", 
+      "'!'", "'\\u003F'", "':'", "'+'", "'*'", "'/'", "'%'", "'true'", "'false'", 
+      "'null'"
+    },
+    std::vector<std::string>{
+      "", "", "EQUALS", "NOT_EQUALS", "LESS", "LESS_EQUALS", "GREATER_EQUALS", 
+      "GREATER", "LOGICAL_AND", "LOGICAL_OR", "LBRACKET", "RPRACKET", "LBRACE", 
+      "RBRACE", "LPAREN", "RPAREN", "DOT", "COMMA", "MINUS", "EXCLAM", "QUESTIONMARK", 
+      "COLON", "PLUS", "STAR", "SLASH", "PERCENT", "CEL_TRUE", "CEL_FALSE", 
+      "NUL", "WHITESPACE", "COMMENT", "NUM_FLOAT", "NUM_INT", "NUM_UINT", 
+      "STRING", "BYTES", "IDENTIFIER"
+    }
+  );
+  static const int32_t serializedATNSegment[] = {
+  	4,0,36,423,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
+  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
+  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
+  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
+  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
+  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
+  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,1,0,1,0,1,1,1,1,1,1,
+  	1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,
+  	8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
+  	1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
+  	1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
+  	1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
+  	1,31,3,31,177,8,31,1,31,4,31,180,8,31,11,31,12,31,181,1,32,1,32,1,33,
+  	1,33,1,34,1,34,1,34,1,34,3,34,192,8,34,1,35,1,35,1,35,1,36,1,36,1,36,
+  	1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
+  	1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,225,8,38,
+  	1,39,4,39,228,8,39,11,39,12,39,229,1,39,1,39,1,40,1,40,1,40,1,40,5,40,
+  	238,8,40,10,40,12,40,241,9,40,1,40,1,40,1,41,4,41,246,8,41,11,41,12,41,
+  	247,1,41,1,41,4,41,252,8,41,11,41,12,41,253,1,41,3,41,257,8,41,1,41,4,
+  	41,260,8,41,11,41,12,41,261,1,41,1,41,1,41,1,41,4,41,268,8,41,11,41,12,
+  	41,269,1,41,3,41,273,8,41,3,41,275,8,41,1,42,4,42,278,8,42,11,42,12,42,
+  	279,1,42,1,42,1,42,1,42,4,42,286,8,42,11,42,12,42,287,3,42,290,8,42,1,
+  	43,4,43,293,8,43,11,43,12,43,294,1,43,1,43,1,43,1,43,1,43,1,43,4,43,303,
+  	8,43,11,43,12,43,304,1,43,1,43,3,43,309,8,43,1,44,1,44,1,44,5,44,314,
+  	8,44,10,44,12,44,317,9,44,1,44,1,44,1,44,1,44,5,44,323,8,44,10,44,12,
+  	44,326,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,335,8,44,10,44,12,
+  	44,338,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,349,8,44,
+  	10,44,12,44,352,9,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,360,8,44,10,44,
+  	12,44,363,9,44,1,44,1,44,1,44,1,44,1,44,5,44,370,8,44,10,44,12,44,373,
+  	9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,383,8,44,10,44,12,44,
+  	386,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,398,8,
+  	44,10,44,12,44,401,9,44,1,44,1,44,1,44,1,44,3,44,407,8,44,1,45,1,45,1,
+  	45,1,46,1,46,3,46,414,8,46,1,46,1,46,1,46,5,46,419,8,46,10,46,12,46,422,
+  	9,46,4,336,350,384,399,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
+  	10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
+  	43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,0,59,0,61,0,63,0,65,0,67,
+  	0,69,0,71,0,73,0,75,0,77,0,79,29,81,30,83,31,85,32,87,33,89,34,91,35,
+  	93,36,1,0,16,2,0,65,90,97,122,2,0,69,69,101,101,2,0,43,43,45,45,3,0,48,
+  	57,65,70,97,102,2,0,82,82,114,114,10,0,34,34,39,39,63,63,92,92,96,98,
+  	102,102,110,110,114,114,116,116,118,118,2,0,88,88,120,120,3,0,9,10,12,
+  	13,32,32,1,0,10,10,2,0,85,85,117,117,4,0,10,10,13,13,34,34,92,92,4,0,
+  	10,10,13,13,39,39,92,92,1,0,92,92,3,0,10,10,13,13,34,34,3,0,10,10,13,
+  	13,39,39,2,0,66,66,98,98,456,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
+  	1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
+  	0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
+  	29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
+  	0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
+  	0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
+  	83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,
+  	0,0,0,1,95,1,0,0,0,3,98,1,0,0,0,5,101,1,0,0,0,7,104,1,0,0,0,9,106,1,0,
+  	0,0,11,109,1,0,0,0,13,112,1,0,0,0,15,114,1,0,0,0,17,117,1,0,0,0,19,120,
+  	1,0,0,0,21,122,1,0,0,0,23,124,1,0,0,0,25,126,1,0,0,0,27,128,1,0,0,0,29,
+  	130,1,0,0,0,31,132,1,0,0,0,33,134,1,0,0,0,35,136,1,0,0,0,37,138,1,0,0,
+  	0,39,140,1,0,0,0,41,142,1,0,0,0,43,144,1,0,0,0,45,146,1,0,0,0,47,148,
+  	1,0,0,0,49,150,1,0,0,0,51,152,1,0,0,0,53,157,1,0,0,0,55,163,1,0,0,0,57,
+  	168,1,0,0,0,59,170,1,0,0,0,61,172,1,0,0,0,63,174,1,0,0,0,65,183,1,0,0,
+  	0,67,185,1,0,0,0,69,191,1,0,0,0,71,193,1,0,0,0,73,196,1,0,0,0,75,201,
+  	1,0,0,0,77,224,1,0,0,0,79,227,1,0,0,0,81,233,1,0,0,0,83,274,1,0,0,0,85,
+  	289,1,0,0,0,87,308,1,0,0,0,89,406,1,0,0,0,91,408,1,0,0,0,93,413,1,0,0,
+  	0,95,96,5,105,0,0,96,97,5,110,0,0,97,2,1,0,0,0,98,99,5,61,0,0,99,100,
+  	5,61,0,0,100,4,1,0,0,0,101,102,5,33,0,0,102,103,5,61,0,0,103,6,1,0,0,
+  	0,104,105,5,60,0,0,105,8,1,0,0,0,106,107,5,60,0,0,107,108,5,61,0,0,108,
+  	10,1,0,0,0,109,110,5,62,0,0,110,111,5,61,0,0,111,12,1,0,0,0,112,113,5,
+  	62,0,0,113,14,1,0,0,0,114,115,5,38,0,0,115,116,5,38,0,0,116,16,1,0,0,
+  	0,117,118,5,124,0,0,118,119,5,124,0,0,119,18,1,0,0,0,120,121,5,91,0,0,
+  	121,20,1,0,0,0,122,123,5,93,0,0,123,22,1,0,0,0,124,125,5,123,0,0,125,
+  	24,1,0,0,0,126,127,5,125,0,0,127,26,1,0,0,0,128,129,5,40,0,0,129,28,1,
+  	0,0,0,130,131,5,41,0,0,131,30,1,0,0,0,132,133,5,46,0,0,133,32,1,0,0,0,
+  	134,135,5,44,0,0,135,34,1,0,0,0,136,137,5,45,0,0,137,36,1,0,0,0,138,139,
+  	5,33,0,0,139,38,1,0,0,0,140,141,5,63,0,0,141,40,1,0,0,0,142,143,5,58,
+  	0,0,143,42,1,0,0,0,144,145,5,43,0,0,145,44,1,0,0,0,146,147,5,42,0,0,147,
+  	46,1,0,0,0,148,149,5,47,0,0,149,48,1,0,0,0,150,151,5,37,0,0,151,50,1,
+  	0,0,0,152,153,5,116,0,0,153,154,5,114,0,0,154,155,5,117,0,0,155,156,5,
+  	101,0,0,156,52,1,0,0,0,157,158,5,102,0,0,158,159,5,97,0,0,159,160,5,108,
+  	0,0,160,161,5,115,0,0,161,162,5,101,0,0,162,54,1,0,0,0,163,164,5,110,
+  	0,0,164,165,5,117,0,0,165,166,5,108,0,0,166,167,5,108,0,0,167,56,1,0,
+  	0,0,168,169,5,92,0,0,169,58,1,0,0,0,170,171,7,0,0,0,171,60,1,0,0,0,172,
+  	173,2,48,57,0,173,62,1,0,0,0,174,176,7,1,0,0,175,177,7,2,0,0,176,175,
+  	1,0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,180,3,61,30,0,179,178,1,0,
+  	0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,64,1,0,0,0,183,
+  	184,7,3,0,0,184,66,1,0,0,0,185,186,7,4,0,0,186,68,1,0,0,0,187,192,3,71,
+  	35,0,188,192,3,75,37,0,189,192,3,77,38,0,190,192,3,73,36,0,191,187,1,
+  	0,0,0,191,188,1,0,0,0,191,189,1,0,0,0,191,190,1,0,0,0,192,70,1,0,0,0,
+  	193,194,3,57,28,0,194,195,7,5,0,0,195,72,1,0,0,0,196,197,3,57,28,0,197,
+  	198,2,48,51,0,198,199,2,48,55,0,199,200,2,48,55,0,200,74,1,0,0,0,201,
+  	202,3,57,28,0,202,203,7,6,0,0,203,204,3,65,32,0,204,205,3,65,32,0,205,
+  	76,1,0,0,0,206,207,3,57,28,0,207,208,5,117,0,0,208,209,3,65,32,0,209,
+  	210,3,65,32,0,210,211,3,65,32,0,211,212,3,65,32,0,212,225,1,0,0,0,213,
+  	214,3,57,28,0,214,215,5,85,0,0,215,216,3,65,32,0,216,217,3,65,32,0,217,
+  	218,3,65,32,0,218,219,3,65,32,0,219,220,3,65,32,0,220,221,3,65,32,0,221,
+  	222,3,65,32,0,222,223,3,65,32,0,223,225,1,0,0,0,224,206,1,0,0,0,224,213,
+  	1,0,0,0,225,78,1,0,0,0,226,228,7,7,0,0,227,226,1,0,0,0,228,229,1,0,0,
+  	0,229,227,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,232,6,39,0,0,232,
+  	80,1,0,0,0,233,234,5,47,0,0,234,235,5,47,0,0,235,239,1,0,0,0,236,238,
+  	8,8,0,0,237,236,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,
+  	0,240,242,1,0,0,0,241,239,1,0,0,0,242,243,6,40,0,0,243,82,1,0,0,0,244,
+  	246,3,61,30,0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,
+  	1,0,0,0,248,249,1,0,0,0,249,251,5,46,0,0,250,252,3,61,30,0,251,250,1,
+  	0,0,0,252,253,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,
+  	255,257,3,63,31,0,256,255,1,0,0,0,256,257,1,0,0,0,257,275,1,0,0,0,258,
+  	260,3,61,30,0,259,258,1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,262,
+  	1,0,0,0,262,263,1,0,0,0,263,264,3,63,31,0,264,275,1,0,0,0,265,267,5,46,
+  	0,0,266,268,3,61,30,0,267,266,1,0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,
+  	269,270,1,0,0,0,270,272,1,0,0,0,271,273,3,63,31,0,272,271,1,0,0,0,272,
+  	273,1,0,0,0,273,275,1,0,0,0,274,245,1,0,0,0,274,259,1,0,0,0,274,265,1,
+  	0,0,0,275,84,1,0,0,0,276,278,3,61,30,0,277,276,1,0,0,0,278,279,1,0,0,
+  	0,279,277,1,0,0,0,279,280,1,0,0,0,280,290,1,0,0,0,281,282,5,48,0,0,282,
+  	283,5,120,0,0,283,285,1,0,0,0,284,286,3,65,32,0,285,284,1,0,0,0,286,287,
+  	1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,277,1,0,0,
+  	0,289,281,1,0,0,0,290,86,1,0,0,0,291,293,3,61,30,0,292,291,1,0,0,0,293,
+  	294,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,297,7,
+  	9,0,0,297,309,1,0,0,0,298,299,5,48,0,0,299,300,5,120,0,0,300,302,1,0,
+  	0,0,301,303,3,65,32,0,302,301,1,0,0,0,303,304,1,0,0,0,304,302,1,0,0,0,
+  	304,305,1,0,0,0,305,306,1,0,0,0,306,307,7,9,0,0,307,309,1,0,0,0,308,292,
+  	1,0,0,0,308,298,1,0,0,0,309,88,1,0,0,0,310,315,5,34,0,0,311,314,3,69,
+  	34,0,312,314,8,10,0,0,313,311,1,0,0,0,313,312,1,0,0,0,314,317,1,0,0,0,
+  	315,313,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,315,1,0,0,0,318,407,
+  	5,34,0,0,319,324,5,39,0,0,320,323,3,69,34,0,321,323,8,11,0,0,322,320,
+  	1,0,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,
+  	0,325,327,1,0,0,0,326,324,1,0,0,0,327,407,5,39,0,0,328,329,5,34,0,0,329,
+  	330,5,34,0,0,330,331,5,34,0,0,331,336,1,0,0,0,332,335,3,69,34,0,333,335,
+  	8,12,0,0,334,332,1,0,0,0,334,333,1,0,0,0,335,338,1,0,0,0,336,337,1,0,
+  	0,0,336,334,1,0,0,0,337,339,1,0,0,0,338,336,1,0,0,0,339,340,5,34,0,0,
+  	340,341,5,34,0,0,341,407,5,34,0,0,342,343,5,39,0,0,343,344,5,39,0,0,344,
+  	345,5,39,0,0,345,350,1,0,0,0,346,349,3,69,34,0,347,349,8,12,0,0,348,346,
+  	1,0,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,351,1,0,0,0,350,348,1,0,0,
+  	0,351,353,1,0,0,0,352,350,1,0,0,0,353,354,5,39,0,0,354,355,5,39,0,0,355,
+  	407,5,39,0,0,356,357,3,67,33,0,357,361,5,34,0,0,358,360,8,13,0,0,359,
+  	358,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,364,1,
+  	0,0,0,363,361,1,0,0,0,364,365,5,34,0,0,365,407,1,0,0,0,366,367,3,67,33,
+  	0,367,371,5,39,0,0,368,370,8,14,0,0,369,368,1,0,0,0,370,373,1,0,0,0,371,
+  	369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,371,1,0,0,0,374,375,5,
+  	39,0,0,375,407,1,0,0,0,376,377,3,67,33,0,377,378,5,34,0,0,378,379,5,34,
+  	0,0,379,380,5,34,0,0,380,384,1,0,0,0,381,383,9,0,0,0,382,381,1,0,0,0,
+  	383,386,1,0,0,0,384,385,1,0,0,0,384,382,1,0,0,0,385,387,1,0,0,0,386,384,
+  	1,0,0,0,387,388,5,34,0,0,388,389,5,34,0,0,389,390,5,34,0,0,390,407,1,
+  	0,0,0,391,392,3,67,33,0,392,393,5,39,0,0,393,394,5,39,0,0,394,395,5,39,
+  	0,0,395,399,1,0,0,0,396,398,9,0,0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,
+  	400,1,0,0,0,399,397,1,0,0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,403,5,
+  	39,0,0,403,404,5,39,0,0,404,405,5,39,0,0,405,407,1,0,0,0,406,310,1,0,
+  	0,0,406,319,1,0,0,0,406,328,1,0,0,0,406,342,1,0,0,0,406,356,1,0,0,0,406,
+  	366,1,0,0,0,406,376,1,0,0,0,406,391,1,0,0,0,407,90,1,0,0,0,408,409,7,
+  	15,0,0,409,410,3,89,44,0,410,92,1,0,0,0,411,414,3,59,29,0,412,414,5,95,
+  	0,0,413,411,1,0,0,0,413,412,1,0,0,0,414,420,1,0,0,0,415,419,3,59,29,0,
+  	416,419,3,61,30,0,417,419,5,95,0,0,418,415,1,0,0,0,418,416,1,0,0,0,418,
+  	417,1,0,0,0,419,422,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,94,1,
+  	0,0,0,422,420,1,0,0,0,36,0,176,181,191,224,229,239,247,253,256,261,269,
+  	272,274,279,287,289,294,304,308,313,315,322,324,334,336,348,350,361,371,
+  	384,399,406,413,418,420,1,0,1,0
+  };
+  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));
+
+  antlr4::atn::ATNDeserializer deserializer;
+  staticData->atn = deserializer.deserialize(staticData->serializedATN);
+
+  const size_t count = staticData->atn->getNumberOfDecisions();
+  staticData->decisionToDFA.reserve(count);
+  for (size_t i = 0; i < count; i++) { 
+    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
+  }
+  cellexerLexerStaticData = staticData.release();
+}
+
+}
+
+CelLexer::CelLexer(CharStream *input) : Lexer(input) {
+  CelLexer::initialize();
+  _interpreter = new atn::LexerATNSimulator(this, *cellexerLexerStaticData->atn, cellexerLexerStaticData->decisionToDFA, cellexerLexerStaticData->sharedContextCache);
+}
+
+CelLexer::~CelLexer() {
+  delete _interpreter;
+}
+
+std::string CelLexer::getGrammarFileName() const {
+  return "Cel.g4";
+}
+
+const std::vector<std::string>& CelLexer::getRuleNames() const {
+  return cellexerLexerStaticData->ruleNames;
+}
+
+const std::vector<std::string>& CelLexer::getChannelNames() const {
+  return cellexerLexerStaticData->channelNames;
+}
+
+const std::vector<std::string>& CelLexer::getModeNames() const {
+  return cellexerLexerStaticData->modeNames;
+}
+
+const dfa::Vocabulary& CelLexer::getVocabulary() const {
+  return cellexerLexerStaticData->vocabulary;
+}
+
+antlr4::atn::SerializedATNView CelLexer::getSerializedATN() const {
+  return cellexerLexerStaticData->serializedATN;
+}
+
+const atn::ATN& CelLexer::getATN() const {
+  return *cellexerLexerStaticData->atn;
+}
+
+
+
+
+void CelLexer::initialize() {
+  std::call_once(cellexerLexerOnceFlag, cellexerLexerInitialize);
+}
diff --git a/gen/parser/internal/CelLexer.h b/gen/parser/internal/CelLexer.h
new file mode 100755
index 0000000..b1306b5
--- /dev/null
+++ b/gen/parser/internal/CelLexer.h
@@ -0,0 +1,57 @@
+
+// Generated from parser/internal/Cel.g4 by ANTLR 4.10.1
+
+#pragma once
+
+
+#include "antlr4-runtime.h"
+
+
+namespace cel_parser_internal {
+
+
+class  CelLexer : public antlr4::Lexer {
+public:
+  enum {
+    T__0 = 1, EQUALS = 2, NOT_EQUALS = 3, LESS = 4, LESS_EQUALS = 5, GREATER_EQUALS = 6, 
+    GREATER = 7, LOGICAL_AND = 8, LOGICAL_OR = 9, LBRACKET = 10, RPRACKET = 11, 
+    LBRACE = 12, RBRACE = 13, LPAREN = 14, RPAREN = 15, DOT = 16, COMMA = 17, 
+    MINUS = 18, EXCLAM = 19, QUESTIONMARK = 20, COLON = 21, PLUS = 22, STAR = 23, 
+    SLASH = 24, PERCENT = 25, CEL_TRUE = 26, CEL_FALSE = 27, NUL = 28, WHITESPACE = 29, 
+    COMMENT = 30, NUM_FLOAT = 31, NUM_INT = 32, NUM_UINT = 33, STRING = 34, 
+    BYTES = 35, IDENTIFIER = 36
+  };
+
+  explicit CelLexer(antlr4::CharStream *input);
+
+  ~CelLexer() override;
+
+
+  std::string getGrammarFileName() const override;
+
+  const std::vector<std::string>& getRuleNames() const override;
+
+  const std::vector<std::string>& getChannelNames() const override;
+
+  const std::vector<std::string>& getModeNames() const override;
+
+  const antlr4::dfa::Vocabulary& getVocabulary() const override;
+
+  antlr4::atn::SerializedATNView getSerializedATN() const override;
+
+  const antlr4::atn::ATN& getATN() const override;
+
+  // By default the static state used to implement the lexer is lazily initialized during the first
+  // call to the constructor. You can call this function if you wish to initialize the static state
+  // ahead of time.
+  static void initialize();
+
+private:
+
+  // Individual action functions triggered by action() above.
+
+  // Individual semantic predicate functions triggered by sempred() above.
+
+};
+
+}  // namespace cel_parser_internal
diff --git a/gen/parser/internal/CelParser.cpp b/gen/parser/internal/CelParser.cpp
new file mode 100755
index 0000000..c553a15
--- /dev/null
+++ b/gen/parser/internal/CelParser.cpp
@@ -0,0 +1,2115 @@
+
+// Generated from parser/internal/Cel.g4 by ANTLR 4.10.1
+
+
+#include "CelVisitor.h"
+
+#include "CelParser.h"
+
+
+using namespace antlrcpp;
+using namespace cel_parser_internal;
+
+using namespace antlr4;
+
+namespace {
+
+struct CelParserStaticData final {
+  CelParserStaticData(std::vector<std::string> ruleNames,
+                        std::vector<std::string> literalNames,
+                        std::vector<std::string> symbolicNames)
+      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
+        symbolicNames(std::move(symbolicNames)),
+        vocabulary(this->literalNames, this->symbolicNames) {}
+
+  CelParserStaticData(const CelParserStaticData&) = delete;
+  CelParserStaticData(CelParserStaticData&&) = delete;
+  CelParserStaticData& operator=(const CelParserStaticData&) = delete;
+  CelParserStaticData& operator=(CelParserStaticData&&) = delete;
+
+  std::vector<antlr4::dfa::DFA> decisionToDFA;
+  antlr4::atn::PredictionContextCache sharedContextCache;
+  const std::vector<std::string> ruleNames;
+  const std::vector<std::string> literalNames;
+  const std::vector<std::string> symbolicNames;
+  const antlr4::dfa::Vocabulary vocabulary;
+  antlr4::atn::SerializedATNView serializedATN;
+  std::unique_ptr<antlr4::atn::ATN> atn;
+};
+
+std::once_flag celParserOnceFlag;
+CelParserStaticData *celParserStaticData = nullptr;
+
+void celParserInitialize() {
+  assert(celParserStaticData == nullptr);
+  auto staticData = std::make_unique<CelParserStaticData>(
+    std::vector<std::string>{
+      "start", "expr", "conditionalOr", "conditionalAnd", "relation", "calc", 
+      "unary", "member", "primary", "exprList", "fieldInitializerList", 
+      "mapInitializerList", "literal"
+    },
+    std::vector<std::string>{
+      "", "'in'", "'=='", "'!='", "'<'", "'<='", "'>='", "'>'", "'&&'", 
+      "'||'", "'['", "']'", "'{'", "'}'", "'('", "')'", "'.'", "','", "'-'", 
+      "'!'", "'\\u003F'", "':'", "'+'", "'*'", "'/'", "'%'", "'true'", "'false'", 
+      "'null'"
+    },
+    std::vector<std::string>{
+      "", "", "EQUALS", "NOT_EQUALS", "LESS", "LESS_EQUALS", "GREATER_EQUALS", 
+      "GREATER", "LOGICAL_AND", "LOGICAL_OR", "LBRACKET", "RPRACKET", "LBRACE", 
+      "RBRACE", "LPAREN", "RPAREN", "DOT", "COMMA", "MINUS", "EXCLAM", "QUESTIONMARK", 
+      "COLON", "PLUS", "STAR", "SLASH", "PERCENT", "CEL_TRUE", "CEL_FALSE", 
+      "NUL", "WHITESPACE", "COMMENT", "NUM_FLOAT", "NUM_INT", "NUM_UINT", 
+      "STRING", "BYTES", "IDENTIFIER"
+    }
+  );
+  static const int32_t serializedATNSegment[] = {
+  	4,1,36,209,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
+  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,0,1,1,1,
+  	1,1,1,1,1,1,1,1,1,3,1,36,8,1,1,2,1,2,1,2,5,2,41,8,2,10,2,12,2,44,9,2,
+  	1,3,1,3,1,3,5,3,49,8,3,10,3,12,3,52,9,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,60,
+  	8,4,10,4,12,4,63,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,74,8,5,10,
+  	5,12,5,77,9,5,1,6,1,6,4,6,81,8,6,11,6,12,6,82,1,6,1,6,4,6,87,8,6,11,6,
+  	12,6,88,1,6,3,6,92,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,102,8,7,1,
+  	7,3,7,105,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,115,8,7,1,7,3,7,118,
+  	8,7,1,7,5,7,121,8,7,10,7,12,7,124,9,7,1,8,3,8,127,8,8,1,8,1,8,1,8,3,8,
+  	132,8,8,1,8,3,8,135,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,143,8,8,1,8,3,8,146,
+  	8,8,1,8,1,8,1,8,3,8,151,8,8,1,8,3,8,154,8,8,1,8,1,8,3,8,158,8,8,1,9,1,
+  	9,1,9,5,9,163,8,9,10,9,12,9,166,9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
+  	5,10,175,8,10,10,10,12,10,178,9,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
+  	1,11,5,11,188,8,11,10,11,12,11,191,9,11,1,12,3,12,194,8,12,1,12,1,12,
+  	1,12,3,12,199,8,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,207,8,12,1,12,0,
+  	3,8,10,14,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,3,1,0,1,7,1,0,23,25,
+  	2,0,18,18,22,22,235,0,26,1,0,0,0,2,29,1,0,0,0,4,37,1,0,0,0,6,45,1,0,0,
+  	0,8,53,1,0,0,0,10,64,1,0,0,0,12,91,1,0,0,0,14,93,1,0,0,0,16,157,1,0,0,
+  	0,18,159,1,0,0,0,20,167,1,0,0,0,22,179,1,0,0,0,24,206,1,0,0,0,26,27,3,
+  	2,1,0,27,28,5,0,0,1,28,1,1,0,0,0,29,35,3,4,2,0,30,31,5,20,0,0,31,32,3,
+  	4,2,0,32,33,5,21,0,0,33,34,3,2,1,0,34,36,1,0,0,0,35,30,1,0,0,0,35,36,
+  	1,0,0,0,36,3,1,0,0,0,37,42,3,6,3,0,38,39,5,9,0,0,39,41,3,6,3,0,40,38,
+  	1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,5,1,0,0,0,44,42,
+  	1,0,0,0,45,50,3,8,4,0,46,47,5,8,0,0,47,49,3,8,4,0,48,46,1,0,0,0,49,52,
+  	1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,7,1,0,0,0,52,50,1,0,0,0,53,54,
+  	6,4,-1,0,54,55,3,10,5,0,55,61,1,0,0,0,56,57,10,1,0,0,57,58,7,0,0,0,58,
+  	60,3,8,4,2,59,56,1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,
+  	9,1,0,0,0,63,61,1,0,0,0,64,65,6,5,-1,0,65,66,3,12,6,0,66,75,1,0,0,0,67,
+  	68,10,2,0,0,68,69,7,1,0,0,69,74,3,10,5,3,70,71,10,1,0,0,71,72,7,2,0,0,
+  	72,74,3,10,5,2,73,67,1,0,0,0,73,70,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,
+  	0,75,76,1,0,0,0,76,11,1,0,0,0,77,75,1,0,0,0,78,92,3,14,7,0,79,81,5,19,
+  	0,0,80,79,1,0,0,0,81,82,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,84,1,0,
+  	0,0,84,92,3,14,7,0,85,87,5,18,0,0,86,85,1,0,0,0,87,88,1,0,0,0,88,86,1,
+  	0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,92,3,14,7,0,91,78,1,0,0,0,91,80,
+  	1,0,0,0,91,86,1,0,0,0,92,13,1,0,0,0,93,94,6,7,-1,0,94,95,3,16,8,0,95,
+  	122,1,0,0,0,96,97,10,3,0,0,97,98,5,16,0,0,98,104,5,36,0,0,99,101,5,14,
+  	0,0,100,102,3,18,9,0,101,100,1,0,0,0,101,102,1,0,0,0,102,103,1,0,0,0,
+  	103,105,5,15,0,0,104,99,1,0,0,0,104,105,1,0,0,0,105,121,1,0,0,0,106,107,
+  	10,2,0,0,107,108,5,10,0,0,108,109,3,2,1,0,109,110,5,11,0,0,110,121,1,
+  	0,0,0,111,112,10,1,0,0,112,114,5,12,0,0,113,115,3,20,10,0,114,113,1,0,
+  	0,0,114,115,1,0,0,0,115,117,1,0,0,0,116,118,5,17,0,0,117,116,1,0,0,0,
+  	117,118,1,0,0,0,118,119,1,0,0,0,119,121,5,13,0,0,120,96,1,0,0,0,120,106,
+  	1,0,0,0,120,111,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,
+  	0,123,15,1,0,0,0,124,122,1,0,0,0,125,127,5,16,0,0,126,125,1,0,0,0,126,
+  	127,1,0,0,0,127,128,1,0,0,0,128,134,5,36,0,0,129,131,5,14,0,0,130,132,
+  	3,18,9,0,131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,135,5,15,
+  	0,0,134,129,1,0,0,0,134,135,1,0,0,0,135,158,1,0,0,0,136,137,5,14,0,0,
+  	137,138,3,2,1,0,138,139,5,15,0,0,139,158,1,0,0,0,140,142,5,10,0,0,141,
+  	143,3,18,9,0,142,141,1,0,0,0,142,143,1,0,0,0,143,145,1,0,0,0,144,146,
+  	5,17,0,0,145,144,1,0,0,0,145,146,1,0,0,0,146,147,1,0,0,0,147,158,5,11,
+  	0,0,148,150,5,12,0,0,149,151,3,22,11,0,150,149,1,0,0,0,150,151,1,0,0,
+  	0,151,153,1,0,0,0,152,154,5,17,0,0,153,152,1,0,0,0,153,154,1,0,0,0,154,
+  	155,1,0,0,0,155,158,5,13,0,0,156,158,3,24,12,0,157,126,1,0,0,0,157,136,
+  	1,0,0,0,157,140,1,0,0,0,157,148,1,0,0,0,157,156,1,0,0,0,158,17,1,0,0,
+  	0,159,164,3,2,1,0,160,161,5,17,0,0,161,163,3,2,1,0,162,160,1,0,0,0,163,
+  	166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,19,1,0,0,0,166,164,1,
+  	0,0,0,167,168,5,36,0,0,168,169,5,21,0,0,169,176,3,2,1,0,170,171,5,17,
+  	0,0,171,172,5,36,0,0,172,173,5,21,0,0,173,175,3,2,1,0,174,170,1,0,0,0,
+  	175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,21,1,0,0,0,178,176,
+  	1,0,0,0,179,180,3,2,1,0,180,181,5,21,0,0,181,189,3,2,1,0,182,183,5,17,
+  	0,0,183,184,3,2,1,0,184,185,5,21,0,0,185,186,3,2,1,0,186,188,1,0,0,0,
+  	187,182,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,23,
+  	1,0,0,0,191,189,1,0,0,0,192,194,5,18,0,0,193,192,1,0,0,0,193,194,1,0,
+  	0,0,194,195,1,0,0,0,195,207,5,32,0,0,196,207,5,33,0,0,197,199,5,18,0,
+  	0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,207,5,31,0,0,201,
+  	207,5,34,0,0,202,207,5,35,0,0,203,207,5,26,0,0,204,207,5,27,0,0,205,207,
+  	5,28,0,0,206,193,1,0,0,0,206,196,1,0,0,0,206,198,1,0,0,0,206,201,1,0,
+  	0,0,206,202,1,0,0,0,206,203,1,0,0,0,206,204,1,0,0,0,206,205,1,0,0,0,207,
+  	25,1,0,0,0,29,35,42,50,61,73,75,82,88,91,101,104,114,117,120,122,126,
+  	131,134,142,145,150,153,157,164,176,189,193,198,206
+  };
+  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));
+
+  antlr4::atn::ATNDeserializer deserializer;
+  staticData->atn = deserializer.deserialize(staticData->serializedATN);
+
+  const size_t count = staticData->atn->getNumberOfDecisions();
+  staticData->decisionToDFA.reserve(count);
+  for (size_t i = 0; i < count; i++) { 
+    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
+  }
+  celParserStaticData = staticData.release();
+}
+
+}
+
+CelParser::CelParser(TokenStream *input) : CelParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}
+
+CelParser::CelParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
+  CelParser::initialize();
+  _interpreter = new atn::ParserATNSimulator(this, *celParserStaticData->atn, celParserStaticData->decisionToDFA, celParserStaticData->sharedContextCache, options);
+}
+
+CelParser::~CelParser() {
+  delete _interpreter;
+}
+
+const atn::ATN& CelParser::getATN() const {
+  return *celParserStaticData->atn;
+}
+
+std::string CelParser::getGrammarFileName() const {
+  return "Cel.g4";
+}
+
+const std::vector<std::string>& CelParser::getRuleNames() const {
+  return celParserStaticData->ruleNames;
+}
+
+const dfa::Vocabulary& CelParser::getVocabulary() const {
+  return celParserStaticData->vocabulary;
+}
+
+antlr4::atn::SerializedATNView CelParser::getSerializedATN() const {
+  return celParserStaticData->serializedATN;
+}
+
+
+//----------------- StartContext ------------------------------------------------------------------
+
+CelParser::StartContext::StartContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+tree::TerminalNode* CelParser::StartContext::EOF() {
+  return getToken(CelParser::EOF, 0);
+}
+
+CelParser::ExprContext* CelParser::StartContext::expr() {
+  return getRuleContext<CelParser::ExprContext>(0);
+}
+
+
+size_t CelParser::StartContext::getRuleIndex() const {
+  return CelParser::RuleStart;
+}
+
+
+std::any CelParser::StartContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitStart(this);
+  else
+    return visitor->visitChildren(this);
+}
+
+CelParser::StartContext* CelParser::start() {
+  StartContext *_localctx = _tracker.createInstance<StartContext>(_ctx, getState());
+  enterRule(_localctx, 0, CelParser::RuleStart);
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    exitRule();
+  });
+  try {
+    enterOuterAlt(_localctx, 1);
+    setState(26);
+    antlrcpp::downCast<StartContext *>(_localctx)->e = expr();
+    setState(27);
+    match(CelParser::EOF);
+   
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+
+  return _localctx;
+}
+
+//----------------- ExprContext ------------------------------------------------------------------
+
+CelParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+std::vector<CelParser::ConditionalOrContext *> CelParser::ExprContext::conditionalOr() {
+  return getRuleContexts<CelParser::ConditionalOrContext>();
+}
+
+CelParser::ConditionalOrContext* CelParser::ExprContext::conditionalOr(size_t i) {
+  return getRuleContext<CelParser::ConditionalOrContext>(i);
+}
+
+tree::TerminalNode* CelParser::ExprContext::COLON() {
+  return getToken(CelParser::COLON, 0);
+}
+
+tree::TerminalNode* CelParser::ExprContext::QUESTIONMARK() {
+  return getToken(CelParser::QUESTIONMARK, 0);
+}
+
+CelParser::ExprContext* CelParser::ExprContext::expr() {
+  return getRuleContext<CelParser::ExprContext>(0);
+}
+
+
+size_t CelParser::ExprContext::getRuleIndex() const {
+  return CelParser::RuleExpr;
+}
+
+
+std::any CelParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitExpr(this);
+  else
+    return visitor->visitChildren(this);
+}
+
+CelParser::ExprContext* CelParser::expr() {
+  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
+  enterRule(_localctx, 2, CelParser::RuleExpr);
+  size_t _la = 0;
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    exitRule();
+  });
+  try {
+    enterOuterAlt(_localctx, 1);
+    setState(29);
+    antlrcpp::downCast<ExprContext *>(_localctx)->e = conditionalOr();
+    setState(35);
+    _errHandler->sync(this);
+
+    _la = _input->LA(1);
+    if (_la == CelParser::QUESTIONMARK) {
+      setState(30);
+      antlrcpp::downCast<ExprContext *>(_localctx)->op = match(CelParser::QUESTIONMARK);
+      setState(31);
+      antlrcpp::downCast<ExprContext *>(_localctx)->e1 = conditionalOr();
+      setState(32);
+      match(CelParser::COLON);
+      setState(33);
+      antlrcpp::downCast<ExprContext *>(_localctx)->e2 = expr();
+    }
+   
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+
+  return _localctx;
+}
+
+//----------------- ConditionalOrContext ------------------------------------------------------------------
+
+CelParser::ConditionalOrContext::ConditionalOrContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+std::vector<CelParser::ConditionalAndContext *> CelParser::ConditionalOrContext::conditionalAnd() {
+  return getRuleContexts<CelParser::ConditionalAndContext>();
+}
+
+CelParser::ConditionalAndContext* CelParser::ConditionalOrContext::conditionalAnd(size_t i) {
+  return getRuleContext<CelParser::ConditionalAndContext>(i);
+}
+
+std::vector<tree::TerminalNode *> CelParser::ConditionalOrContext::LOGICAL_OR() {
+  return getTokens(CelParser::LOGICAL_OR);
+}
+
+tree::TerminalNode* CelParser::ConditionalOrContext::LOGICAL_OR(size_t i) {
+  return getToken(CelParser::LOGICAL_OR, i);
+}
+
+
+size_t CelParser::ConditionalOrContext::getRuleIndex() const {
+  return CelParser::RuleConditionalOr;
+}
+
+
+std::any CelParser::ConditionalOrContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitConditionalOr(this);
+  else
+    return visitor->visitChildren(this);
+}
+
+CelParser::ConditionalOrContext* CelParser::conditionalOr() {
+  ConditionalOrContext *_localctx = _tracker.createInstance<ConditionalOrContext>(_ctx, getState());
+  enterRule(_localctx, 4, CelParser::RuleConditionalOr);
+  size_t _la = 0;
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    exitRule();
+  });
+  try {
+    enterOuterAlt(_localctx, 1);
+    setState(37);
+    antlrcpp::downCast<ConditionalOrContext *>(_localctx)->e = conditionalAnd();
+    setState(42);
+    _errHandler->sync(this);
+    _la = _input->LA(1);
+    while (_la == CelParser::LOGICAL_OR) {
+      setState(38);
+      antlrcpp::downCast<ConditionalOrContext *>(_localctx)->s9 = match(CelParser::LOGICAL_OR);
+      antlrcpp::downCast<ConditionalOrContext *>(_localctx)->ops.push_back(antlrcpp::downCast<ConditionalOrContext *>(_localctx)->s9);
+      setState(39);
+      antlrcpp::downCast<ConditionalOrContext *>(_localctx)->conditionalAndContext = conditionalAnd();
+      antlrcpp::downCast<ConditionalOrContext *>(_localctx)->e1.push_back(antlrcpp::downCast<ConditionalOrContext *>(_localctx)->conditionalAndContext);
+      setState(44);
+      _errHandler->sync(this);
+      _la = _input->LA(1);
+    }
+   
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+
+  return _localctx;
+}
+
+//----------------- ConditionalAndContext ------------------------------------------------------------------
+
+CelParser::ConditionalAndContext::ConditionalAndContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+std::vector<CelParser::RelationContext *> CelParser::ConditionalAndContext::relation() {
+  return getRuleContexts<CelParser::RelationContext>();
+}
+
+CelParser::RelationContext* CelParser::ConditionalAndContext::relation(size_t i) {
+  return getRuleContext<CelParser::RelationContext>(i);
+}
+
+std::vector<tree::TerminalNode *> CelParser::ConditionalAndContext::LOGICAL_AND() {
+  return getTokens(CelParser::LOGICAL_AND);
+}
+
+tree::TerminalNode* CelParser::ConditionalAndContext::LOGICAL_AND(size_t i) {
+  return getToken(CelParser::LOGICAL_AND, i);
+}
+
+
+size_t CelParser::ConditionalAndContext::getRuleIndex() const {
+  return CelParser::RuleConditionalAnd;
+}
+
+
+std::any CelParser::ConditionalAndContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitConditionalAnd(this);
+  else
+    return visitor->visitChildren(this);
+}
+
+CelParser::ConditionalAndContext* CelParser::conditionalAnd() {
+  ConditionalAndContext *_localctx = _tracker.createInstance<ConditionalAndContext>(_ctx, getState());
+  enterRule(_localctx, 6, CelParser::RuleConditionalAnd);
+  size_t _la = 0;
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    exitRule();
+  });
+  try {
+    enterOuterAlt(_localctx, 1);
+    setState(45);
+    antlrcpp::downCast<ConditionalAndContext *>(_localctx)->e = relation(0);
+    setState(50);
+    _errHandler->sync(this);
+    _la = _input->LA(1);
+    while (_la == CelParser::LOGICAL_AND) {
+      setState(46);
+      antlrcpp::downCast<ConditionalAndContext *>(_localctx)->s8 = match(CelParser::LOGICAL_AND);
+      antlrcpp::downCast<ConditionalAndContext *>(_localctx)->ops.push_back(antlrcpp::downCast<ConditionalAndContext *>(_localctx)->s8);
+      setState(47);
+      antlrcpp::downCast<ConditionalAndContext *>(_localctx)->relationContext = relation(0);
+      antlrcpp::downCast<ConditionalAndContext *>(_localctx)->e1.push_back(antlrcpp::downCast<ConditionalAndContext *>(_localctx)->relationContext);
+      setState(52);
+      _errHandler->sync(this);
+      _la = _input->LA(1);
+    }
+   
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+
+  return _localctx;
+}
+
+//----------------- RelationContext ------------------------------------------------------------------
+
+CelParser::RelationContext::RelationContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+CelParser::CalcContext* CelParser::RelationContext::calc() {
+  return getRuleContext<CelParser::CalcContext>(0);
+}
+
+std::vector<CelParser::RelationContext *> CelParser::RelationContext::relation() {
+  return getRuleContexts<CelParser::RelationContext>();
+}
+
+CelParser::RelationContext* CelParser::RelationContext::relation(size_t i) {
+  return getRuleContext<CelParser::RelationContext>(i);
+}
+
+tree::TerminalNode* CelParser::RelationContext::LESS() {
+  return getToken(CelParser::LESS, 0);
+}
+
+tree::TerminalNode* CelParser::RelationContext::LESS_EQUALS() {
+  return getToken(CelParser::LESS_EQUALS, 0);
+}
+
+tree::TerminalNode* CelParser::RelationContext::GREATER_EQUALS() {
+  return getToken(CelParser::GREATER_EQUALS, 0);
+}
+
+tree::TerminalNode* CelParser::RelationContext::GREATER() {
+  return getToken(CelParser::GREATER, 0);
+}
+
+tree::TerminalNode* CelParser::RelationContext::EQUALS() {
+  return getToken(CelParser::EQUALS, 0);
+}
+
+tree::TerminalNode* CelParser::RelationContext::NOT_EQUALS() {
+  return getToken(CelParser::NOT_EQUALS, 0);
+}
+
+
+size_t CelParser::RelationContext::getRuleIndex() const {
+  return CelParser::RuleRelation;
+}
+
+
+std::any CelParser::RelationContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitRelation(this);
+  else
+    return visitor->visitChildren(this);
+}
+
+
+CelParser::RelationContext* CelParser::relation() {
+   return relation(0);
+}
+
+CelParser::RelationContext* CelParser::relation(int precedence) {
+  ParserRuleContext *parentContext = _ctx;
+  size_t parentState = getState();
+  CelParser::RelationContext *_localctx = _tracker.createInstance<RelationContext>(_ctx, parentState);
+  CelParser::RelationContext *previousContext = _localctx;
+  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
+  size_t startState = 8;
+  enterRecursionRule(_localctx, 8, CelParser::RuleRelation, precedence);
+
+    size_t _la = 0;
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    unrollRecursionContexts(parentContext);
+  });
+  try {
+    size_t alt;
+    enterOuterAlt(_localctx, 1);
+    setState(54);
+    calc(0);
+    _ctx->stop = _input->LT(-1);
+    setState(61);
+    _errHandler->sync(this);
+    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
+    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
+      if (alt == 1) {
+        if (!_parseListeners.empty())
+          triggerExitRuleEvent();
+        previousContext = _localctx;
+        _localctx = _tracker.createInstance<RelationContext>(parentContext, parentState);
+        pushNewRecursionContext(_localctx, startState, RuleRelation);
+        setState(56);
+
+        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
+        setState(57);
+        antlrcpp::downCast<RelationContext *>(_localctx)->op = _input->LT(1);
+        _la = _input->LA(1);
+        if (!((((_la & ~ 0x3fULL) == 0) &&
+          ((1ULL << _la) & ((1ULL << CelParser::T__0)
+          | (1ULL << CelParser::EQUALS)
+          | (1ULL << CelParser::NOT_EQUALS)
+          | (1ULL << CelParser::LESS)
+          | (1ULL << CelParser::LESS_EQUALS)
+          | (1ULL << CelParser::GREATER_EQUALS)
+          | (1ULL << CelParser::GREATER))) != 0))) {
+          antlrcpp::downCast<RelationContext *>(_localctx)->op = _errHandler->recoverInline(this);
+        }
+        else {
+          _errHandler->reportMatch(this);
+          consume();
+        }
+        setState(58);
+        relation(2); 
+      }
+      setState(63);
+      _errHandler->sync(this);
+      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
+    }
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+  return _localctx;
+}
+
+//----------------- CalcContext ------------------------------------------------------------------
+
+CelParser::CalcContext::CalcContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+CelParser::UnaryContext* CelParser::CalcContext::unary() {
+  return getRuleContext<CelParser::UnaryContext>(0);
+}
+
+std::vector<CelParser::CalcContext *> CelParser::CalcContext::calc() {
+  return getRuleContexts<CelParser::CalcContext>();
+}
+
+CelParser::CalcContext* CelParser::CalcContext::calc(size_t i) {
+  return getRuleContext<CelParser::CalcContext>(i);
+}
+
+tree::TerminalNode* CelParser::CalcContext::STAR() {
+  return getToken(CelParser::STAR, 0);
+}
+
+tree::TerminalNode* CelParser::CalcContext::SLASH() {
+  return getToken(CelParser::SLASH, 0);
+}
+
+tree::TerminalNode* CelParser::CalcContext::PERCENT() {
+  return getToken(CelParser::PERCENT, 0);
+}
+
+tree::TerminalNode* CelParser::CalcContext::PLUS() {
+  return getToken(CelParser::PLUS, 0);
+}
+
+tree::TerminalNode* CelParser::CalcContext::MINUS() {
+  return getToken(CelParser::MINUS, 0);
+}
+
+
+size_t CelParser::CalcContext::getRuleIndex() const {
+  return CelParser::RuleCalc;
+}
+
+
+std::any CelParser::CalcContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitCalc(this);
+  else
+    return visitor->visitChildren(this);
+}
+
+
+CelParser::CalcContext* CelParser::calc() {
+   return calc(0);
+}
+
+CelParser::CalcContext* CelParser::calc(int precedence) {
+  ParserRuleContext *parentContext = _ctx;
+  size_t parentState = getState();
+  CelParser::CalcContext *_localctx = _tracker.createInstance<CalcContext>(_ctx, parentState);
+  CelParser::CalcContext *previousContext = _localctx;
+  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
+  size_t startState = 10;
+  enterRecursionRule(_localctx, 10, CelParser::RuleCalc, precedence);
+
+    size_t _la = 0;
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    unrollRecursionContexts(parentContext);
+  });
+  try {
+    size_t alt;
+    enterOuterAlt(_localctx, 1);
+    setState(65);
+    unary();
+    _ctx->stop = _input->LT(-1);
+    setState(75);
+    _errHandler->sync(this);
+    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
+    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
+      if (alt == 1) {
+        if (!_parseListeners.empty())
+          triggerExitRuleEvent();
+        previousContext = _localctx;
+        setState(73);
+        _errHandler->sync(this);
+        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
+        case 1: {
+          _localctx = _tracker.createInstance<CalcContext>(parentContext, parentState);
+          pushNewRecursionContext(_localctx, startState, RuleCalc);
+          setState(67);
+
+          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
+          setState(68);
+          antlrcpp::downCast<CalcContext *>(_localctx)->op = _input->LT(1);
+          _la = _input->LA(1);
+          if (!((((_la & ~ 0x3fULL) == 0) &&
+            ((1ULL << _la) & ((1ULL << CelParser::STAR)
+            | (1ULL << CelParser::SLASH)
+            | (1ULL << CelParser::PERCENT))) != 0))) {
+            antlrcpp::downCast<CalcContext *>(_localctx)->op = _errHandler->recoverInline(this);
+          }
+          else {
+            _errHandler->reportMatch(this);
+            consume();
+          }
+          setState(69);
+          calc(3);
+          break;
+        }
+
+        case 2: {
+          _localctx = _tracker.createInstance<CalcContext>(parentContext, parentState);
+          pushNewRecursionContext(_localctx, startState, RuleCalc);
+          setState(70);
+
+          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
+          setState(71);
+          antlrcpp::downCast<CalcContext *>(_localctx)->op = _input->LT(1);
+          _la = _input->LA(1);
+          if (!(_la == CelParser::MINUS
+
+          || _la == CelParser::PLUS)) {
+            antlrcpp::downCast<CalcContext *>(_localctx)->op = _errHandler->recoverInline(this);
+          }
+          else {
+            _errHandler->reportMatch(this);
+            consume();
+          }
+          setState(72);
+          calc(2);
+          break;
+        }
+
+        default:
+          break;
+        } 
+      }
+      setState(77);
+      _errHandler->sync(this);
+      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
+    }
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+  return _localctx;
+}
+
+//----------------- UnaryContext ------------------------------------------------------------------
+
+CelParser::UnaryContext::UnaryContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+
+size_t CelParser::UnaryContext::getRuleIndex() const {
+  return CelParser::RuleUnary;
+}
+
+void CelParser::UnaryContext::copyFrom(UnaryContext *ctx) {
+  ParserRuleContext::copyFrom(ctx);
+}
+
+//----------------- LogicalNotContext ------------------------------------------------------------------
+
+CelParser::MemberContext* CelParser::LogicalNotContext::member() {
+  return getRuleContext<CelParser::MemberContext>(0);
+}
+
+std::vector<tree::TerminalNode *> CelParser::LogicalNotContext::EXCLAM() {
+  return getTokens(CelParser::EXCLAM);
+}
+
+tree::TerminalNode* CelParser::LogicalNotContext::EXCLAM(size_t i) {
+  return getToken(CelParser::EXCLAM, i);
+}
+
+CelParser::LogicalNotContext::LogicalNotContext(UnaryContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::LogicalNotContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitLogicalNot(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- MemberExprContext ------------------------------------------------------------------
+
+CelParser::MemberContext* CelParser::MemberExprContext::member() {
+  return getRuleContext<CelParser::MemberContext>(0);
+}
+
+CelParser::MemberExprContext::MemberExprContext(UnaryContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::MemberExprContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitMemberExpr(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- NegateContext ------------------------------------------------------------------
+
+CelParser::MemberContext* CelParser::NegateContext::member() {
+  return getRuleContext<CelParser::MemberContext>(0);
+}
+
+std::vector<tree::TerminalNode *> CelParser::NegateContext::MINUS() {
+  return getTokens(CelParser::MINUS);
+}
+
+tree::TerminalNode* CelParser::NegateContext::MINUS(size_t i) {
+  return getToken(CelParser::MINUS, i);
+}
+
+CelParser::NegateContext::NegateContext(UnaryContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::NegateContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitNegate(this);
+  else
+    return visitor->visitChildren(this);
+}
+CelParser::UnaryContext* CelParser::unary() {
+  UnaryContext *_localctx = _tracker.createInstance<UnaryContext>(_ctx, getState());
+  enterRule(_localctx, 12, CelParser::RuleUnary);
+  size_t _la = 0;
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    exitRule();
+  });
+  try {
+    size_t alt;
+    setState(91);
+    _errHandler->sync(this);
+    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
+    case 1: {
+      _localctx = _tracker.createInstance<CelParser::MemberExprContext>(_localctx);
+      enterOuterAlt(_localctx, 1);
+      setState(78);
+      member(0);
+      break;
+    }
+
+    case 2: {
+      _localctx = _tracker.createInstance<CelParser::LogicalNotContext>(_localctx);
+      enterOuterAlt(_localctx, 2);
+      setState(80); 
+      _errHandler->sync(this);
+      _la = _input->LA(1);
+      do {
+        setState(79);
+        antlrcpp::downCast<LogicalNotContext *>(_localctx)->s19 = match(CelParser::EXCLAM);
+        antlrcpp::downCast<LogicalNotContext *>(_localctx)->ops.push_back(antlrcpp::downCast<LogicalNotContext *>(_localctx)->s19);
+        setState(82); 
+        _errHandler->sync(this);
+        _la = _input->LA(1);
+      } while (_la == CelParser::EXCLAM);
+      setState(84);
+      member(0);
+      break;
+    }
+
+    case 3: {
+      _localctx = _tracker.createInstance<CelParser::NegateContext>(_localctx);
+      enterOuterAlt(_localctx, 3);
+      setState(86); 
+      _errHandler->sync(this);
+      alt = 1;
+      do {
+        switch (alt) {
+          case 1: {
+                setState(85);
+                antlrcpp::downCast<NegateContext *>(_localctx)->s18 = match(CelParser::MINUS);
+                antlrcpp::downCast<NegateContext *>(_localctx)->ops.push_back(antlrcpp::downCast<NegateContext *>(_localctx)->s18);
+                break;
+              }
+
+        default:
+          throw NoViableAltException(this);
+        }
+        setState(88); 
+        _errHandler->sync(this);
+        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
+      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
+      setState(90);
+      member(0);
+      break;
+    }
+
+    default:
+      break;
+    }
+   
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+
+  return _localctx;
+}
+
+//----------------- MemberContext ------------------------------------------------------------------
+
+CelParser::MemberContext::MemberContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+
+size_t CelParser::MemberContext::getRuleIndex() const {
+  return CelParser::RuleMember;
+}
+
+void CelParser::MemberContext::copyFrom(MemberContext *ctx) {
+  ParserRuleContext::copyFrom(ctx);
+}
+
+//----------------- SelectOrCallContext ------------------------------------------------------------------
+
+CelParser::MemberContext* CelParser::SelectOrCallContext::member() {
+  return getRuleContext<CelParser::MemberContext>(0);
+}
+
+tree::TerminalNode* CelParser::SelectOrCallContext::DOT() {
+  return getToken(CelParser::DOT, 0);
+}
+
+tree::TerminalNode* CelParser::SelectOrCallContext::IDENTIFIER() {
+  return getToken(CelParser::IDENTIFIER, 0);
+}
+
+tree::TerminalNode* CelParser::SelectOrCallContext::RPAREN() {
+  return getToken(CelParser::RPAREN, 0);
+}
+
+tree::TerminalNode* CelParser::SelectOrCallContext::LPAREN() {
+  return getToken(CelParser::LPAREN, 0);
+}
+
+CelParser::ExprListContext* CelParser::SelectOrCallContext::exprList() {
+  return getRuleContext<CelParser::ExprListContext>(0);
+}
+
+CelParser::SelectOrCallContext::SelectOrCallContext(MemberContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::SelectOrCallContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitSelectOrCall(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- PrimaryExprContext ------------------------------------------------------------------
+
+CelParser::PrimaryContext* CelParser::PrimaryExprContext::primary() {
+  return getRuleContext<CelParser::PrimaryContext>(0);
+}
+
+CelParser::PrimaryExprContext::PrimaryExprContext(MemberContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::PrimaryExprContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitPrimaryExpr(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- IndexContext ------------------------------------------------------------------
+
+CelParser::MemberContext* CelParser::IndexContext::member() {
+  return getRuleContext<CelParser::MemberContext>(0);
+}
+
+tree::TerminalNode* CelParser::IndexContext::RPRACKET() {
+  return getToken(CelParser::RPRACKET, 0);
+}
+
+tree::TerminalNode* CelParser::IndexContext::LBRACKET() {
+  return getToken(CelParser::LBRACKET, 0);
+}
+
+CelParser::ExprContext* CelParser::IndexContext::expr() {
+  return getRuleContext<CelParser::ExprContext>(0);
+}
+
+CelParser::IndexContext::IndexContext(MemberContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::IndexContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitIndex(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- CreateMessageContext ------------------------------------------------------------------
+
+CelParser::MemberContext* CelParser::CreateMessageContext::member() {
+  return getRuleContext<CelParser::MemberContext>(0);
+}
+
+tree::TerminalNode* CelParser::CreateMessageContext::RBRACE() {
+  return getToken(CelParser::RBRACE, 0);
+}
+
+tree::TerminalNode* CelParser::CreateMessageContext::LBRACE() {
+  return getToken(CelParser::LBRACE, 0);
+}
+
+tree::TerminalNode* CelParser::CreateMessageContext::COMMA() {
+  return getToken(CelParser::COMMA, 0);
+}
+
+CelParser::FieldInitializerListContext* CelParser::CreateMessageContext::fieldInitializerList() {
+  return getRuleContext<CelParser::FieldInitializerListContext>(0);
+}
+
+CelParser::CreateMessageContext::CreateMessageContext(MemberContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::CreateMessageContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitCreateMessage(this);
+  else
+    return visitor->visitChildren(this);
+}
+
+CelParser::MemberContext* CelParser::member() {
+   return member(0);
+}
+
+CelParser::MemberContext* CelParser::member(int precedence) {
+  ParserRuleContext *parentContext = _ctx;
+  size_t parentState = getState();
+  CelParser::MemberContext *_localctx = _tracker.createInstance<MemberContext>(_ctx, parentState);
+  CelParser::MemberContext *previousContext = _localctx;
+  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
+  size_t startState = 14;
+  enterRecursionRule(_localctx, 14, CelParser::RuleMember, precedence);
+
+    size_t _la = 0;
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    unrollRecursionContexts(parentContext);
+  });
+  try {
+    size_t alt;
+    enterOuterAlt(_localctx, 1);
+    _localctx = _tracker.createInstance<PrimaryExprContext>(_localctx);
+    _ctx = _localctx;
+    previousContext = _localctx;
+
+    setState(94);
+    primary();
+    _ctx->stop = _input->LT(-1);
+    setState(122);
+    _errHandler->sync(this);
+    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
+    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
+      if (alt == 1) {
+        if (!_parseListeners.empty())
+          triggerExitRuleEvent();
+        previousContext = _localctx;
+        setState(120);
+        _errHandler->sync(this);
+        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
+        case 1: {
+          auto newContext = _tracker.createInstance<SelectOrCallContext>(_tracker.createInstance<MemberContext>(parentContext, parentState));
+          _localctx = newContext;
+          pushNewRecursionContext(newContext, startState, RuleMember);
+          setState(96);
+
+          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
+          setState(97);
+          antlrcpp::downCast<SelectOrCallContext *>(_localctx)->op = match(CelParser::DOT);
+          setState(98);
+          antlrcpp::downCast<SelectOrCallContext *>(_localctx)->id = match(CelParser::IDENTIFIER);
+          setState(104);
+          _errHandler->sync(this);
+
+          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
+          case 1: {
+            setState(99);
+            antlrcpp::downCast<SelectOrCallContext *>(_localctx)->open = match(CelParser::LPAREN);
+            setState(101);
+            _errHandler->sync(this);
+
+            _la = _input->LA(1);
+            if ((((_la & ~ 0x3fULL) == 0) &&
+              ((1ULL << _la) & ((1ULL << CelParser::LBRACKET)
+              | (1ULL << CelParser::LBRACE)
+              | (1ULL << CelParser::LPAREN)
+              | (1ULL << CelParser::DOT)
+              | (1ULL << CelParser::MINUS)
+              | (1ULL << CelParser::EXCLAM)
+              | (1ULL << CelParser::CEL_TRUE)
+              | (1ULL << CelParser::CEL_FALSE)
+              | (1ULL << CelParser::NUL)
+              | (1ULL << CelParser::NUM_FLOAT)
+              | (1ULL << CelParser::NUM_INT)
+              | (1ULL << CelParser::NUM_UINT)
+              | (1ULL << CelParser::STRING)
+              | (1ULL << CelParser::BYTES)
+              | (1ULL << CelParser::IDENTIFIER))) != 0)) {
+              setState(100);
+              antlrcpp::downCast<SelectOrCallContext *>(_localctx)->args = exprList();
+            }
+            setState(103);
+            match(CelParser::RPAREN);
+            break;
+          }
+
+          default:
+            break;
+          }
+          break;
+        }
+
+        case 2: {
+          auto newContext = _tracker.createInstance<IndexContext>(_tracker.createInstance<MemberContext>(parentContext, parentState));
+          _localctx = newContext;
+          pushNewRecursionContext(newContext, startState, RuleMember);
+          setState(106);
+
+          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
+          setState(107);
+          antlrcpp::downCast<IndexContext *>(_localctx)->op = match(CelParser::LBRACKET);
+          setState(108);
+          antlrcpp::downCast<IndexContext *>(_localctx)->index = expr();
+          setState(109);
+          match(CelParser::RPRACKET);
+          break;
+        }
+
+        case 3: {
+          auto newContext = _tracker.createInstance<CreateMessageContext>(_tracker.createInstance<MemberContext>(parentContext, parentState));
+          _localctx = newContext;
+          pushNewRecursionContext(newContext, startState, RuleMember);
+          setState(111);
+
+          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
+          setState(112);
+          antlrcpp::downCast<CreateMessageContext *>(_localctx)->op = match(CelParser::LBRACE);
+          setState(114);
+          _errHandler->sync(this);
+
+          _la = _input->LA(1);
+          if (_la == CelParser::IDENTIFIER) {
+            setState(113);
+            antlrcpp::downCast<CreateMessageContext *>(_localctx)->entries = fieldInitializerList();
+          }
+          setState(117);
+          _errHandler->sync(this);
+
+          _la = _input->LA(1);
+          if (_la == CelParser::COMMA) {
+            setState(116);
+            match(CelParser::COMMA);
+          }
+          setState(119);
+          match(CelParser::RBRACE);
+          break;
+        }
+
+        default:
+          break;
+        } 
+      }
+      setState(124);
+      _errHandler->sync(this);
+      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
+    }
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+  return _localctx;
+}
+
+//----------------- PrimaryContext ------------------------------------------------------------------
+
+CelParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+
+size_t CelParser::PrimaryContext::getRuleIndex() const {
+  return CelParser::RulePrimary;
+}
+
+void CelParser::PrimaryContext::copyFrom(PrimaryContext *ctx) {
+  ParserRuleContext::copyFrom(ctx);
+}
+
+//----------------- CreateListContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::CreateListContext::RPRACKET() {
+  return getToken(CelParser::RPRACKET, 0);
+}
+
+tree::TerminalNode* CelParser::CreateListContext::LBRACKET() {
+  return getToken(CelParser::LBRACKET, 0);
+}
+
+tree::TerminalNode* CelParser::CreateListContext::COMMA() {
+  return getToken(CelParser::COMMA, 0);
+}
+
+CelParser::ExprListContext* CelParser::CreateListContext::exprList() {
+  return getRuleContext<CelParser::ExprListContext>(0);
+}
+
+CelParser::CreateListContext::CreateListContext(PrimaryContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::CreateListContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitCreateList(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- CreateStructContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::CreateStructContext::RBRACE() {
+  return getToken(CelParser::RBRACE, 0);
+}
+
+tree::TerminalNode* CelParser::CreateStructContext::LBRACE() {
+  return getToken(CelParser::LBRACE, 0);
+}
+
+tree::TerminalNode* CelParser::CreateStructContext::COMMA() {
+  return getToken(CelParser::COMMA, 0);
+}
+
+CelParser::MapInitializerListContext* CelParser::CreateStructContext::mapInitializerList() {
+  return getRuleContext<CelParser::MapInitializerListContext>(0);
+}
+
+CelParser::CreateStructContext::CreateStructContext(PrimaryContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::CreateStructContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitCreateStruct(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- ConstantLiteralContext ------------------------------------------------------------------
+
+CelParser::LiteralContext* CelParser::ConstantLiteralContext::literal() {
+  return getRuleContext<CelParser::LiteralContext>(0);
+}
+
+CelParser::ConstantLiteralContext::ConstantLiteralContext(PrimaryContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::ConstantLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitConstantLiteral(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- NestedContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::NestedContext::LPAREN() {
+  return getToken(CelParser::LPAREN, 0);
+}
+
+tree::TerminalNode* CelParser::NestedContext::RPAREN() {
+  return getToken(CelParser::RPAREN, 0);
+}
+
+CelParser::ExprContext* CelParser::NestedContext::expr() {
+  return getRuleContext<CelParser::ExprContext>(0);
+}
+
+CelParser::NestedContext::NestedContext(PrimaryContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::NestedContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitNested(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- IdentOrGlobalCallContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::IdentOrGlobalCallContext::IDENTIFIER() {
+  return getToken(CelParser::IDENTIFIER, 0);
+}
+
+tree::TerminalNode* CelParser::IdentOrGlobalCallContext::RPAREN() {
+  return getToken(CelParser::RPAREN, 0);
+}
+
+tree::TerminalNode* CelParser::IdentOrGlobalCallContext::DOT() {
+  return getToken(CelParser::DOT, 0);
+}
+
+tree::TerminalNode* CelParser::IdentOrGlobalCallContext::LPAREN() {
+  return getToken(CelParser::LPAREN, 0);
+}
+
+CelParser::ExprListContext* CelParser::IdentOrGlobalCallContext::exprList() {
+  return getRuleContext<CelParser::ExprListContext>(0);
+}
+
+CelParser::IdentOrGlobalCallContext::IdentOrGlobalCallContext(PrimaryContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::IdentOrGlobalCallContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitIdentOrGlobalCall(this);
+  else
+    return visitor->visitChildren(this);
+}
+CelParser::PrimaryContext* CelParser::primary() {
+  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
+  enterRule(_localctx, 16, CelParser::RulePrimary);
+  size_t _la = 0;
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    exitRule();
+  });
+  try {
+    setState(157);
+    _errHandler->sync(this);
+    switch (_input->LA(1)) {
+      case CelParser::DOT:
+      case CelParser::IDENTIFIER: {
+        _localctx = _tracker.createInstance<CelParser::IdentOrGlobalCallContext>(_localctx);
+        enterOuterAlt(_localctx, 1);
+        setState(126);
+        _errHandler->sync(this);
+
+        _la = _input->LA(1);
+        if (_la == CelParser::DOT) {
+          setState(125);
+          antlrcpp::downCast<IdentOrGlobalCallContext *>(_localctx)->leadingDot = match(CelParser::DOT);
+        }
+        setState(128);
+        antlrcpp::downCast<IdentOrGlobalCallContext *>(_localctx)->id = match(CelParser::IDENTIFIER);
+        setState(134);
+        _errHandler->sync(this);
+
+        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
+        case 1: {
+          setState(129);
+          antlrcpp::downCast<IdentOrGlobalCallContext *>(_localctx)->op = match(CelParser::LPAREN);
+          setState(131);
+          _errHandler->sync(this);
+
+          _la = _input->LA(1);
+          if ((((_la & ~ 0x3fULL) == 0) &&
+            ((1ULL << _la) & ((1ULL << CelParser::LBRACKET)
+            | (1ULL << CelParser::LBRACE)
+            | (1ULL << CelParser::LPAREN)
+            | (1ULL << CelParser::DOT)
+            | (1ULL << CelParser::MINUS)
+            | (1ULL << CelParser::EXCLAM)
+            | (1ULL << CelParser::CEL_TRUE)
+            | (1ULL << CelParser::CEL_FALSE)
+            | (1ULL << CelParser::NUL)
+            | (1ULL << CelParser::NUM_FLOAT)
+            | (1ULL << CelParser::NUM_INT)
+            | (1ULL << CelParser::NUM_UINT)
+            | (1ULL << CelParser::STRING)
+            | (1ULL << CelParser::BYTES)
+            | (1ULL << CelParser::IDENTIFIER))) != 0)) {
+            setState(130);
+            antlrcpp::downCast<IdentOrGlobalCallContext *>(_localctx)->args = exprList();
+          }
+          setState(133);
+          match(CelParser::RPAREN);
+          break;
+        }
+
+        default:
+          break;
+        }
+        break;
+      }
+
+      case CelParser::LPAREN: {
+        _localctx = _tracker.createInstance<CelParser::NestedContext>(_localctx);
+        enterOuterAlt(_localctx, 2);
+        setState(136);
+        match(CelParser::LPAREN);
+        setState(137);
+        antlrcpp::downCast<NestedContext *>(_localctx)->e = expr();
+        setState(138);
+        match(CelParser::RPAREN);
+        break;
+      }
+
+      case CelParser::LBRACKET: {
+        _localctx = _tracker.createInstance<CelParser::CreateListContext>(_localctx);
+        enterOuterAlt(_localctx, 3);
+        setState(140);
+        antlrcpp::downCast<CreateListContext *>(_localctx)->op = match(CelParser::LBRACKET);
+        setState(142);
+        _errHandler->sync(this);
+
+        _la = _input->LA(1);
+        if ((((_la & ~ 0x3fULL) == 0) &&
+          ((1ULL << _la) & ((1ULL << CelParser::LBRACKET)
+          | (1ULL << CelParser::LBRACE)
+          | (1ULL << CelParser::LPAREN)
+          | (1ULL << CelParser::DOT)
+          | (1ULL << CelParser::MINUS)
+          | (1ULL << CelParser::EXCLAM)
+          | (1ULL << CelParser::CEL_TRUE)
+          | (1ULL << CelParser::CEL_FALSE)
+          | (1ULL << CelParser::NUL)
+          | (1ULL << CelParser::NUM_FLOAT)
+          | (1ULL << CelParser::NUM_INT)
+          | (1ULL << CelParser::NUM_UINT)
+          | (1ULL << CelParser::STRING)
+          | (1ULL << CelParser::BYTES)
+          | (1ULL << CelParser::IDENTIFIER))) != 0)) {
+          setState(141);
+          antlrcpp::downCast<CreateListContext *>(_localctx)->elems = exprList();
+        }
+        setState(145);
+        _errHandler->sync(this);
+
+        _la = _input->LA(1);
+        if (_la == CelParser::COMMA) {
+          setState(144);
+          match(CelParser::COMMA);
+        }
+        setState(147);
+        match(CelParser::RPRACKET);
+        break;
+      }
+
+      case CelParser::LBRACE: {
+        _localctx = _tracker.createInstance<CelParser::CreateStructContext>(_localctx);
+        enterOuterAlt(_localctx, 4);
+        setState(148);
+        antlrcpp::downCast<CreateStructContext *>(_localctx)->op = match(CelParser::LBRACE);
+        setState(150);
+        _errHandler->sync(this);
+
+        _la = _input->LA(1);
+        if ((((_la & ~ 0x3fULL) == 0) &&
+          ((1ULL << _la) & ((1ULL << CelParser::LBRACKET)
+          | (1ULL << CelParser::LBRACE)
+          | (1ULL << CelParser::LPAREN)
+          | (1ULL << CelParser::DOT)
+          | (1ULL << CelParser::MINUS)
+          | (1ULL << CelParser::EXCLAM)
+          | (1ULL << CelParser::CEL_TRUE)
+          | (1ULL << CelParser::CEL_FALSE)
+          | (1ULL << CelParser::NUL)
+          | (1ULL << CelParser::NUM_FLOAT)
+          | (1ULL << CelParser::NUM_INT)
+          | (1ULL << CelParser::NUM_UINT)
+          | (1ULL << CelParser::STRING)
+          | (1ULL << CelParser::BYTES)
+          | (1ULL << CelParser::IDENTIFIER))) != 0)) {
+          setState(149);
+          antlrcpp::downCast<CreateStructContext *>(_localctx)->entries = mapInitializerList();
+        }
+        setState(153);
+        _errHandler->sync(this);
+
+        _la = _input->LA(1);
+        if (_la == CelParser::COMMA) {
+          setState(152);
+          match(CelParser::COMMA);
+        }
+        setState(155);
+        match(CelParser::RBRACE);
+        break;
+      }
+
+      case CelParser::MINUS:
+      case CelParser::CEL_TRUE:
+      case CelParser::CEL_FALSE:
+      case CelParser::NUL:
+      case CelParser::NUM_FLOAT:
+      case CelParser::NUM_INT:
+      case CelParser::NUM_UINT:
+      case CelParser::STRING:
+      case CelParser::BYTES: {
+        _localctx = _tracker.createInstance<CelParser::ConstantLiteralContext>(_localctx);
+        enterOuterAlt(_localctx, 5);
+        setState(156);
+        literal();
+        break;
+      }
+
+    default:
+      throw NoViableAltException(this);
+    }
+   
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+
+  return _localctx;
+}
+
+//----------------- ExprListContext ------------------------------------------------------------------
+
+CelParser::ExprListContext::ExprListContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+std::vector<CelParser::ExprContext *> CelParser::ExprListContext::expr() {
+  return getRuleContexts<CelParser::ExprContext>();
+}
+
+CelParser::ExprContext* CelParser::ExprListContext::expr(size_t i) {
+  return getRuleContext<CelParser::ExprContext>(i);
+}
+
+std::vector<tree::TerminalNode *> CelParser::ExprListContext::COMMA() {
+  return getTokens(CelParser::COMMA);
+}
+
+tree::TerminalNode* CelParser::ExprListContext::COMMA(size_t i) {
+  return getToken(CelParser::COMMA, i);
+}
+
+
+size_t CelParser::ExprListContext::getRuleIndex() const {
+  return CelParser::RuleExprList;
+}
+
+
+std::any CelParser::ExprListContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitExprList(this);
+  else
+    return visitor->visitChildren(this);
+}
+
+CelParser::ExprListContext* CelParser::exprList() {
+  ExprListContext *_localctx = _tracker.createInstance<ExprListContext>(_ctx, getState());
+  enterRule(_localctx, 18, CelParser::RuleExprList);
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    exitRule();
+  });
+  try {
+    size_t alt;
+    enterOuterAlt(_localctx, 1);
+    setState(159);
+    antlrcpp::downCast<ExprListContext *>(_localctx)->exprContext = expr();
+    antlrcpp::downCast<ExprListContext *>(_localctx)->e.push_back(antlrcpp::downCast<ExprListContext *>(_localctx)->exprContext);
+    setState(164);
+    _errHandler->sync(this);
+    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx);
+    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
+      if (alt == 1) {
+        setState(160);
+        match(CelParser::COMMA);
+        setState(161);
+        antlrcpp::downCast<ExprListContext *>(_localctx)->exprContext = expr();
+        antlrcpp::downCast<ExprListContext *>(_localctx)->e.push_back(antlrcpp::downCast<ExprListContext *>(_localctx)->exprContext); 
+      }
+      setState(166);
+      _errHandler->sync(this);
+      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx);
+    }
+   
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+
+  return _localctx;
+}
+
+//----------------- FieldInitializerListContext ------------------------------------------------------------------
+
+CelParser::FieldInitializerListContext::FieldInitializerListContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+std::vector<tree::TerminalNode *> CelParser::FieldInitializerListContext::IDENTIFIER() {
+  return getTokens(CelParser::IDENTIFIER);
+}
+
+tree::TerminalNode* CelParser::FieldInitializerListContext::IDENTIFIER(size_t i) {
+  return getToken(CelParser::IDENTIFIER, i);
+}
+
+std::vector<tree::TerminalNode *> CelParser::FieldInitializerListContext::COLON() {
+  return getTokens(CelParser::COLON);
+}
+
+tree::TerminalNode* CelParser::FieldInitializerListContext::COLON(size_t i) {
+  return getToken(CelParser::COLON, i);
+}
+
+std::vector<CelParser::ExprContext *> CelParser::FieldInitializerListContext::expr() {
+  return getRuleContexts<CelParser::ExprContext>();
+}
+
+CelParser::ExprContext* CelParser::FieldInitializerListContext::expr(size_t i) {
+  return getRuleContext<CelParser::ExprContext>(i);
+}
+
+std::vector<tree::TerminalNode *> CelParser::FieldInitializerListContext::COMMA() {
+  return getTokens(CelParser::COMMA);
+}
+
+tree::TerminalNode* CelParser::FieldInitializerListContext::COMMA(size_t i) {
+  return getToken(CelParser::COMMA, i);
+}
+
+
+size_t CelParser::FieldInitializerListContext::getRuleIndex() const {
+  return CelParser::RuleFieldInitializerList;
+}
+
+
+std::any CelParser::FieldInitializerListContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitFieldInitializerList(this);
+  else
+    return visitor->visitChildren(this);
+}
+
+CelParser::FieldInitializerListContext* CelParser::fieldInitializerList() {
+  FieldInitializerListContext *_localctx = _tracker.createInstance<FieldInitializerListContext>(_ctx, getState());
+  enterRule(_localctx, 20, CelParser::RuleFieldInitializerList);
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    exitRule();
+  });
+  try {
+    size_t alt;
+    enterOuterAlt(_localctx, 1);
+    setState(167);
+    antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->identifierToken = match(CelParser::IDENTIFIER);
+    antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->fields.push_back(antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->identifierToken);
+    setState(168);
+    antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->s21 = match(CelParser::COLON);
+    antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->cols.push_back(antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->s21);
+    setState(169);
+    antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->exprContext = expr();
+    antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->values.push_back(antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->exprContext);
+    setState(176);
+    _errHandler->sync(this);
+    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx);
+    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
+      if (alt == 1) {
+        setState(170);
+        match(CelParser::COMMA);
+        setState(171);
+        antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->identifierToken = match(CelParser::IDENTIFIER);
+        antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->fields.push_back(antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->identifierToken);
+        setState(172);
+        antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->s21 = match(CelParser::COLON);
+        antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->cols.push_back(antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->s21);
+        setState(173);
+        antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->exprContext = expr();
+        antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->values.push_back(antlrcpp::downCast<FieldInitializerListContext *>(_localctx)->exprContext); 
+      }
+      setState(178);
+      _errHandler->sync(this);
+      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx);
+    }
+   
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+
+  return _localctx;
+}
+
+//----------------- MapInitializerListContext ------------------------------------------------------------------
+
+CelParser::MapInitializerListContext::MapInitializerListContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+std::vector<CelParser::ExprContext *> CelParser::MapInitializerListContext::expr() {
+  return getRuleContexts<CelParser::ExprContext>();
+}
+
+CelParser::ExprContext* CelParser::MapInitializerListContext::expr(size_t i) {
+  return getRuleContext<CelParser::ExprContext>(i);
+}
+
+std::vector<tree::TerminalNode *> CelParser::MapInitializerListContext::COLON() {
+  return getTokens(CelParser::COLON);
+}
+
+tree::TerminalNode* CelParser::MapInitializerListContext::COLON(size_t i) {
+  return getToken(CelParser::COLON, i);
+}
+
+std::vector<tree::TerminalNode *> CelParser::MapInitializerListContext::COMMA() {
+  return getTokens(CelParser::COMMA);
+}
+
+tree::TerminalNode* CelParser::MapInitializerListContext::COMMA(size_t i) {
+  return getToken(CelParser::COMMA, i);
+}
+
+
+size_t CelParser::MapInitializerListContext::getRuleIndex() const {
+  return CelParser::RuleMapInitializerList;
+}
+
+
+std::any CelParser::MapInitializerListContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitMapInitializerList(this);
+  else
+    return visitor->visitChildren(this);
+}
+
+CelParser::MapInitializerListContext* CelParser::mapInitializerList() {
+  MapInitializerListContext *_localctx = _tracker.createInstance<MapInitializerListContext>(_ctx, getState());
+  enterRule(_localctx, 22, CelParser::RuleMapInitializerList);
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    exitRule();
+  });
+  try {
+    size_t alt;
+    enterOuterAlt(_localctx, 1);
+    setState(179);
+    antlrcpp::downCast<MapInitializerListContext *>(_localctx)->exprContext = expr();
+    antlrcpp::downCast<MapInitializerListContext *>(_localctx)->keys.push_back(antlrcpp::downCast<MapInitializerListContext *>(_localctx)->exprContext);
+    setState(180);
+    antlrcpp::downCast<MapInitializerListContext *>(_localctx)->s21 = match(CelParser::COLON);
+    antlrcpp::downCast<MapInitializerListContext *>(_localctx)->cols.push_back(antlrcpp::downCast<MapInitializerListContext *>(_localctx)->s21);
+    setState(181);
+    antlrcpp::downCast<MapInitializerListContext *>(_localctx)->exprContext = expr();
+    antlrcpp::downCast<MapInitializerListContext *>(_localctx)->values.push_back(antlrcpp::downCast<MapInitializerListContext *>(_localctx)->exprContext);
+    setState(189);
+    _errHandler->sync(this);
+    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
+    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
+      if (alt == 1) {
+        setState(182);
+        match(CelParser::COMMA);
+        setState(183);
+        antlrcpp::downCast<MapInitializerListContext *>(_localctx)->exprContext = expr();
+        antlrcpp::downCast<MapInitializerListContext *>(_localctx)->keys.push_back(antlrcpp::downCast<MapInitializerListContext *>(_localctx)->exprContext);
+        setState(184);
+        antlrcpp::downCast<MapInitializerListContext *>(_localctx)->s21 = match(CelParser::COLON);
+        antlrcpp::downCast<MapInitializerListContext *>(_localctx)->cols.push_back(antlrcpp::downCast<MapInitializerListContext *>(_localctx)->s21);
+        setState(185);
+        antlrcpp::downCast<MapInitializerListContext *>(_localctx)->exprContext = expr();
+        antlrcpp::downCast<MapInitializerListContext *>(_localctx)->values.push_back(antlrcpp::downCast<MapInitializerListContext *>(_localctx)->exprContext); 
+      }
+      setState(191);
+      _errHandler->sync(this);
+      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
+    }
+   
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+
+  return _localctx;
+}
+
+//----------------- LiteralContext ------------------------------------------------------------------
+
+CelParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
+  : ParserRuleContext(parent, invokingState) {
+}
+
+
+size_t CelParser::LiteralContext::getRuleIndex() const {
+  return CelParser::RuleLiteral;
+}
+
+void CelParser::LiteralContext::copyFrom(LiteralContext *ctx) {
+  ParserRuleContext::copyFrom(ctx);
+}
+
+//----------------- BytesContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::BytesContext::BYTES() {
+  return getToken(CelParser::BYTES, 0);
+}
+
+CelParser::BytesContext::BytesContext(LiteralContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::BytesContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitBytes(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- UintContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::UintContext::NUM_UINT() {
+  return getToken(CelParser::NUM_UINT, 0);
+}
+
+CelParser::UintContext::UintContext(LiteralContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::UintContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitUint(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- NullContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::NullContext::NUL() {
+  return getToken(CelParser::NUL, 0);
+}
+
+CelParser::NullContext::NullContext(LiteralContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::NullContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitNull(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- BoolFalseContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::BoolFalseContext::CEL_FALSE() {
+  return getToken(CelParser::CEL_FALSE, 0);
+}
+
+CelParser::BoolFalseContext::BoolFalseContext(LiteralContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::BoolFalseContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitBoolFalse(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- StringContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::StringContext::STRING() {
+  return getToken(CelParser::STRING, 0);
+}
+
+CelParser::StringContext::StringContext(LiteralContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitString(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- DoubleContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::DoubleContext::NUM_FLOAT() {
+  return getToken(CelParser::NUM_FLOAT, 0);
+}
+
+tree::TerminalNode* CelParser::DoubleContext::MINUS() {
+  return getToken(CelParser::MINUS, 0);
+}
+
+CelParser::DoubleContext::DoubleContext(LiteralContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::DoubleContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitDouble(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- BoolTrueContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::BoolTrueContext::CEL_TRUE() {
+  return getToken(CelParser::CEL_TRUE, 0);
+}
+
+CelParser::BoolTrueContext::BoolTrueContext(LiteralContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::BoolTrueContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitBoolTrue(this);
+  else
+    return visitor->visitChildren(this);
+}
+//----------------- IntContext ------------------------------------------------------------------
+
+tree::TerminalNode* CelParser::IntContext::NUM_INT() {
+  return getToken(CelParser::NUM_INT, 0);
+}
+
+tree::TerminalNode* CelParser::IntContext::MINUS() {
+  return getToken(CelParser::MINUS, 0);
+}
+
+CelParser::IntContext::IntContext(LiteralContext *ctx) { copyFrom(ctx); }
+
+
+std::any CelParser::IntContext::accept(tree::ParseTreeVisitor *visitor) {
+  if (auto parserVisitor = dynamic_cast<CelVisitor*>(visitor))
+    return parserVisitor->visitInt(this);
+  else
+    return visitor->visitChildren(this);
+}
+CelParser::LiteralContext* CelParser::literal() {
+  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
+  enterRule(_localctx, 24, CelParser::RuleLiteral);
+  size_t _la = 0;
+
+#if __cplusplus > 201703L
+  auto onExit = finally([=, this] {
+#else
+  auto onExit = finally([=] {
+#endif
+    exitRule();
+  });
+  try {
+    setState(206);
+    _errHandler->sync(this);
+    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
+    case 1: {
+      _localctx = _tracker.createInstance<CelParser::IntContext>(_localctx);
+      enterOuterAlt(_localctx, 1);
+      setState(193);
+      _errHandler->sync(this);
+
+      _la = _input->LA(1);
+      if (_la == CelParser::MINUS) {
+        setState(192);
+        antlrcpp::downCast<IntContext *>(_localctx)->sign = match(CelParser::MINUS);
+      }
+      setState(195);
+      antlrcpp::downCast<IntContext *>(_localctx)->tok = match(CelParser::NUM_INT);
+      break;
+    }
+
+    case 2: {
+      _localctx = _tracker.createInstance<CelParser::UintContext>(_localctx);
+      enterOuterAlt(_localctx, 2);
+      setState(196);
+      antlrcpp::downCast<UintContext *>(_localctx)->tok = match(CelParser::NUM_UINT);
+      break;
+    }
+
+    case 3: {
+      _localctx = _tracker.createInstance<CelParser::DoubleContext>(_localctx);
+      enterOuterAlt(_localctx, 3);
+      setState(198);
+      _errHandler->sync(this);
+
+      _la = _input->LA(1);
+      if (_la == CelParser::MINUS) {
+        setState(197);
+        antlrcpp::downCast<DoubleContext *>(_localctx)->sign = match(CelParser::MINUS);
+      }
+      setState(200);
+      antlrcpp::downCast<DoubleContext *>(_localctx)->tok = match(CelParser::NUM_FLOAT);
+      break;
+    }
+
+    case 4: {
+      _localctx = _tracker.createInstance<CelParser::StringContext>(_localctx);
+      enterOuterAlt(_localctx, 4);
+      setState(201);
+      antlrcpp::downCast<StringContext *>(_localctx)->tok = match(CelParser::STRING);
+      break;
+    }
+
+    case 5: {
+      _localctx = _tracker.createInstance<CelParser::BytesContext>(_localctx);
+      enterOuterAlt(_localctx, 5);
+      setState(202);
+      antlrcpp::downCast<BytesContext *>(_localctx)->tok = match(CelParser::BYTES);
+      break;
+    }
+
+    case 6: {
+      _localctx = _tracker.createInstance<CelParser::BoolTrueContext>(_localctx);
+      enterOuterAlt(_localctx, 6);
+      setState(203);
+      antlrcpp::downCast<BoolTrueContext *>(_localctx)->tok = match(CelParser::CEL_TRUE);
+      break;
+    }
+
+    case 7: {
+      _localctx = _tracker.createInstance<CelParser::BoolFalseContext>(_localctx);
+      enterOuterAlt(_localctx, 7);
+      setState(204);
+      antlrcpp::downCast<BoolFalseContext *>(_localctx)->tok = match(CelParser::CEL_FALSE);
+      break;
+    }
+
+    case 8: {
+      _localctx = _tracker.createInstance<CelParser::NullContext>(_localctx);
+      enterOuterAlt(_localctx, 8);
+      setState(205);
+      antlrcpp::downCast<NullContext *>(_localctx)->tok = match(CelParser::NUL);
+      break;
+    }
+
+    default:
+      break;
+    }
+   
+  }
+  catch (RecognitionException &e) {
+    _errHandler->reportError(this, e);
+    _localctx->exception = std::current_exception();
+    _errHandler->recover(this, _localctx->exception);
+  }
+
+  return _localctx;
+}
+
+bool CelParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
+  switch (ruleIndex) {
+    case 4: return relationSempred(antlrcpp::downCast<RelationContext *>(context), predicateIndex);
+    case 5: return calcSempred(antlrcpp::downCast<CalcContext *>(context), predicateIndex);
+    case 7: return memberSempred(antlrcpp::downCast<MemberContext *>(context), predicateIndex);
+
+  default:
+    break;
+  }
+  return true;
+}
+
+bool CelParser::relationSempred(RelationContext *_localctx, size_t predicateIndex) {
+  switch (predicateIndex) {
+    case 0: return precpred(_ctx, 1);
+
+  default:
+    break;
+  }
+  return true;
+}
+
+bool CelParser::calcSempred(CalcContext *_localctx, size_t predicateIndex) {
+  switch (predicateIndex) {
+    case 1: return precpred(_ctx, 2);
+    case 2: return precpred(_ctx, 1);
+
+  default:
+    break;
+  }
+  return true;
+}
+
+bool CelParser::memberSempred(MemberContext *_localctx, size_t predicateIndex) {
+  switch (predicateIndex) {
+    case 3: return precpred(_ctx, 3);
+    case 4: return precpred(_ctx, 2);
+    case 5: return precpred(_ctx, 1);
+
+  default:
+    break;
+  }
+  return true;
+}
+
+void CelParser::initialize() {
+  std::call_once(celParserOnceFlag, celParserInitialize);
+}
diff --git a/gen/parser/internal/CelParser.h b/gen/parser/internal/CelParser.h
new file mode 100755
index 0000000..5e255d4
--- /dev/null
+++ b/gen/parser/internal/CelParser.h
@@ -0,0 +1,567 @@
+
+// Generated from parser/internal/Cel.g4 by ANTLR 4.10.1
+
+#pragma once
+
+
+#include "antlr4-runtime.h"
+
+
+namespace cel_parser_internal {
+
+
+class  CelParser : public antlr4::Parser {
+public:
+  enum {
+    T__0 = 1, EQUALS = 2, NOT_EQUALS = 3, LESS = 4, LESS_EQUALS = 5, GREATER_EQUALS = 6, 
+    GREATER = 7, LOGICAL_AND = 8, LOGICAL_OR = 9, LBRACKET = 10, RPRACKET = 11, 
+    LBRACE = 12, RBRACE = 13, LPAREN = 14, RPAREN = 15, DOT = 16, COMMA = 17, 
+    MINUS = 18, EXCLAM = 19, QUESTIONMARK = 20, COLON = 21, PLUS = 22, STAR = 23, 
+    SLASH = 24, PERCENT = 25, CEL_TRUE = 26, CEL_FALSE = 27, NUL = 28, WHITESPACE = 29, 
+    COMMENT = 30, NUM_FLOAT = 31, NUM_INT = 32, NUM_UINT = 33, STRING = 34, 
+    BYTES = 35, IDENTIFIER = 36
+  };
+
+  enum {
+    RuleStart = 0, RuleExpr = 1, RuleConditionalOr = 2, RuleConditionalAnd = 3, 
+    RuleRelation = 4, RuleCalc = 5, RuleUnary = 6, RuleMember = 7, RulePrimary = 8, 
+    RuleExprList = 9, RuleFieldInitializerList = 10, RuleMapInitializerList = 11, 
+    RuleLiteral = 12
+  };
+
+  explicit CelParser(antlr4::TokenStream *input);
+
+  CelParser(antlr4::TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options);
+
+  ~CelParser() override;
+
+  std::string getGrammarFileName() const override;
+
+  const antlr4::atn::ATN& getATN() const override;
+
+  const std::vector<std::string>& getRuleNames() const override;
+
+  const antlr4::dfa::Vocabulary& getVocabulary() const override;
+
+  antlr4::atn::SerializedATNView getSerializedATN() const override;
+
+
+  class StartContext;
+  class ExprContext;
+  class ConditionalOrContext;
+  class ConditionalAndContext;
+  class RelationContext;
+  class CalcContext;
+  class UnaryContext;
+  class MemberContext;
+  class PrimaryContext;
+  class ExprListContext;
+  class FieldInitializerListContext;
+  class MapInitializerListContext;
+  class LiteralContext; 
+
+  class  StartContext : public antlr4::ParserRuleContext {
+  public:
+    CelParser::ExprContext *e = nullptr;
+    StartContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+    virtual size_t getRuleIndex() const override;
+    antlr4::tree::TerminalNode *EOF();
+    ExprContext *expr();
+
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+   
+  };
+
+  StartContext* start();
+
+  class  ExprContext : public antlr4::ParserRuleContext {
+  public:
+    CelParser::ConditionalOrContext *e = nullptr;
+    antlr4::Token *op = nullptr;
+    CelParser::ConditionalOrContext *e1 = nullptr;
+    CelParser::ExprContext *e2 = nullptr;
+    ExprContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+    virtual size_t getRuleIndex() const override;
+    std::vector<ConditionalOrContext *> conditionalOr();
+    ConditionalOrContext* conditionalOr(size_t i);
+    antlr4::tree::TerminalNode *COLON();
+    antlr4::tree::TerminalNode *QUESTIONMARK();
+    ExprContext *expr();
+
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+   
+  };
+
+  ExprContext* expr();
+
+  class  ConditionalOrContext : public antlr4::ParserRuleContext {
+  public:
+    CelParser::ConditionalAndContext *e = nullptr;
+    antlr4::Token *s9 = nullptr;
+    std::vector<antlr4::Token *> ops;
+    CelParser::ConditionalAndContext *conditionalAndContext = nullptr;
+    std::vector<ConditionalAndContext *> e1;
+    ConditionalOrContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+    virtual size_t getRuleIndex() const override;
+    std::vector<ConditionalAndContext *> conditionalAnd();
+    ConditionalAndContext* conditionalAnd(size_t i);
+    std::vector<antlr4::tree::TerminalNode *> LOGICAL_OR();
+    antlr4::tree::TerminalNode* LOGICAL_OR(size_t i);
+
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+   
+  };
+
+  ConditionalOrContext* conditionalOr();
+
+  class  ConditionalAndContext : public antlr4::ParserRuleContext {
+  public:
+    CelParser::RelationContext *e = nullptr;
+    antlr4::Token *s8 = nullptr;
+    std::vector<antlr4::Token *> ops;
+    CelParser::RelationContext *relationContext = nullptr;
+    std::vector<RelationContext *> e1;
+    ConditionalAndContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+    virtual size_t getRuleIndex() const override;
+    std::vector<RelationContext *> relation();
+    RelationContext* relation(size_t i);
+    std::vector<antlr4::tree::TerminalNode *> LOGICAL_AND();
+    antlr4::tree::TerminalNode* LOGICAL_AND(size_t i);
+
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+   
+  };
+
+  ConditionalAndContext* conditionalAnd();
+
+  class  RelationContext : public antlr4::ParserRuleContext {
+  public:
+    antlr4::Token *op = nullptr;
+    RelationContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+    virtual size_t getRuleIndex() const override;
+    CalcContext *calc();
+    std::vector<RelationContext *> relation();
+    RelationContext* relation(size_t i);
+    antlr4::tree::TerminalNode *LESS();
+    antlr4::tree::TerminalNode *LESS_EQUALS();
+    antlr4::tree::TerminalNode *GREATER_EQUALS();
+    antlr4::tree::TerminalNode *GREATER();
+    antlr4::tree::TerminalNode *EQUALS();
+    antlr4::tree::TerminalNode *NOT_EQUALS();
+
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+   
+  };
+
+  RelationContext* relation();
+  RelationContext* relation(int precedence);
+  class  CalcContext : public antlr4::ParserRuleContext {
+  public:
+    antlr4::Token *op = nullptr;
+    CalcContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+    virtual size_t getRuleIndex() const override;
+    UnaryContext *unary();
+    std::vector<CalcContext *> calc();
+    CalcContext* calc(size_t i);
+    antlr4::tree::TerminalNode *STAR();
+    antlr4::tree::TerminalNode *SLASH();
+    antlr4::tree::TerminalNode *PERCENT();
+    antlr4::tree::TerminalNode *PLUS();
+    antlr4::tree::TerminalNode *MINUS();
+
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+   
+  };
+
+  CalcContext* calc();
+  CalcContext* calc(int precedence);
+  class  UnaryContext : public antlr4::ParserRuleContext {
+  public:
+    UnaryContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+   
+    UnaryContext() = default;
+    void copyFrom(UnaryContext *context);
+    using antlr4::ParserRuleContext::copyFrom;
+
+    virtual size_t getRuleIndex() const override;
+
+   
+  };
+
+  class  LogicalNotContext : public UnaryContext {
+  public:
+    LogicalNotContext(UnaryContext *ctx);
+
+    antlr4::Token *s19 = nullptr;
+    std::vector<antlr4::Token *> ops;
+    MemberContext *member();
+    std::vector<antlr4::tree::TerminalNode *> EXCLAM();
+    antlr4::tree::TerminalNode* EXCLAM(size_t i);
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  MemberExprContext : public UnaryContext {
+  public:
+    MemberExprContext(UnaryContext *ctx);
+
+    MemberContext *member();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  NegateContext : public UnaryContext {
+  public:
+    NegateContext(UnaryContext *ctx);
+
+    antlr4::Token *s18 = nullptr;
+    std::vector<antlr4::Token *> ops;
+    MemberContext *member();
+    std::vector<antlr4::tree::TerminalNode *> MINUS();
+    antlr4::tree::TerminalNode* MINUS(size_t i);
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  UnaryContext* unary();
+
+  class  MemberContext : public antlr4::ParserRuleContext {
+  public:
+    MemberContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+   
+    MemberContext() = default;
+    void copyFrom(MemberContext *context);
+    using antlr4::ParserRuleContext::copyFrom;
+
+    virtual size_t getRuleIndex() const override;
+
+   
+  };
+
+  class  SelectOrCallContext : public MemberContext {
+  public:
+    SelectOrCallContext(MemberContext *ctx);
+
+    antlr4::Token *op = nullptr;
+    antlr4::Token *id = nullptr;
+    antlr4::Token *open = nullptr;
+    CelParser::ExprListContext *args = nullptr;
+    MemberContext *member();
+    antlr4::tree::TerminalNode *DOT();
+    antlr4::tree::TerminalNode *IDENTIFIER();
+    antlr4::tree::TerminalNode *RPAREN();
+    antlr4::tree::TerminalNode *LPAREN();
+    ExprListContext *exprList();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  PrimaryExprContext : public MemberContext {
+  public:
+    PrimaryExprContext(MemberContext *ctx);
+
+    PrimaryContext *primary();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  IndexContext : public MemberContext {
+  public:
+    IndexContext(MemberContext *ctx);
+
+    antlr4::Token *op = nullptr;
+    CelParser::ExprContext *index = nullptr;
+    MemberContext *member();
+    antlr4::tree::TerminalNode *RPRACKET();
+    antlr4::tree::TerminalNode *LBRACKET();
+    ExprContext *expr();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  CreateMessageContext : public MemberContext {
+  public:
+    CreateMessageContext(MemberContext *ctx);
+
+    antlr4::Token *op = nullptr;
+    CelParser::FieldInitializerListContext *entries = nullptr;
+    MemberContext *member();
+    antlr4::tree::TerminalNode *RBRACE();
+    antlr4::tree::TerminalNode *LBRACE();
+    antlr4::tree::TerminalNode *COMMA();
+    FieldInitializerListContext *fieldInitializerList();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  MemberContext* member();
+  MemberContext* member(int precedence);
+  class  PrimaryContext : public antlr4::ParserRuleContext {
+  public:
+    PrimaryContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+   
+    PrimaryContext() = default;
+    void copyFrom(PrimaryContext *context);
+    using antlr4::ParserRuleContext::copyFrom;
+
+    virtual size_t getRuleIndex() const override;
+
+   
+  };
+
+  class  CreateListContext : public PrimaryContext {
+  public:
+    CreateListContext(PrimaryContext *ctx);
+
+    antlr4::Token *op = nullptr;
+    CelParser::ExprListContext *elems = nullptr;
+    antlr4::tree::TerminalNode *RPRACKET();
+    antlr4::tree::TerminalNode *LBRACKET();
+    antlr4::tree::TerminalNode *COMMA();
+    ExprListContext *exprList();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  CreateStructContext : public PrimaryContext {
+  public:
+    CreateStructContext(PrimaryContext *ctx);
+
+    antlr4::Token *op = nullptr;
+    CelParser::MapInitializerListContext *entries = nullptr;
+    antlr4::tree::TerminalNode *RBRACE();
+    antlr4::tree::TerminalNode *LBRACE();
+    antlr4::tree::TerminalNode *COMMA();
+    MapInitializerListContext *mapInitializerList();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  ConstantLiteralContext : public PrimaryContext {
+  public:
+    ConstantLiteralContext(PrimaryContext *ctx);
+
+    LiteralContext *literal();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  NestedContext : public PrimaryContext {
+  public:
+    NestedContext(PrimaryContext *ctx);
+
+    CelParser::ExprContext *e = nullptr;
+    antlr4::tree::TerminalNode *LPAREN();
+    antlr4::tree::TerminalNode *RPAREN();
+    ExprContext *expr();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  IdentOrGlobalCallContext : public PrimaryContext {
+  public:
+    IdentOrGlobalCallContext(PrimaryContext *ctx);
+
+    antlr4::Token *leadingDot = nullptr;
+    antlr4::Token *id = nullptr;
+    antlr4::Token *op = nullptr;
+    CelParser::ExprListContext *args = nullptr;
+    antlr4::tree::TerminalNode *IDENTIFIER();
+    antlr4::tree::TerminalNode *RPAREN();
+    antlr4::tree::TerminalNode *DOT();
+    antlr4::tree::TerminalNode *LPAREN();
+    ExprListContext *exprList();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  PrimaryContext* primary();
+
+  class  ExprListContext : public antlr4::ParserRuleContext {
+  public:
+    CelParser::ExprContext *exprContext = nullptr;
+    std::vector<ExprContext *> e;
+    ExprListContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+    virtual size_t getRuleIndex() const override;
+    std::vector<ExprContext *> expr();
+    ExprContext* expr(size_t i);
+    std::vector<antlr4::tree::TerminalNode *> COMMA();
+    antlr4::tree::TerminalNode* COMMA(size_t i);
+
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+   
+  };
+
+  ExprListContext* exprList();
+
+  class  FieldInitializerListContext : public antlr4::ParserRuleContext {
+  public:
+    antlr4::Token *identifierToken = nullptr;
+    std::vector<antlr4::Token *> fields;
+    antlr4::Token *s21 = nullptr;
+    std::vector<antlr4::Token *> cols;
+    CelParser::ExprContext *exprContext = nullptr;
+    std::vector<ExprContext *> values;
+    FieldInitializerListContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+    virtual size_t getRuleIndex() const override;
+    std::vector<antlr4::tree::TerminalNode *> IDENTIFIER();
+    antlr4::tree::TerminalNode* IDENTIFIER(size_t i);
+    std::vector<antlr4::tree::TerminalNode *> COLON();
+    antlr4::tree::TerminalNode* COLON(size_t i);
+    std::vector<ExprContext *> expr();
+    ExprContext* expr(size_t i);
+    std::vector<antlr4::tree::TerminalNode *> COMMA();
+    antlr4::tree::TerminalNode* COMMA(size_t i);
+
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+   
+  };
+
+  FieldInitializerListContext* fieldInitializerList();
+
+  class  MapInitializerListContext : public antlr4::ParserRuleContext {
+  public:
+    CelParser::ExprContext *exprContext = nullptr;
+    std::vector<ExprContext *> keys;
+    antlr4::Token *s21 = nullptr;
+    std::vector<antlr4::Token *> cols;
+    std::vector<ExprContext *> values;
+    MapInitializerListContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+    virtual size_t getRuleIndex() const override;
+    std::vector<ExprContext *> expr();
+    ExprContext* expr(size_t i);
+    std::vector<antlr4::tree::TerminalNode *> COLON();
+    antlr4::tree::TerminalNode* COLON(size_t i);
+    std::vector<antlr4::tree::TerminalNode *> COMMA();
+    antlr4::tree::TerminalNode* COMMA(size_t i);
+
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+   
+  };
+
+  MapInitializerListContext* mapInitializerList();
+
+  class  LiteralContext : public antlr4::ParserRuleContext {
+  public:
+    LiteralContext(antlr4::ParserRuleContext *parent, size_t invokingState);
+   
+    LiteralContext() = default;
+    void copyFrom(LiteralContext *context);
+    using antlr4::ParserRuleContext::copyFrom;
+
+    virtual size_t getRuleIndex() const override;
+
+   
+  };
+
+  class  BytesContext : public LiteralContext {
+  public:
+    BytesContext(LiteralContext *ctx);
+
+    antlr4::Token *tok = nullptr;
+    antlr4::tree::TerminalNode *BYTES();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  UintContext : public LiteralContext {
+  public:
+    UintContext(LiteralContext *ctx);
+
+    antlr4::Token *tok = nullptr;
+    antlr4::tree::TerminalNode *NUM_UINT();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  NullContext : public LiteralContext {
+  public:
+    NullContext(LiteralContext *ctx);
+
+    antlr4::Token *tok = nullptr;
+    antlr4::tree::TerminalNode *NUL();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  BoolFalseContext : public LiteralContext {
+  public:
+    BoolFalseContext(LiteralContext *ctx);
+
+    antlr4::Token *tok = nullptr;
+    antlr4::tree::TerminalNode *CEL_FALSE();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  StringContext : public LiteralContext {
+  public:
+    StringContext(LiteralContext *ctx);
+
+    antlr4::Token *tok = nullptr;
+    antlr4::tree::TerminalNode *STRING();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  DoubleContext : public LiteralContext {
+  public:
+    DoubleContext(LiteralContext *ctx);
+
+    antlr4::Token *sign = nullptr;
+    antlr4::Token *tok = nullptr;
+    antlr4::tree::TerminalNode *NUM_FLOAT();
+    antlr4::tree::TerminalNode *MINUS();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  BoolTrueContext : public LiteralContext {
+  public:
+    BoolTrueContext(LiteralContext *ctx);
+
+    antlr4::Token *tok = nullptr;
+    antlr4::tree::TerminalNode *CEL_TRUE();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  class  IntContext : public LiteralContext {
+  public:
+    IntContext(LiteralContext *ctx);
+
+    antlr4::Token *sign = nullptr;
+    antlr4::Token *tok = nullptr;
+    antlr4::tree::TerminalNode *NUM_INT();
+    antlr4::tree::TerminalNode *MINUS();
+
+    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;
+  };
+
+  LiteralContext* literal();
+
+
+  bool sempred(antlr4::RuleContext *_localctx, size_t ruleIndex, size_t predicateIndex) override;
+
+  bool relationSempred(RelationContext *_localctx, size_t predicateIndex);
+  bool calcSempred(CalcContext *_localctx, size_t predicateIndex);
+  bool memberSempred(MemberContext *_localctx, size_t predicateIndex);
+
+  // By default the static state used to implement the parser is lazily initialized during the first
+  // call to the constructor. You can call this function if you wish to initialize the static state
+  // ahead of time.
+  static void initialize();
+
+private:
+};
+
+}  // namespace cel_parser_internal
diff --git a/gen/parser/internal/CelVisitor.cpp b/gen/parser/internal/CelVisitor.cpp
new file mode 100755
index 0000000..2bfa031
--- /dev/null
+++ b/gen/parser/internal/CelVisitor.cpp
@@ -0,0 +1,9 @@
+
+// Generated from parser/internal/Cel.g4 by ANTLR 4.10.1
+
+
+#include "CelVisitor.h"
+
+
+using namespace cel_parser_internal;
+
diff --git a/gen/parser/internal/CelVisitor.h b/gen/parser/internal/CelVisitor.h
new file mode 100755
index 0000000..13d3fc3
--- /dev/null
+++ b/gen/parser/internal/CelVisitor.h
@@ -0,0 +1,84 @@
+
+// Generated from parser/internal/Cel.g4 by ANTLR 4.10.1
+
+#pragma once
+
+
+#include "antlr4-runtime.h"
+#include "CelParser.h"
+
+
+namespace cel_parser_internal {
+
+/**
+ * This class defines an abstract visitor for a parse tree
+ * produced by CelParser.
+ */
+class  CelVisitor : public antlr4::tree::AbstractParseTreeVisitor {
+public:
+
+  /**
+   * Visit parse trees produced by CelParser.
+   */
+    virtual std::any visitStart(CelParser::StartContext *context) = 0;
+
+    virtual std::any visitExpr(CelParser::ExprContext *context) = 0;
+
+    virtual std::any visitConditionalOr(CelParser::ConditionalOrContext *context) = 0;
+
+    virtual std::any visitConditionalAnd(CelParser::ConditionalAndContext *context) = 0;
+
+    virtual std::any visitRelation(CelParser::RelationContext *context) = 0;
+
+    virtual std::any visitCalc(CelParser::CalcContext *context) = 0;
+
+    virtual std::any visitMemberExpr(CelParser::MemberExprContext *context) = 0;
+
+    virtual std::any visitLogicalNot(CelParser::LogicalNotContext *context) = 0;
+
+    virtual std::any visitNegate(CelParser::NegateContext *context) = 0;
+
+    virtual std::any visitSelectOrCall(CelParser::SelectOrCallContext *context) = 0;
+
+    virtual std::any visitPrimaryExpr(CelParser::PrimaryExprContext *context) = 0;
+
+    virtual std::any visitIndex(CelParser::IndexContext *context) = 0;
+
+    virtual std::any visitCreateMessage(CelParser::CreateMessageContext *context) = 0;
+
+    virtual std::any visitIdentOrGlobalCall(CelParser::IdentOrGlobalCallContext *context) = 0;
+
+    virtual std::any visitNested(CelParser::NestedContext *context) = 0;
+
+    virtual std::any visitCreateList(CelParser::CreateListContext *context) = 0;
+
+    virtual std::any visitCreateStruct(CelParser::CreateStructContext *context) = 0;
+
+    virtual std::any visitConstantLiteral(CelParser::ConstantLiteralContext *context) = 0;
+
+    virtual std::any visitExprList(CelParser::ExprListContext *context) = 0;
+
+    virtual std::any visitFieldInitializerList(CelParser::FieldInitializerListContext *context) = 0;
+
+    virtual std::any visitMapInitializerList(CelParser::MapInitializerListContext *context) = 0;
+
+    virtual std::any visitInt(CelParser::IntContext *context) = 0;
+
+    virtual std::any visitUint(CelParser::UintContext *context) = 0;
+
+    virtual std::any visitDouble(CelParser::DoubleContext *context) = 0;
+
+    virtual std::any visitString(CelParser::StringContext *context) = 0;
+
+    virtual std::any visitBytes(CelParser::BytesContext *context) = 0;
+
+    virtual std::any visitBoolTrue(CelParser::BoolTrueContext *context) = 0;
+
+    virtual std::any visitBoolFalse(CelParser::BoolFalseContext *context) = 0;
+
+    virtual std::any visitNull(CelParser::NullContext *context) = 0;
+
+
+};
+
+}  // namespace cel_parser_internal
