diff --git a/base/memory_manager.cc b/base/memory_manager.cc
index 1b7b3550..13b4ff97 100644
--- a/base/memory_manager.cc
+++ b/base/memory_manager.cc
@@ -45,6 +45,7 @@
 #include "absl/base/config.h"
 #include "absl/base/dynamic_annotations.h"
 #include "absl/base/macros.h"
+#include "absl/base/optimization.h"
 #include "absl/base/thread_annotations.h"
 #include "absl/numeric/bits.h"
 #include "absl/synchronization/mutex.h"
@@ -234,7 +235,7 @@ class GlobalMemoryManager final : public MemoryManager {
   void* Allocate(size_t size, size_t align) override {
     static_cast<void>(size);
     static_cast<void>(align);
-    ABSL_INTERNAL_UNREACHABLE;
+    ABSL_UNREACHABLE();
     return nullptr;
   }
 
@@ -242,7 +243,7 @@ class GlobalMemoryManager final : public MemoryManager {
   void OwnDestructor(void* pointer, void (*destructor)(void*)) override {
     static_cast<void>(pointer);
     static_cast<void>(destructor);
-    ABSL_INTERNAL_UNREACHABLE;
+    ABSL_UNREACHABLE();
   }
 };
 
diff --git a/eval/eval/container_access_step.cc b/eval/eval/container_access_step.cc
index 39c2507d..d7962a29 100644
--- a/eval/eval/container_access_step.cc
+++ b/eval/eval/container_access_step.cc
@@ -11,6 +11,8 @@
 #include "eval/public/cel_number.h"
 #include "eval/public/cel_value.h"
 #include "eval/public/unknown_attribute_set.h"
+#include "eval/public/structs/legacy_type_adapter.h"
+#include "eval/public/structs/legacy_type_info_apis.h"
 
 namespace google::api::expr::runtime {
 
@@ -34,6 +36,8 @@ class ContainerAccessStep : public ExpressionStepBase {
                        ExecutionFrame* frame) const;
   CelValue LookupInList(const CelList* cel_list, const CelValue& key,
                         ExecutionFrame* frame) const;
+  CelValue LookupInMessage(const CelValue::MessageWrapper& msg, const CelValue& key,
+                           ExecutionFrame* frame) const;
 };
 
 inline CelValue ContainerAccessStep::LookupInMap(const CelMap* cel_map,
@@ -109,6 +113,26 @@ inline CelValue ContainerAccessStep::LookupInList(const CelList* cel_list,
                    CelValue::TypeName(key.type())));
 }
 
+CelValue ContainerAccessStep::LookupInMessage(const CelValue::MessageWrapper& msg, const CelValue& key,
+                                              ExecutionFrame* frame) const {
+  if (!key.IsString()) {
+    return CreateErrorValue(
+        frame->memory_manager(),
+        absl::StrCat("Field name error: expected string type, got ",
+                     CelValue::TypeName(key.type())));
+  }
+  const LegacyTypeAccessApis* accessor =
+      msg.legacy_type_info()->GetAccessApis(msg);
+  if (accessor == nullptr) {
+    return CreateNoSuchFieldError(frame->memory_manager());
+  }
+  auto result_or = accessor->GetField(key.StringOrDie().value(), msg, ProtoWrapperTypeOptions::kUnsetNull, frame->memory_manager());
+  if (!result_or.ok()) {
+    return CreateErrorValue(frame->memory_manager(), result_or.status());
+  }
+  return std::move(result_or).value();
+}
+
 ContainerAccessStep::ValueAttributePair ContainerAccessStep::PerformLookup(
     ExecutionFrame* frame) const {
   auto input_args = frame->value_stack().GetSpan(kNumContainerAccessArguments);
@@ -158,6 +182,12 @@ ContainerAccessStep::ValueAttributePair ContainerAccessStep::PerformLookup(
       const CelList* cel_list = container.ListOrDie();
       return {LookupInList(cel_list, key, frame), trail};
     }
+    case CelValue::Type::kMessage: {
+      CelValue::MessageWrapper wrapper;
+      bool success = container.GetValue(&wrapper);
+      ABSL_ASSERT(success);
+      return {LookupInMessage(wrapper, key, frame), trail};
+    }
     default: {
       auto error =
           CreateErrorValue(frame->memory_manager(),
