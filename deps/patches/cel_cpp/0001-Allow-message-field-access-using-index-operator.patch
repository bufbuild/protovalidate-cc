From 27116d4f33e63ac7dbabc9fbdd64652531f894d2 Mon Sep 17 00:00:00 2001
From: John Chadwick <jchadwick@buf.build>
Date: Fri, 24 Jan 2025 18:19:56 -0500
Subject: [PATCH 1/3] Allow message field access using index operator

CEL doesn't yet have a standard way to access field names that conflict
with identifiers. This temporary workaround enables the index operator
to access fields from a message. It can be used as follows:

    dyn(message)["field_name"]
---
 eval/eval/container_access_step.cc | 36 ++++++++++++++++++++++++++++++
 1 file changed, 36 insertions(+)

diff --git a/eval/eval/container_access_step.cc b/eval/eval/container_access_step.cc
index a9fa4c0f..11782d1c 100644
--- a/eval/eval/container_access_step.cc
+++ b/eval/eval/container_access_step.cc
@@ -3,6 +3,7 @@
 #include <cstdint>
 #include <memory>
 #include <utility>
+#include <csignal>
 
 #include "absl/status/status.h"
 #include "absl/status/statusor.h"
@@ -21,6 +22,8 @@
 #include "eval/eval/evaluator_core.h"
 #include "eval/eval/expression_step_base.h"
 #include "eval/internal/errors.h"
+#include "eval/public/structs/legacy_type_adapter.h"
+#include "eval/public/structs/legacy_type_info_apis.h"
 #include "internal/number.h"
 #include "internal/status_macros.h"
 #include "runtime/internal/errors.h"
@@ -193,6 +196,35 @@ void LookupInList(const ListValue& cel_list, const Value& key,
   }
 }
 
+void LookupInMessage(const cel::StructValue& struct_value, const Value& key, ExecutionFrameBase& frame, Value& result) {
+  if (!key.IsString()) {
+    result = cel::ErrorValue(absl::UnknownError(
+        absl::StrCat("Index error: expected integer type, got ",
+                     cel::KindToString(ValueKindToKind(key->kind())))));
+    return;
+  }
+  auto found = struct_value.HasFieldByName(key.GetString().ToString());
+  if (!found.ok()) {
+    result = cel::ErrorValue(CreateNoSuchKeyError(key->DebugString()));
+    return;
+  }
+  if (!*found) {
+    result = cel::NoSuchFieldError(key.AsString()->ToString());
+    return;
+  }
+  auto status = struct_value.GetFieldByName(
+      key.GetString().ToString(),
+      ProtoWrapperTypeOptions::kUnsetProtoDefault,
+      frame.descriptor_pool(),
+      frame.message_factory(),
+      frame.arena(),
+      &result);
+  if (!status.ok()) {
+    result = cel::ErrorValue(status);
+  }
+  return;
+}
+
 void LookupInContainer(const Value& container, const Value& key,
                        ExecutionFrameBase& frame, Value& result) {
   // Select steps can be applied to either maps or messages
@@ -205,6 +237,10 @@ void LookupInContainer(const Value& container, const Value& key,
       LookupInList(Cast<ListValue>(container), key, frame, result);
       return;
     }
+    case ValueKind::kStruct: {
+      LookupInMessage(*container.AsStruct(), key, frame, result);
+      return;
+    }
     default:
       result = cel::ErrorValue(absl::InvalidArgumentError(
           absl::StrCat("Invalid container type: '",
-- 
2.47.2

