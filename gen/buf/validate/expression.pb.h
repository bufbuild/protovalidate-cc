// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buf/validate/expression.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_buf_2fvalidate_2fexpression_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_buf_2fvalidate_2fexpression_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_buf_2fvalidate_2fexpression_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_buf_2fvalidate_2fexpression_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_buf_2fvalidate_2fexpression_2eproto;
namespace buf {
namespace validate {
class Constraint;
struct ConstraintDefaultTypeInternal;
extern ConstraintDefaultTypeInternal _Constraint_default_instance_;
class Violation;
struct ViolationDefaultTypeInternal;
extern ViolationDefaultTypeInternal _Violation_default_instance_;
class Violations;
struct ViolationsDefaultTypeInternal;
extern ViolationsDefaultTypeInternal _Violations_default_instance_;
}  // namespace validate
}  // namespace buf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace buf {
namespace validate {

// ===================================================================


// -------------------------------------------------------------------

class Constraint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buf.validate.Constraint) */ {
 public:
  inline Constraint() : Constraint(nullptr) {}
  ~Constraint() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Constraint(::google::protobuf::internal::ConstantInitialized);

  Constraint(const Constraint& from);
  Constraint(Constraint&& from) noexcept
    : Constraint() {
    *this = ::std::move(from);
  }

  inline Constraint& operator=(const Constraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Constraint& operator=(Constraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Constraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Constraint* internal_default_instance() {
    return reinterpret_cast<const Constraint*>(
               &_Constraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Constraint& a, Constraint& b) {
    a.Swap(&b);
  }
  inline void Swap(Constraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Constraint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Constraint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Constraint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Constraint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Constraint& from) {
    Constraint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Constraint* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "buf.validate.Constraint";
  }
  protected:
  explicit Constraint(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMessageFieldNumber = 2,
    kExpressionFieldNumber = 3,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string message = 2 [json_name = "message"];
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string expression = 3 [json_name = "expression"];
  void clear_expression() ;
  const std::string& expression() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expression(Arg_&& arg, Args_... args);
  std::string* mutable_expression();
  PROTOBUF_NODISCARD std::string* release_expression();
  void set_allocated_expression(std::string* ptr);

  private:
  const std::string& _internal_expression() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expression(
      const std::string& value);
  std::string* _internal_mutable_expression();

  public:
  // @@protoc_insertion_point(class_scope:buf.validate.Constraint)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 51, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr expression_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buf_2fvalidate_2fexpression_2eproto;
};// -------------------------------------------------------------------

class Violations final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buf.validate.Violations) */ {
 public:
  inline Violations() : Violations(nullptr) {}
  ~Violations() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Violations(::google::protobuf::internal::ConstantInitialized);

  Violations(const Violations& from);
  Violations(Violations&& from) noexcept
    : Violations() {
    *this = ::std::move(from);
  }

  inline Violations& operator=(const Violations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Violations& operator=(Violations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Violations& default_instance() {
    return *internal_default_instance();
  }
  static inline const Violations* internal_default_instance() {
    return reinterpret_cast<const Violations*>(
               &_Violations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Violations& a, Violations& b) {
    a.Swap(&b);
  }
  inline void Swap(Violations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Violations* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Violations* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Violations>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Violations& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Violations& from) {
    Violations::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Violations* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "buf.validate.Violations";
  }
  protected:
  explicit Violations(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViolationsFieldNumber = 1,
  };
  // repeated .buf.validate.Violation violations = 1 [json_name = "violations"];
  int violations_size() const;
  private:
  int _internal_violations_size() const;

  public:
  void clear_violations() ;
  ::buf::validate::Violation* mutable_violations(int index);
  ::google::protobuf::RepeatedPtrField< ::buf::validate::Violation >*
      mutable_violations();
  private:
  const ::google::protobuf::RepeatedPtrField<::buf::validate::Violation>& _internal_violations() const;
  ::google::protobuf::RepeatedPtrField<::buf::validate::Violation>* _internal_mutable_violations();
  public:
  const ::buf::validate::Violation& violations(int index) const;
  ::buf::validate::Violation* add_violations();
  const ::google::protobuf::RepeatedPtrField< ::buf::validate::Violation >&
      violations() const;
  // @@protoc_insertion_point(class_scope:buf.validate.Violations)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::buf::validate::Violation > violations_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buf_2fvalidate_2fexpression_2eproto;
};// -------------------------------------------------------------------

class Violation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buf.validate.Violation) */ {
 public:
  inline Violation() : Violation(nullptr) {}
  ~Violation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Violation(::google::protobuf::internal::ConstantInitialized);

  Violation(const Violation& from);
  Violation(Violation&& from) noexcept
    : Violation() {
    *this = ::std::move(from);
  }

  inline Violation& operator=(const Violation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Violation& operator=(Violation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Violation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Violation* internal_default_instance() {
    return reinterpret_cast<const Violation*>(
               &_Violation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Violation& a, Violation& b) {
    a.Swap(&b);
  }
  inline void Swap(Violation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Violation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Violation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Violation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Violation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Violation& from) {
    Violation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Violation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "buf.validate.Violation";
  }
  protected:
  explicit Violation(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldPathFieldNumber = 1,
    kConstraintIdFieldNumber = 2,
    kMessageFieldNumber = 3,
    kForKeyFieldNumber = 4,
  };
  // string field_path = 1 [json_name = "fieldPath"];
  void clear_field_path() ;
  const std::string& field_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field_path(Arg_&& arg, Args_... args);
  std::string* mutable_field_path();
  PROTOBUF_NODISCARD std::string* release_field_path();
  void set_allocated_field_path(std::string* ptr);

  private:
  const std::string& _internal_field_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_path(
      const std::string& value);
  std::string* _internal_mutable_field_path();

  public:
  // string constraint_id = 2 [json_name = "constraintId"];
  void clear_constraint_id() ;
  const std::string& constraint_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_constraint_id(Arg_&& arg, Args_... args);
  std::string* mutable_constraint_id();
  PROTOBUF_NODISCARD std::string* release_constraint_id();
  void set_allocated_constraint_id(std::string* ptr);

  private:
  const std::string& _internal_constraint_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_constraint_id(
      const std::string& value);
  std::string* _internal_mutable_constraint_id();

  public:
  // string message = 3 [json_name = "message"];
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool for_key = 4 [json_name = "forKey"];
  void clear_for_key() ;
  bool for_key() const;
  void set_for_key(bool value);

  private:
  bool _internal_for_key() const;
  void _internal_set_for_key(bool value);

  public:
  // @@protoc_insertion_point(class_scope:buf.validate.Violation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 61, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr field_path_;
    ::google::protobuf::internal::ArenaStringPtr constraint_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool for_key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buf_2fvalidate_2fexpression_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Constraint

// string id = 1 [json_name = "id"];
inline void Constraint::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Constraint::id() const {
  // @@protoc_insertion_point(field_get:buf.validate.Constraint.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Constraint::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:buf.validate.Constraint.id)
}
inline std::string* Constraint::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:buf.validate.Constraint.id)
  return _s;
}
inline const std::string& Constraint::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Constraint::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Constraint::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Constraint::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:buf.validate.Constraint.id)
  return _impl_.id_.Release();
}
inline void Constraint::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Constraint.id)
}

// string message = 2 [json_name = "message"];
inline void Constraint::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Constraint::message() const {
  // @@protoc_insertion_point(field_get:buf.validate.Constraint.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Constraint::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:buf.validate.Constraint.message)
}
inline std::string* Constraint::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:buf.validate.Constraint.message)
  return _s;
}
inline const std::string& Constraint::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void Constraint::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Constraint::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* Constraint::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:buf.validate.Constraint.message)
  return _impl_.message_.Release();
}
inline void Constraint::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Constraint.message)
}

// string expression = 3 [json_name = "expression"];
inline void Constraint::clear_expression() {
  _impl_.expression_.ClearToEmpty();
}
inline const std::string& Constraint::expression() const {
  // @@protoc_insertion_point(field_get:buf.validate.Constraint.expression)
  return _internal_expression();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Constraint::set_expression(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expression_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:buf.validate.Constraint.expression)
}
inline std::string* Constraint::mutable_expression() {
  std::string* _s = _internal_mutable_expression();
  // @@protoc_insertion_point(field_mutable:buf.validate.Constraint.expression)
  return _s;
}
inline const std::string& Constraint::_internal_expression() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expression_.Get();
}
inline void Constraint::_internal_set_expression(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expression_.Set(value, GetArenaForAllocation());
}
inline std::string* Constraint::_internal_mutable_expression() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.expression_.Mutable( GetArenaForAllocation());
}
inline std::string* Constraint::release_expression() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:buf.validate.Constraint.expression)
  return _impl_.expression_.Release();
}
inline void Constraint::set_allocated_expression(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expression_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.expression_.IsDefault()) {
          _impl_.expression_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Constraint.expression)
}

// -------------------------------------------------------------------

// Violations

// repeated .buf.validate.Violation violations = 1 [json_name = "violations"];
inline int Violations::_internal_violations_size() const {
  return _internal_violations().size();
}
inline int Violations::violations_size() const {
  return _internal_violations_size();
}
inline void Violations::clear_violations() {
  _internal_mutable_violations()->Clear();
}
inline ::buf::validate::Violation* Violations::mutable_violations(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.Violations.violations)
  return _internal_mutable_violations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::buf::validate::Violation >*
Violations::mutable_violations() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Violations.violations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_violations();
}
inline const ::buf::validate::Violation& Violations::violations(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Violations.violations)
    return _internal_violations().Get(index);
}
inline ::buf::validate::Violation* Violations::add_violations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::buf::validate::Violation* _add = _internal_mutable_violations()->Add();
  // @@protoc_insertion_point(field_add:buf.validate.Violations.violations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::buf::validate::Violation >&
Violations::violations() const {
  // @@protoc_insertion_point(field_list:buf.validate.Violations.violations)
  return _internal_violations();
}
inline const ::google::protobuf::RepeatedPtrField<::buf::validate::Violation>&
Violations::_internal_violations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.violations_;
}
inline ::google::protobuf::RepeatedPtrField<::buf::validate::Violation>*
Violations::_internal_mutable_violations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.violations_;
}

// -------------------------------------------------------------------

// Violation

// string field_path = 1 [json_name = "fieldPath"];
inline void Violation::clear_field_path() {
  _impl_.field_path_.ClearToEmpty();
}
inline const std::string& Violation::field_path() const {
  // @@protoc_insertion_point(field_get:buf.validate.Violation.field_path)
  return _internal_field_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Violation::set_field_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:buf.validate.Violation.field_path)
}
inline std::string* Violation::mutable_field_path() {
  std::string* _s = _internal_mutable_field_path();
  // @@protoc_insertion_point(field_mutable:buf.validate.Violation.field_path)
  return _s;
}
inline const std::string& Violation::_internal_field_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_path_.Get();
}
inline void Violation::_internal_set_field_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_path_.Set(value, GetArenaForAllocation());
}
inline std::string* Violation::_internal_mutable_field_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.field_path_.Mutable( GetArenaForAllocation());
}
inline std::string* Violation::release_field_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:buf.validate.Violation.field_path)
  return _impl_.field_path_.Release();
}
inline void Violation::set_allocated_field_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_path_.IsDefault()) {
          _impl_.field_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Violation.field_path)
}

// string constraint_id = 2 [json_name = "constraintId"];
inline void Violation::clear_constraint_id() {
  _impl_.constraint_id_.ClearToEmpty();
}
inline const std::string& Violation::constraint_id() const {
  // @@protoc_insertion_point(field_get:buf.validate.Violation.constraint_id)
  return _internal_constraint_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Violation::set_constraint_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.constraint_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:buf.validate.Violation.constraint_id)
}
inline std::string* Violation::mutable_constraint_id() {
  std::string* _s = _internal_mutable_constraint_id();
  // @@protoc_insertion_point(field_mutable:buf.validate.Violation.constraint_id)
  return _s;
}
inline const std::string& Violation::_internal_constraint_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.constraint_id_.Get();
}
inline void Violation::_internal_set_constraint_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.constraint_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Violation::_internal_mutable_constraint_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.constraint_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Violation::release_constraint_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:buf.validate.Violation.constraint_id)
  return _impl_.constraint_id_.Release();
}
inline void Violation::set_allocated_constraint_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.constraint_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.constraint_id_.IsDefault()) {
          _impl_.constraint_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Violation.constraint_id)
}

// string message = 3 [json_name = "message"];
inline void Violation::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Violation::message() const {
  // @@protoc_insertion_point(field_get:buf.validate.Violation.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Violation::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:buf.validate.Violation.message)
}
inline std::string* Violation::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:buf.validate.Violation.message)
  return _s;
}
inline const std::string& Violation::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void Violation::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Violation::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* Violation::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:buf.validate.Violation.message)
  return _impl_.message_.Release();
}
inline void Violation::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Violation.message)
}

// bool for_key = 4 [json_name = "forKey"];
inline void Violation::clear_for_key() {
  _impl_.for_key_ = false;
}
inline bool Violation::for_key() const {
  // @@protoc_insertion_point(field_get:buf.validate.Violation.for_key)
  return _internal_for_key();
}
inline void Violation::set_for_key(bool value) {
  _internal_set_for_key(value);
  // @@protoc_insertion_point(field_set:buf.validate.Violation.for_key)
}
inline bool Violation::_internal_for_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_key_;
}
inline void Violation::_internal_set_for_key(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_key_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace validate
}  // namespace buf


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_buf_2fvalidate_2fexpression_2eproto_2epb_2eh
